{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "lambdaQ Quantum Programming Language",
	"patterns": [
    {
			"include": "#comments"
		},
    {
			"include": "#gates"
		},
    {
			"include": "#operators"
		},
    {
			"include": "#controls"
		},
    {
			"include": "#types"
		},
		{
			"include": "#strings"
		},
    {
			"include": "#numbers"
		},
    {
			"include": "#keywords"
		}
	],
	"repository": {
    // "comments": {
		// 	"patterns": [{
		// 		"name": "comment.control.lambdaq",
		// 		"match": "\\b(if|while|for|return)\\b"
		// 	}]
		// },
    "gates": {
			"patterns": [{
				"name": "gate.control.lambdaq",
				"match": "\\s[A-Z][A-Z0-9]*\\s"
			}]
		},
    "operators": {
			"patterns": [{
				"name": "operator.control.lambdaq",
				"match": "\\b(*|->|[|]|=|<-|.|$|!)\\b"
			}]
		},
    "controls": {
			"patterns": [{
				"name": "control.control.lambdaq",
				"match": "\\b(@0|@1|@+|@-|@+i|@-i)\\b"
			}]
		},
    "types": {
			"patterns": [{
				"name": "type.control.lambdaq",
				"match": "\\b(Bit|Qbit|())\\b"
			}]
		},
		"strings": {
			"name": "string.quoted.double.lambdaq",
			"begin": "\"",
			"end": "\"",
			"patterns": [
				{
					"name": "constant.character.escape.lambdaq",
					"match": "\\\\."
				}
			]
		},
    "numbers": {
      "patterns": [
        {
          "name": "constant.numeric.integer.lambdaq",
          "match": "\\b(\\d+)\\b"
        },
        {
          "name": "constant.numeric.decimal.lambdaq",
          "match": "\\b(\\d+\\.\\d+)\\b"
        }
      ]
    },
    "keywords": {
			"patterns": [{
				"name": "keyword.control.lambdaq",
				"match": "\\b(if|then|else|let|in|with|ctrl|gate)\\b"
			}]
		}
	},
	"scopeName": "source.lambdaq"
}
