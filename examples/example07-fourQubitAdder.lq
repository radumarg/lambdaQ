-- For more context, checkout the circuit here: https://uranium.transilvania-quantum.org/projects/public-project/62/

-- the '<-' syntax is just syntactic sugar for let expressions (see example01-deutschAlgorithm.lq)
sum :: !(Qbit * Qbit * Qbit -> Qbit * Qbit * Qbit)
sum qubits = (q0, q1, q2) <- qubits;
             (q0, q2) <- with [ q0 ] ctrl [ @1 ] gate X q2;
             (q1, q2) <- with [ q1 ] ctrl [ @1 ] gate X q2;
             (q0, q1, q2)

carry :: !(Qbit * Qbit * Qbit * Qbit -> Qbit * Qbit * Qbit * Qbit)
carry qubits = (q0, q1, q2, q3) <- qubits;
               (q1, q2, q3) <- with [ q1, q2 ] ctrl [ @1, @1 ] gate X q3;
               (q1, q2) <- with [ q1 ] ctrl [ @1 ] gate X q2;
               (q0, q2, q3) <- with [ q0, q2 ] ctrl [ @1, @1 ] gate X q3;
               (q0, q1, q2, q3)

-- Implementing this circuit need "reverse" operation to be applied on a function which is compiled to a circuit.
-- This feature will be implemented in subsequent iterations of the language development.