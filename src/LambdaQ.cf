-- Documentation of LBNF Gramar: https://bnfc.readthedocs.io/en/latest/lbnf.html# --
-- Generating a language frontend using the BNF Converter: http://bnfc.digitalgrammars.com/ --

--layout toplevel ;
layout "let" ;
layout stop "in" ;

-- Integer Numbers --
ArithmExprAdd . IntegerExpr  ::= IntegerExpr "+" IntegerExpr1 ;
ArithmExprSub . IntegerExpr  ::= IntegerExpr "-" IntegerExpr1 ;
ArithmExprMul . IntegerExpr1 ::= IntegerExpr1 "*" IntegerExpr2 ;
ArithmExprDiv . IntegerExpr1 ::= IntegerExpr1 "/" IntegerExpr2 ;
ArithmExprInt . IntegerExpr2 ::= Integer ;
--ArithmExprPar . IntegerExpr2 ::= "(" IntegerExpr ")" ;
coercions IntegerExpr 2 ;

entrypoints Program;

-- A program is a list of functions --
ProgDef .  Program ::= [FunctionDeclaration] ;

-- Types --
TypeFunction   . Type  ::= Type "->" Type1 ;       -- right-associative
TypeSum        . Type1  ::= Type1 "+" Type2 ;      -- right-associative
TypeTensorProd . Type2  ::= Type2 "*" Type3 ;      -- right-associative
TypeExp        . Type3  ::= Type4 "**" Integer ;
TypeNonLinear  . Type3  ::= "!" Type4 ;
TypeBit        . Type5  ::= "Bit" ;
TypeInteger    . Type5  ::= "Int" ;
TypeQbit       . Type5  ::= "Qbit" ;
TypeUnit       . Type5  ::= "()" ;
coercions Type 5 ;

-- Angle is a fraction of 2Ï€ --
Angle . Angle ::= Double ;

-- Basis States --
BasisStateZero   . BasisState ::= "@0" ;
BasisStateOne    . BasisState ::= "@1" ;
BasisStatePlus   . BasisState ::= "@+" ;
BasisStateMinus  . BasisState ::= "@-" ;
BasisStatePlusI  . BasisState ::= "@+i" ;
BasisStateMinusI . BasisState ::= "@-i" ;

--- Bits ---
token BitVariable ('0' | '1') ;
BitValue . Bit ::= BitVariable ;

GateH             . Gate ::= "H" ;                                      -- Hadamard Gate
GateX             . Gate ::= "X" ;                                      -- Pauli X Gate
GateY             . Gate ::= "Y" ;                                      -- Pauli Y Gate
GateZ             . Gate ::= "Z" ;                                      -- Pauli Z Gate
GateID            . Gate ::= "ID" ;                                     -- Identity Gate
GateXRoot         . Gate ::= "ROOT_X" Integer ;                         -- Root of Pauli X gate (root is specified as k in 1/2^k)
GateXRootDag      . Gate ::= "ROOT_X_DAG" Integer ;                     -- Conjugate of Root of Pauli X gate (root is specified as k in 1/2^k)
GateYRoot         . Gate ::= "ROOT_Y" Integer ;                         -- Root of Pauli Y gate (root is specified as k in 1/2^k)
GateYRootDag      . Gate ::= "ROOT_Y_DAG" Integer ;                     -- Conjugate of Root of Pauli Y gate (root is specified as k in 1/2^k)
GateZRoot         . Gate ::= "ROOT_Z" Integer ;                         -- Root of Pauli Z gate (root is specified as k in 1/2^k)
GateZRootDag      . Gate ::= "ROOT_Z_DAG" Integer ;                     -- Conjugate of Root of Pauli Z gate (root is specified as k in 1/2^k)
GateS             . Gate ::= "S" ;                                      -- S gate: sqrt of Z
GateSDag          . Gate ::= "S_DAG" ;                                  -- Conjugate of S gate
GateT             . Gate ::= "T" ;                                      -- T Gate: sqrt of S
GateTDag          . Gate ::= "T_DAG" ;                                  -- Conjugate of T gate
GateSqrtX         . Gate ::= "SQRT_X" ;                                 -- V gate: sqrt of X
GateSqrtXDag      . Gate ::= "SQRT_X_DAG" ;                             -- Conjugate of V gate
GateSqrtY         . Gate ::= "SQRT_Y" ;                                 -- h gate: sqrt of Y
GateSqrtYDag      . Gate ::= "SQRT_Y_DAG" ;                             -- Conjugate of h gate
GateRxTheta       . Gate ::= "RX" Angle ;                               -- Single parametric rotation around X axis on the Bloch sphere
GateRyTheta       . Gate ::= "RY" Angle ;                               -- Single parametric rotation around Y axis on the Bloch sphere
GateRzTheta       . Gate ::= "RZ" Angle ;                               -- Single parametric rotation around Z axis on the Bloch sphere
GateU1            . Gate ::= "U1" Angle ;                               -- One parametric generic gate
GateU2            . Gate ::= "U2" "(" Angle "," Angle ")" ;             -- Two parametric generic gate
GateU3            . Gate ::= "U3" "(" Angle "," Angle "," Angle ")" ;   -- Thee parametric generic gate
GateSwp           . Gate ::= "SWAP" ;                                   -- Swap gate
GateSqrtSwp       . Gate ::= "SQRT_SWAP" ;                              -- sqrt of Swap gate
GateSqrtSwpDag    . Gate ::= "SQRT_SWAP_DAG" ;                          -- Conjugate of root of Swap gate
GateISwp          . Gate ::= "ISWAP" ;                                  -- ISwap gate
GateFSwp          . Gate ::= "FSWAP" ;                                  -- FSwap gate
GateSwpTheta      . Gate ::= "SWAP_THETA" Angle ;                       -- Swap theta gate
GateSwpRt         . Gate ::= "ROOT_SWAP" Integer ;                      -- Root of Swap gate (root is specified as k in 1/2^k)
GateSwpRtDag      . Gate ::= "ROOT_SWAP_DAG" Integer ;                  -- Conjugate of Root of Swap gate (root is specified as k in 1/2^k)
GateQft           . Gate ::= "QFT" Integer ;                            -- Quantum Fourier Transform
GateQftDag        . Gate ::= "QFT_DAG" Integer ;                        -- Conjugate of Quantum Fourier Transform

-- Names for Variables --
position token Var ((lower | '_') (letter | digit | '_' | '\'')*) ;
separator nonempty Var "," ;

-- Declaring Control states --
CtrlBasisState . ControlBasisState ::= "[" BasisState  "]" ;
CtrlBasisStates . ControlBasisStates ::= "[" BasisState "," [BasisState] "]" ;
separator nonempty BasisState "," ;

CtrlBit . ControlBit   ::= "[" Integer "]" ;
CtrlBits . ControlBits ::= "[" Integer "," [Integer] "]" ;
separator nonempty Integer "," ;

-- Lambda token --
token Lambda '\\' ;

-- Declaring Tuples --
Tupl . Tuple ::= "(" Term "," [Term] ")" ;
-- Declaring Controls --
CtrlTerm . ControlTerm ::= "[" Term "]" ;
CtrlTerms . ControlTerms ::= "[" Term "," [Term] "]" ;
separator nonempty Term "," ;

-- Terms --
TermIfElse           . Term1 ::= "if" Term "then" Term "else" Term ;
TermLetSingle        . Term1 ::= "let" "{" Var "=" Term "}" "in" Term ;
TermLetMultiple      . Term1 ::= "let" "{" "(" Var "," [Var] ")" "=" Term "}" "in" Term ;
TermLetSugarSingle   . Term1 ::=  Var "<-" Term ";" Term ;
TermLetSugarMultiple . Term1 ::=  Var "," [Var] "<-" Term ";" Term ;
TermCase             . Term1 ::= "case" Term "of" CaseExpression [CaseExpression] ;
TermLambda           . Term1 ::= Lambda Var Type "." Term ;
TermQuantumCtrlGate  . Term2 ::= "with" ControlTerm "ctrl" ControlBasisState ;
TermQuantumCtrlsGate . Term2 ::= "with" ControlTerms "ctrl" ControlBasisStates ;
TermClassicCtrlGate  . Term2 ::= "with" ControlTerm "ctrl" ControlBit ;
TermClassicCtrlsGate . Term2 ::= "with" ControlTerms "ctrl" ControlBits ;
TermApply            . Term2 ::= Term2 Term3 ;      -- left-associative  --
TermDollar           . Term1 ::= Term2 "$" Term1 ;  -- right-associative --
TermCompose          . Term2 ::= Term2 "." Term3 ;  -- left-associative  --
TermVariable         . Term3 ::= Var ;
TermBasisState       . Term3 ::= BasisState ;
TermIntegerExpr      . Term3 ::= IntegerExpr ;
TermGate             . Term3 ::= "gate" Gate ;
TermTuple            . Term3 ::= Tuple ;
TermBit              . Term3 ::= Bit ;
TermUnit             . Term3 ::= "()" ;
coercions Term 3 ;

-- Case Expressions --
CaseExpr . CaseExpression ::= Term "->" Term ;
separator nonempty CaseExpression " " ;

-- Function Arguments --
FunArg . Arg ::= Var ;
separator Arg " " ;

-- Function Definition --
FunDef . FunctionDefinition ::= Var [Arg] "=" Term ;
_      . FunctionDefinition ::= FunctionDefinition ";" ;   -- Semantic dummies: parser accepts extra semicolons

-- Type Definition --
FunType . FunctionType  ::= Var "::" Type ;
_       . FunctionType  ::= FunctionType ";" ;             -- Semantic dummies: parser accepts extra semicolons

-- Function Declaration --
FunDecl . FunctionDeclaration ::= FunctionType ";" FunctionDefinition ";" ;
separator FunctionDeclaration "" ;

-- Format for specifying comments --
comment "--" ; 
comment "{-" "-}" ;



