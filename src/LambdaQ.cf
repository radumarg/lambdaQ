-- Documentation of LBNF Gramar: https://bnfc.readthedocs.io/en/latest/lbnf.html# --
-- Generating a language frontend using the BNF Converter: http://bnfc.digitalgrammars.com/ --

layout toplevel ;
layout "let" ;
layout stop "in" ;

entrypoints Program;

-- A program is a list of functions --
ProgDef .  Program ::= [FunctionDeclaration] ;

-- Types --
TypeBit    . Type3  ::= "Bit" ;
TypeQbit   . Type3  ::= "Qbit" ;
TypeUnit   . Type3  ::= "()" ;
TypeNonLin . Type2  ::= "!" Type3 ;
TypeExp    . Type1  ::= Type2 "**" Integer ;
TypeTensr  . Type1  ::= Type2 "*" Type1 ;      -- right-associative
TypeFunc   . Type   ::= Type1 "->" Type ;      -- right-associative
coercions Type 3 ;

-- Angle is a fraction of 2Ï€ --
AAngl . Angle ::= Double ;

-- Control States --
CStateZero   . ControlState ::= "@0" ;
CStateOne    . ControlState ::= "@1" ;
CStatePlus   . ControlState ::= "@+" ;
CStateMinus  . ControlState ::= "@-" ;
CStatePlusI  . ControlState ::= "@+i" ;
CStateMinusI . ControlState ::= "@-i" ;

-- Controls --
CCtrl . Control ::= Term ControlState;
separator nonempty Control "," ;

position token GateIdent (upper (letter | digit | '_')*) ;

GateH             . Gate ::= "gate" "H" Term;                                                    -- Hadamard Gate
GateHC            . Gate ::= "gate" "H" Term "with-ctrl" "[" [Control] "]" ;                     -- Hadamard Gate
GateX             . Gate ::= "gate" "X" Term ;                                                   -- Pauli X Gate
GateXC            . Gate ::= "gate" "X" Term "with-ctrl" "[" [Control] "]" ;                     -- Pauli X Gate
GateY             . Gate ::= "gate" "Y" Term ;                                                   -- Pauli Y Gate
GateYC            . Gate ::= "gate" "Y" Term "with-ctrl" "[" [Control] "]" ;                     -- Pauli Y Gate
GateZ             . Gate ::= "gate" "Z" Term ;                                                   -- Pauli Z Gate
GateZC            . Gate ::= "gate" "Z" Term "with-ctrl" "[" [Control] "]" ;                     -- Pauli Z Gate
GateI             . Gate ::= "gate" "ID" Term ;                                                  -- Identity Gate
GateXRt           . Gate ::= "gate" "ROOT_X" Integer Term ;                                      -- Root of Pauli X gate (root is specified as k in 1/2^k)
GateXRtC          . Gate ::= "gate" "ROOT_X" Integer Term "with-ctrl" "[" [Control] "]" ;        -- Root of Pauli X gate (root is specified as k in 1/2^k)
GateXRtDag        . Gate ::= "gate" "ROOT_X_DAG" Integer Term ;                                  -- Conjugate of Root of Pauli X gate (root is specified as k in 1/2^k)
GateXRtDagC       . Gate ::= "gate" "ROOT_X_DAG" Integer Term "with-ctrl" "[" [Control] "]" ;    -- Conjugate of Root of Pauli X gate (root is specified as k in 1/2^k)
GateYRt           . Gate ::= "gate" "ROOT_Y" Integer Term ;                                      -- Root of Pauli Y gate (root is specified as k in 1/2^k)
GateYRtC          . Gate ::= "gate" "ROOT_Y" Integer Term "with-ctrl" "[" [Control] "]" ;        -- Root of Pauli Y gate (root is specified as k in 1/2^k)
GateYRtDag        . Gate ::= "gate" "ROOT_Y_DAG" Integer Term ;                                  -- Conjugate of Root of Pauli Y gate (root is specified as k in 1/2^k)
GateYRtDagC       . Gate ::= "gate" "ROOT_Y_DAG" Integer Term "with-ctrl" "[" [Control] "]" ;    -- Conjugate of Root of Pauli Y gate (root is specified as k in 1/2^k)
GateZRt           . Gate ::= "gate" "ROOT_Z" Integer Term ;                                      -- Root of Pauli Z gate (root is specified as k in 1/2^k)
GateZRtC          . Gate ::= "gate" "ROOT_Z" Integer Term "with-ctrl" "[" [Control] "]" ;        -- Root of Pauli Z gate (root is specified as k in 1/2^k)
GateZRtDag        . Gate ::= "gate" "ROOT_Z_DAG" Integer Term ;                                  -- Conjugate of Root of Pauli Z gate (root is specified as k in 1/2^k)
GateZRtDagC       . Gate ::= "gate" "ROOT_Z_DAG" Integer Term "with-ctrl" "[" [Control] "]" ;    -- Conjugate of Root of Pauli Z gate (root is specified as k in 1/2^k)
GateS             . Gate ::= "gate" "S" Term ;                                                   -- S gate: sqrt of Z
GateSC            . Gate ::= "gate" "S" Term "with-ctrl" "[" [Control] "]" ;                     -- S gate: sqrt of Z
GateSDag          . Gate ::= "gate" "S_DAG" Term ;                                               -- Conjugate of S gate
GateSDagC         . Gate ::= "gate" "S_DAG" Term "with-ctrl" "[" [Control] "]" ;                 -- Conjugate of S gate
GateT             . Gate ::= "gate" "T" Term ;                                                   -- T Gate: sqrt of S
GateTC            . Gate ::= "gate" "T" Term "with-ctrl" "[" [Control] "]" ;                     -- T Gate: sqrt of S
GateTDag          . Gate ::= "gate" "T_DAG" Term ;                                               -- Conjugate of T gate
GateTDagC         . Gate ::= "gate" "T_DAG" Term "with-ctrl" "[" [Control] "]" ;                 -- Conjugate of T gate
GateSqrtX         . Gate ::= "gate" "SQRT_X" Term ;                                              -- V gate: sqrt of X
GateSqrtXC        . Gate ::= "gate" "SQRT_X" Term "with-ctrl" "[" [Control] "]" ;                -- V gate: sqrt of X
GateSqrtXDag      . Gate ::= "gate" "SQRT_X_DAG" Term ;                                          -- Conjugate of V gate
GateSqrtXDagC     . Gate ::= "gate" "SQRT_X_DAG" Term "with-ctrl" "[" [Control] "]" ;            -- Conjugate of V gate
GateSqrtY         . Gate ::= "gate" "SQRT_Y" Term ;                                              -- h gate: sqrt of Y
GateSqrtYC        . Gate ::= "gate" "SQRT_Y" Term "with-ctrl" "[" [Control] "]" ;                -- h gate: sqrt of Y
GateSqrtYDag      . Gate ::= "gate" "SQRT_Y_DAG" Term ;                                          -- Conjugate of h gate
GateSqrtYDagC     . Gate ::= "gate" "SQRT_Y_DAG" Term "with-ctrl" "[" [Control] "]" ;            -- Conjugate of h gate
GateRxTheta       . Gate ::= "gate" "RX" Angle Term ;                                            -- Single parametric rotation around X axis on the Bloch sphere
GateRxThetaC      . Gate ::= "gate" "RX" Angle Term "with-ctrl" "[" [Control] "]" ;              -- Single parametric rotation around X axis on the Bloch sphere
GateRyTheta       . Gate ::= "gate" "RY" Angle Term ;                                            -- Single parametric rotation around Y axis on the Bloch sphere
GateRyThetaC      . Gate ::= "gate" "RY" Angle Term "with-ctrl" "[" [Control] "]" ;              -- Single parametric rotation around Y axis on the Bloch sphere
GateRzTheta       . Gate ::= "gate" "RZ" Angle Term ;                                            -- Single parametric rotation around Z axis on the Bloch sphere
GateRzThetaC      . Gate ::= "gate" "RZ" Angle Term "with-ctrl" "[" [Control] "]" ;              -- Single parametric rotation around Z axis on the Bloch sphere
GateU1            . Gate ::= "gate" "U1" Angle Term ;                                            -- One parametric generic gate
GateU1C           . Gate ::= "gate" "U1" Angle Term "with-ctrl" "[" [Control] "]" ;              -- One parametric generic gate
GateU2            . Gate ::= "gate" "U2" "(" Angle "," Angle ")" Term ;                          -- Two parametric generic gate
GateU2C           . Gate ::= "gate" "U2" "(" Angle "," Angle ")" Term "with-ctrl" "[" [Control] "]" ;           -- Two parametric generic gate
GateU3            . Gate ::= "gate" "U3" "(" Angle "," Angle "," Angle ")" Term ;                 -- Thee parametric generic gate
GateU3C           . Gate ::= "gate" "U3" "(" Angle "," Angle "," Angle ")" Term "with-ctrl" "[" [Control] "]" ;  -- Thee parametric generic gate
GateSwp           . Gate ::= "gate" "SWAP" Term ;                                                -- Swap gate
GateSwpC          . Gate ::= "gate" "SWAP" Term "with-ctrl" "[" [Control] "]" ;                  -- Swap gate
GateSqrtSwp       . Gate ::= "gate" "SQRT_SWAP" Term ;                                           -- sqrt of Swap gate
GateSqrtSwpC      . Gate ::= "gate" "SQRT_SWAP" Term "with-ctrl" "[" [Control] "]" ;             -- sqrt of Swap gate
GateSqrtSwpDag    . Gate ::= "gate" "SQRT_SWAP_DAG" Term ;                                       -- Conjugate of root of Swap gate
GateSqrtSwpDagC   . Gate ::= "gate" "SQRT_SWAP_DAG" Term "with-ctrl" "[" [Control] "]" ;         -- Conjugate of root of Swap gate
GateISwp          . Gate ::= "gate" "ISWAP" Term ;                                               -- ISwap gate
GateISwpC         . Gate ::= "gate" "ISWAP" Term "with-ctrl" "[" [Control] "]" ;                 -- ISwap gate
GateFSwp          . Gate ::= "gate" "FSWAP" Term ;                                               -- FSwap gate
GateFSwpC         . Gate ::= "gate" "FSWAP" Term "with-ctrl" "[" [Control] "]" ;                 -- FSwap gate
GateSwpTheta      . Gate ::= "gate" "SWAP_THETA" Term Angle ;                                    -- Swap theta gate
GateSwpThetaC     . Gate ::= "gate" "SWAP_THETA" Angle Term"with-ctrl" "[" [Control] "]"  ;      -- Swap theta gate
GateSwpRt         . Gate ::= "gate" "ROOT_SWAP" Term Integer ;                                   -- Root of Swap gate (root is specified as k in 1/2^k)
GateSwpRtC        . Gate ::= "gate" "ROOT_SWAP" Integer Term "with-ctrl" "[" [Control] "]" ;     -- Root of Swap gate (root is specified as k in 1/2^k)
GateSwpRtDag      . Gate ::= "gate" "ROOT_SWAP_DAG" Integer Term ;                               -- Conjugate of Root of Swap gate (root is specified as k in 1/2^k)
GateSwpRtDagC     . Gate ::= "gate" "ROOT_SWAP_DAG" Integer Term "with-ctrl" "[" [Control] "]" ; -- Conjugate of Root of Swap gate (root is specified as k in 1/2^k)
GateGeneric       . Gate ::= "gate" GateIdent Term ;                                             -- Generic gate
GateGenericC      . Gate ::= "gate" GateIdent Term "with-ctrl" "[" [Control] "]" ;               -- Generic gate

-- Names for Variables --
position token Var ((lower | '_') (letter | digit | '_' | '\'')*) ;

LetVar . LetVariable ::= Var ;
separator nonempty LetVariable "," ;

LambdaVar . LambdaVariable ::= Var ;
separator LambdaVariable " " ;

-- Declaring Tuples --
Tup . Tuple ::= "(" Term "," [Term] ")" ;
separator nonempty Term "," ;

-- Lambda token --
token Lambda '\\' ;

-- Bit --
position token Bit ('0' | '1') ;

-- Terms --
TVar   . Term3 ::= Var ;
TBit   . Term3 ::= Bit ;
TGate  . Term3 ::= Gate ;
TTup   . Term3 ::= Tuple ;
TUnit  . Term3 ::= "()" ;
TIfEl  . Term1 ::= "if" Term "then" Term "else" Term ;
TLet1  . Term1 ::= "let" "{" LetVariable "=" Term "}" "in" Term ;
TLet2  . Term1 ::= "let" "{" "(" LetVariable "," [LetVariable] ")" "=" Term "}" "in" Term ;
TCase  . Term1 ::= "case" Term "of" CaseExpression [ CaseExpression ] ;
TLmbd  . Term1 ::= Lambda LambdaVariable [LambdaVariable] "->" Term ;
TApp   . Term2 ::= Term2 Term3 ;      -- left-associative  --
TDollr . Term1 ::= Term2 "$" Term1 ;  -- right-associative --
coercions Term 3 ;

-- Case Expressions --
CaseExp . CaseExpression ::= Term "->" Var ;
separator nonempty CaseExpression " " ;

-- Function Arguments --
FunArg . Arg ::= Var ;
separator Arg " " ;

-- Function Definition --
FunDef . FunctionDefinition ::= Var [Arg] "=" Term ;
_      . FunctionDefinition ::= FunctionDefinition ";" ;   -- Semantic dummies: parser accepts extra semicolons

-- Type Definition --
FunType . FunctionType  ::= Var "::" Type ;
_       . FunctionType  ::=  FunctionType ";" ;            -- Semantic dummies: parser accepts extra semicolons

-- Function Declaration --
FunDecl . FunctionDeclaration ::= FunctionType ";" FunctionDefinition ";" ;
separator FunctionDeclaration "" ;

-- Format for specifying comments --
comment "--" ; 
comment "{-" "-}" ;


