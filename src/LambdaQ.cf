-- Documentation of LBNF Gramar: https://bnfc.readthedocs.io/en/latest/lbnf.html# --
-- Generating a language frontend using the BNF Converter: http://bnfc.digitalgrammars.com/ --

layout toplevel ;
layout "let", "of" ;
layout stop "in" ;

entrypoints Program;

-- A program is a list of functions --
ProgDef .  Program ::= [FunctionDeclaration] ;

-- Integer Arithmetic --
ArithmExprMinus . IntegerExpression1 ::= "-" IntegerExpression ;
ArithmExprAdd   . IntegerExpression1 ::= IntegerExpression1 "+" IntegerExpression2 ;
ArithmExprSub   . IntegerExpression1 ::= IntegerExpression1 "-" IntegerExpression2 ;
ArithmExprMul   . IntegerExpression2 ::= IntegerExpression2 "*" IntegerExpression3 ;
ArithmExprDiv   . IntegerExpression2 ::= IntegerExpression2 "/" IntegerExpression3 ;
ArithmExprInt   . IntegerExpression3 ::= Integer ;
coercions IntegerExpression 3 ;

-- Boolean Values --
BoolValueTrue  . BoolValue ::= "True" ;
BoolValueFalse . BoolValue ::= "False" ;

-- Boolean Expressions --
BoolExpressionAnd     . BoolExpression  ::= BoolExpression "&&" BoolExpression1 ;
BoolExpressionOr      . BoolExpression  ::= BoolExpression "||" BoolExpression1 ;
BoolExpressionNot     . BoolExpression  ::= "not" BoolExpression1 ;
BoolExpressionEq      . BoolExpression1 ::= BoolExpression1 "==" BoolExpression2 ;
BoolExpressionDif     . BoolExpression1 ::= BoolExpression1 "/=" BoolExpression2 ;
BoolExpressionEqInt   . BoolExpression2 ::= IntegerExpression2 "==" IntegerExpression2 ;
BoolExpressionDifInt  . BoolExpression2 ::= IntegerExpression2 "/=" IntegerExpression2 ;
BoolExpressionGt      . BoolExpression2 ::= IntegerExpression2 ">" IntegerExpression2 ;
BoolExpressionGe      . BoolExpression2 ::= IntegerExpression2 ">=" IntegerExpression2 ;
BoolExpressionLt      . BoolExpression2 ::= IntegerExpression2 "<" IntegerExpression2 ;
BoolExpressionLe      . BoolExpression2 ::= IntegerExpression2 "<=" IntegerExpression2 ;
BoolExpressionVal     . BoolExpression2 ::= BoolValue ;
coercions BoolExpression 2 ;

-- Types --
TypeFunction   . Type   ::= Type "->" Type1 ;      -- left-associative
TypeTensorProd . Type2  ::= Type2 "*" Type3 ;      -- left-associative
TypeExp        . Type3  ::= Type4 "**" Integer ;
TypeNonLinear  . Type3  ::= "!" Type4 ;
TypeBool       . Type5  ::= "Bool" ;
TypeBit        . Type5  ::= "Bit" ;
TypeInteger    . Type5  ::= "Int" ;
TypeQbit       . Type5  ::= "Qbit" ;
TypeUnit       . Type5  ::= "()" ;
TypeList       . Type5  ::= "[" Type "]" ; 
coercions Type 5 ;

-- Angle is a fraction of 2Ï€ --
AngleValue . Angle ::= Double ;

-- Basis States --
BasisStateZero   . BasisState ::= "@0" ;
BasisStateOne    . BasisState ::= "@1" ;
BasisStatePlus   . BasisState ::= "@+" ;
BasisStateMinus  . BasisState ::= "@-" ;
BasisStatePlusI  . BasisState ::= "@+i" ;
BasisStateMinusI . BasisState ::= "@-i" ;

-- Matches other possible gate names, the unknown gate error will be raised during semantic analysis stage --
position token GateVar ((upper) (upper | digit | '_' )*) ;

GateH             . Gate ::= "H" ;                                       -- Hadamard Gate
GateX             . Gate ::= "X" ;                                       -- Pauli X Gate
GateY             . Gate ::= "Y" ;                                       -- Pauli Y Gate
GateZ             . Gate ::= "Z" ;                                       -- Pauli Z Gate
GateID            . Gate ::= "ID" ;                                      -- Identity Gate
GateXRoot         . Gate ::= "ROOT_X" Integer ;                          -- Root of Pauli X gate (root is specified as k in 1/2^k)
GateXRootDag      . Gate ::= "ROOT_X_DAG" Integer ;                      -- Conjugate of Root of Pauli X gate (root is specified as k in 1/2^k)
GateYRoot         . Gate ::= "ROOT_Y" Integer ;                          -- Root of Pauli Y gate (root is specified as k in 1/2^k)
GateYRootDag      . Gate ::= "ROOT_Y_DAG" Integer ;                      -- Conjugate of Root of Pauli Y gate (root is specified as k in 1/2^k)
GateZRoot         . Gate ::= "ROOT_Z" Integer ;                          -- Root of Pauli Z gate (root is specified as k in 1/2^k)
GateZRootDag      . Gate ::= "ROOT_Z_DAG" Integer ;                      -- Conjugate of Root of Pauli Z gate (root is specified as k in 1/2^k)
GateS             . Gate ::= "S" ;                                       -- S gate: sqrt of Z
GateSDag          . Gate ::= "S_DAG" ;                                   -- Conjugate of S gate
GateT             . Gate ::= "T" ;                                       -- T Gate: sqrt of S
GateTDag          . Gate ::= "T_DAG" ;                                   -- Conjugate of T gate
GateSqrtX         . Gate ::= "SQRT_X" ;                                  -- V gate: sqrt of X
GateSqrtXDag      . Gate ::= "SQRT_X_DAG" ;                              -- Conjugate of V gate
GateSqrtY         . Gate ::= "SQRT_Y" ;                                  -- h gate: sqrt of Y
GateSqrtYDag      . Gate ::= "SQRT_Y_DAG" ;                              -- Conjugate of h gate
GateRxTheta       . Gate ::= "RX" Angle ;                                -- Single parametric rotation around X axis on the Bloch sphere
GateRyTheta       . Gate ::= "RY" Angle ;                                -- Single parametric rotation around Y axis on the Bloch sphere
GateRzTheta       . Gate ::= "RZ" Angle ;                                -- Single parametric rotation around Z axis on the Bloch sphere
GateU1            . Gate ::= "U1" Angle ;                                -- One parametric generic gate
GateU2            . Gate ::= "U2" "(" Angle "," Angle ")" ;              -- Two parametric generic gate
GateU3            . Gate ::= "U3" "(" Angle "," Angle "," Angle ")" ;    -- Thee parametric generic gate
GateSwp           . Gate ::= "SWAP" ;                                    -- Swap gate
GateSqrtSwp       . Gate ::= "SQRT_SWAP" ;                               -- sqrt of Swap gate
GateSqrtSwpDag    . Gate ::= "SQRT_SWAP_DAG" ;                           -- Conjugate of root of Swap gate
GateISwp          . Gate ::= "ISWAP" ;                                   -- ISwap gate
GateFSwp          . Gate ::= "FSWAP" ;                                   -- FSwap gate
GateSwpTheta      . Gate ::= "SWAP_THETA" Angle ;                        -- Swap theta gate
GateSwpRt         . Gate ::= "ROOT_SWAP" Integer ;                       -- Root of Swap gate (root is specified as k in 1/2^k)
GateSwpRtDag      . Gate ::= "ROOT_SWAP_DAG" Integer ;                   -- Conjugate of Root of Swap gate (root is specified as k in 1/2^k)
GateQft           . Gate ::= "QFT" Integer ;                             -- Quantum Fourier Transform
GateQftDag        . Gate ::= "QFT_DAG" Integer ;                         -- Conjugate of Quantum Fourier Transform
GateUknown3Angle  . Gate ::= GateVar "(" Angle "," Angle "," Angle ")" ; -- Unsupported gate
GateUknown2Angle  . Gate ::= GateVar "(" Angle "," Angle ")" ;           -- Unsupported gate
GateUknown1Angle  . Gate ::= GateVar Angle ;                             -- Unsupported gate
GateUknownInt     . Gate ::= GateVar Integer ;                           -- Unsupported gate
GateUnknownSimple . Gate ::= GateVar ;                                   -- Unsupported gate

-- Names for Variables --
position token Var ((lower | '_') (letter | digit | '_' | '\'')*) ;
separator nonempty Var "," ;

-- Declaring Control states --
CtrlBasisState . ControlBasisState ::= "[" BasisState  "]" ;
CtrlBasisStates . ControlBasisStates ::= "[" BasisState "," [BasisState] "]" ;
separator nonempty BasisState "," ;

CtrlBit . ControlBit   ::= "[" Integer "]" ;
CtrlBits . ControlBits ::= "[" Integer "," [Integer] "]" ;
separator nonempty Integer "," ;

-- Lambda token --
token Lambda '\\' ;

-- Declaring Controls --
CtrlTerm  . ControlTerm ::= "[" Term "]" ;
CtrlTerms . ControlTerms ::= "[" Term "," [Term] "]" ;
CtrlVar   . ControlVar ::= "[" Var "]" ;
CtrlVars  . ControlVars ::= "[" Var "," [Var] "]" ;
separator nonempty Term "," ;

-- Terms --
TermListElement           . Term4 ::= List "!!" Integer ;
TermUnit                  . Term3 ::= "()" ;
TermBasisState            . Term3 ::= BasisState ;
TermBoolExpression        . Term3 ::= BoolExpression ;
TermIntegerExpression     . Term3 ::= IntegerExpression ;
TermGate                  . Term3 ::= "gate" Gate ;
TermList                  . Term3 ::= List ;
TermVariable              . Term3 ::= Var ;
TermTupleOfTerms          . Term3 ::= "(" Term "," [Term] ")"  ;
TermTupleOfVars           . Term3 ::= "(" Var "," [Var] ")"  ;
TermQuantumCtrlGate       . Term2 ::= "with" ControlTerm "ctrl" ControlBasisState ;
TermQuantumTCtrlsGate     . Term2 ::= "with" ControlTerms "ctrl" ControlBasisStates ;
TermQuantumVCtrlsGate     . Term2 ::= "with" ControlVars "ctrl" ControlBasisStates ;
TermClassicCtrlGate       . Term2 ::= "with" ControlTerm "ctrl" ControlBit ;
TermClassicTCtrlsGate     . Term2 ::= "with" ControlTerms "ctrl" ControlBits ;
TermClassicVCtrlsGate     . Term2 ::= "with" ControlVars "ctrl" ControlBits ;
TermApply                 . Term2 ::= Term2 Term3 ;      -- left-associative  --
TermCompose               . Term2 ::= Term2 "." Term3 ;  -- left-associative  --
TermTensorProduct         . Term2 ::= Term2 "*" Term3 ;  -- left-associative  --
TermIfElse                . Term1 ::= "if" Term "then" Term "else" Term ;
TermLetSingle             . Term1 ::= "let" "{" Var "=" Term "}" "in" Term ;
TermLetMultiple           . Term1 ::= "let" "{" "(" Var "," [Var] ")" "=" Term "}" "in" Term ;
TermLetSugarSingle        . Term1 ::= Var "<-" Term ";" Term ;
TermLetSugarMultiple      . Term1 ::= "(" Var "," [Var] ")" "<-" Term ";" Term ;
TermCase                  . Term1 ::= "case" Term "of" "{" [CaseExpression] "}" ;
TermLambda                . Term1 ::= Lambda Var Type "." Term ;
TermDollar                . Term  ::= Term1 "$" Term ;  -- right-associative --
coercions Term 4 ;

-- Polymorphic Lists --
ListNil               . List1 ::= "[]" ;
ListSingle            . List1 ::= "[" Term "]" ;
ListMultiple          . List1 ::= "[" Term "," [Term] "]" ;
ListExpressionAdd     . List ::= List "++" List1 ;
ListCons              . List ::= Term3 ":" List1 ;
coercions List 1 ;

-- Case Expressions --
CaseExpr . CaseExpression ::= Term "->" Term;
_        . CaseExpression ::= CaseExpression ";" ;         -- Semantic dummies: parser accepts extra semicolons
separator nonempty CaseExpression "" ;

-- Function Arguments --
FunArg . Arg ::= Var ;
separator Arg " " ;

-- Function Definition --
FunDef . FunctionDefinition ::= Var [Arg] "=" Term ;
_      . FunctionDefinition ::= FunctionDefinition ";" ;   -- Semantic dummies: parser accepts extra semicolons

-- Type Definition --
FunType . FunctionType  ::= Var "::" Type ;
_       . FunctionType  ::= FunctionType ";" ;             -- Semantic dummies: parser accepts extra semicolons

-- Function Declaration --
FunDecl . FunctionDeclaration ::= FunctionType ";" FunctionDefinition ";" ;
separator FunctionDeclaration "" ;

-- Format for specifying comments --
comment "--" ; 
comment "{-" "-}" ;



