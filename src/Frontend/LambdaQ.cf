-- Documentation of LBNF Gramar: https://bnfc.readthedocs.io/en/latest/lbnf.html# --
-- Generating a language frontend using the BNF Converter: http://bnfc.digitalgrammars.com/ --

layout toplevel ;
entrypoints Program;

-- A program is a list of functions --
ProgDef .  Program ::= [FunDec] ;

-- Types --
TypeBit    . Type3  ::= "Bit" ;
TypeQbit   . Type3  ::= "Qbit" ;
TypeUnit   . Type3  ::= "()" ;
TypeExp    . Type2  ::= "!" Type3 ;
TypeTensrs . Type1  ::= Type2 "**" Integer ;
TypeTensr  . Type1  ::= Type1 "*" Type2 ;      -- right-associative
TypeFunc   . Type   ::= Type1 "->" Type ;      -- right-associative
coercions Type 3 ;

-- Bit --
BBit . Bit ::= Integer ;

-- Angle is a fraction of 2Ï€ --
AAngl . Angle ::= Double ;

-- Control States --
CStateZero   . ControlState ::= "@0" ;
CStateOne    . ControlState ::= "@1" ;
CStatePlus   . ControlState ::= "@+" ;
CStateMinus  . ControlState ::= "@-" ;
CStatePlusI  . ControlState ::= "@+i" ;
CStateMinusI . ControlState ::= "@-i" ;

-- Controls --
CCtrl . Control ::= ControlState Term ;
separator nonempty Control "," ;

position token GateIdent (upper (letter | digit | '_')*) ;

GH             . Gate ::= "H" ;                                       -- Hadamard Gate
GHC            . Gate ::= "H" "{" [Control] "}" ;                     -- Hadamard Gate
GX             . Gate ::= "X" ;                                       -- Pauli X Gate
GXC            . Gate ::= "X" "{" [Control] "}" ;                     -- Pauli X Gate
GY             . Gate ::= "Y" ;                                       -- Pauli Y Gate
GYC            . Gate ::= "Y" "{" [Control] "}" ;                     -- Pauli Y Gate
GZ             . Gate ::= "Z" ;                                       -- Pauli Z Gate
GZC            . Gate ::= "Z" "{" [Control] "}" ;                     -- Pauli Z Gate
GI             . Gate ::= "ID" ;                                      -- Identity Gate
GXRt           . Gate ::= "ROOT_X" Integer ;                          -- Root of Pauli X gate (root is specified as k in 1/2^k)
GXRtC          . Gate ::= "ROOT_X" Integer "{" [Control] "}" ;        -- Root of Pauli X gate (root is specified as k in 1/2^k)
GXRtDag        . Gate ::= "ROOT_X_DAG" Integer ;                      -- Conjugate of Root of Pauli X gate (root is specified as k in 1/2^k)
GXRtDagC       . Gate ::= "ROOT_X_DAG" Integer "{" [Control] "}" ;    -- Conjugate of Root of Pauli X gate (root is specified as k in 1/2^k)
GYRt           . Gate ::= "ROOT_Y" Integer ;                          -- Root of Pauli Y gate (root is specified as k in 1/2^k)
GYRtC          . Gate ::= "ROOT_Y" Integer "{" [Control] "}" ;        -- Root of Pauli Y gate (root is specified as k in 1/2^k)
GYRtDag        . Gate ::= "ROOT_Y_DAG" Integer ;                      -- Conjugate of Root of Pauli Y gate (root is specified as k in 1/2^k)
GYRtDagC       . Gate ::= "ROOT_Y_DAG" Integer "{" [Control] "}" ;    -- Conjugate of Root of Pauli Y gate (root is specified as k in 1/2^k)
GZRt           . Gate ::= "ROOT_Z" Integer ;                          -- Root of Pauli Z gate (root is specified as k in 1/2^k)
GZRtC          . Gate ::= "ROOT_Z" Integer "{" [Control] "}" ;        -- Root of Pauli Z gate (root is specified as k in 1/2^k)
GZRtDag        . Gate ::= "ROOT_Z_DAG" Integer ;                      -- Conjugate of Root of Pauli Z gate (root is specified as k in 1/2^k)
GZRtDagC       . Gate ::= "ROOT_Z_DAG" Integer "{" [Control] "}" ;    -- Conjugate of Root of Pauli Z gate (root is specified as k in 1/2^k)
GS             . Gate ::= "S" ;                                       -- S gate: sqrt of Z
GSC            . Gate ::= "S" "{" [Control] "}" ;                     -- S gate: sqrt of Z
GSDag          . Gate ::= "S_DAG" ;                                   -- Conjugate of S gate
GSDagC         . Gate ::= "S_DAG" "{" [Control] "}" ;                 -- Conjugate of S gate
GT             . Gate ::= "T" ;                                       -- T Gate: sqrt of S
GTC            . Gate ::= "T" "{" [Control] "}" ;                     -- T Gate: sqrt of S
GTDag          . Gate ::= "T_DAG" ;                                   -- Conjugate of T gate
GTDagC         . Gate ::= "T_DAG" "{" [Control] "}" ;                 -- Conjugate of T gate
GSqrtX         . Gate ::= "SQRT_X" ;                                  -- V gate: sqrt of X
GSqrtXC        . Gate ::= "SQRT_X" "{" [Control] "}" ;                -- V gate: sqrt of X
GSqrtXDag      . Gate ::= "SQRT_X_DAG" ;                              -- Conjugate of V gate
GSqrtXDagC     . Gate ::= "SQRT_X_DAG" "{" [Control] "}" ;            -- Conjugate of V gate
GSqrtY         . Gate ::= "SQRT_Y" ;                                  -- h gate: sqrt of Y
GSqrtYC        . Gate ::= "SQRT_Y" "{" [Control] "}" ;                -- h gate: sqrt of Y
GSqrtYDag      . Gate ::= "SQRT_Y_DAG" ;                              -- Conjugate of h gate
GSqrtYDagC     . Gate ::= "SQRT_Y_DAG" "{" [Control] "}" ;            -- Conjugate of h gate
GRxTheta       . Gate ::= "RX" Angle ;                                -- Single parametric rotation around X axis on the Bloch sphere
GRxThetaC      . Gate ::= "RX" Angle "{" [Control] "}" ;              -- Single parametric rotation around X axis on the Bloch sphere
GRyTheta       . Gate ::= "RY" Angle ;                                -- Single parametric rotation around Y axis on the Bloch sphere
GRyThetaC      . Gate ::= "RY" Angle "{" [Control] "}" ;              -- Single parametric rotation around Y axis on the Bloch sphere
GRzTheta       . Gate ::= "RZ" Angle ;                                -- Single parametric rotation around Z axis on the Bloch sphere
GRzThetaC      . Gate ::= "RZ" Angle "{" [Control] "}" ;              -- Single parametric rotation around Z axis on the Bloch sphere
GU1            . Gate ::= "U1" Angle ;                                -- One parametric generic gate
GU1C           . Gate ::= "U1" Angle "{" [Control] "}" ;              -- One parametric generic gate
GU2            . Gate ::= "U2" Angle Angle ;                          -- Two parametric generic gate
GU2C           . Gate ::= "U2" Angle Angle "{" [Control] "}" ;        -- Two parametric generic gate
GU3            . Gate ::= "U3" Angle Angle Angle ;                    -- Thee parametric generic gate
GU3C           . Gate ::= "U3" Angle Angle Angle "{" [Control] "}" ;  -- Thee parametric generic gate
GSwp           . Gate ::= "SWAP" ;                                    -- Swap gate
GSwpC          . Gate ::= "SWAP" "{" [Control] "}" ;                  -- Swap gate
GSqrtSwp       . Gate ::= "SQRT_SWAP" ;                               -- sqrt of Swap gate
GSqrtSwpC      . Gate ::= "SQRT_SWAP" "{" [Control] "}" ;             -- sqrt of Swap gate
GSqrtSwpDag    . Gate ::= "SQRT_SWAP_DAG" ;                           -- Conjugate of root of Swap gate
GSqrtSwpDagC   . Gate ::= "SQRT_SWAP_DAG" "{" [Control] "}" ;         -- Conjugate of root of Swap gate
GISwp          . Gate ::= "ISWAP" ;                                   -- ISwap gate
GISwpC         . Gate ::= "ISWAP" "{" [Control] "}" ;                 -- ISwap gate
GFSwp          . Gate ::= "FSWAP" ;                                   -- FSwap gate
GFSwpC         . Gate ::= "FSWAP" "{" [Control] "}" ;                 -- FSwap gate
GSwpRt         . Gate ::= "ROOT_SWAP" Integer ;                       -- Root of Swap gate (root is specified as k in 1/2^k)
GSwpRtC        . Gate ::= "ROOT_SWAP" Integer "{" [Control] "}" ;     -- Root of Swap gate (root is specified as k in 1/2^k)
GSwpRtDag      . Gate ::= "ROOT_SWAP_DAG" Integer ;                   -- Conjugate of Root of Swap gate (root is specified as k in 1/2^k)
GSwpRtDagC     . Gate ::= "ROOT_SWAP_DAG" Integer "{" [Control] "}" ; -- Conjugate of Root of Swap gate (root is specified as k in 1/2^k)
GGate          . Gate ::= GateIdent ;                                 -- Generic gate
GGateC         . Gate ::= GateIdent "{" [Control] "}" ;               -- Generic gate

-- Names for Variables --
position token Var ((lower | '_') (letter | digit | '_' | '\'')*) ;

LVar . LetVariable ::= Var ;
separator nonempty LetVariable "," ;

-- Declaring Tuples --
Tup . Tuple ::= "(" Term "," [Term] ")" ;
separator nonempty Term "," ;

-- Lambda token --
position token Lambda '\\' ;

-- Terms --
TVar   . Term3 ::= Var ;
TBit   . Term3 ::= Bit ;
TGate  . Term3 ::= Gate ;
TTup   . Term3 ::= Tuple ;
TUnit  . Term3 ::= "()" ;
TApp   . Term2 ::= Term2 Term3 ;
TIfEl  . Term  ::= "if" Term1 "then" Term1 "else" Term1 ;
TLet   . Term  ::= "let" "(" LetVariable "," [LetVariable] ")" "=" Term1 "in" Term1 ;
TCase  . Term  ::= "case" Term1 "of" Term1 "->" Var Term1 "->" Var ;
TLmbd  . Term  ::= Lambda Var Type "." Term1 ;
TDollr . Term1 ::= Term1 "$" Term2 ;
coercions Term 3 ;

-- Function Arguments --
FunArg . Arg ::= Var ;
separator Arg " " ;

-- Function Definition --
FunDef . Function ::= Var [Arg] "=" Term ;

-- Function Declaration --
FunDecl . FunDec ::= Var "::" Type ";" Function ";" ;
separator FunDec "" ;

-- Format for specifying comments --
comment "--" ; 
comment "{-" "-}" ;
