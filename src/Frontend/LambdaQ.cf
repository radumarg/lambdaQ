-- Documentation of LBNF Gramar: https://bnfc.readthedocs.io/en/latest/lbnf.html# --
-- Generating a language frontend using the BNF Converter: http://bnfc.digitalgrammars.com/ --

-- A program is a list of functions --
ProgDef .  Program ::= [FunDec] ;
terminator FunDec "" ;

-- Types --
TypeBit    . Type2  ::= "Bit" ;
TypeQbit   . Type2  ::= "Qbit" ;
TypeUnit   . Type2  ::= "()" ;
TypeExp    . Type2  ::= "!" Type2 ;
TypeTensrs . Type2  ::= Type2 "^" Integer ;
TypeTensr  . Type1  ::= Type2 "><" Type1 ;    -- right-associative
TypeFunc   . Type1  ::= Type2 "->" Type1 ;    -- right-associative
coercions Type 2 ;

-- Angle is a fraction of 2Ï€ --
AAngl . Angle ::= Double ;

-- Control States --
CStateZero   . ControlState ::= "@0" ;
CStateOne    . ControlState ::= "@1" ;
CStatePlus   . ControlState ::= "@+" ;
CStateMinus  . ControlState ::= "@-" ;
CStatePlusI  . ControlState ::= "@+i" ;
CStateMinusI . ControlState ::= "@-i" ;

-- Controls --
CCtrl . Control ::= ControlState Bit ;
terminator Control "" ;
separator Control "," ;

token GateIdent (upper (letter | digit | '_')*) ;

GH            . Gate ::= "H" [Control] ;                        -- Hadamard Gate
GX            . Gate ::= "X" [Control] ;                        -- Pauli X Gate
GY            . Gate ::= "Y" [Control] ;                        -- Pauli Y Gate
GZ            . Gate ::= "Z" [Control] ;                        -- Pauli Z Gate
GI            . Gate ::= "ID" [Control] ;                       -- Identity Gate
GXRt          . Gate ::= "ROOT_X" Integer [Control] ;           -- Root of Pauli X gate (root is specified as k in 1/2^k)
GXRtDag       . Gate ::= "ROOT_X_DAG" Integer [Control] ;       -- Conjugate of Root of Pauli X gate (root is specified as k in 1/2^k)
GYRt          . Gate ::= "ROOT_Y" Integer [Control] ;           -- Root of Pauli Y gate (root is specified as k in 1/2^k)
GYRtDag       . Gate ::= "ROOT_Y_DAG" Integer [Control] ;       -- Conjugate of Root of Pauli Y gate (root is specified as k in 1/2^k)
GZRt          . Gate ::= "ROOT_Z" Integer [Control] ;           -- Root of Pauli Z gate (root is specified as k in 1/2^k)
GZRtDag       . Gate ::= "ROOT_Z_DAG" Integer [Control] ;       -- Conjugate of Root of Pauli Z gate (root is specified as k in 1/2^k)
GS            . Gate ::= "S" [Control] ;                        -- S gate: sqrt of Z
GSDag         . Gate ::= "S_DAG" [Control] ;                    -- Conjugate of S gate
GT            . Gate ::= "T" [Control] ;                        -- T Gate: sqrt of S
GTDag         . Gate ::= "T_DAG" [Control] ;                    -- Conjugate of T gate
GSqrtX        . Gate ::= "SQRT_X" [Control] ;                   -- V gate: sqrt of X
GSqrtXDag     . Gate ::= "SQRT_X_DAG" [Control] ;               -- Conjugate of V gate
GSqrtY        . Gate ::= "SQRT_Y" [Control] ;                   -- h gate: sqrt of Y
GSqrtYDag     . Gate ::= "SQRT_Y_DAG" [Control] ;               -- Conjugate of h gate
GRxTheta      . Gate ::= "RX" Angle [Control] ;                 -- Single parametric rotation around X axis on the Bloch sphere
GRyTheta      . Gate ::= "RY" Angle [Control] ;                 -- Single parametric rotation around Y axis on the Bloch sphere
GRzTheta      . Gate ::= "RZ" Angle [Control] ;                 -- Single parametric rotation around Z axis on the Bloch sphere
GU1           . Gate ::= "U1" Angle [Control] ;                 -- One parametric generic gate
GU2           . Gate ::= "U2" Angle Angle [Control] ;           -- Two parametric generic gate
GU3           . Gate ::= "U3" Angle Angle Angle [Control] ;     -- Thee parametric generic gate
GSwp          . Gate ::= "SWAP" [Control] ;                     -- Swap gate
GSqrtSwp      . Gate ::= "SQRT_SWAP" [Control] ;                -- sqrt of Swap gate
GSqrtSwpDag   . Gate ::= "SQRT_SWAP_DAG" [Control] ;            -- Conjugate of root of Swap gate
GISwp         . Gate ::= "ISWAP" [Control] ;                    -- ISwap gate
GFSwp         . Gate ::= "FSWAP" [Control] ;                    -- FSwap gate
GSwpRt        . Gate ::= "ROOT_SWAP" Integer [Control] ;        -- Root of Swap gate (root is specified as k in 1/2^k)
GSwpRtDag     . Gate ::= "ROOT_SWAP_DAG" Integer [Control] ;    -- Conjugate of Root of Swap gate (root is specified as k in 1/2^k)
GGate         . Gate ::= GateIdent ; 

-- Names for Variables --
position token Var (lower (letter | digit | '_' | '\'')*) ;

LVar . LetVariable ::= Var ;
separator nonempty LetVariable "," ;

-- Names for Functions --
position token FunVar (lower (letter | digit | '_' | '\'')* (' ')* ':') ;

-- Declaring Tuples --
Tup . Tuple ::= "(" Term "," [Term] ")" ;
separator nonempty Term "," ;

-- Bit --
BBit. Bit ::= Integer ;

-- Lambda token --
position token Lambda '\\' ;

-- Terms --
TVar   . Term3 ::= Var ;
TBit   . Term3 ::= Bit ;
TGate  . Term3 ::= Gate ;
TTup   . Term3 ::= Tuple ;
TUnit  . Term3 ::= "()" ;
TApp   . Term2 ::= Term2 Term3 ;
TIfEl  . Term1 ::= "if" Term "then" Term "else" Term ;
TLet   . Term1 ::= "let" "(" LetVariable "," [LetVariable] ")" "=" Term "in" Term ;
TCase  . Term1 ::= "case" Term "of" Term "->" Var Term "->" Var ;
TLmbd  . Term1 ::= Lambda FunVar Type "." Term ;
TDollr . Term1 ::= Term2 "$" Term1 ;
coercions Term 3 ;

-- Function Arguments --
FunArg . Arg ::= Var ;
separator Arg " " ;

-- Function Definition --
FunDef . Function ::= Var [Arg] "=" Term ;

-- Function Declaration --
FunDecl . FunDec ::= FunVar Type Function ;

-- Format for specifying comments --
comment "--" ; 
comment "{-" "-}" ;
