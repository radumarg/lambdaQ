-- File generated by the BNF Converter (bnfc 2.9.4).

-- Templates for pattern matching on abstract syntax

{-# OPTIONS_GHC -fno-warn-unused-matches #-}

module Grammar.Skel where

import Prelude (($), Either(..), String, (++), Show, show)
import qualified Grammar.Abs

type Err = Either String
type Result = Err String

failure :: Show a => a -> Result
failure x = Left $ "Undefined case: " ++ show x

transGateGeneric :: Grammar.Abs.GateGeneric -> Result
transGateGeneric x = case x of
  Grammar.Abs.GateGeneric string -> failure x

transVar :: Grammar.Abs.Var -> Result
transVar x = case x of
  Grammar.Abs.Var string -> failure x

transFunVariable :: Grammar.Abs.FunVariable -> Result
transFunVariable x = case x of
  Grammar.Abs.FunVariable string -> failure x

transLambda :: Grammar.Abs.Lambda -> Result
transLambda x = case x of
  Grammar.Abs.Lambda string -> failure x

transType :: Grammar.Abs.Type -> Result
transType x = case x of
  Grammar.Abs.TypeBit -> failure x
  Grammar.Abs.TypeQbit -> failure x
  Grammar.Abs.TypeUnit -> failure x
  Grammar.Abs.TypeExp type_ -> failure x
  Grammar.Abs.TypeTens type_1 type_2 -> failure x
  Grammar.Abs.TypeFunc type_1 type_2 -> failure x

transAngle :: Grammar.Abs.Angle -> Result
transAngle x = case x of
  Grammar.Abs.AAngl double -> failure x

transControlState :: Grammar.Abs.ControlState -> Result
transControlState x = case x of
  Grammar.Abs.CStateZero -> failure x
  Grammar.Abs.CStateOne -> failure x
  Grammar.Abs.CStatePlus -> failure x
  Grammar.Abs.CStateMinus -> failure x
  Grammar.Abs.CStateIPlus -> failure x
  Grammar.Abs.CStateIMinus -> failure x

transControl :: Grammar.Abs.Control -> Result
transControl x = case x of
  Grammar.Abs.CCtrl integer controlstate -> failure x

transGate :: Grammar.Abs.Gate -> Result
transGate x = case x of
  Grammar.Abs.GH controls -> failure x
  Grammar.Abs.GX controls -> failure x
  Grammar.Abs.GY controls -> failure x
  Grammar.Abs.GZ controls -> failure x
  Grammar.Abs.GI controls -> failure x
  Grammar.Abs.GXRt integer controls -> failure x
  Grammar.Abs.GXRtDag integer controls -> failure x
  Grammar.Abs.GYRt integer controls -> failure x
  Grammar.Abs.GYRtDag integer controls -> failure x
  Grammar.Abs.GZRt integer controls -> failure x
  Grammar.Abs.GZRtDag integer controls -> failure x
  Grammar.Abs.GS controls -> failure x
  Grammar.Abs.GSDag controls -> failure x
  Grammar.Abs.GT controls -> failure x
  Grammar.Abs.GTDag controls -> failure x
  Grammar.Abs.GSqrtX controls -> failure x
  Grammar.Abs.GSqrtXDag controls -> failure x
  Grammar.Abs.GSqrtY controls -> failure x
  Grammar.Abs.GSqrtYDag controls -> failure x
  Grammar.Abs.GRxTheta angle controls -> failure x
  Grammar.Abs.GRyTheta angle controls -> failure x
  Grammar.Abs.GRzTheta angle controls -> failure x
  Grammar.Abs.GU1 angle controls -> failure x
  Grammar.Abs.GU2 angle1 angle2 controls -> failure x
  Grammar.Abs.GU3 angle1 angle2 angle3 controls -> failure x
  Grammar.Abs.GSwp controls -> failure x
  Grammar.Abs.GSqrtSwp controls -> failure x
  Grammar.Abs.GSqrtSwpDag controls -> failure x
  Grammar.Abs.GISwp controls -> failure x
  Grammar.Abs.GFSwp controls -> failure x
  Grammar.Abs.GSwpRt integer controls -> failure x
  Grammar.Abs.GSwpRtDag controls -> failure x
  Grammar.Abs.GGeneric gategeneric -> failure x

transLetVariable :: Grammar.Abs.LetVariable -> Result
transLetVariable x = case x of
  Grammar.Abs.LVar var -> failure x

transTuple :: Grammar.Abs.Tuple -> Result
transTuple x = case x of
  Grammar.Abs.Tup term terms -> failure x

transBit :: Grammar.Abs.Bit -> Result
transBit x = case x of
  Grammar.Abs.BBit integer -> failure x

transTerm :: Grammar.Abs.Term -> Result
transTerm x = case x of
  Grammar.Abs.TVar var -> failure x
  Grammar.Abs.TBit bit -> failure x
  Grammar.Abs.TGate gate -> failure x
  Grammar.Abs.TTup tuple -> failure x
  Grammar.Abs.TUnit -> failure x
  Grammar.Abs.TApp term1 term2 -> failure x
  Grammar.Abs.TIfEl term1 term2 term3 -> failure x
  Grammar.Abs.TLet letvariable letvariables term1 term2 -> failure x
  Grammar.Abs.TCase term1 term2 var1 term3 var2 -> failure x
  Grammar.Abs.TLmbd lambda funvariable type_ term -> failure x
  Grammar.Abs.TDollr term1 term2 -> failure x

transArg :: Grammar.Abs.Arg -> Result
transArg x = case x of
  Grammar.Abs.FunArg var -> failure x

transFunction :: Grammar.Abs.Function -> Result
transFunction x = case x of
  Grammar.Abs.FunDef var args term -> failure x

transFunDeclaration :: Grammar.Abs.FunDeclaration -> Result
transFunDeclaration x = case x of
  Grammar.Abs.FunDecl funvariable type_ function -> failure x

transProgram :: Grammar.Abs.Program -> Result
transProgram x = case x of
  Grammar.Abs.ProgDef fundeclarations -> failure x
