-- File generated by the BNF Converter (bnfc 2.9.4).

{-# LANGUAGE GeneralizedNewtypeDeriving #-}
{-# LANGUAGE PatternSynonyms #-}

-- | The abstract syntax of language LambdaQ.

module LambdaQ.Abs where

import Prelude (Double, Integer, String)
import qualified Prelude as C
  ( Eq, Ord, Show, Read
  , Int, Maybe(..)
  )
import qualified Data.String

data Type
    = TypeBit
    | TypeQbit
    | TypeUnit
    | TypeExp Type
    | TypeTens Type Integer
    | TypeFunc Type Type
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Angle = AAngl Double
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data ControlState
    = CStateZero
    | CStateOne
    | CStatePlus
    | CStateMinus
    | CStateIPlus
    | CStateIMinus
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Control = CCtrl Integer ControlState
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Gate
    = GH [Control]
    | GX [Control]
    | GY [Control]
    | GZ [Control]
    | GI [Control]
    | GXRt Integer [Control]
    | GXRtDag Integer [Control]
    | GYRt Integer [Control]
    | GYRtDag Integer [Control]
    | GZRt Integer [Control]
    | GZRtDag Integer [Control]
    | GS [Control]
    | GSDag [Control]
    | GT [Control]
    | GTDag [Control]
    | GSqrtX [Control]
    | GSqrtXDag [Control]
    | GSqrtY [Control]
    | GSqrtYDag [Control]
    | GRxTheta Angle [Control]
    | GRyTheta Angle [Control]
    | GRzTheta Angle [Control]
    | GU1 Angle [Control]
    | GU2 Angle Angle [Control]
    | GU3 Angle Angle Angle [Control]
    | GSwp [Control]
    | GSqrtSwp [Control]
    | GSqrtSwpDag [Control]
    | GISwp [Control]
    | GFSwp [Control]
    | GSwpRt Integer [Control]
    | GSwpRtDag Integer [Control]
    | GGateIdent GateIdent
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data LetVariable = LVar Var
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Tuple = Tup Term [Term]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Bit = BBit Integer
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Term
    = TVar Var
    | TBit Bit
    | TGate Gate
    | TTup Tuple
    | TUnit
    | TApp Term Term
    | TIfEl Term Term Term
    | TLet LetVariable [LetVariable] Term Term
    | TCase Term Term Var Term Var
    | TLmbd Lambda FunVariable Type Term
    | TDollr Term Term
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Arg = FunArg Var
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Function = FunDef Var [Arg] Term
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data FunDeclaration = FunDecl FunVariable Type Function
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Program = ProgDef [FunDeclaration]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

newtype GateIdent = GateIdent String
  deriving (C.Eq, C.Ord, C.Show, C.Read, Data.String.IsString)

newtype Var = Var ((C.Int, C.Int), String)
  deriving (C.Eq, C.Ord, C.Show, C.Read)

newtype FunVariable = FunVariable ((C.Int, C.Int), String)
  deriving (C.Eq, C.Ord, C.Show, C.Read)

newtype Lambda = Lambda ((C.Int, C.Int), String)
  deriving (C.Eq, C.Ord, C.Show, C.Read)

-- | Start position (line, column) of something.

type BNFC'Position = C.Maybe (C.Int, C.Int)

pattern BNFC'NoPosition :: BNFC'Position
pattern BNFC'NoPosition = C.Nothing

pattern BNFC'Position :: C.Int -> C.Int -> BNFC'Position
pattern BNFC'Position line col = C.Just (line, col)

-- | Get the start position of something.

class HasPosition a where
  hasPosition :: a -> BNFC'Position

instance HasPosition Var where
  hasPosition (Var (p, _)) = C.Just p

instance HasPosition FunVariable where
  hasPosition (FunVariable (p, _)) = C.Just p

instance HasPosition Lambda where
  hasPosition (Lambda (p, _)) = C.Just p

