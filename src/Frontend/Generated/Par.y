-- -*- haskell -*- File generated by the BNF Converter (bnfc 2.9.4).

-- Parser definition for use with Happy
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
{-# LANGUAGE PatternSynonyms #-}

module Grammar.Par
  ( happyError
  , myLexer
  , pType1
  , pType
  , pAngle
  , pControlState
  , pControl
  , pListControl
  , pGate
  , pLetVariable
  , pListLetVariable
  , pTuple
  , pListTerm
  , pBit
  , pTerm3
  , pTerm2
  , pTerm1
  , pTerm
  , pArg
  , pListArg
  , pFunction
  , pFunDeclaration
  , pListFunDeclaration
  , pProgram
  ) where

import Prelude

import qualified Grammar.Abs
import Grammar.Lex

}

%name pType1 Type1
%name pType Type
%name pAngle Angle
%name pControlState ControlState
%name pControl Control
%name pListControl ListControl
%name pGate Gate
%name pLetVariable LetVariable
%name pListLetVariable ListLetVariable
%name pTuple Tuple
%name pListTerm ListTerm
%name pBit Bit
%name pTerm3 Term3
%name pTerm2 Term2
%name pTerm1 Term1
%name pTerm Term
%name pArg Arg
%name pListArg ListArg
%name pFunction Function
%name pFunDeclaration FunDeclaration
%name pListFunDeclaration ListFunDeclaration
%name pProgram Program
-- no lexer declaration
%monad { Err } { (>>=) } { return }
%tokentype {Token}
%token
  '!'              { PT _ (TS _ 1)           }
  '$'              { PT _ (TS _ 2)           }
  '('              { PT _ (TS _ 3)           }
  '()'             { PT _ (TS _ 4)           }
  ')'              { PT _ (TS _ 5)           }
  '*'              { PT _ (TS _ 6)           }
  '+'              { PT _ (TS _ 7)           }
  '+i'             { PT _ (TS _ 8)           }
  ','              { PT _ (TS _ 9)           }
  '-'              { PT _ (TS _ 10)          }
  '->'             { PT _ (TS _ 11)          }
  '-i'             { PT _ (TS _ 12)          }
  '.'              { PT _ (TS _ 13)          }
  '0'              { PT _ (TS _ 14)          }
  '1'              { PT _ (TS _ 15)          }
  '='              { PT _ (TS _ 16)          }
  'Bit'            { PT _ (TS _ 17)          }
  'Ctrl'           { PT _ (TS _ 18)          }
  'FSwap'          { PT _ (TS _ 19)          }
  'H'              { PT _ (TS _ 20)          }
  'I'              { PT _ (TS _ 21)          }
  'ISwap'          { PT _ (TS _ 22)          }
  'Qbit'           { PT _ (TS _ 23)          }
  'RootSwap'       { PT _ (TS _ 24)          }
  'RootSwapDagger' { PT _ (TS _ 25)          }
  'RootX'          { PT _ (TS _ 26)          }
  'RootXDagger'    { PT _ (TS _ 27)          }
  'RootY'          { PT _ (TS _ 28)          }
  'RootYDagger'    { PT _ (TS _ 29)          }
  'RootZ'          { PT _ (TS _ 30)          }
  'RootZDagger'    { PT _ (TS _ 31)          }
  'RxTheta'        { PT _ (TS _ 32)          }
  'RyTheta'        { PT _ (TS _ 33)          }
  'RzTheta'        { PT _ (TS _ 34)          }
  'S'              { PT _ (TS _ 35)          }
  'SDagger'        { PT _ (TS _ 36)          }
  'SqrtSwap'       { PT _ (TS _ 37)          }
  'SqrtSwapDagger' { PT _ (TS _ 38)          }
  'SqrtX'          { PT _ (TS _ 39)          }
  'SqrtXDagger'    { PT _ (TS _ 40)          }
  'SqrtY'          { PT _ (TS _ 41)          }
  'SqrtYDagger'    { PT _ (TS _ 42)          }
  'Swap'           { PT _ (TS _ 43)          }
  'T'              { PT _ (TS _ 44)          }
  'TDagger'        { PT _ (TS _ 45)          }
  'U1'             { PT _ (TS _ 46)          }
  'U2'             { PT _ (TS _ 47)          }
  'U3'             { PT _ (TS _ 48)          }
  'X'              { PT _ (TS _ 49)          }
  'Y'              { PT _ (TS _ 50)          }
  'Z'              { PT _ (TS _ 51)          }
  'case'           { PT _ (TS _ 52)          }
  'else'           { PT _ (TS _ 53)          }
  'if'             { PT _ (TS _ 54)          }
  'in'             { PT _ (TS _ 55)          }
  'let'            { PT _ (TS _ 56)          }
  'of'             { PT _ (TS _ 57)          }
  'then'           { PT _ (TS _ 58)          }
  L_doubl          { PT _ (TD $$)            }
  L_integ          { PT _ (TI $$)            }
  L_GateGeneric    { PT _ (T_GateGeneric $$) }
  L_Var            { PT _ (T_Var _)          }
  L_FunVariable    { PT _ (T_FunVariable _)  }
  L_Lambda         { PT _ (T_Lambda _)       }

%%

Double  :: { Double }
Double   : L_doubl  { (read $1) :: Double }

Integer :: { Integer }
Integer  : L_integ  { (read $1) :: Integer }

GateGeneric :: { Grammar.Abs.GateGeneric }
GateGeneric  : L_GateGeneric { Grammar.Abs.GateGeneric $1 }

Var :: { Grammar.Abs.Var }
Var  : L_Var { Grammar.Abs.Var (mkPosToken $1) }

FunVariable :: { Grammar.Abs.FunVariable }
FunVariable  : L_FunVariable { Grammar.Abs.FunVariable (mkPosToken $1) }

Lambda :: { Grammar.Abs.Lambda }
Lambda  : L_Lambda { Grammar.Abs.Lambda (mkPosToken $1) }

Type1 :: { Grammar.Abs.Type }
Type1
  : 'Bit' { Grammar.Abs.TypeBit }
  | 'Qbit' { Grammar.Abs.TypeQbit }
  | '()' { Grammar.Abs.TypeUnit }
  | '!' Type1 { Grammar.Abs.TypeExp $2 }
  | '(' Type ')' { $2 }

Type :: { Grammar.Abs.Type }
Type
  : Type1 '*' Type { Grammar.Abs.TypeTens $1 $3 }
  | Type1 '->' Type { Grammar.Abs.TypeFunc $1 $3 }
  | Type1 { $1 }

Angle :: { Grammar.Abs.Angle }
Angle : Double { Grammar.Abs.AAngl $1 }

ControlState :: { Grammar.Abs.ControlState }
ControlState
  : '0' { Grammar.Abs.CStateZero }
  | '1' { Grammar.Abs.CStateOne }
  | '+' { Grammar.Abs.CStatePlus }
  | '-' { Grammar.Abs.CStateMinus }
  | '+i' { Grammar.Abs.CStateIPlus }
  | '-i' { Grammar.Abs.CStateIMinus }

Control :: { Grammar.Abs.Control }
Control : 'Ctrl' Integer ControlState { Grammar.Abs.CCtrl $2 $3 }

ListControl :: { [Grammar.Abs.Control] }
ListControl
  : Control { (:[]) $1 } | Control ',' ListControl { (:) $1 $3 }

Gate :: { Grammar.Abs.Gate }
Gate
  : 'H' ListControl { Grammar.Abs.GH $2 }
  | 'X' ListControl { Grammar.Abs.GX $2 }
  | 'Y' ListControl { Grammar.Abs.GY $2 }
  | 'Z' ListControl { Grammar.Abs.GZ $2 }
  | 'I' ListControl { Grammar.Abs.GI $2 }
  | 'RootX' Integer ListControl { Grammar.Abs.GXRt $2 $3 }
  | 'RootXDagger' Integer ListControl { Grammar.Abs.GXRtDag $2 $3 }
  | 'RootY' Integer ListControl { Grammar.Abs.GYRt $2 $3 }
  | 'RootYDagger' Integer ListControl { Grammar.Abs.GYRtDag $2 $3 }
  | 'RootZ' Integer ListControl { Grammar.Abs.GZRt $2 $3 }
  | 'RootZDagger' Integer ListControl { Grammar.Abs.GZRtDag $2 $3 }
  | 'S' ListControl { Grammar.Abs.GS $2 }
  | 'SDagger' ListControl { Grammar.Abs.GSDag $2 }
  | 'T' ListControl { Grammar.Abs.GT $2 }
  | 'TDagger' ListControl { Grammar.Abs.GTDag $2 }
  | 'SqrtX' ListControl { Grammar.Abs.GSqrtX $2 }
  | 'SqrtXDagger' ListControl { Grammar.Abs.GSqrtXDag $2 }
  | 'SqrtY' ListControl { Grammar.Abs.GSqrtY $2 }
  | 'SqrtYDagger' ListControl { Grammar.Abs.GSqrtYDag $2 }
  | 'RxTheta' Angle ListControl { Grammar.Abs.GRxTheta $2 $3 }
  | 'RyTheta' Angle ListControl { Grammar.Abs.GRyTheta $2 $3 }
  | 'RzTheta' Angle ListControl { Grammar.Abs.GRzTheta $2 $3 }
  | 'U1' Angle ListControl { Grammar.Abs.GU1 $2 $3 }
  | 'U2' Angle Angle ListControl { Grammar.Abs.GU2 $2 $3 $4 }
  | 'U3' Angle Angle Angle ListControl { Grammar.Abs.GU3 $2 $3 $4 $5 }
  | 'Swap' ListControl { Grammar.Abs.GSwp $2 }
  | 'SqrtSwap' ListControl { Grammar.Abs.GSqrtSwp $2 }
  | 'SqrtSwapDagger' ListControl { Grammar.Abs.GSqrtSwpDag $2 }
  | 'ISwap' ListControl { Grammar.Abs.GISwp $2 }
  | 'FSwap' ListControl { Grammar.Abs.GFSwp $2 }
  | 'RootSwap' Integer ListControl { Grammar.Abs.GSwpRt $2 $3 }
  | 'RootSwapDagger' ListControl { Grammar.Abs.GSwpRtDag $2 }
  | GateGeneric { Grammar.Abs.GGeneric $1 }

LetVariable :: { Grammar.Abs.LetVariable }
LetVariable : Var { Grammar.Abs.LVar $1 }

ListLetVariable :: { [Grammar.Abs.LetVariable] }
ListLetVariable
  : LetVariable { (:[]) $1 }
  | LetVariable ',' ListLetVariable { (:) $1 $3 }

Tuple :: { Grammar.Abs.Tuple }
Tuple : '(' Term ',' ListTerm ')' { Grammar.Abs.Tup $2 $4 }

ListTerm :: { [Grammar.Abs.Term] }
ListTerm : Term { (:[]) $1 } | Term ',' ListTerm { (:) $1 $3 }

Bit :: { Grammar.Abs.Bit }
Bit : Integer { Grammar.Abs.BBit $1 }

Term3 :: { Grammar.Abs.Term }
Term3
  : Var { Grammar.Abs.TVar $1 }
  | Bit { Grammar.Abs.TBit $1 }
  | Gate { Grammar.Abs.TGate $1 }
  | Tuple { Grammar.Abs.TTup $1 }
  | '()' { Grammar.Abs.TUnit }
  | '(' Term ')' { $2 }

Term2 :: { Grammar.Abs.Term }
Term2 : Term2 Term3 { Grammar.Abs.TApp $1 $2 } | Term3 { $1 }

Term1 :: { Grammar.Abs.Term }
Term1
  : 'if' Term 'then' Term 'else' Term { Grammar.Abs.TIfEl $2 $4 $6 }
  | 'let' '(' LetVariable ',' ListLetVariable ')' '=' Term 'in' Term { Grammar.Abs.TLet $3 $5 $8 $10 }
  | 'case' Term 'of' Term '->' Var Term '->' Var { Grammar.Abs.TCase $2 $4 $6 $7 $9 }
  | Lambda FunVariable Type '.' Term { Grammar.Abs.TLmbd $1 $2 $3 $5 }
  | Term2 '$' Term1 { Grammar.Abs.TDollr $1 $3 }
  | Term2 { $1 }

Term :: { Grammar.Abs.Term }
Term : Term1 { $1 }

Arg :: { Grammar.Abs.Arg }
Arg : Var { Grammar.Abs.FunArg $1 }

ListArg :: { [Grammar.Abs.Arg] }
ListArg : {- empty -} { [] } | Arg ListArg { (:) $1 $2 }

Function :: { Grammar.Abs.Function }
Function : Var ListArg '=' Term { Grammar.Abs.FunDef $1 $2 $4 }

FunDeclaration :: { Grammar.Abs.FunDeclaration }
FunDeclaration
  : FunVariable Type Function { Grammar.Abs.FunDecl $1 $2 $3 }

ListFunDeclaration :: { [Grammar.Abs.FunDeclaration] }
ListFunDeclaration
  : {- empty -} { [] }
  | FunDeclaration ListFunDeclaration { (:) $1 $2 }

Program :: { Grammar.Abs.Program }
Program : ListFunDeclaration { Grammar.Abs.ProgDef $1 }

{

type Err = Either String

happyError :: [Token] -> Err a
happyError ts = Left $
  "syntax error at " ++ tokenPos ts ++
  case ts of
    []      -> []
    [Err _] -> " due to lexer error"
    t:_     -> " before `" ++ (prToken t) ++ "'"

myLexer :: String -> [Token]
myLexer = tokens

}

