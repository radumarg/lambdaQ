-- -*- haskell -*- File generated by the BNF Converter (bnfc 2.9.4.1).

-- Parser definition for use with Happy
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
{-# LANGUAGE PatternSynonyms #-}

module Frontend.LambdaQ.Par
  ( happyError
  , myLexer
  , pProgram
  ) where

import Prelude

import qualified Frontend.LambdaQ.Abs
import Frontend.LambdaQ.Lex

}

%name pProgram Program
-- no lexer declaration
%monad { Err } { (>>=) } { return }
%tokentype {Token}
%token
  '!'             { PT _ (TS _ 1)        }
  '$'             { PT _ (TS _ 2)        }
  '('             { PT _ (TS _ 3)        }
  '()'            { PT _ (TS _ 4)        }
  ')'             { PT _ (TS _ 5)        }
  '*'             { PT _ (TS _ 6)        }
  '**'            { PT _ (TS _ 7)        }
  ','             { PT _ (TS _ 8)        }
  '->'            { PT _ (TS _ 9)        }
  '::'            { PT _ (TS _ 10)       }
  ';'             { PT _ (TS _ 11)       }
  '='             { PT _ (TS _ 12)       }
  '@+'            { PT _ (TS _ 13)       }
  '@+i'           { PT _ (TS _ 14)       }
  '@-'            { PT _ (TS _ 15)       }
  '@-i'           { PT _ (TS _ 16)       }
  '@0'            { PT _ (TS _ 17)       }
  '@1'            { PT _ (TS _ 18)       }
  'Bit'           { PT _ (TS _ 19)       }
  'FSWAP'         { PT _ (TS _ 20)       }
  'H'             { PT _ (TS _ 21)       }
  'ID'            { PT _ (TS _ 22)       }
  'ISWAP'         { PT _ (TS _ 23)       }
  'Qbit'          { PT _ (TS _ 24)       }
  'ROOT_SWAP'     { PT _ (TS _ 25)       }
  'ROOT_SWAP_DAG' { PT _ (TS _ 26)       }
  'ROOT_X'        { PT _ (TS _ 27)       }
  'ROOT_X_DAG'    { PT _ (TS _ 28)       }
  'ROOT_Y'        { PT _ (TS _ 29)       }
  'ROOT_Y_DAG'    { PT _ (TS _ 30)       }
  'ROOT_Z'        { PT _ (TS _ 31)       }
  'ROOT_Z_DAG'    { PT _ (TS _ 32)       }
  'RX'            { PT _ (TS _ 33)       }
  'RY'            { PT _ (TS _ 34)       }
  'RZ'            { PT _ (TS _ 35)       }
  'S'             { PT _ (TS _ 36)       }
  'SQRT_SWAP'     { PT _ (TS _ 37)       }
  'SQRT_SWAP_DAG' { PT _ (TS _ 38)       }
  'SQRT_X'        { PT _ (TS _ 39)       }
  'SQRT_X_DAG'    { PT _ (TS _ 40)       }
  'SQRT_Y'        { PT _ (TS _ 41)       }
  'SQRT_Y_DAG'    { PT _ (TS _ 42)       }
  'SWAP'          { PT _ (TS _ 43)       }
  'S_DAG'         { PT _ (TS _ 44)       }
  'T'             { PT _ (TS _ 45)       }
  'T_DAG'         { PT _ (TS _ 46)       }
  'U1'            { PT _ (TS _ 47)       }
  'U2'            { PT _ (TS _ 48)       }
  'U3'            { PT _ (TS _ 49)       }
  'X'             { PT _ (TS _ 50)       }
  'Y'             { PT _ (TS _ 51)       }
  'Z'             { PT _ (TS _ 52)       }
  '['             { PT _ (TS _ 53)       }
  ']'             { PT _ (TS _ 54)       }
  'case'          { PT _ (TS _ 55)       }
  'else'          { PT _ (TS _ 56)       }
  'if'            { PT _ (TS _ 57)       }
  'in'            { PT _ (TS _ 58)       }
  'let'           { PT _ (TS _ 59)       }
  'of'            { PT _ (TS _ 60)       }
  'then'          { PT _ (TS _ 61)       }
  '{'             { PT _ (TS _ 62)       }
  '}'             { PT _ (TS _ 63)       }
  L_doubl         { PT _ (TD $$)         }
  L_integ         { PT _ (TI $$)         }
  L_GateIdent     { PT _ (T_GateIdent _) }
  L_Var           { PT _ (T_Var _)       }
  L_Lambda        { PT _ (T_Lambda _)    }
  L_Bit           { PT _ (T_Bit _)       }

%%

Double  :: { Double }
Double   : L_doubl  { (read $1) :: Double }

Integer :: { Integer }
Integer  : L_integ  { (read $1) :: Integer }

GateIdent :: { Frontend.LambdaQ.Abs.GateIdent }
GateIdent  : L_GateIdent { Frontend.LambdaQ.Abs.GateIdent (mkPosToken $1) }

Var :: { Frontend.LambdaQ.Abs.Var }
Var  : L_Var { Frontend.LambdaQ.Abs.Var (mkPosToken $1) }

Lambda :: { Frontend.LambdaQ.Abs.Lambda }
Lambda  : L_Lambda { Frontend.LambdaQ.Abs.Lambda (mkPosToken $1) }

Bit :: { Frontend.LambdaQ.Abs.Bit }
Bit  : L_Bit { Frontend.LambdaQ.Abs.Bit (mkPosToken $1) }

Program :: { Frontend.LambdaQ.Abs.Program }
Program : ListFunDec { Frontend.LambdaQ.Abs.ProgDef $1 }

Type3 :: { Frontend.LambdaQ.Abs.Type }
Type3
  : 'Bit' { Frontend.LambdaQ.Abs.TypeBit }
  | 'Qbit' { Frontend.LambdaQ.Abs.TypeQbit }
  | '()' { Frontend.LambdaQ.Abs.TypeUnit }
  | '(' Type ')' { $2 }

Type2 :: { Frontend.LambdaQ.Abs.Type }
Type2
  : '!' Type3 { Frontend.LambdaQ.Abs.TypeExp $2 } | Type3 { $1 }

Type1 :: { Frontend.LambdaQ.Abs.Type }
Type1
  : Type2 '**' Integer { Frontend.LambdaQ.Abs.TypeTensrs $1 $3 }
  | Type2 '*' Type1 { Frontend.LambdaQ.Abs.TypeTensr $1 $3 }
  | Type2 { $1 }

Type :: { Frontend.LambdaQ.Abs.Type }
Type
  : Type1 '->' Type { Frontend.LambdaQ.Abs.TypeFunc $1 $3 }
  | Type1 { $1 }

Angle :: { Frontend.LambdaQ.Abs.Angle }
Angle : Double { Frontend.LambdaQ.Abs.AAngl $1 }

ControlState :: { Frontend.LambdaQ.Abs.ControlState }
ControlState
  : '@0' { Frontend.LambdaQ.Abs.CStateZero }
  | '@1' { Frontend.LambdaQ.Abs.CStateOne }
  | '@+' { Frontend.LambdaQ.Abs.CStatePlus }
  | '@-' { Frontend.LambdaQ.Abs.CStateMinus }
  | '@+i' { Frontend.LambdaQ.Abs.CStatePlusI }
  | '@-i' { Frontend.LambdaQ.Abs.CStateMinusI }

Control :: { Frontend.LambdaQ.Abs.Control }
Control
  : ControlState '->' Term { Frontend.LambdaQ.Abs.CCtrl $1 $3 }

ListControl :: { [Frontend.LambdaQ.Abs.Control] }
ListControl
  : Control { (:[]) $1 } | Control ',' ListControl { (:) $1 $3 }

Gate :: { Frontend.LambdaQ.Abs.Gate }
Gate
  : 'H' { Frontend.LambdaQ.Abs.GH }
  | 'H' '[' ListControl ']' { Frontend.LambdaQ.Abs.GHC $3 }
  | 'X' { Frontend.LambdaQ.Abs.GX }
  | 'X' '[' ListControl ']' { Frontend.LambdaQ.Abs.GXC $3 }
  | 'Y' { Frontend.LambdaQ.Abs.GY }
  | 'Y' '[' ListControl ']' { Frontend.LambdaQ.Abs.GYC $3 }
  | 'Z' { Frontend.LambdaQ.Abs.GZ }
  | 'Z' '[' ListControl ']' { Frontend.LambdaQ.Abs.GZC $3 }
  | 'ID' { Frontend.LambdaQ.Abs.GI }
  | 'ROOT_X' Integer { Frontend.LambdaQ.Abs.GXRt $2 }
  | 'ROOT_X' Integer '[' ListControl ']' { Frontend.LambdaQ.Abs.GXRtC $2 $4 }
  | 'ROOT_X_DAG' Integer { Frontend.LambdaQ.Abs.GXRtDag $2 }
  | 'ROOT_X_DAG' Integer '[' ListControl ']' { Frontend.LambdaQ.Abs.GXRtDagC $2 $4 }
  | 'ROOT_Y' Integer { Frontend.LambdaQ.Abs.GYRt $2 }
  | 'ROOT_Y' Integer '[' ListControl ']' { Frontend.LambdaQ.Abs.GYRtC $2 $4 }
  | 'ROOT_Y_DAG' Integer { Frontend.LambdaQ.Abs.GYRtDag $2 }
  | 'ROOT_Y_DAG' Integer '[' ListControl ']' { Frontend.LambdaQ.Abs.GYRtDagC $2 $4 }
  | 'ROOT_Z' Integer { Frontend.LambdaQ.Abs.GZRt $2 }
  | 'ROOT_Z' Integer '[' ListControl ']' { Frontend.LambdaQ.Abs.GZRtC $2 $4 }
  | 'ROOT_Z_DAG' Integer { Frontend.LambdaQ.Abs.GZRtDag $2 }
  | 'ROOT_Z_DAG' Integer '[' ListControl ']' { Frontend.LambdaQ.Abs.GZRtDagC $2 $4 }
  | 'S' { Frontend.LambdaQ.Abs.GS }
  | 'S' '[' ListControl ']' { Frontend.LambdaQ.Abs.GSC $3 }
  | 'S_DAG' { Frontend.LambdaQ.Abs.GSDag }
  | 'S_DAG' '[' ListControl ']' { Frontend.LambdaQ.Abs.GSDagC $3 }
  | 'T' { Frontend.LambdaQ.Abs.GT }
  | 'T' '[' ListControl ']' { Frontend.LambdaQ.Abs.GTC $3 }
  | 'T_DAG' { Frontend.LambdaQ.Abs.GTDag }
  | 'T_DAG' '[' ListControl ']' { Frontend.LambdaQ.Abs.GTDagC $3 }
  | 'SQRT_X' { Frontend.LambdaQ.Abs.GSqrtX }
  | 'SQRT_X' '[' ListControl ']' { Frontend.LambdaQ.Abs.GSqrtXC $3 }
  | 'SQRT_X_DAG' { Frontend.LambdaQ.Abs.GSqrtXDag }
  | 'SQRT_X_DAG' '[' ListControl ']' { Frontend.LambdaQ.Abs.GSqrtXDagC $3 }
  | 'SQRT_Y' { Frontend.LambdaQ.Abs.GSqrtY }
  | 'SQRT_Y' '[' ListControl ']' { Frontend.LambdaQ.Abs.GSqrtYC $3 }
  | 'SQRT_Y_DAG' { Frontend.LambdaQ.Abs.GSqrtYDag }
  | 'SQRT_Y_DAG' '[' ListControl ']' { Frontend.LambdaQ.Abs.GSqrtYDagC $3 }
  | 'RX' Angle { Frontend.LambdaQ.Abs.GRxTheta $2 }
  | 'RX' Angle '[' ListControl ']' { Frontend.LambdaQ.Abs.GRxThetaC $2 $4 }
  | 'RY' Angle { Frontend.LambdaQ.Abs.GRyTheta $2 }
  | 'RY' Angle '[' ListControl ']' { Frontend.LambdaQ.Abs.GRyThetaC $2 $4 }
  | 'RZ' Angle { Frontend.LambdaQ.Abs.GRzTheta $2 }
  | 'RZ' Angle '[' ListControl ']' { Frontend.LambdaQ.Abs.GRzThetaC $2 $4 }
  | 'U1' Angle { Frontend.LambdaQ.Abs.GU1 $2 }
  | 'U1' Angle '[' ListControl ']' { Frontend.LambdaQ.Abs.GU1C $2 $4 }
  | 'U2' Angle Angle { Frontend.LambdaQ.Abs.GU2 $2 $3 }
  | 'U2' Angle Angle '[' ListControl ']' { Frontend.LambdaQ.Abs.GU2C $2 $3 $5 }
  | 'U3' Angle Angle Angle { Frontend.LambdaQ.Abs.GU3 $2 $3 $4 }
  | 'U3' Angle Angle Angle '[' ListControl ']' { Frontend.LambdaQ.Abs.GU3C $2 $3 $4 $6 }
  | 'SWAP' { Frontend.LambdaQ.Abs.GSwp }
  | 'SWAP' '[' ListControl ']' { Frontend.LambdaQ.Abs.GSwpC $3 }
  | 'SQRT_SWAP' { Frontend.LambdaQ.Abs.GSqrtSwp }
  | 'SQRT_SWAP' '[' ListControl ']' { Frontend.LambdaQ.Abs.GSqrtSwpC $3 }
  | 'SQRT_SWAP_DAG' { Frontend.LambdaQ.Abs.GSqrtSwpDag }
  | 'SQRT_SWAP_DAG' '[' ListControl ']' { Frontend.LambdaQ.Abs.GSqrtSwpDagC $3 }
  | 'ISWAP' { Frontend.LambdaQ.Abs.GISwp }
  | 'ISWAP' '[' ListControl ']' { Frontend.LambdaQ.Abs.GISwpC $3 }
  | 'FSWAP' { Frontend.LambdaQ.Abs.GFSwp }
  | 'FSWAP' '[' ListControl ']' { Frontend.LambdaQ.Abs.GFSwpC $3 }
  | 'ROOT_SWAP' Integer { Frontend.LambdaQ.Abs.GSwpRt $2 }
  | 'ROOT_SWAP' Integer '[' ListControl ']' { Frontend.LambdaQ.Abs.GSwpRtC $2 $4 }
  | 'ROOT_SWAP_DAG' Integer { Frontend.LambdaQ.Abs.GSwpRtDag $2 }
  | 'ROOT_SWAP_DAG' Integer '[' ListControl ']' { Frontend.LambdaQ.Abs.GSwpRtDagC $2 $4 }
  | GateIdent { Frontend.LambdaQ.Abs.GGate $1 }
  | GateIdent '[' ListControl ']' { Frontend.LambdaQ.Abs.GGateC $1 $3 }

LetVariable :: { Frontend.LambdaQ.Abs.LetVariable }
LetVariable : Var { Frontend.LambdaQ.Abs.LetVar $1 }

ListLetVariable :: { [Frontend.LambdaQ.Abs.LetVariable] }
ListLetVariable
  : LetVariable { (:[]) $1 }
  | LetVariable ',' ListLetVariable { (:) $1 $3 }

LambdaVariable :: { Frontend.LambdaQ.Abs.LambdaVariable }
LambdaVariable : Var { Frontend.LambdaQ.Abs.LambdaVar $1 }

ListLambdaVariable :: { [Frontend.LambdaQ.Abs.LambdaVariable] }
ListLambdaVariable
  : {- empty -} { [] }
  | LambdaVariable ListLambdaVariable { (:) $1 $2 }

Tuple :: { Frontend.LambdaQ.Abs.Tuple }
Tuple
  : '(' Term ',' ListTerm ')' { Frontend.LambdaQ.Abs.Tup $2 $4 }

ListTerm :: { [Frontend.LambdaQ.Abs.Term] }
ListTerm : Term { (:[]) $1 } | Term ',' ListTerm { (:) $1 $3 }

Term3 :: { Frontend.LambdaQ.Abs.Term }
Term3
  : Var { Frontend.LambdaQ.Abs.TVar $1 }
  | Bit { Frontend.LambdaQ.Abs.TBit $1 }
  | Gate { Frontend.LambdaQ.Abs.TGate $1 }
  | Tuple { Frontend.LambdaQ.Abs.TTup $1 }
  | '()' { Frontend.LambdaQ.Abs.TUnit }
  | '(' Term ')' { $2 }

Term1 :: { Frontend.LambdaQ.Abs.Term }
Term1
  : 'if' Term 'then' Term 'else' Term { Frontend.LambdaQ.Abs.TIfEl $2 $4 $6 }
  | 'let' '{' LetVariable '=' Term '}' 'in' Term { Frontend.LambdaQ.Abs.TLet1 $3 $5 $8 }
  | 'let' '{' '(' LetVariable ',' ListLetVariable ')' '=' Term '}' 'in' Term { Frontend.LambdaQ.Abs.TLet2 $4 $6 $9 $12 }
  | 'case' Term 'of' CaseExpression ListCaseExpression { Frontend.LambdaQ.Abs.TCase $2 $4 $5 }
  | Lambda LambdaVariable ListLambdaVariable '->' Term { Frontend.LambdaQ.Abs.TLmbd $1 $2 $3 $5 }
  | Term2 '$' Term1 { Frontend.LambdaQ.Abs.TDollr $1 $3 }
  | Term2 { $1 }

Term2 :: { Frontend.LambdaQ.Abs.Term }
Term2
  : Term2 Term3 { Frontend.LambdaQ.Abs.TApp $1 $2 } | Term3 { $1 }

Term :: { Frontend.LambdaQ.Abs.Term }
Term : Term1 { $1 }

CaseExpression :: { Frontend.LambdaQ.Abs.CaseExpression }
CaseExpression
  : Term '->' Var { Frontend.LambdaQ.Abs.CaseExp $1 $3 }

ListCaseExpression :: { [Frontend.LambdaQ.Abs.CaseExpression] }
ListCaseExpression
  : CaseExpression { (:[]) $1 }
  | CaseExpression ListCaseExpression { (:) $1 $2 }

Arg :: { Frontend.LambdaQ.Abs.Arg }
Arg : Var { Frontend.LambdaQ.Abs.FunArg $1 }

ListArg :: { [Frontend.LambdaQ.Abs.Arg] }
ListArg : {- empty -} { [] } | Arg ListArg { (:) $1 $2 }

Function :: { Frontend.LambdaQ.Abs.Function }
Function
  : Var ListArg '=' Term { Frontend.LambdaQ.Abs.FunDef $1 $2 $4 }
  | Function ';' { $1 }

FunctionType :: { Frontend.LambdaQ.Abs.FunctionType }
FunctionType
  : Var '::' Type { Frontend.LambdaQ.Abs.TypeDef $1 $3 }
  | FunctionType ';' { $1 }

FunDec :: { Frontend.LambdaQ.Abs.FunDec }
FunDec
  : FunctionType ';' Function ';' { Frontend.LambdaQ.Abs.FunDecl $1 $3 }

ListFunDec :: { [Frontend.LambdaQ.Abs.FunDec] }
ListFunDec : {- empty -} { [] } | FunDec ListFunDec { (:) $1 $2 }

{

type Err = Either String

happyError :: [Token] -> Err a
happyError ts = Left $
  "syntax error at " ++ tokenPos ts ++
  case ts of
    []      -> []
    [Err _] -> " due to lexer error"
    t:_     -> " before `" ++ (prToken t) ++ "'"

myLexer :: String -> [Token]
myLexer = tokens

}

