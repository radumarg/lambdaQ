-----------------------------------------------------------------------------
Info file generated by Happy Version 1.20.0 from Frontend/LambdaQ/Par.y
-----------------------------------------------------------------------------

state 40 contains 1 reduce/reduce conflicts.

-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_pProgram -> Program                         (0)
	Double -> L_doubl                                  (1)
	Integer -> L_integ                                 (2)
	Bit -> L_Bit                                       (3)
	GateIdent -> L_GateIdent                           (4)
	Var -> L_Var                                       (5)
	Lambda -> L_Lambda                                 (6)
	Program -> ListFunctionDeclaration                 (7)
	Type3 -> 'Bit'                                     (8)
	Type3 -> 'Qbit'                                    (9)
	Type3 -> '()'                                      (10)
	Type3 -> '(' Type ')'                              (11)
	Type2 -> '!' Type3                                 (12)
	Type2 -> Type3                                     (13)
	Type1 -> Type2 '**' Integer                        (14)
	Type1 -> Type2 '*' Type1                           (15)
	Type1 -> Type2                                     (16)
	Type -> Type1 '->' Type                            (17)
	Type -> Type1                                      (18)
	Angle -> Double                                    (19)
	ControlState -> '@0'                               (20)
	ControlState -> '@1'                               (21)
	ControlState -> '@+'                               (22)
	ControlState -> '@-'                               (23)
	ControlState -> '@+i'                              (24)
	ControlState -> '@-i'                              (25)
	Gate -> 'H'                                        (26)
	Gate -> 'X'                                        (27)
	Gate -> 'Y'                                        (28)
	Gate -> 'Z'                                        (29)
	Gate -> 'ID'                                       (30)
	Gate -> 'ROOT_X' Integer                           (31)
	Gate -> 'ROOT_X_DAG' Integer                       (32)
	Gate -> 'ROOT_Y' Integer                           (33)
	Gate -> 'ROOT_Y_DAG' Integer                       (34)
	Gate -> 'ROOT_Z' Integer                           (35)
	Gate -> 'ROOT_Z_DAG' Integer                       (36)
	Gate -> 'S'                                        (37)
	Gate -> 'S_DAG'                                    (38)
	Gate -> 'T'                                        (39)
	Gate -> 'T_DAG'                                    (40)
	Gate -> 'SQRT_X'                                   (41)
	Gate -> 'SQRT_X_DAG'                               (42)
	Gate -> 'SQRT_Y'                                   (43)
	Gate -> 'SQRT_Y_DAG'                               (44)
	Gate -> 'RX' Angle                                 (45)
	Gate -> 'RY' Angle                                 (46)
	Gate -> 'RZ' Angle                                 (47)
	Gate -> 'U1' Angle                                 (48)
	Gate -> 'U2' '(' Angle ',' Angle ')'               (49)
	Gate -> 'U3' '(' Angle ',' Angle ',' Angle ')'     (50)
	Gate -> 'SWAP'                                     (51)
	Gate -> 'SQRT_SWAP'                                (52)
	Gate -> 'SQRT_SWAP_DAG'                            (53)
	Gate -> 'ISWAP'                                    (54)
	Gate -> 'FSWAP'                                    (55)
	Gate -> 'SWAP_THETA' Angle                         (56)
	Gate -> 'ROOT_SWAP' Integer                        (57)
	Gate -> 'ROOT_SWAP_DAG' Integer                    (58)
	Gate -> GateIdent                                  (59)
	LetVariable -> Var                                 (60)
	ListLetVariable ->                                 (61)
	ListLetVariable -> LetVariable                     (62)
	ListLetVariable -> LetVariable ',' ListLetVariable   (63)
	Tuple -> '(' Term ',' ListTerm ')'                 (64)
	Controls -> '[' Term ',' ListTerm ']'              (65)
	ListTerm -> Term                                   (66)
	ListTerm -> Term ',' ListTerm                      (67)
	ControlStates -> '[' ControlState ',' ListControlState ']'   (68)
	ListControlState -> ControlState                   (69)
	ListControlState -> ControlState ',' ListControlState   (70)
	Term3 -> Var                                       (71)
	Term3 -> Bit                                       (72)
	Term3 -> Tuple                                     (73)
	Term3 -> '()'                                      (74)
	Term3 -> '(' Term ')'                              (75)
	Term1 -> 'if' Term 'then' Term 'else' Term         (76)
	Term1 -> 'let' '{' '(' LetVariable ',' ListLetVariable ')' '=' Term '}' 'in' Term   (77)
	Term1 -> LetVariable ',' ListLetVariable '<-' Term ';' Term   (78)
	Term1 -> 'case' Term 'of' CaseExpression ListCaseExpression   (79)
	Term1 -> Lambda FunctionType '.' Term              (80)
	Term1 -> 'gate' Gate                               (81)
	Term1 -> 'with' Controls 'ctrl' ControlStates 'gate' Gate   (82)
	Term1 -> Term2 '$' Term1                           (83)
	Term1 -> Term2                                     (84)
	Term2 -> Term2 Term3                               (85)
	Term2 -> Term2 '.' Term3                           (86)
	Term2 -> Term3                                     (87)
	Term -> Term1                                      (88)
	CaseExpression -> Term '->' Var                    (89)
	ListCaseExpression -> CaseExpression               (90)
	ListCaseExpression -> CaseExpression ListCaseExpression   (91)
	Arg -> Var                                         (92)
	ListArg ->                                         (93)
	ListArg -> Arg ListArg                             (94)
	FunctionDefinition -> Var ListArg '=' Term         (95)
	FunctionDefinition -> FunctionDefinition ';'       (96)
	FunctionType -> Var '::' Type                      (97)
	FunctionType -> FunctionType ';'                   (98)
	FunctionDeclaration -> FunctionType ';' FunctionDefinition ';'   (99)
	ListFunctionDeclaration ->                         (100)
	ListFunctionDeclaration -> FunctionDeclaration ListFunctionDeclaration   (101)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	'!'            { PT _ (TS _ 1) }
	'$'            { PT _ (TS _ 2) }
	'('            { PT _ (TS _ 3) }
	'()'           { PT _ (TS _ 4) }
	')'            { PT _ (TS _ 5) }
	'*'            { PT _ (TS _ 6) }
	'**'           { PT _ (TS _ 7) }
	','            { PT _ (TS _ 8) }
	'->'           { PT _ (TS _ 9) }
	'.'            { PT _ (TS _ 10) }
	'::'           { PT _ (TS _ 11) }
	';'            { PT _ (TS _ 12) }
	'<-'           { PT _ (TS _ 13) }
	'='            { PT _ (TS _ 14) }
	'@+'           { PT _ (TS _ 15) }
	'@+i'          { PT _ (TS _ 16) }
	'@-'           { PT _ (TS _ 17) }
	'@-i'          { PT _ (TS _ 18) }
	'@0'           { PT _ (TS _ 19) }
	'@1'           { PT _ (TS _ 20) }
	'Bit'          { PT _ (TS _ 21) }
	'FSWAP'        { PT _ (TS _ 22) }
	'H'            { PT _ (TS _ 23) }
	'ID'           { PT _ (TS _ 24) }
	'ISWAP'        { PT _ (TS _ 25) }
	'Qbit'         { PT _ (TS _ 26) }
	'ROOT_SWAP'    { PT _ (TS _ 27) }
	'ROOT_SWAP_DAG'{ PT _ (TS _ 28) }
	'ROOT_X'       { PT _ (TS _ 29) }
	'ROOT_X_DAG'   { PT _ (TS _ 30) }
	'ROOT_Y'       { PT _ (TS _ 31) }
	'ROOT_Y_DAG'   { PT _ (TS _ 32) }
	'ROOT_Z'       { PT _ (TS _ 33) }
	'ROOT_Z_DAG'   { PT _ (TS _ 34) }
	'RX'           { PT _ (TS _ 35) }
	'RY'           { PT _ (TS _ 36) }
	'RZ'           { PT _ (TS _ 37) }
	'S'            { PT _ (TS _ 38) }
	'SQRT_SWAP'    { PT _ (TS _ 39) }
	'SQRT_SWAP_DAG'{ PT _ (TS _ 40) }
	'SQRT_X'       { PT _ (TS _ 41) }
	'SQRT_X_DAG'   { PT _ (TS _ 42) }
	'SQRT_Y'       { PT _ (TS _ 43) }
	'SQRT_Y_DAG'   { PT _ (TS _ 44) }
	'SWAP'         { PT _ (TS _ 45) }
	'SWAP_THETA'   { PT _ (TS _ 46) }
	'S_DAG'        { PT _ (TS _ 47) }
	'T'            { PT _ (TS _ 48) }
	'T_DAG'        { PT _ (TS _ 49) }
	'U1'           { PT _ (TS _ 50) }
	'U2'           { PT _ (TS _ 51) }
	'U3'           { PT _ (TS _ 52) }
	'X'            { PT _ (TS _ 53) }
	'Y'            { PT _ (TS _ 54) }
	'Z'            { PT _ (TS _ 55) }
	'['            { PT _ (TS _ 56) }
	']'            { PT _ (TS _ 57) }
	'case'         { PT _ (TS _ 58) }
	'ctrl'         { PT _ (TS _ 59) }
	'else'         { PT _ (TS _ 60) }
	'gate'         { PT _ (TS _ 61) }
	'if'           { PT _ (TS _ 62) }
	'in'           { PT _ (TS _ 63) }
	'let'          { PT _ (TS _ 64) }
	'of'           { PT _ (TS _ 65) }
	'then'         { PT _ (TS _ 66) }
	'with'         { PT _ (TS _ 67) }
	'{'            { PT _ (TS _ 68) }
	'}'            { PT _ (TS _ 69) }
	L_doubl        { PT _ (TD $$) }
	L_integ        { PT _ (TI $$) }
	L_Bit          { PT _ (T_Bit _) }
	L_GateIdent    { PT _ (T_GateIdent _) }
	L_Var          { PT _ (T_Var _) }
	L_Lambda       { PT _ (T_Lambda $$) }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_pProgram rule  0
	Double          rule  1
	Integer         rule  2
	Bit             rule  3
	GateIdent       rule  4
	Var             rule  5
	Lambda          rule  6
	Program         rule  7
	Type3           rules 8, 9, 10, 11
	Type2           rules 12, 13
	Type1           rules 14, 15, 16
	Type            rules 17, 18
	Angle           rule  19
	ControlState    rules 20, 21, 22, 23, 24, 25
	Gate            rules 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59
	LetVariable     rule  60
	ListLetVariable rules 61, 62, 63
	Tuple           rule  64
	Controls        rule  65
	ListTerm        rules 66, 67
	ControlStates   rule  68
	ListControlState rules 69, 70
	Term3           rules 71, 72, 73, 74, 75
	Term1           rules 76, 77, 78, 79, 80, 81, 82, 83, 84
	Term2           rules 85, 86, 87
	Term            rule  88
	CaseExpression  rule  89
	ListCaseExpression rules 90, 91
	Arg             rule  92
	ListArg         rules 93, 94
	FunctionDefinition rules 95, 96
	FunctionType    rules 97, 98
	FunctionDeclaration rule  99
	ListFunctionDeclaration rules 100, 101

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0

	%start_pProgram -> . Program                        (rule 0)

	L_Var          shift, and enter state 8
	%eof           reduce using rule 100

	Var            goto state 3
	Program        goto state 4
	FunctionType   goto state 5
	FunctionDeclarationgoto state 6
	ListFunctionDeclarationgoto state 7

State 1

	Double -> . L_doubl                                 (rule 1)

	L_doubl        shift, and enter state 2


State 2

	Double -> L_doubl .                                 (rule 1)

	')'            reduce using rule 1
	','            reduce using rule 1
	'->'           reduce using rule 1
	';'            reduce using rule 1
	']'            reduce using rule 1
	'else'         reduce using rule 1
	'of'           reduce using rule 1
	'then'         reduce using rule 1
	'}'            reduce using rule 1


State 3

	FunctionType -> Var . '::' Type                     (rule 97)

	'::'           shift, and enter state 11


State 4

	%start_pProgram -> Program .                        (rule 0)

	%eof           accept


State 5

	FunctionType -> FunctionType . ';'                  (rule 98)
	FunctionDeclaration -> FunctionType . ';' FunctionDefinition ';'    (rule 99)

	';'            shift, and enter state 10


State 6

	ListFunctionDeclaration -> FunctionDeclaration . ListFunctionDeclaration    (rule 101)

	L_Var          shift, and enter state 8
	%eof           reduce using rule 100

	Var            goto state 3
	FunctionType   goto state 5
	FunctionDeclarationgoto state 6
	ListFunctionDeclarationgoto state 9

State 7

	Program -> ListFunctionDeclaration .                (rule 7)

	%eof           reduce using rule 7


State 8

	Var -> L_Var .                                      (rule 5)

	'$'            reduce using rule 5
	'('            reduce using rule 5
	'()'           reduce using rule 5
	')'            reduce using rule 5
	','            reduce using rule 5
	'->'           reduce using rule 5
	'.'            reduce using rule 5
	'::'           reduce using rule 5
	';'            reduce using rule 5
	'<-'           reduce using rule 5
	'='            reduce using rule 5
	']'            reduce using rule 5
	'case'         reduce using rule 5
	'else'         reduce using rule 5
	'gate'         reduce using rule 5
	'if'           reduce using rule 5
	'let'          reduce using rule 5
	'of'           reduce using rule 5
	'then'         reduce using rule 5
	'with'         reduce using rule 5
	'}'            reduce using rule 5
	L_Bit          reduce using rule 5
	L_Var          reduce using rule 5
	L_Lambda       reduce using rule 5


State 9

	ListFunctionDeclaration -> FunctionDeclaration ListFunctionDeclaration .    (rule 101)

	%eof           reduce using rule 101


State 10

	FunctionType -> FunctionType ';' .                  (rule 98)
	FunctionDeclaration -> FunctionType ';' . FunctionDefinition ';'    (rule 99)

	';'            reduce using rule 98
	L_Var          shift, and enter state 8

	Var            goto state 21
	FunctionDefinitiongoto state 22

State 11

	FunctionType -> Var '::' . Type                     (rule 97)

	'!'            shift, and enter state 16
	'('            shift, and enter state 17
	'()'           shift, and enter state 18
	'Bit'          shift, and enter state 19
	'Qbit'         shift, and enter state 20

	Type3          goto state 12
	Type2          goto state 13
	Type1          goto state 14
	Type           goto state 15

State 12

	Type2 -> Type3 .                                    (rule 13)

	')'            reduce using rule 13
	'*'            reduce using rule 13
	'**'           reduce using rule 13
	'->'           reduce using rule 13
	'.'            reduce using rule 13
	';'            reduce using rule 13


State 13

	Type1 -> Type2 . '**' Integer                       (rule 14)
	Type1 -> Type2 . '*' Type1                          (rule 15)
	Type1 -> Type2 .                                    (rule 16)

	')'            reduce using rule 16
	'*'            shift, and enter state 30
	'**'           shift, and enter state 31
	'->'           reduce using rule 16
	'.'            reduce using rule 16
	';'            reduce using rule 16


State 14

	Type -> Type1 . '->' Type                           (rule 17)
	Type -> Type1 .                                     (rule 18)

	')'            reduce using rule 18
	'->'           shift, and enter state 29
	'.'            reduce using rule 18
	';'            reduce using rule 18


State 15

	FunctionType -> Var '::' Type .                     (rule 97)

	'.'            reduce using rule 97
	';'            reduce using rule 97


State 16

	Type2 -> '!' . Type3                                (rule 12)

	'('            shift, and enter state 17
	'()'           shift, and enter state 18
	'Bit'          shift, and enter state 19
	'Qbit'         shift, and enter state 20

	Type3          goto state 28

State 17

	Type3 -> '(' . Type ')'                             (rule 11)

	'!'            shift, and enter state 16
	'('            shift, and enter state 17
	'()'           shift, and enter state 18
	'Bit'          shift, and enter state 19
	'Qbit'         shift, and enter state 20

	Type3          goto state 12
	Type2          goto state 13
	Type1          goto state 14
	Type           goto state 27

State 18

	Type3 -> '()' .                                     (rule 10)

	')'            reduce using rule 10
	'*'            reduce using rule 10
	'**'           reduce using rule 10
	'->'           reduce using rule 10
	'.'            reduce using rule 10
	';'            reduce using rule 10


State 19

	Type3 -> 'Bit' .                                    (rule 8)

	')'            reduce using rule 8
	'*'            reduce using rule 8
	'**'           reduce using rule 8
	'->'           reduce using rule 8
	'.'            reduce using rule 8
	';'            reduce using rule 8


State 20

	Type3 -> 'Qbit' .                                   (rule 9)

	')'            reduce using rule 9
	'*'            reduce using rule 9
	'**'           reduce using rule 9
	'->'           reduce using rule 9
	'.'            reduce using rule 9
	';'            reduce using rule 9


State 21

	FunctionDefinition -> Var . ListArg '=' Term        (rule 95)

	'='            reduce using rule 93
	L_Var          shift, and enter state 8

	Var            goto state 24
	Arg            goto state 25
	ListArg        goto state 26

State 22

	FunctionDefinition -> FunctionDefinition . ';'      (rule 96)
	FunctionDeclaration -> FunctionType ';' FunctionDefinition . ';'    (rule 99)

	';'            shift, and enter state 23


State 23

	FunctionDefinition -> FunctionDefinition ';' .      (rule 96)
	FunctionDeclaration -> FunctionType ';' FunctionDefinition ';' .    (rule 99)

	';'            reduce using rule 96
	L_Var          reduce using rule 99
	%eof           reduce using rule 99


State 24

	Arg -> Var .                                        (rule 92)

	'='            reduce using rule 92
	L_Var          reduce using rule 92


State 25

	ListArg -> Arg . ListArg                            (rule 94)

	'='            reduce using rule 93
	L_Var          shift, and enter state 8

	Var            goto state 24
	Arg            goto state 25
	ListArg        goto state 38

State 26

	FunctionDefinition -> Var ListArg . '=' Term        (rule 95)

	'='            shift, and enter state 37


State 27

	Type3 -> '(' Type . ')'                             (rule 11)

	')'            shift, and enter state 36


State 28

	Type2 -> '!' Type3 .                                (rule 12)

	')'            reduce using rule 12
	'*'            reduce using rule 12
	'**'           reduce using rule 12
	'->'           reduce using rule 12
	'.'            reduce using rule 12
	';'            reduce using rule 12


State 29

	Type -> Type1 '->' . Type                           (rule 17)

	'!'            shift, and enter state 16
	'('            shift, and enter state 17
	'()'           shift, and enter state 18
	'Bit'          shift, and enter state 19
	'Qbit'         shift, and enter state 20

	Type3          goto state 12
	Type2          goto state 13
	Type1          goto state 14
	Type           goto state 35

State 30

	Type1 -> Type2 '*' . Type1                          (rule 15)

	'!'            shift, and enter state 16
	'('            shift, and enter state 17
	'()'           shift, and enter state 18
	'Bit'          shift, and enter state 19
	'Qbit'         shift, and enter state 20

	Type3          goto state 12
	Type2          goto state 13
	Type1          goto state 34

State 31

	Type1 -> Type2 '**' . Integer                       (rule 14)

	L_integ        shift, and enter state 33

	Integer        goto state 32

State 32

	Type1 -> Type2 '**' Integer .                       (rule 14)

	')'            reduce using rule 14
	'->'           reduce using rule 14
	'.'            reduce using rule 14
	';'            reduce using rule 14


State 33

	Integer -> L_integ .                                (rule 2)

	')'            reduce using rule 2
	','            reduce using rule 2
	'->'           reduce using rule 2
	'.'            reduce using rule 2
	';'            reduce using rule 2
	']'            reduce using rule 2
	'else'         reduce using rule 2
	'of'           reduce using rule 2
	'then'         reduce using rule 2
	'}'            reduce using rule 2


State 34

	Type1 -> Type2 '*' Type1 .                          (rule 15)

	')'            reduce using rule 15
	'->'           reduce using rule 15
	'.'            reduce using rule 15
	';'            reduce using rule 15


State 35

	Type -> Type1 '->' Type .                           (rule 17)

	')'            reduce using rule 17
	'.'            reduce using rule 17
	';'            reduce using rule 17


State 36

	Type3 -> '(' Type ')' .                             (rule 11)

	')'            reduce using rule 11
	'*'            reduce using rule 11
	'**'           reduce using rule 11
	'->'           reduce using rule 11
	'.'            reduce using rule 11
	';'            reduce using rule 11


State 37

	FunctionDefinition -> Var ListArg '=' . Term        (rule 95)

	'('            shift, and enter state 48
	'()'           shift, and enter state 49
	'case'         shift, and enter state 50
	'gate'         shift, and enter state 51
	'if'           shift, and enter state 52
	'let'          shift, and enter state 53
	'with'         shift, and enter state 54
	L_Bit          shift, and enter state 55
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 56

	Bit            goto state 39
	Var            goto state 40
	Lambda         goto state 41
	LetVariable    goto state 42
	Tuple          goto state 43
	Term3          goto state 44
	Term1          goto state 45
	Term2          goto state 46
	Term           goto state 47

State 38

	ListArg -> Arg ListArg .                            (rule 94)

	'='            reduce using rule 94


State 39

	Term3 -> Bit .                                      (rule 72)

	'$'            reduce using rule 72
	'('            reduce using rule 72
	'()'           reduce using rule 72
	')'            reduce using rule 72
	','            reduce using rule 72
	'->'           reduce using rule 72
	'.'            reduce using rule 72
	';'            reduce using rule 72
	']'            reduce using rule 72
	'else'         reduce using rule 72
	'of'           reduce using rule 72
	'then'         reduce using rule 72
	'}'            reduce using rule 72
	L_Bit          reduce using rule 72
	L_Var          reduce using rule 72


State 40

	LetVariable -> Var .                                (rule 60)
	Term3 -> Var .                                      (rule 71)

	'$'            reduce using rule 71
	'('            reduce using rule 71
	'()'           reduce using rule 71
	')'            reduce using rule 71
	','            reduce using rule 71
			(reduce using rule 60)

	'->'           reduce using rule 71
	'.'            reduce using rule 71
	';'            reduce using rule 71
	']'            reduce using rule 71
	'else'         reduce using rule 71
	'of'           reduce using rule 71
	'then'         reduce using rule 71
	'}'            reduce using rule 71
	L_Bit          reduce using rule 71
	L_Var          reduce using rule 71


State 41

	Term1 -> Lambda . FunctionType '.' Term             (rule 80)

	L_Var          shift, and enter state 8

	Var            goto state 3
	FunctionType   goto state 104

State 42

	Term1 -> LetVariable . ',' ListLetVariable '<-' Term ';' Term    (rule 78)

	','            shift, and enter state 103


State 43

	Term3 -> Tuple .                                    (rule 73)

	'$'            reduce using rule 73
	'('            reduce using rule 73
	'()'           reduce using rule 73
	')'            reduce using rule 73
	','            reduce using rule 73
	'->'           reduce using rule 73
	'.'            reduce using rule 73
	';'            reduce using rule 73
	']'            reduce using rule 73
	'else'         reduce using rule 73
	'of'           reduce using rule 73
	'then'         reduce using rule 73
	'}'            reduce using rule 73
	L_Bit          reduce using rule 73
	L_Var          reduce using rule 73


State 44

	Term2 -> Term3 .                                    (rule 87)

	'$'            reduce using rule 87
	'('            reduce using rule 87
	'()'           reduce using rule 87
	')'            reduce using rule 87
	','            reduce using rule 87
	'->'           reduce using rule 87
	'.'            reduce using rule 87
	';'            reduce using rule 87
	']'            reduce using rule 87
	'else'         reduce using rule 87
	'of'           reduce using rule 87
	'then'         reduce using rule 87
	'}'            reduce using rule 87
	L_Bit          reduce using rule 87
	L_Var          reduce using rule 87


State 45

	Term -> Term1 .                                     (rule 88)

	')'            reduce using rule 88
	','            reduce using rule 88
	'->'           reduce using rule 88
	';'            reduce using rule 88
	']'            reduce using rule 88
	'else'         reduce using rule 88
	'of'           reduce using rule 88
	'then'         reduce using rule 88
	'}'            reduce using rule 88


State 46

	Term1 -> Term2 . '$' Term1                          (rule 83)
	Term1 -> Term2 .                                    (rule 84)
	Term2 -> Term2 . Term3                              (rule 85)
	Term2 -> Term2 . '.' Term3                          (rule 86)

	'$'            shift, and enter state 101
	'('            shift, and enter state 48
	'()'           shift, and enter state 49
	')'            reduce using rule 84
	','            reduce using rule 84
	'->'           reduce using rule 84
	'.'            shift, and enter state 102
	';'            reduce using rule 84
	']'            reduce using rule 84
	'else'         reduce using rule 84
	'of'           reduce using rule 84
	'then'         reduce using rule 84
	'}'            reduce using rule 84
	L_Bit          shift, and enter state 55
	L_Var          shift, and enter state 8

	Bit            goto state 39
	Var            goto state 99
	Tuple          goto state 43
	Term3          goto state 100

State 47

	FunctionDefinition -> Var ListArg '=' Term .        (rule 95)

	';'            reduce using rule 95


State 48

	Tuple -> '(' . Term ',' ListTerm ')'                (rule 64)
	Term3 -> '(' . Term ')'                             (rule 75)

	'('            shift, and enter state 48
	'()'           shift, and enter state 49
	'case'         shift, and enter state 50
	'gate'         shift, and enter state 51
	'if'           shift, and enter state 52
	'let'          shift, and enter state 53
	'with'         shift, and enter state 54
	L_Bit          shift, and enter state 55
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 56

	Bit            goto state 39
	Var            goto state 40
	Lambda         goto state 41
	LetVariable    goto state 42
	Tuple          goto state 43
	Term3          goto state 44
	Term1          goto state 45
	Term2          goto state 46
	Term           goto state 98

State 49

	Term3 -> '()' .                                     (rule 74)

	'$'            reduce using rule 74
	'('            reduce using rule 74
	'()'           reduce using rule 74
	')'            reduce using rule 74
	','            reduce using rule 74
	'->'           reduce using rule 74
	'.'            reduce using rule 74
	';'            reduce using rule 74
	']'            reduce using rule 74
	'else'         reduce using rule 74
	'of'           reduce using rule 74
	'then'         reduce using rule 74
	'}'            reduce using rule 74
	L_Bit          reduce using rule 74
	L_Var          reduce using rule 74


State 50

	Term1 -> 'case' . Term 'of' CaseExpression ListCaseExpression    (rule 79)

	'('            shift, and enter state 48
	'()'           shift, and enter state 49
	'case'         shift, and enter state 50
	'gate'         shift, and enter state 51
	'if'           shift, and enter state 52
	'let'          shift, and enter state 53
	'with'         shift, and enter state 54
	L_Bit          shift, and enter state 55
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 56

	Bit            goto state 39
	Var            goto state 40
	Lambda         goto state 41
	LetVariable    goto state 42
	Tuple          goto state 43
	Term3          goto state 44
	Term1          goto state 45
	Term2          goto state 46
	Term           goto state 97

State 51

	Term1 -> 'gate' . Gate                              (rule 81)

	'FSWAP'        shift, and enter state 63
	'H'            shift, and enter state 64
	'ID'           shift, and enter state 65
	'ISWAP'        shift, and enter state 66
	'ROOT_SWAP'    shift, and enter state 67
	'ROOT_SWAP_DAG'shift, and enter state 68
	'ROOT_X'       shift, and enter state 69
	'ROOT_X_DAG'   shift, and enter state 70
	'ROOT_Y'       shift, and enter state 71
	'ROOT_Y_DAG'   shift, and enter state 72
	'ROOT_Z'       shift, and enter state 73
	'ROOT_Z_DAG'   shift, and enter state 74
	'RX'           shift, and enter state 75
	'RY'           shift, and enter state 76
	'RZ'           shift, and enter state 77
	'S'            shift, and enter state 78
	'SQRT_SWAP'    shift, and enter state 79
	'SQRT_SWAP_DAG'shift, and enter state 80
	'SQRT_X'       shift, and enter state 81
	'SQRT_X_DAG'   shift, and enter state 82
	'SQRT_Y'       shift, and enter state 83
	'SQRT_Y_DAG'   shift, and enter state 84
	'SWAP'         shift, and enter state 85
	'SWAP_THETA'   shift, and enter state 86
	'S_DAG'        shift, and enter state 87
	'T'            shift, and enter state 88
	'T_DAG'        shift, and enter state 89
	'U1'           shift, and enter state 90
	'U2'           shift, and enter state 91
	'U3'           shift, and enter state 92
	'X'            shift, and enter state 93
	'Y'            shift, and enter state 94
	'Z'            shift, and enter state 95
	L_GateIdent    shift, and enter state 96

	GateIdent      goto state 61
	Gate           goto state 62

State 52

	Term1 -> 'if' . Term 'then' Term 'else' Term        (rule 76)

	'('            shift, and enter state 48
	'()'           shift, and enter state 49
	'case'         shift, and enter state 50
	'gate'         shift, and enter state 51
	'if'           shift, and enter state 52
	'let'          shift, and enter state 53
	'with'         shift, and enter state 54
	L_Bit          shift, and enter state 55
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 56

	Bit            goto state 39
	Var            goto state 40
	Lambda         goto state 41
	LetVariable    goto state 42
	Tuple          goto state 43
	Term3          goto state 44
	Term1          goto state 45
	Term2          goto state 46
	Term           goto state 60

State 53

	Term1 -> 'let' . '{' '(' LetVariable ',' ListLetVariable ')' '=' Term '}' 'in' Term    (rule 77)

	'{'            shift, and enter state 59


State 54

	Term1 -> 'with' . Controls 'ctrl' ControlStates 'gate' Gate    (rule 82)

	'['            shift, and enter state 58

	Controls       goto state 57

State 55

	Bit -> L_Bit .                                      (rule 3)

	'$'            reduce using rule 3
	'('            reduce using rule 3
	'()'           reduce using rule 3
	')'            reduce using rule 3
	','            reduce using rule 3
	'->'           reduce using rule 3
	'.'            reduce using rule 3
	';'            reduce using rule 3
	']'            reduce using rule 3
	'else'         reduce using rule 3
	'of'           reduce using rule 3
	'then'         reduce using rule 3
	'}'            reduce using rule 3
	L_Bit          reduce using rule 3
	L_Var          reduce using rule 3


State 56

	Lambda -> L_Lambda .                                (rule 6)

	L_Var          reduce using rule 6


State 57

	Term1 -> 'with' Controls . 'ctrl' ControlStates 'gate' Gate    (rule 82)

	'ctrl'         shift, and enter state 134


State 58

	Controls -> '[' . Term ',' ListTerm ']'             (rule 65)

	'('            shift, and enter state 48
	'()'           shift, and enter state 49
	'case'         shift, and enter state 50
	'gate'         shift, and enter state 51
	'if'           shift, and enter state 52
	'let'          shift, and enter state 53
	'with'         shift, and enter state 54
	L_Bit          shift, and enter state 55
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 56

	Bit            goto state 39
	Var            goto state 40
	Lambda         goto state 41
	LetVariable    goto state 42
	Tuple          goto state 43
	Term3          goto state 44
	Term1          goto state 45
	Term2          goto state 46
	Term           goto state 133

State 59

	Term1 -> 'let' '{' . '(' LetVariable ',' ListLetVariable ')' '=' Term '}' 'in' Term    (rule 77)

	'('            shift, and enter state 132


State 60

	Term1 -> 'if' Term . 'then' Term 'else' Term        (rule 76)

	'then'         shift, and enter state 131


State 61

	Gate -> GateIdent .                                 (rule 59)

	')'            reduce using rule 59
	','            reduce using rule 59
	'->'           reduce using rule 59
	';'            reduce using rule 59
	']'            reduce using rule 59
	'else'         reduce using rule 59
	'of'           reduce using rule 59
	'then'         reduce using rule 59
	'}'            reduce using rule 59


State 62

	Term1 -> 'gate' Gate .                              (rule 81)

	')'            reduce using rule 81
	','            reduce using rule 81
	'->'           reduce using rule 81
	';'            reduce using rule 81
	']'            reduce using rule 81
	'else'         reduce using rule 81
	'of'           reduce using rule 81
	'then'         reduce using rule 81
	'}'            reduce using rule 81


State 63

	Gate -> 'FSWAP' .                                   (rule 55)

	')'            reduce using rule 55
	','            reduce using rule 55
	'->'           reduce using rule 55
	';'            reduce using rule 55
	']'            reduce using rule 55
	'else'         reduce using rule 55
	'of'           reduce using rule 55
	'then'         reduce using rule 55
	'}'            reduce using rule 55


State 64

	Gate -> 'H' .                                       (rule 26)

	')'            reduce using rule 26
	','            reduce using rule 26
	'->'           reduce using rule 26
	';'            reduce using rule 26
	']'            reduce using rule 26
	'else'         reduce using rule 26
	'of'           reduce using rule 26
	'then'         reduce using rule 26
	'}'            reduce using rule 26


State 65

	Gate -> 'ID' .                                      (rule 30)

	')'            reduce using rule 30
	','            reduce using rule 30
	'->'           reduce using rule 30
	';'            reduce using rule 30
	']'            reduce using rule 30
	'else'         reduce using rule 30
	'of'           reduce using rule 30
	'then'         reduce using rule 30
	'}'            reduce using rule 30


State 66

	Gate -> 'ISWAP' .                                   (rule 54)

	')'            reduce using rule 54
	','            reduce using rule 54
	'->'           reduce using rule 54
	';'            reduce using rule 54
	']'            reduce using rule 54
	'else'         reduce using rule 54
	'of'           reduce using rule 54
	'then'         reduce using rule 54
	'}'            reduce using rule 54


State 67

	Gate -> 'ROOT_SWAP' . Integer                       (rule 57)

	L_integ        shift, and enter state 33

	Integer        goto state 130

State 68

	Gate -> 'ROOT_SWAP_DAG' . Integer                   (rule 58)

	L_integ        shift, and enter state 33

	Integer        goto state 129

State 69

	Gate -> 'ROOT_X' . Integer                          (rule 31)

	L_integ        shift, and enter state 33

	Integer        goto state 128

State 70

	Gate -> 'ROOT_X_DAG' . Integer                      (rule 32)

	L_integ        shift, and enter state 33

	Integer        goto state 127

State 71

	Gate -> 'ROOT_Y' . Integer                          (rule 33)

	L_integ        shift, and enter state 33

	Integer        goto state 126

State 72

	Gate -> 'ROOT_Y_DAG' . Integer                      (rule 34)

	L_integ        shift, and enter state 33

	Integer        goto state 125

State 73

	Gate -> 'ROOT_Z' . Integer                          (rule 35)

	L_integ        shift, and enter state 33

	Integer        goto state 124

State 74

	Gate -> 'ROOT_Z_DAG' . Integer                      (rule 36)

	L_integ        shift, and enter state 33

	Integer        goto state 123

State 75

	Gate -> 'RX' . Angle                                (rule 45)

	L_doubl        shift, and enter state 2

	Double         goto state 117
	Angle          goto state 122

State 76

	Gate -> 'RY' . Angle                                (rule 46)

	L_doubl        shift, and enter state 2

	Double         goto state 117
	Angle          goto state 121

State 77

	Gate -> 'RZ' . Angle                                (rule 47)

	L_doubl        shift, and enter state 2

	Double         goto state 117
	Angle          goto state 120

State 78

	Gate -> 'S' .                                       (rule 37)

	')'            reduce using rule 37
	','            reduce using rule 37
	'->'           reduce using rule 37
	';'            reduce using rule 37
	']'            reduce using rule 37
	'else'         reduce using rule 37
	'of'           reduce using rule 37
	'then'         reduce using rule 37
	'}'            reduce using rule 37


State 79

	Gate -> 'SQRT_SWAP' .                               (rule 52)

	')'            reduce using rule 52
	','            reduce using rule 52
	'->'           reduce using rule 52
	';'            reduce using rule 52
	']'            reduce using rule 52
	'else'         reduce using rule 52
	'of'           reduce using rule 52
	'then'         reduce using rule 52
	'}'            reduce using rule 52


State 80

	Gate -> 'SQRT_SWAP_DAG' .                           (rule 53)

	')'            reduce using rule 53
	','            reduce using rule 53
	'->'           reduce using rule 53
	';'            reduce using rule 53
	']'            reduce using rule 53
	'else'         reduce using rule 53
	'of'           reduce using rule 53
	'then'         reduce using rule 53
	'}'            reduce using rule 53


State 81

	Gate -> 'SQRT_X' .                                  (rule 41)

	')'            reduce using rule 41
	','            reduce using rule 41
	'->'           reduce using rule 41
	';'            reduce using rule 41
	']'            reduce using rule 41
	'else'         reduce using rule 41
	'of'           reduce using rule 41
	'then'         reduce using rule 41
	'}'            reduce using rule 41


State 82

	Gate -> 'SQRT_X_DAG' .                              (rule 42)

	')'            reduce using rule 42
	','            reduce using rule 42
	'->'           reduce using rule 42
	';'            reduce using rule 42
	']'            reduce using rule 42
	'else'         reduce using rule 42
	'of'           reduce using rule 42
	'then'         reduce using rule 42
	'}'            reduce using rule 42


State 83

	Gate -> 'SQRT_Y' .                                  (rule 43)

	')'            reduce using rule 43
	','            reduce using rule 43
	'->'           reduce using rule 43
	';'            reduce using rule 43
	']'            reduce using rule 43
	'else'         reduce using rule 43
	'of'           reduce using rule 43
	'then'         reduce using rule 43
	'}'            reduce using rule 43


State 84

	Gate -> 'SQRT_Y_DAG' .                              (rule 44)

	')'            reduce using rule 44
	','            reduce using rule 44
	'->'           reduce using rule 44
	';'            reduce using rule 44
	']'            reduce using rule 44
	'else'         reduce using rule 44
	'of'           reduce using rule 44
	'then'         reduce using rule 44
	'}'            reduce using rule 44


State 85

	Gate -> 'SWAP' .                                    (rule 51)

	')'            reduce using rule 51
	','            reduce using rule 51
	'->'           reduce using rule 51
	';'            reduce using rule 51
	']'            reduce using rule 51
	'else'         reduce using rule 51
	'of'           reduce using rule 51
	'then'         reduce using rule 51
	'}'            reduce using rule 51


State 86

	Gate -> 'SWAP_THETA' . Angle                        (rule 56)

	L_doubl        shift, and enter state 2

	Double         goto state 117
	Angle          goto state 119

State 87

	Gate -> 'S_DAG' .                                   (rule 38)

	')'            reduce using rule 38
	','            reduce using rule 38
	'->'           reduce using rule 38
	';'            reduce using rule 38
	']'            reduce using rule 38
	'else'         reduce using rule 38
	'of'           reduce using rule 38
	'then'         reduce using rule 38
	'}'            reduce using rule 38


State 88

	Gate -> 'T' .                                       (rule 39)

	')'            reduce using rule 39
	','            reduce using rule 39
	'->'           reduce using rule 39
	';'            reduce using rule 39
	']'            reduce using rule 39
	'else'         reduce using rule 39
	'of'           reduce using rule 39
	'then'         reduce using rule 39
	'}'            reduce using rule 39


State 89

	Gate -> 'T_DAG' .                                   (rule 40)

	')'            reduce using rule 40
	','            reduce using rule 40
	'->'           reduce using rule 40
	';'            reduce using rule 40
	']'            reduce using rule 40
	'else'         reduce using rule 40
	'of'           reduce using rule 40
	'then'         reduce using rule 40
	'}'            reduce using rule 40


State 90

	Gate -> 'U1' . Angle                                (rule 48)

	L_doubl        shift, and enter state 2

	Double         goto state 117
	Angle          goto state 118

State 91

	Gate -> 'U2' . '(' Angle ',' Angle ')'              (rule 49)

	'('            shift, and enter state 116


State 92

	Gate -> 'U3' . '(' Angle ',' Angle ',' Angle ')'    (rule 50)

	'('            shift, and enter state 115


State 93

	Gate -> 'X' .                                       (rule 27)

	')'            reduce using rule 27
	','            reduce using rule 27
	'->'           reduce using rule 27
	';'            reduce using rule 27
	']'            reduce using rule 27
	'else'         reduce using rule 27
	'of'           reduce using rule 27
	'then'         reduce using rule 27
	'}'            reduce using rule 27


State 94

	Gate -> 'Y' .                                       (rule 28)

	')'            reduce using rule 28
	','            reduce using rule 28
	'->'           reduce using rule 28
	';'            reduce using rule 28
	']'            reduce using rule 28
	'else'         reduce using rule 28
	'of'           reduce using rule 28
	'then'         reduce using rule 28
	'}'            reduce using rule 28


State 95

	Gate -> 'Z' .                                       (rule 29)

	')'            reduce using rule 29
	','            reduce using rule 29
	'->'           reduce using rule 29
	';'            reduce using rule 29
	']'            reduce using rule 29
	'else'         reduce using rule 29
	'of'           reduce using rule 29
	'then'         reduce using rule 29
	'}'            reduce using rule 29


State 96

	GateIdent -> L_GateIdent .                          (rule 4)

	')'            reduce using rule 4
	','            reduce using rule 4
	'->'           reduce using rule 4
	';'            reduce using rule 4
	']'            reduce using rule 4
	'else'         reduce using rule 4
	'of'           reduce using rule 4
	'then'         reduce using rule 4
	'}'            reduce using rule 4


State 97

	Term1 -> 'case' Term . 'of' CaseExpression ListCaseExpression    (rule 79)

	'of'           shift, and enter state 114


State 98

	Tuple -> '(' Term . ',' ListTerm ')'                (rule 64)
	Term3 -> '(' Term . ')'                             (rule 75)

	')'            shift, and enter state 112
	','            shift, and enter state 113


State 99

	Term3 -> Var .                                      (rule 71)

	'$'            reduce using rule 71
	'('            reduce using rule 71
	'()'           reduce using rule 71
	')'            reduce using rule 71
	','            reduce using rule 71
	'->'           reduce using rule 71
	'.'            reduce using rule 71
	';'            reduce using rule 71
	']'            reduce using rule 71
	'else'         reduce using rule 71
	'of'           reduce using rule 71
	'then'         reduce using rule 71
	'}'            reduce using rule 71
	L_Bit          reduce using rule 71
	L_Var          reduce using rule 71


State 100

	Term2 -> Term2 Term3 .                              (rule 85)

	'$'            reduce using rule 85
	'('            reduce using rule 85
	'()'           reduce using rule 85
	')'            reduce using rule 85
	','            reduce using rule 85
	'->'           reduce using rule 85
	'.'            reduce using rule 85
	';'            reduce using rule 85
	']'            reduce using rule 85
	'else'         reduce using rule 85
	'of'           reduce using rule 85
	'then'         reduce using rule 85
	'}'            reduce using rule 85
	L_Bit          reduce using rule 85
	L_Var          reduce using rule 85


State 101

	Term1 -> Term2 '$' . Term1                          (rule 83)

	'('            shift, and enter state 48
	'()'           shift, and enter state 49
	'case'         shift, and enter state 50
	'gate'         shift, and enter state 51
	'if'           shift, and enter state 52
	'let'          shift, and enter state 53
	'with'         shift, and enter state 54
	L_Bit          shift, and enter state 55
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 56

	Bit            goto state 39
	Var            goto state 40
	Lambda         goto state 41
	LetVariable    goto state 42
	Tuple          goto state 43
	Term3          goto state 44
	Term1          goto state 111
	Term2          goto state 46

State 102

	Term2 -> Term2 '.' . Term3                          (rule 86)

	'('            shift, and enter state 48
	'()'           shift, and enter state 49
	L_Bit          shift, and enter state 55
	L_Var          shift, and enter state 8

	Bit            goto state 39
	Var            goto state 99
	Tuple          goto state 43
	Term3          goto state 110

State 103

	Term1 -> LetVariable ',' . ListLetVariable '<-' Term ';' Term    (rule 78)

	'<-'           reduce using rule 61
	L_Var          shift, and enter state 8

	Var            goto state 107
	LetVariable    goto state 108
	ListLetVariablegoto state 109

State 104

	Term1 -> Lambda FunctionType . '.' Term             (rule 80)
	FunctionType -> FunctionType . ';'                  (rule 98)

	'.'            shift, and enter state 105
	';'            shift, and enter state 106


State 105

	Term1 -> Lambda FunctionType '.' . Term             (rule 80)

	'('            shift, and enter state 48
	'()'           shift, and enter state 49
	'case'         shift, and enter state 50
	'gate'         shift, and enter state 51
	'if'           shift, and enter state 52
	'let'          shift, and enter state 53
	'with'         shift, and enter state 54
	L_Bit          shift, and enter state 55
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 56

	Bit            goto state 39
	Var            goto state 40
	Lambda         goto state 41
	LetVariable    goto state 42
	Tuple          goto state 43
	Term3          goto state 44
	Term1          goto state 45
	Term2          goto state 46
	Term           goto state 148

State 106

	FunctionType -> FunctionType ';' .                  (rule 98)

	'.'            reduce using rule 98
	';'            reduce using rule 98


State 107

	LetVariable -> Var .                                (rule 60)

	')'            reduce using rule 60
	','            reduce using rule 60
	'<-'           reduce using rule 60


State 108

	ListLetVariable -> LetVariable .                    (rule 62)
	ListLetVariable -> LetVariable . ',' ListLetVariable    (rule 63)

	')'            reduce using rule 62
	','            shift, and enter state 147
	'<-'           reduce using rule 62


State 109

	Term1 -> LetVariable ',' ListLetVariable . '<-' Term ';' Term    (rule 78)

	'<-'           shift, and enter state 146


State 110

	Term2 -> Term2 '.' Term3 .                          (rule 86)

	'$'            reduce using rule 86
	'('            reduce using rule 86
	'()'           reduce using rule 86
	')'            reduce using rule 86
	','            reduce using rule 86
	'->'           reduce using rule 86
	'.'            reduce using rule 86
	';'            reduce using rule 86
	']'            reduce using rule 86
	'else'         reduce using rule 86
	'of'           reduce using rule 86
	'then'         reduce using rule 86
	'}'            reduce using rule 86
	L_Bit          reduce using rule 86
	L_Var          reduce using rule 86


State 111

	Term1 -> Term2 '$' Term1 .                          (rule 83)

	')'            reduce using rule 83
	','            reduce using rule 83
	'->'           reduce using rule 83
	';'            reduce using rule 83
	']'            reduce using rule 83
	'else'         reduce using rule 83
	'of'           reduce using rule 83
	'then'         reduce using rule 83
	'}'            reduce using rule 83


State 112

	Term3 -> '(' Term ')' .                             (rule 75)

	'$'            reduce using rule 75
	'('            reduce using rule 75
	'()'           reduce using rule 75
	')'            reduce using rule 75
	','            reduce using rule 75
	'->'           reduce using rule 75
	'.'            reduce using rule 75
	';'            reduce using rule 75
	']'            reduce using rule 75
	'else'         reduce using rule 75
	'of'           reduce using rule 75
	'then'         reduce using rule 75
	'}'            reduce using rule 75
	L_Bit          reduce using rule 75
	L_Var          reduce using rule 75


State 113

	Tuple -> '(' Term ',' . ListTerm ')'                (rule 64)

	'('            shift, and enter state 48
	'()'           shift, and enter state 49
	'case'         shift, and enter state 50
	'gate'         shift, and enter state 51
	'if'           shift, and enter state 52
	'let'          shift, and enter state 53
	'with'         shift, and enter state 54
	L_Bit          shift, and enter state 55
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 56

	Bit            goto state 39
	Var            goto state 40
	Lambda         goto state 41
	LetVariable    goto state 42
	Tuple          goto state 43
	ListTerm       goto state 144
	Term3          goto state 44
	Term1          goto state 45
	Term2          goto state 46
	Term           goto state 145

State 114

	Term1 -> 'case' Term 'of' . CaseExpression ListCaseExpression    (rule 79)

	'('            shift, and enter state 48
	'()'           shift, and enter state 49
	'case'         shift, and enter state 50
	'gate'         shift, and enter state 51
	'if'           shift, and enter state 52
	'let'          shift, and enter state 53
	'with'         shift, and enter state 54
	L_Bit          shift, and enter state 55
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 56

	Bit            goto state 39
	Var            goto state 40
	Lambda         goto state 41
	LetVariable    goto state 42
	Tuple          goto state 43
	Term3          goto state 44
	Term1          goto state 45
	Term2          goto state 46
	Term           goto state 142
	CaseExpression goto state 143

State 115

	Gate -> 'U3' '(' . Angle ',' Angle ',' Angle ')'    (rule 50)

	L_doubl        shift, and enter state 2

	Double         goto state 117
	Angle          goto state 141

State 116

	Gate -> 'U2' '(' . Angle ',' Angle ')'              (rule 49)

	L_doubl        shift, and enter state 2

	Double         goto state 117
	Angle          goto state 140

State 117

	Angle -> Double .                                   (rule 19)

	')'            reduce using rule 19
	','            reduce using rule 19
	'->'           reduce using rule 19
	';'            reduce using rule 19
	']'            reduce using rule 19
	'else'         reduce using rule 19
	'of'           reduce using rule 19
	'then'         reduce using rule 19
	'}'            reduce using rule 19


State 118

	Gate -> 'U1' Angle .                                (rule 48)

	')'            reduce using rule 48
	','            reduce using rule 48
	'->'           reduce using rule 48
	';'            reduce using rule 48
	']'            reduce using rule 48
	'else'         reduce using rule 48
	'of'           reduce using rule 48
	'then'         reduce using rule 48
	'}'            reduce using rule 48


State 119

	Gate -> 'SWAP_THETA' Angle .                        (rule 56)

	')'            reduce using rule 56
	','            reduce using rule 56
	'->'           reduce using rule 56
	';'            reduce using rule 56
	']'            reduce using rule 56
	'else'         reduce using rule 56
	'of'           reduce using rule 56
	'then'         reduce using rule 56
	'}'            reduce using rule 56


State 120

	Gate -> 'RZ' Angle .                                (rule 47)

	')'            reduce using rule 47
	','            reduce using rule 47
	'->'           reduce using rule 47
	';'            reduce using rule 47
	']'            reduce using rule 47
	'else'         reduce using rule 47
	'of'           reduce using rule 47
	'then'         reduce using rule 47
	'}'            reduce using rule 47


State 121

	Gate -> 'RY' Angle .                                (rule 46)

	')'            reduce using rule 46
	','            reduce using rule 46
	'->'           reduce using rule 46
	';'            reduce using rule 46
	']'            reduce using rule 46
	'else'         reduce using rule 46
	'of'           reduce using rule 46
	'then'         reduce using rule 46
	'}'            reduce using rule 46


State 122

	Gate -> 'RX' Angle .                                (rule 45)

	')'            reduce using rule 45
	','            reduce using rule 45
	'->'           reduce using rule 45
	';'            reduce using rule 45
	']'            reduce using rule 45
	'else'         reduce using rule 45
	'of'           reduce using rule 45
	'then'         reduce using rule 45
	'}'            reduce using rule 45


State 123

	Gate -> 'ROOT_Z_DAG' Integer .                      (rule 36)

	')'            reduce using rule 36
	','            reduce using rule 36
	'->'           reduce using rule 36
	';'            reduce using rule 36
	']'            reduce using rule 36
	'else'         reduce using rule 36
	'of'           reduce using rule 36
	'then'         reduce using rule 36
	'}'            reduce using rule 36


State 124

	Gate -> 'ROOT_Z' Integer .                          (rule 35)

	')'            reduce using rule 35
	','            reduce using rule 35
	'->'           reduce using rule 35
	';'            reduce using rule 35
	']'            reduce using rule 35
	'else'         reduce using rule 35
	'of'           reduce using rule 35
	'then'         reduce using rule 35
	'}'            reduce using rule 35


State 125

	Gate -> 'ROOT_Y_DAG' Integer .                      (rule 34)

	')'            reduce using rule 34
	','            reduce using rule 34
	'->'           reduce using rule 34
	';'            reduce using rule 34
	']'            reduce using rule 34
	'else'         reduce using rule 34
	'of'           reduce using rule 34
	'then'         reduce using rule 34
	'}'            reduce using rule 34


State 126

	Gate -> 'ROOT_Y' Integer .                          (rule 33)

	')'            reduce using rule 33
	','            reduce using rule 33
	'->'           reduce using rule 33
	';'            reduce using rule 33
	']'            reduce using rule 33
	'else'         reduce using rule 33
	'of'           reduce using rule 33
	'then'         reduce using rule 33
	'}'            reduce using rule 33


State 127

	Gate -> 'ROOT_X_DAG' Integer .                      (rule 32)

	')'            reduce using rule 32
	','            reduce using rule 32
	'->'           reduce using rule 32
	';'            reduce using rule 32
	']'            reduce using rule 32
	'else'         reduce using rule 32
	'of'           reduce using rule 32
	'then'         reduce using rule 32
	'}'            reduce using rule 32


State 128

	Gate -> 'ROOT_X' Integer .                          (rule 31)

	')'            reduce using rule 31
	','            reduce using rule 31
	'->'           reduce using rule 31
	';'            reduce using rule 31
	']'            reduce using rule 31
	'else'         reduce using rule 31
	'of'           reduce using rule 31
	'then'         reduce using rule 31
	'}'            reduce using rule 31


State 129

	Gate -> 'ROOT_SWAP_DAG' Integer .                   (rule 58)

	')'            reduce using rule 58
	','            reduce using rule 58
	'->'           reduce using rule 58
	';'            reduce using rule 58
	']'            reduce using rule 58
	'else'         reduce using rule 58
	'of'           reduce using rule 58
	'then'         reduce using rule 58
	'}'            reduce using rule 58


State 130

	Gate -> 'ROOT_SWAP' Integer .                       (rule 57)

	')'            reduce using rule 57
	','            reduce using rule 57
	'->'           reduce using rule 57
	';'            reduce using rule 57
	']'            reduce using rule 57
	'else'         reduce using rule 57
	'of'           reduce using rule 57
	'then'         reduce using rule 57
	'}'            reduce using rule 57


State 131

	Term1 -> 'if' Term 'then' . Term 'else' Term        (rule 76)

	'('            shift, and enter state 48
	'()'           shift, and enter state 49
	'case'         shift, and enter state 50
	'gate'         shift, and enter state 51
	'if'           shift, and enter state 52
	'let'          shift, and enter state 53
	'with'         shift, and enter state 54
	L_Bit          shift, and enter state 55
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 56

	Bit            goto state 39
	Var            goto state 40
	Lambda         goto state 41
	LetVariable    goto state 42
	Tuple          goto state 43
	Term3          goto state 44
	Term1          goto state 45
	Term2          goto state 46
	Term           goto state 139

State 132

	Term1 -> 'let' '{' '(' . LetVariable ',' ListLetVariable ')' '=' Term '}' 'in' Term    (rule 77)

	L_Var          shift, and enter state 8

	Var            goto state 107
	LetVariable    goto state 138

State 133

	Controls -> '[' Term . ',' ListTerm ']'             (rule 65)

	','            shift, and enter state 137


State 134

	Term1 -> 'with' Controls 'ctrl' . ControlStates 'gate' Gate    (rule 82)

	'['            shift, and enter state 136

	ControlStates  goto state 135

State 135

	Term1 -> 'with' Controls 'ctrl' ControlStates . 'gate' Gate    (rule 82)

	'gate'         shift, and enter state 168


State 136

	ControlStates -> '[' . ControlState ',' ListControlState ']'    (rule 68)

	'@+'           shift, and enter state 162
	'@+i'          shift, and enter state 163
	'@-'           shift, and enter state 164
	'@-i'          shift, and enter state 165
	'@0'           shift, and enter state 166
	'@1'           shift, and enter state 167

	ControlState   goto state 161

State 137

	Controls -> '[' Term ',' . ListTerm ']'             (rule 65)

	'('            shift, and enter state 48
	'()'           shift, and enter state 49
	'case'         shift, and enter state 50
	'gate'         shift, and enter state 51
	'if'           shift, and enter state 52
	'let'          shift, and enter state 53
	'with'         shift, and enter state 54
	L_Bit          shift, and enter state 55
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 56

	Bit            goto state 39
	Var            goto state 40
	Lambda         goto state 41
	LetVariable    goto state 42
	Tuple          goto state 43
	ListTerm       goto state 160
	Term3          goto state 44
	Term1          goto state 45
	Term2          goto state 46
	Term           goto state 145

State 138

	Term1 -> 'let' '{' '(' LetVariable . ',' ListLetVariable ')' '=' Term '}' 'in' Term    (rule 77)

	','            shift, and enter state 159


State 139

	Term1 -> 'if' Term 'then' Term . 'else' Term        (rule 76)

	'else'         shift, and enter state 158


State 140

	Gate -> 'U2' '(' Angle . ',' Angle ')'              (rule 49)

	','            shift, and enter state 157


State 141

	Gate -> 'U3' '(' Angle . ',' Angle ',' Angle ')'    (rule 50)

	','            shift, and enter state 156


State 142

	CaseExpression -> Term . '->' Var                   (rule 89)

	'->'           shift, and enter state 155


State 143

	Term1 -> 'case' Term 'of' CaseExpression . ListCaseExpression    (rule 79)

	'('            shift, and enter state 48
	'()'           shift, and enter state 49
	'case'         shift, and enter state 50
	'gate'         shift, and enter state 51
	'if'           shift, and enter state 52
	'let'          shift, and enter state 53
	'with'         shift, and enter state 54
	L_Bit          shift, and enter state 55
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 56

	Bit            goto state 39
	Var            goto state 40
	Lambda         goto state 41
	LetVariable    goto state 42
	Tuple          goto state 43
	Term3          goto state 44
	Term1          goto state 45
	Term2          goto state 46
	Term           goto state 142
	CaseExpression goto state 153
	ListCaseExpressiongoto state 154

State 144

	Tuple -> '(' Term ',' ListTerm . ')'                (rule 64)

	')'            shift, and enter state 152


State 145

	ListTerm -> Term .                                  (rule 66)
	ListTerm -> Term . ',' ListTerm                     (rule 67)

	')'            reduce using rule 66
	','            shift, and enter state 151
	']'            reduce using rule 66


State 146

	Term1 -> LetVariable ',' ListLetVariable '<-' . Term ';' Term    (rule 78)

	'('            shift, and enter state 48
	'()'           shift, and enter state 49
	'case'         shift, and enter state 50
	'gate'         shift, and enter state 51
	'if'           shift, and enter state 52
	'let'          shift, and enter state 53
	'with'         shift, and enter state 54
	L_Bit          shift, and enter state 55
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 56

	Bit            goto state 39
	Var            goto state 40
	Lambda         goto state 41
	LetVariable    goto state 42
	Tuple          goto state 43
	Term3          goto state 44
	Term1          goto state 45
	Term2          goto state 46
	Term           goto state 150

State 147

	ListLetVariable -> LetVariable ',' . ListLetVariable    (rule 63)

	')'            reduce using rule 61
	'<-'           reduce using rule 61
	L_Var          shift, and enter state 8

	Var            goto state 107
	LetVariable    goto state 108
	ListLetVariablegoto state 149

State 148

	Term1 -> Lambda FunctionType '.' Term .             (rule 80)

	')'            reduce using rule 80
	','            reduce using rule 80
	'->'           reduce using rule 80
	';'            reduce using rule 80
	']'            reduce using rule 80
	'else'         reduce using rule 80
	'of'           reduce using rule 80
	'then'         reduce using rule 80
	'}'            reduce using rule 80


State 149

	ListLetVariable -> LetVariable ',' ListLetVariable .    (rule 63)

	')'            reduce using rule 63
	'<-'           reduce using rule 63


State 150

	Term1 -> LetVariable ',' ListLetVariable '<-' Term . ';' Term    (rule 78)

	';'            shift, and enter state 179


State 151

	ListTerm -> Term ',' . ListTerm                     (rule 67)

	'('            shift, and enter state 48
	'()'           shift, and enter state 49
	'case'         shift, and enter state 50
	'gate'         shift, and enter state 51
	'if'           shift, and enter state 52
	'let'          shift, and enter state 53
	'with'         shift, and enter state 54
	L_Bit          shift, and enter state 55
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 56

	Bit            goto state 39
	Var            goto state 40
	Lambda         goto state 41
	LetVariable    goto state 42
	Tuple          goto state 43
	ListTerm       goto state 178
	Term3          goto state 44
	Term1          goto state 45
	Term2          goto state 46
	Term           goto state 145

State 152

	Tuple -> '(' Term ',' ListTerm ')' .                (rule 64)

	'$'            reduce using rule 64
	'('            reduce using rule 64
	'()'           reduce using rule 64
	')'            reduce using rule 64
	','            reduce using rule 64
	'->'           reduce using rule 64
	'.'            reduce using rule 64
	';'            reduce using rule 64
	']'            reduce using rule 64
	'else'         reduce using rule 64
	'of'           reduce using rule 64
	'then'         reduce using rule 64
	'}'            reduce using rule 64
	L_Bit          reduce using rule 64
	L_Var          reduce using rule 64


State 153

	ListCaseExpression -> CaseExpression .              (rule 90)
	ListCaseExpression -> CaseExpression . ListCaseExpression    (rule 91)

	'('            shift, and enter state 48
	'()'           shift, and enter state 49
	')'            reduce using rule 90
	','            reduce using rule 90
	'->'           reduce using rule 90
	';'            reduce using rule 90
	']'            reduce using rule 90
	'case'         shift, and enter state 50
	'else'         reduce using rule 90
	'gate'         shift, and enter state 51
	'if'           shift, and enter state 52
	'let'          shift, and enter state 53
	'of'           reduce using rule 90
	'then'         reduce using rule 90
	'with'         shift, and enter state 54
	'}'            reduce using rule 90
	L_Bit          shift, and enter state 55
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 56

	Bit            goto state 39
	Var            goto state 40
	Lambda         goto state 41
	LetVariable    goto state 42
	Tuple          goto state 43
	Term3          goto state 44
	Term1          goto state 45
	Term2          goto state 46
	Term           goto state 142
	CaseExpression goto state 153
	ListCaseExpressiongoto state 177

State 154

	Term1 -> 'case' Term 'of' CaseExpression ListCaseExpression .    (rule 79)

	')'            reduce using rule 79
	','            reduce using rule 79
	'->'           reduce using rule 79
	';'            reduce using rule 79
	']'            reduce using rule 79
	'else'         reduce using rule 79
	'of'           reduce using rule 79
	'then'         reduce using rule 79
	'}'            reduce using rule 79


State 155

	CaseExpression -> Term '->' . Var                   (rule 89)

	L_Var          shift, and enter state 8

	Var            goto state 176

State 156

	Gate -> 'U3' '(' Angle ',' . Angle ',' Angle ')'    (rule 50)

	L_doubl        shift, and enter state 2

	Double         goto state 117
	Angle          goto state 175

State 157

	Gate -> 'U2' '(' Angle ',' . Angle ')'              (rule 49)

	L_doubl        shift, and enter state 2

	Double         goto state 117
	Angle          goto state 174

State 158

	Term1 -> 'if' Term 'then' Term 'else' . Term        (rule 76)

	'('            shift, and enter state 48
	'()'           shift, and enter state 49
	'case'         shift, and enter state 50
	'gate'         shift, and enter state 51
	'if'           shift, and enter state 52
	'let'          shift, and enter state 53
	'with'         shift, and enter state 54
	L_Bit          shift, and enter state 55
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 56

	Bit            goto state 39
	Var            goto state 40
	Lambda         goto state 41
	LetVariable    goto state 42
	Tuple          goto state 43
	Term3          goto state 44
	Term1          goto state 45
	Term2          goto state 46
	Term           goto state 173

State 159

	Term1 -> 'let' '{' '(' LetVariable ',' . ListLetVariable ')' '=' Term '}' 'in' Term    (rule 77)

	')'            reduce using rule 61
	L_Var          shift, and enter state 8

	Var            goto state 107
	LetVariable    goto state 108
	ListLetVariablegoto state 172

State 160

	Controls -> '[' Term ',' ListTerm . ']'             (rule 65)

	']'            shift, and enter state 171


State 161

	ControlStates -> '[' ControlState . ',' ListControlState ']'    (rule 68)

	','            shift, and enter state 170


State 162

	ControlState -> '@+' .                              (rule 22)

	','            reduce using rule 22
	']'            reduce using rule 22


State 163

	ControlState -> '@+i' .                             (rule 24)

	','            reduce using rule 24
	']'            reduce using rule 24


State 164

	ControlState -> '@-' .                              (rule 23)

	','            reduce using rule 23
	']'            reduce using rule 23


State 165

	ControlState -> '@-i' .                             (rule 25)

	','            reduce using rule 25
	']'            reduce using rule 25


State 166

	ControlState -> '@0' .                              (rule 20)

	','            reduce using rule 20
	']'            reduce using rule 20


State 167

	ControlState -> '@1' .                              (rule 21)

	','            reduce using rule 21
	']'            reduce using rule 21


State 168

	Term1 -> 'with' Controls 'ctrl' ControlStates 'gate' . Gate    (rule 82)

	'FSWAP'        shift, and enter state 63
	'H'            shift, and enter state 64
	'ID'           shift, and enter state 65
	'ISWAP'        shift, and enter state 66
	'ROOT_SWAP'    shift, and enter state 67
	'ROOT_SWAP_DAG'shift, and enter state 68
	'ROOT_X'       shift, and enter state 69
	'ROOT_X_DAG'   shift, and enter state 70
	'ROOT_Y'       shift, and enter state 71
	'ROOT_Y_DAG'   shift, and enter state 72
	'ROOT_Z'       shift, and enter state 73
	'ROOT_Z_DAG'   shift, and enter state 74
	'RX'           shift, and enter state 75
	'RY'           shift, and enter state 76
	'RZ'           shift, and enter state 77
	'S'            shift, and enter state 78
	'SQRT_SWAP'    shift, and enter state 79
	'SQRT_SWAP_DAG'shift, and enter state 80
	'SQRT_X'       shift, and enter state 81
	'SQRT_X_DAG'   shift, and enter state 82
	'SQRT_Y'       shift, and enter state 83
	'SQRT_Y_DAG'   shift, and enter state 84
	'SWAP'         shift, and enter state 85
	'SWAP_THETA'   shift, and enter state 86
	'S_DAG'        shift, and enter state 87
	'T'            shift, and enter state 88
	'T_DAG'        shift, and enter state 89
	'U1'           shift, and enter state 90
	'U2'           shift, and enter state 91
	'U3'           shift, and enter state 92
	'X'            shift, and enter state 93
	'Y'            shift, and enter state 94
	'Z'            shift, and enter state 95
	L_GateIdent    shift, and enter state 96

	GateIdent      goto state 61
	Gate           goto state 169

State 169

	Term1 -> 'with' Controls 'ctrl' ControlStates 'gate' Gate .    (rule 82)

	')'            reduce using rule 82
	','            reduce using rule 82
	'->'           reduce using rule 82
	';'            reduce using rule 82
	']'            reduce using rule 82
	'else'         reduce using rule 82
	'of'           reduce using rule 82
	'then'         reduce using rule 82
	'}'            reduce using rule 82


State 170

	ControlStates -> '[' ControlState ',' . ListControlState ']'    (rule 68)

	'@+'           shift, and enter state 162
	'@+i'          shift, and enter state 163
	'@-'           shift, and enter state 164
	'@-i'          shift, and enter state 165
	'@0'           shift, and enter state 166
	'@1'           shift, and enter state 167

	ControlState   goto state 184
	ListControlStategoto state 185

State 171

	Controls -> '[' Term ',' ListTerm ']' .             (rule 65)

	'ctrl'         reduce using rule 65


State 172

	Term1 -> 'let' '{' '(' LetVariable ',' ListLetVariable . ')' '=' Term '}' 'in' Term    (rule 77)

	')'            shift, and enter state 183


State 173

	Term1 -> 'if' Term 'then' Term 'else' Term .        (rule 76)

	')'            reduce using rule 76
	','            reduce using rule 76
	'->'           reduce using rule 76
	';'            reduce using rule 76
	']'            reduce using rule 76
	'else'         reduce using rule 76
	'of'           reduce using rule 76
	'then'         reduce using rule 76
	'}'            reduce using rule 76


State 174

	Gate -> 'U2' '(' Angle ',' Angle . ')'              (rule 49)

	')'            shift, and enter state 182


State 175

	Gate -> 'U3' '(' Angle ',' Angle . ',' Angle ')'    (rule 50)

	','            shift, and enter state 181


State 176

	CaseExpression -> Term '->' Var .                   (rule 89)

	'('            reduce using rule 89
	'()'           reduce using rule 89
	')'            reduce using rule 89
	','            reduce using rule 89
	'->'           reduce using rule 89
	';'            reduce using rule 89
	']'            reduce using rule 89
	'case'         reduce using rule 89
	'else'         reduce using rule 89
	'gate'         reduce using rule 89
	'if'           reduce using rule 89
	'let'          reduce using rule 89
	'of'           reduce using rule 89
	'then'         reduce using rule 89
	'with'         reduce using rule 89
	'}'            reduce using rule 89
	L_Bit          reduce using rule 89
	L_Var          reduce using rule 89
	L_Lambda       reduce using rule 89


State 177

	ListCaseExpression -> CaseExpression ListCaseExpression .    (rule 91)

	')'            reduce using rule 91
	','            reduce using rule 91
	'->'           reduce using rule 91
	';'            reduce using rule 91
	']'            reduce using rule 91
	'else'         reduce using rule 91
	'of'           reduce using rule 91
	'then'         reduce using rule 91
	'}'            reduce using rule 91


State 178

	ListTerm -> Term ',' ListTerm .                     (rule 67)

	')'            reduce using rule 67
	']'            reduce using rule 67


State 179

	Term1 -> LetVariable ',' ListLetVariable '<-' Term ';' . Term    (rule 78)

	'('            shift, and enter state 48
	'()'           shift, and enter state 49
	'case'         shift, and enter state 50
	'gate'         shift, and enter state 51
	'if'           shift, and enter state 52
	'let'          shift, and enter state 53
	'with'         shift, and enter state 54
	L_Bit          shift, and enter state 55
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 56

	Bit            goto state 39
	Var            goto state 40
	Lambda         goto state 41
	LetVariable    goto state 42
	Tuple          goto state 43
	Term3          goto state 44
	Term1          goto state 45
	Term2          goto state 46
	Term           goto state 180

State 180

	Term1 -> LetVariable ',' ListLetVariable '<-' Term ';' Term .    (rule 78)

	')'            reduce using rule 78
	','            reduce using rule 78
	'->'           reduce using rule 78
	';'            reduce using rule 78
	']'            reduce using rule 78
	'else'         reduce using rule 78
	'of'           reduce using rule 78
	'then'         reduce using rule 78
	'}'            reduce using rule 78


State 181

	Gate -> 'U3' '(' Angle ',' Angle ',' . Angle ')'    (rule 50)

	L_doubl        shift, and enter state 2

	Double         goto state 117
	Angle          goto state 189

State 182

	Gate -> 'U2' '(' Angle ',' Angle ')' .              (rule 49)

	')'            reduce using rule 49
	','            reduce using rule 49
	'->'           reduce using rule 49
	';'            reduce using rule 49
	']'            reduce using rule 49
	'else'         reduce using rule 49
	'of'           reduce using rule 49
	'then'         reduce using rule 49
	'}'            reduce using rule 49


State 183

	Term1 -> 'let' '{' '(' LetVariable ',' ListLetVariable ')' . '=' Term '}' 'in' Term    (rule 77)

	'='            shift, and enter state 188


State 184

	ListControlState -> ControlState .                  (rule 69)
	ListControlState -> ControlState . ',' ListControlState    (rule 70)

	','            shift, and enter state 187
	']'            reduce using rule 69


State 185

	ControlStates -> '[' ControlState ',' ListControlState . ']'    (rule 68)

	']'            shift, and enter state 186


State 186

	ControlStates -> '[' ControlState ',' ListControlState ']' .    (rule 68)

	'gate'         reduce using rule 68


State 187

	ListControlState -> ControlState ',' . ListControlState    (rule 70)

	'@+'           shift, and enter state 162
	'@+i'          shift, and enter state 163
	'@-'           shift, and enter state 164
	'@-i'          shift, and enter state 165
	'@0'           shift, and enter state 166
	'@1'           shift, and enter state 167

	ControlState   goto state 184
	ListControlStategoto state 192

State 188

	Term1 -> 'let' '{' '(' LetVariable ',' ListLetVariable ')' '=' . Term '}' 'in' Term    (rule 77)

	'('            shift, and enter state 48
	'()'           shift, and enter state 49
	'case'         shift, and enter state 50
	'gate'         shift, and enter state 51
	'if'           shift, and enter state 52
	'let'          shift, and enter state 53
	'with'         shift, and enter state 54
	L_Bit          shift, and enter state 55
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 56

	Bit            goto state 39
	Var            goto state 40
	Lambda         goto state 41
	LetVariable    goto state 42
	Tuple          goto state 43
	Term3          goto state 44
	Term1          goto state 45
	Term2          goto state 46
	Term           goto state 191

State 189

	Gate -> 'U3' '(' Angle ',' Angle ',' Angle . ')'    (rule 50)

	')'            shift, and enter state 190


State 190

	Gate -> 'U3' '(' Angle ',' Angle ',' Angle ')' .    (rule 50)

	')'            reduce using rule 50
	','            reduce using rule 50
	'->'           reduce using rule 50
	';'            reduce using rule 50
	']'            reduce using rule 50
	'else'         reduce using rule 50
	'of'           reduce using rule 50
	'then'         reduce using rule 50
	'}'            reduce using rule 50


State 191

	Term1 -> 'let' '{' '(' LetVariable ',' ListLetVariable ')' '=' Term . '}' 'in' Term    (rule 77)

	'}'            shift, and enter state 193


State 192

	ListControlState -> ControlState ',' ListControlState .    (rule 70)

	']'            reduce using rule 70


State 193

	Term1 -> 'let' '{' '(' LetVariable ',' ListLetVariable ')' '=' Term '}' . 'in' Term    (rule 77)

	'in'           shift, and enter state 194


State 194

	Term1 -> 'let' '{' '(' LetVariable ',' ListLetVariable ')' '=' Term '}' 'in' . Term    (rule 77)

	'('            shift, and enter state 48
	'()'           shift, and enter state 49
	'case'         shift, and enter state 50
	'gate'         shift, and enter state 51
	'if'           shift, and enter state 52
	'let'          shift, and enter state 53
	'with'         shift, and enter state 54
	L_Bit          shift, and enter state 55
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 56

	Bit            goto state 39
	Var            goto state 40
	Lambda         goto state 41
	LetVariable    goto state 42
	Tuple          goto state 43
	Term3          goto state 44
	Term1          goto state 45
	Term2          goto state 46
	Term           goto state 195

State 195

	Term1 -> 'let' '{' '(' LetVariable ',' ListLetVariable ')' '=' Term '}' 'in' Term .    (rule 77)

	')'            reduce using rule 77
	','            reduce using rule 77
	'->'           reduce using rule 77
	';'            reduce using rule 77
	']'            reduce using rule 77
	'else'         reduce using rule 77
	'of'           reduce using rule 77
	'then'         reduce using rule 77
	'}'            reduce using rule 77


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 102
Number of terminals: 75
Number of non-terminals: 34
Number of states: 196
