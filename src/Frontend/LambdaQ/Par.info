-----------------------------------------------------------------------------
Info file generated by Happy Version 1.20.0 from Frontend/LambdaQ/Par.y
-----------------------------------------------------------------------------

state 51 contains 2 shift/reduce conflicts.
state 52 contains 1 shift/reduce conflicts.
state 62 contains 18 shift/reduce conflicts.
state 63 contains 1 shift/reduce conflicts.
state 99 contains 1 shift/reduce conflicts.
state 139 contains 1 shift/reduce conflicts.
state 142 contains 1 shift/reduce conflicts.
state 143 contains 1 shift/reduce conflicts.
state 145 contains 1 shift/reduce conflicts.
state 172 contains 1 shift/reduce conflicts.
state 173 contains 1 shift/reduce conflicts.
state 174 contains 1 shift/reduce conflicts.
state 175 contains 1 shift/reduce conflicts.
state 176 contains 1 shift/reduce conflicts.
state 177 contains 1 shift/reduce conflicts.
state 178 contains 1 shift/reduce conflicts.
state 179 contains 1 shift/reduce conflicts.
state 224 contains 1 shift/reduce conflicts.

rule 120 is unused
rule 121 is unused
rule 124 is unused

-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_pProgram -> Program                         (0)
	Double -> L_doubl                                  (1)
	Integer -> L_integ                                 (2)
	GateVar -> L_GateVar                               (3)
	Var -> L_Var                                       (4)
	Bit -> L_Bit                                       (5)
	Lambda -> L_Lambda                                 (6)
	Program -> ListFunctionDeclaration                 (7)
	IntegerExpression1 -> '-' IntegerExpression        (8)
	IntegerExpression1 -> IntegerExpression1 '+' IntegerExpression2   (9)
	IntegerExpression1 -> IntegerExpression1 '-' IntegerExpression2   (10)
	IntegerExpression1 -> IntegerExpression2           (11)
	IntegerExpression2 -> IntegerExpression2 '*' IntegerExpression3   (12)
	IntegerExpression2 -> IntegerExpression2 '/' IntegerExpression3   (13)
	IntegerExpression2 -> IntegerExpression3           (14)
	IntegerExpression3 -> Integer                      (15)
	IntegerExpression3 -> '(' IntegerExpression ')'    (16)
	IntegerExpression -> IntegerExpression1            (17)
	BoolValue -> 'True'                                (18)
	BoolValue -> 'False'                               (19)
	BoolExpression -> BoolExpression '&&' BoolExpression1   (20)
	BoolExpression -> BoolExpression '||' BoolExpression1   (21)
	BoolExpression -> 'not' BoolExpression1            (22)
	BoolExpression -> BoolExpression1                  (23)
	BoolExpression1 -> BoolExpression1 '==' BoolExpression2   (24)
	BoolExpression1 -> BoolExpression1 '/=' BoolExpression2   (25)
	BoolExpression1 -> BoolExpression2                 (26)
	BoolExpression2 -> IntegerExpression2 '==' IntegerExpression2   (27)
	BoolExpression2 -> IntegerExpression2 '/=' IntegerExpression2   (28)
	BoolExpression2 -> IntegerExpression2 '>' IntegerExpression2   (29)
	BoolExpression2 -> IntegerExpression2 '>=' IntegerExpression2   (30)
	BoolExpression2 -> IntegerExpression2 '<' IntegerExpression2   (31)
	BoolExpression2 -> IntegerExpression2 '<=' IntegerExpression2   (32)
	BoolExpression2 -> BoolValue                       (33)
	BoolExpression2 -> '(' BoolExpression ')'          (34)
	Type -> Type '->' Type1                            (35)
	Type -> Type1                                      (36)
	Type2 -> Type2 '*' Type3                           (37)
	Type2 -> Type3                                     (38)
	Type3 -> Type4 '**' Integer                        (39)
	Type3 -> '!' Type4                                 (40)
	Type3 -> Type4                                     (41)
	Type5 -> 'Bool'                                    (42)
	Type5 -> 'Bit'                                     (43)
	Type5 -> 'Int'                                     (44)
	Type5 -> 'Qbit'                                    (45)
	Type5 -> 'BasisState'                              (46)
	Type5 -> '()'                                      (47)
	Type5 -> '[' Type ']'                              (48)
	Type5 -> '(' Type ')'                              (49)
	Type1 -> Type2                                     (50)
	Type4 -> Type5                                     (51)
	Angle -> Double                                    (52)
	BasisState -> '@0'                                 (53)
	BasisState -> '@1'                                 (54)
	BasisState -> '@+'                                 (55)
	BasisState -> '@-'                                 (56)
	BasisState -> '@+i'                                (57)
	BasisState -> '@-i'                                (58)
	Gate -> 'H'                                        (59)
	Gate -> 'X'                                        (60)
	Gate -> 'Y'                                        (61)
	Gate -> 'Z'                                        (62)
	Gate -> 'ID'                                       (63)
	Gate -> 'ROOT_X' '[' Integer ']'                   (64)
	Gate -> 'ROOT_X' '[' Var ']'                       (65)
	Gate -> 'ROOT_X_DAG' '[' Integer ']'               (66)
	Gate -> 'ROOT_X_DAG' '[' Var ']'                   (67)
	Gate -> 'ROOT_Y' '[' Integer ']'                   (68)
	Gate -> 'ROOT_Y' '[' Var ']'                       (69)
	Gate -> 'ROOT_Y_DAG' '[' Integer ']'               (70)
	Gate -> 'ROOT_Y_DAG' '[' Var ']'                   (71)
	Gate -> 'ROOT_Z' '[' Integer ']'                   (72)
	Gate -> 'ROOT_Z' '[' Var ']'                       (73)
	Gate -> 'ROOT_Z_DAG' '[' Integer ']'               (74)
	Gate -> 'ROOT_Z_DAG' '[' Var ']'                   (75)
	Gate -> 'S'                                        (76)
	Gate -> 'S_DAG'                                    (77)
	Gate -> 'T'                                        (78)
	Gate -> 'T_DAG'                                    (79)
	Gate -> 'SQRT_X'                                   (80)
	Gate -> 'SQRT_X_DAG'                               (81)
	Gate -> 'SQRT_Y'                                   (82)
	Gate -> 'SQRT_Y_DAG'                               (83)
	Gate -> 'RX' '[' Angle ']'                         (84)
	Gate -> 'RY' '[' Angle ']'                         (85)
	Gate -> 'RZ' '[' Angle ']'                         (86)
	Gate -> 'U1' '[' Angle ']'                         (87)
	Gate -> 'U2' '[' Angle ',' Angle ']'               (88)
	Gate -> 'U3' '[' Angle ',' Angle ',' Angle ']'     (89)
	Gate -> 'SWAP'                                     (90)
	Gate -> 'SQRT_SWAP'                                (91)
	Gate -> 'SQRT_SWAP_DAG'                            (92)
	Gate -> 'ISWAP'                                    (93)
	Gate -> 'FSWAP'                                    (94)
	Gate -> 'SWAP_THETA' '[' Angle ']'                 (95)
	Gate -> 'ROOT_SWAP' '[' Integer ']'                (96)
	Gate -> 'ROOT_SWAP' '[' Var ']'                    (97)
	Gate -> 'ROOT_SWAP_DAG' '[' Integer ']'            (98)
	Gate -> 'ROOT_SWAP_DAG' '[' Var ']'                (99)
	Gate -> 'QFT' '[' Integer ']'                      (100)
	Gate -> 'QFT' '[' Var ']'                          (101)
	Gate -> 'QFT_DAG' '[' Integer ']'                  (102)
	Gate -> 'QFT_DAG' '[' Var ']'                      (103)
	Gate -> GateVar '[' Angle ',' Angle ',' Angle ']'   (104)
	Gate -> GateVar '[' Angle ',' Angle ']'            (105)
	Gate -> GateVar '[' Angle ']'                      (106)
	Gate -> GateVar '[' Integer ']'                    (107)
	Gate -> GateVar '[' Var ']'                        (108)
	Gate -> GateVar                                    (109)
	ListVar -> Var                                     (110)
	ListVar -> Var ',' ListVar                         (111)
	ListBit -> Bit                                     (112)
	ListBit -> Bit ',' ListBit                         (113)
	ControlBasisState -> '[' BasisState ']'            (114)
	ControlBasisStates -> '[' BasisState ',' ListBasisState ']'   (115)
	ListBasisState -> BasisState                       (116)
	ListBasisState -> BasisState ',' ListBasisState    (117)
	ControlBit -> '[' Bit ']'                          (118)
	ControlBits -> '[' Bit ',' ListBit ']'             (119)
	ListInteger -> Integer                             (120)
	ListInteger -> Integer ',' ListInteger             (121)
	ControlTerm -> '[' Term ']'                        (122)
	ControlTerms -> '[' Term ',' ListTerm ']'          (123)
	ControlVar -> '[' Var ']'                          (124)
	ControlVars -> '[' Var ',' ListVar ']'             (125)
	ListTerm -> Term                                   (126)
	ListTerm -> Term ',' ListTerm                      (127)
	Term4 -> List '!!' Integer                         (128)
	Term4 -> '(' Term ')'                              (129)
	Term3 -> '()'                                      (130)
	Term3 -> Bit                                       (131)
	Term3 -> BasisState                                (132)
	Term3 -> BoolExpression                            (133)
	Term3 -> IntegerExpression                         (134)
	Term3 -> 'gate' Gate                               (135)
	Term3 -> List                                      (136)
	Term3 -> Var                                       (137)
	Term3 -> '(' Term ',' ListTerm ')'                 (138)
	Term3 -> Term4                                     (139)
	Term2 -> 'with' ControlTerm 'ctrl' ControlBasisState   (140)
	Term2 -> 'with' ControlTerms 'ctrl' ControlBasisStates   (141)
	Term2 -> 'with' ControlVars 'ctrl' ControlBasisStates   (142)
	Term2 -> 'with' ControlTerm 'ctrl' ControlBit      (143)
	Term2 -> 'with' ControlTerms 'ctrl' ControlBits    (144)
	Term2 -> 'with' ControlVars 'ctrl' ControlBits     (145)
	Term2 -> Term2 Term3                               (146)
	Term2 -> Term2 '.' Term3                           (147)
	Term2 -> Term2 '*' Term3                           (148)
	Term2 -> Term3                                     (149)
	Term1 -> 'if' Term 'then' Term 'else' Term         (150)
	Term1 -> 'let' '{' Var '=' Term '}' 'in' Term      (151)
	Term1 -> 'let' '{' '(' Var ',' ListVar ')' '=' Term '}' 'in' Term   (152)
	Term1 -> Var '<-' Term ';' Term                    (153)
	Term1 -> '|' Var ',' ListVar '|' '<-' Term ';' Term   (154)
	Term1 -> 'case' Term 'of' '{' ListCaseExpression '}'   (155)
	Term1 -> Lambda Var Type '.' Term                  (156)
	Term1 -> Term2                                     (157)
	Term -> Term1 '$' Term                             (158)
	Term -> Term1                                      (159)
	List1 -> '[]'                                      (160)
	List1 -> '[' Term ']'                              (161)
	List1 -> '[' Term ',' ListTerm ']'                 (162)
	List1 -> '(' List ')'                              (163)
	List -> List '++' List1                            (164)
	List -> Term3 ':' List1                            (165)
	List -> List1                                      (166)
	CaseExpression -> Term '->' Term                   (167)
	CaseExpression -> CaseExpression ';'               (168)
	ListCaseExpression -> CaseExpression               (169)
	ListCaseExpression -> CaseExpression ListCaseExpression   (170)
	Arg -> Var                                         (171)
	ListArg ->                                         (172)
	ListArg -> Arg ListArg                             (173)
	FunctionDefinition -> Var ListArg '=' Term         (174)
	FunctionDefinition -> FunctionDefinition ';'       (175)
	FunctionType -> Var '::' Type                      (176)
	FunctionType -> FunctionType ';'                   (177)
	FunctionDeclaration -> FunctionType ';' FunctionDefinition ';'   (178)
	ListFunctionDeclaration ->                         (179)
	ListFunctionDeclaration -> FunctionDeclaration ListFunctionDeclaration   (180)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	'!'            { PT _ (TS _ 1) }
	'!!'           { PT _ (TS _ 2) }
	'$'            { PT _ (TS _ 3) }
	'&&'           { PT _ (TS _ 4) }
	'('            { PT _ (TS _ 5) }
	'()'           { PT _ (TS _ 6) }
	')'            { PT _ (TS _ 7) }
	'*'            { PT _ (TS _ 8) }
	'**'           { PT _ (TS _ 9) }
	'+'            { PT _ (TS _ 10) }
	'++'           { PT _ (TS _ 11) }
	','            { PT _ (TS _ 12) }
	'-'            { PT _ (TS _ 13) }
	'->'           { PT _ (TS _ 14) }
	'.'            { PT _ (TS _ 15) }
	'/'            { PT _ (TS _ 16) }
	'/='           { PT _ (TS _ 17) }
	':'            { PT _ (TS _ 18) }
	'::'           { PT _ (TS _ 19) }
	';'            { PT _ (TS _ 20) }
	'<'            { PT _ (TS _ 21) }
	'<-'           { PT _ (TS _ 22) }
	'<='           { PT _ (TS _ 23) }
	'='            { PT _ (TS _ 24) }
	'=='           { PT _ (TS _ 25) }
	'>'            { PT _ (TS _ 26) }
	'>='           { PT _ (TS _ 27) }
	'@+'           { PT _ (TS _ 28) }
	'@+i'          { PT _ (TS _ 29) }
	'@-'           { PT _ (TS _ 30) }
	'@-i'          { PT _ (TS _ 31) }
	'@0'           { PT _ (TS _ 32) }
	'@1'           { PT _ (TS _ 33) }
	'BasisState'   { PT _ (TS _ 34) }
	'Bit'          { PT _ (TS _ 35) }
	'Bool'         { PT _ (TS _ 36) }
	'FSWAP'        { PT _ (TS _ 37) }
	'False'        { PT _ (TS _ 38) }
	'H'            { PT _ (TS _ 39) }
	'ID'           { PT _ (TS _ 40) }
	'ISWAP'        { PT _ (TS _ 41) }
	'Int'          { PT _ (TS _ 42) }
	'QFT'          { PT _ (TS _ 43) }
	'QFT_DAG'      { PT _ (TS _ 44) }
	'Qbit'         { PT _ (TS _ 45) }
	'ROOT_SWAP'    { PT _ (TS _ 46) }
	'ROOT_SWAP_DAG'{ PT _ (TS _ 47) }
	'ROOT_X'       { PT _ (TS _ 48) }
	'ROOT_X_DAG'   { PT _ (TS _ 49) }
	'ROOT_Y'       { PT _ (TS _ 50) }
	'ROOT_Y_DAG'   { PT _ (TS _ 51) }
	'ROOT_Z'       { PT _ (TS _ 52) }
	'ROOT_Z_DAG'   { PT _ (TS _ 53) }
	'RX'           { PT _ (TS _ 54) }
	'RY'           { PT _ (TS _ 55) }
	'RZ'           { PT _ (TS _ 56) }
	'S'            { PT _ (TS _ 57) }
	'SQRT_SWAP'    { PT _ (TS _ 58) }
	'SQRT_SWAP_DAG'{ PT _ (TS _ 59) }
	'SQRT_X'       { PT _ (TS _ 60) }
	'SQRT_X_DAG'   { PT _ (TS _ 61) }
	'SQRT_Y'       { PT _ (TS _ 62) }
	'SQRT_Y_DAG'   { PT _ (TS _ 63) }
	'SWAP'         { PT _ (TS _ 64) }
	'SWAP_THETA'   { PT _ (TS _ 65) }
	'S_DAG'        { PT _ (TS _ 66) }
	'T'            { PT _ (TS _ 67) }
	'T_DAG'        { PT _ (TS _ 68) }
	'True'         { PT _ (TS _ 69) }
	'U1'           { PT _ (TS _ 70) }
	'U2'           { PT _ (TS _ 71) }
	'U3'           { PT _ (TS _ 72) }
	'X'            { PT _ (TS _ 73) }
	'Y'            { PT _ (TS _ 74) }
	'Z'            { PT _ (TS _ 75) }
	'['            { PT _ (TS _ 76) }
	'[]'           { PT _ (TS _ 77) }
	']'            { PT _ (TS _ 78) }
	'case'         { PT _ (TS _ 79) }
	'ctrl'         { PT _ (TS _ 80) }
	'else'         { PT _ (TS _ 81) }
	'gate'         { PT _ (TS _ 82) }
	'if'           { PT _ (TS _ 83) }
	'in'           { PT _ (TS _ 84) }
	'let'          { PT _ (TS _ 85) }
	'not'          { PT _ (TS _ 86) }
	'of'           { PT _ (TS _ 87) }
	'then'         { PT _ (TS _ 88) }
	'with'         { PT _ (TS _ 89) }
	'{'            { PT _ (TS _ 90) }
	'|'            { PT _ (TS _ 91) }
	'||'           { PT _ (TS _ 92) }
	'}'            { PT _ (TS _ 93) }
	L_doubl        { PT _ (TD $$) }
	L_integ        { PT _ (TI $$) }
	L_GateVar      { PT _ (T_GateVar _) }
	L_Var          { PT _ (T_Var _) }
	L_Bit          { PT _ (T_Bit $$) }
	L_Lambda       { PT _ (T_Lambda $$) }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_pProgram rule  0
	Double          rule  1
	Integer         rule  2
	GateVar         rule  3
	Var             rule  4
	Bit             rule  5
	Lambda          rule  6
	Program         rule  7
	IntegerExpression1 rules 8, 9, 10, 11
	IntegerExpression2 rules 12, 13, 14
	IntegerExpression3 rules 15, 16
	IntegerExpression rule  17
	BoolValue       rules 18, 19
	BoolExpression  rules 20, 21, 22, 23
	BoolExpression1 rules 24, 25, 26
	BoolExpression2 rules 27, 28, 29, 30, 31, 32, 33, 34
	Type            rules 35, 36
	Type2           rules 37, 38
	Type3           rules 39, 40, 41
	Type5           rules 42, 43, 44, 45, 46, 47, 48, 49
	Type1           rule  50
	Type4           rule  51
	Angle           rule  52
	BasisState      rules 53, 54, 55, 56, 57, 58
	Gate            rules 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109
	ListVar         rules 110, 111
	ListBit         rules 112, 113
	ControlBasisState rule  114
	ControlBasisStates rule  115
	ListBasisState  rules 116, 117
	ControlBit      rule  118
	ControlBits     rule  119
	ListInteger     rules 120, 121
	ControlTerm     rule  122
	ControlTerms    rule  123
	ControlVar      rule  124
	ControlVars     rule  125
	ListTerm        rules 126, 127
	Term4           rules 128, 129
	Term3           rules 130, 131, 132, 133, 134, 135, 136, 137, 138, 139
	Term2           rules 140, 141, 142, 143, 144, 145, 146, 147, 148, 149
	Term1           rules 150, 151, 152, 153, 154, 155, 156, 157
	Term            rules 158, 159
	List1           rules 160, 161, 162, 163
	List            rules 164, 165, 166
	CaseExpression  rules 167, 168
	ListCaseExpression rules 169, 170
	Arg             rule  171
	ListArg         rules 172, 173
	FunctionDefinition rules 174, 175
	FunctionType    rules 176, 177
	FunctionDeclaration rule  178
	ListFunctionDeclaration rules 179, 180

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0

	%start_pProgram -> . Program                        (rule 0)

	L_Var          shift, and enter state 8
	%eof           reduce using rule 179

	Var            goto state 3
	Program        goto state 4
	FunctionType   goto state 5
	FunctionDeclarationgoto state 6
	ListFunctionDeclarationgoto state 7

State 1

	Double -> . L_doubl                                 (rule 1)

	L_doubl        shift, and enter state 2


State 2

	Double -> L_doubl .                                 (rule 1)

	','            reduce using rule 1
	']'            reduce using rule 1


State 3

	FunctionType -> Var . '::' Type                     (rule 176)

	'::'           shift, and enter state 11


State 4

	%start_pProgram -> Program .                        (rule 0)

	%eof           accept


State 5

	FunctionType -> FunctionType . ';'                  (rule 177)
	FunctionDeclaration -> FunctionType . ';' FunctionDefinition ';'    (rule 178)

	';'            shift, and enter state 10


State 6

	ListFunctionDeclaration -> FunctionDeclaration . ListFunctionDeclaration    (rule 180)

	L_Var          shift, and enter state 8
	%eof           reduce using rule 179

	Var            goto state 3
	FunctionType   goto state 5
	FunctionDeclarationgoto state 6
	ListFunctionDeclarationgoto state 9

State 7

	Program -> ListFunctionDeclaration .                (rule 7)

	%eof           reduce using rule 7


State 8

	Var -> L_Var .                                      (rule 4)

	'!'            reduce using rule 4
	'$'            reduce using rule 4
	'('            reduce using rule 4
	'()'           reduce using rule 4
	')'            reduce using rule 4
	'*'            reduce using rule 4
	','            reduce using rule 4
	'-'            reduce using rule 4
	'->'           reduce using rule 4
	'.'            reduce using rule 4
	':'            reduce using rule 4
	'::'           reduce using rule 4
	';'            reduce using rule 4
	'<-'           reduce using rule 4
	'='            reduce using rule 4
	'@+'           reduce using rule 4
	'@+i'          reduce using rule 4
	'@-'           reduce using rule 4
	'@-i'          reduce using rule 4
	'@0'           reduce using rule 4
	'@1'           reduce using rule 4
	'BasisState'   reduce using rule 4
	'Bit'          reduce using rule 4
	'Bool'         reduce using rule 4
	'False'        reduce using rule 4
	'Int'          reduce using rule 4
	'Qbit'         reduce using rule 4
	'True'         reduce using rule 4
	'['            reduce using rule 4
	'[]'           reduce using rule 4
	']'            reduce using rule 4
	'case'         reduce using rule 4
	'else'         reduce using rule 4
	'gate'         reduce using rule 4
	'if'           reduce using rule 4
	'let'          reduce using rule 4
	'not'          reduce using rule 4
	'of'           reduce using rule 4
	'then'         reduce using rule 4
	'with'         reduce using rule 4
	'|'            reduce using rule 4
	'}'            reduce using rule 4
	L_integ        reduce using rule 4
	L_Var          reduce using rule 4
	L_Bit          reduce using rule 4
	L_Lambda       reduce using rule 4


State 9

	ListFunctionDeclaration -> FunctionDeclaration ListFunctionDeclaration .    (rule 180)

	%eof           reduce using rule 180


State 10

	FunctionType -> FunctionType ';' .                  (rule 177)
	FunctionDeclaration -> FunctionType ';' . FunctionDefinition ';'    (rule 178)

	';'            reduce using rule 177
	L_Var          shift, and enter state 8

	Var            goto state 27
	FunctionDefinitiongoto state 28

State 11

	FunctionType -> Var '::' . Type                     (rule 176)

	'!'            shift, and enter state 18
	'('            shift, and enter state 19
	'()'           shift, and enter state 20
	'BasisState'   shift, and enter state 21
	'Bit'          shift, and enter state 22
	'Bool'         shift, and enter state 23
	'Int'          shift, and enter state 24
	'Qbit'         shift, and enter state 25
	'['            shift, and enter state 26

	Type           goto state 12
	Type2          goto state 13
	Type3          goto state 14
	Type5          goto state 15
	Type1          goto state 16
	Type4          goto state 17

State 12

	Type -> Type . '->' Type1                           (rule 35)
	FunctionType -> Var '::' Type .                     (rule 176)

	'->'           shift, and enter state 38
	';'            reduce using rule 176


State 13

	Type2 -> Type2 . '*' Type3                          (rule 37)
	Type1 -> Type2 .                                    (rule 50)

	')'            reduce using rule 50
	'*'            shift, and enter state 37
	'->'           reduce using rule 50
	'.'            reduce using rule 50
	';'            reduce using rule 50
	']'            reduce using rule 50


State 14

	Type2 -> Type3 .                                    (rule 38)

	')'            reduce using rule 38
	'*'            reduce using rule 38
	'->'           reduce using rule 38
	'.'            reduce using rule 38
	';'            reduce using rule 38
	']'            reduce using rule 38


State 15

	Type4 -> Type5 .                                    (rule 51)

	')'            reduce using rule 51
	'*'            reduce using rule 51
	'**'           reduce using rule 51
	'->'           reduce using rule 51
	'.'            reduce using rule 51
	';'            reduce using rule 51
	']'            reduce using rule 51


State 16

	Type -> Type1 .                                     (rule 36)

	')'            reduce using rule 36
	'->'           reduce using rule 36
	'.'            reduce using rule 36
	';'            reduce using rule 36
	']'            reduce using rule 36


State 17

	Type3 -> Type4 . '**' Integer                       (rule 39)
	Type3 -> Type4 .                                    (rule 41)

	')'            reduce using rule 41
	'*'            reduce using rule 41
	'**'           shift, and enter state 36
	'->'           reduce using rule 41
	'.'            reduce using rule 41
	';'            reduce using rule 41
	']'            reduce using rule 41


State 18

	Type3 -> '!' . Type4                                (rule 40)

	'('            shift, and enter state 19
	'()'           shift, and enter state 20
	'BasisState'   shift, and enter state 21
	'Bit'          shift, and enter state 22
	'Bool'         shift, and enter state 23
	'Int'          shift, and enter state 24
	'Qbit'         shift, and enter state 25
	'['            shift, and enter state 26

	Type5          goto state 15
	Type4          goto state 35

State 19

	Type5 -> '(' . Type ')'                             (rule 49)

	'!'            shift, and enter state 18
	'('            shift, and enter state 19
	'()'           shift, and enter state 20
	'BasisState'   shift, and enter state 21
	'Bit'          shift, and enter state 22
	'Bool'         shift, and enter state 23
	'Int'          shift, and enter state 24
	'Qbit'         shift, and enter state 25
	'['            shift, and enter state 26

	Type           goto state 34
	Type2          goto state 13
	Type3          goto state 14
	Type5          goto state 15
	Type1          goto state 16
	Type4          goto state 17

State 20

	Type5 -> '()' .                                     (rule 47)

	')'            reduce using rule 47
	'*'            reduce using rule 47
	'**'           reduce using rule 47
	'->'           reduce using rule 47
	'.'            reduce using rule 47
	';'            reduce using rule 47
	']'            reduce using rule 47


State 21

	Type5 -> 'BasisState' .                             (rule 46)

	')'            reduce using rule 46
	'*'            reduce using rule 46
	'**'           reduce using rule 46
	'->'           reduce using rule 46
	'.'            reduce using rule 46
	';'            reduce using rule 46
	']'            reduce using rule 46


State 22

	Type5 -> 'Bit' .                                    (rule 43)

	')'            reduce using rule 43
	'*'            reduce using rule 43
	'**'           reduce using rule 43
	'->'           reduce using rule 43
	'.'            reduce using rule 43
	';'            reduce using rule 43
	']'            reduce using rule 43


State 23

	Type5 -> 'Bool' .                                   (rule 42)

	')'            reduce using rule 42
	'*'            reduce using rule 42
	'**'           reduce using rule 42
	'->'           reduce using rule 42
	'.'            reduce using rule 42
	';'            reduce using rule 42
	']'            reduce using rule 42


State 24

	Type5 -> 'Int' .                                    (rule 44)

	')'            reduce using rule 44
	'*'            reduce using rule 44
	'**'           reduce using rule 44
	'->'           reduce using rule 44
	'.'            reduce using rule 44
	';'            reduce using rule 44
	']'            reduce using rule 44


State 25

	Type5 -> 'Qbit' .                                   (rule 45)

	')'            reduce using rule 45
	'*'            reduce using rule 45
	'**'           reduce using rule 45
	'->'           reduce using rule 45
	'.'            reduce using rule 45
	';'            reduce using rule 45
	']'            reduce using rule 45


State 26

	Type5 -> '[' . Type ']'                             (rule 48)

	'!'            shift, and enter state 18
	'('            shift, and enter state 19
	'()'           shift, and enter state 20
	'BasisState'   shift, and enter state 21
	'Bit'          shift, and enter state 22
	'Bool'         shift, and enter state 23
	'Int'          shift, and enter state 24
	'Qbit'         shift, and enter state 25
	'['            shift, and enter state 26

	Type           goto state 33
	Type2          goto state 13
	Type3          goto state 14
	Type5          goto state 15
	Type1          goto state 16
	Type4          goto state 17

State 27

	FunctionDefinition -> Var . ListArg '=' Term        (rule 174)

	'='            reduce using rule 172
	L_Var          shift, and enter state 8

	Var            goto state 30
	Arg            goto state 31
	ListArg        goto state 32

State 28

	FunctionDefinition -> FunctionDefinition . ';'      (rule 175)
	FunctionDeclaration -> FunctionType ';' FunctionDefinition . ';'    (rule 178)

	';'            shift, and enter state 29


State 29

	FunctionDefinition -> FunctionDefinition ';' .      (rule 175)
	FunctionDeclaration -> FunctionType ';' FunctionDefinition ';' .    (rule 178)

	';'            reduce using rule 175
	L_Var          reduce using rule 178
	%eof           reduce using rule 178


State 30

	Arg -> Var .                                        (rule 171)

	'='            reduce using rule 171
	L_Var          reduce using rule 171


State 31

	ListArg -> Arg . ListArg                            (rule 173)

	'='            reduce using rule 172
	L_Var          shift, and enter state 8

	Var            goto state 30
	Arg            goto state 31
	ListArg        goto state 46

State 32

	FunctionDefinition -> Var ListArg . '=' Term        (rule 174)

	'='            shift, and enter state 45


State 33

	Type -> Type . '->' Type1                           (rule 35)
	Type5 -> '[' Type . ']'                             (rule 48)

	'->'           shift, and enter state 38
	']'            shift, and enter state 44


State 34

	Type -> Type . '->' Type1                           (rule 35)
	Type5 -> '(' Type . ')'                             (rule 49)

	')'            shift, and enter state 43
	'->'           shift, and enter state 38


State 35

	Type3 -> '!' Type4 .                                (rule 40)

	')'            reduce using rule 40
	'*'            reduce using rule 40
	'->'           reduce using rule 40
	'.'            reduce using rule 40
	';'            reduce using rule 40
	']'            reduce using rule 40


State 36

	Type3 -> Type4 '**' . Integer                       (rule 39)

	L_integ        shift, and enter state 42

	Integer        goto state 41

State 37

	Type2 -> Type2 '*' . Type3                          (rule 37)

	'!'            shift, and enter state 18
	'('            shift, and enter state 19
	'()'           shift, and enter state 20
	'BasisState'   shift, and enter state 21
	'Bit'          shift, and enter state 22
	'Bool'         shift, and enter state 23
	'Int'          shift, and enter state 24
	'Qbit'         shift, and enter state 25
	'['            shift, and enter state 26

	Type3          goto state 40
	Type5          goto state 15
	Type4          goto state 17

State 38

	Type -> Type '->' . Type1                           (rule 35)

	'!'            shift, and enter state 18
	'('            shift, and enter state 19
	'()'           shift, and enter state 20
	'BasisState'   shift, and enter state 21
	'Bit'          shift, and enter state 22
	'Bool'         shift, and enter state 23
	'Int'          shift, and enter state 24
	'Qbit'         shift, and enter state 25
	'['            shift, and enter state 26

	Type2          goto state 13
	Type3          goto state 14
	Type5          goto state 15
	Type1          goto state 39
	Type4          goto state 17

State 39

	Type -> Type '->' Type1 .                           (rule 35)

	')'            reduce using rule 35
	'->'           reduce using rule 35
	'.'            reduce using rule 35
	';'            reduce using rule 35
	']'            reduce using rule 35


State 40

	Type2 -> Type2 '*' Type3 .                          (rule 37)

	')'            reduce using rule 37
	'*'            reduce using rule 37
	'->'           reduce using rule 37
	'.'            reduce using rule 37
	';'            reduce using rule 37
	']'            reduce using rule 37


State 41

	Type3 -> Type4 '**' Integer .                       (rule 39)

	')'            reduce using rule 39
	'*'            reduce using rule 39
	'->'           reduce using rule 39
	'.'            reduce using rule 39
	';'            reduce using rule 39
	']'            reduce using rule 39


State 42

	Integer -> L_integ .                                (rule 2)

	'$'            reduce using rule 2
	'&&'           reduce using rule 2
	'('            reduce using rule 2
	'()'           reduce using rule 2
	')'            reduce using rule 2
	'*'            reduce using rule 2
	'+'            reduce using rule 2
	','            reduce using rule 2
	'-'            reduce using rule 2
	'->'           reduce using rule 2
	'.'            reduce using rule 2
	'/'            reduce using rule 2
	'/='           reduce using rule 2
	':'            reduce using rule 2
	';'            reduce using rule 2
	'<'            reduce using rule 2
	'<='           reduce using rule 2
	'=='           reduce using rule 2
	'>'            reduce using rule 2
	'>='           reduce using rule 2
	'@+'           reduce using rule 2
	'@+i'          reduce using rule 2
	'@-'           reduce using rule 2
	'@-i'          reduce using rule 2
	'@0'           reduce using rule 2
	'@1'           reduce using rule 2
	'False'        reduce using rule 2
	'True'         reduce using rule 2
	'['            reduce using rule 2
	'[]'           reduce using rule 2
	']'            reduce using rule 2
	'case'         reduce using rule 2
	'else'         reduce using rule 2
	'gate'         reduce using rule 2
	'if'           reduce using rule 2
	'let'          reduce using rule 2
	'not'          reduce using rule 2
	'of'           reduce using rule 2
	'then'         reduce using rule 2
	'with'         reduce using rule 2
	'|'            reduce using rule 2
	'||'           reduce using rule 2
	'}'            reduce using rule 2
	L_integ        reduce using rule 2
	L_Var          reduce using rule 2
	L_Bit          reduce using rule 2
	L_Lambda       reduce using rule 2


State 43

	Type5 -> '(' Type ')' .                             (rule 49)

	')'            reduce using rule 49
	'*'            reduce using rule 49
	'**'           reduce using rule 49
	'->'           reduce using rule 49
	'.'            reduce using rule 49
	';'            reduce using rule 49
	']'            reduce using rule 49


State 44

	Type5 -> '[' Type ']' .                             (rule 48)

	')'            reduce using rule 48
	'*'            reduce using rule 48
	'**'           reduce using rule 48
	'->'           reduce using rule 48
	'.'            reduce using rule 48
	';'            reduce using rule 48
	']'            reduce using rule 48


State 45

	FunctionDefinition -> Var ListArg '=' . Term        (rule 174)

	'('            shift, and enter state 67
	'()'           shift, and enter state 68
	'-'            shift, and enter state 69
	'@+'           shift, and enter state 70
	'@+i'          shift, and enter state 71
	'@-'           shift, and enter state 72
	'@-i'          shift, and enter state 73
	'@0'           shift, and enter state 74
	'@1'           shift, and enter state 75
	'False'        shift, and enter state 76
	'True'         shift, and enter state 77
	'['            shift, and enter state 78
	'[]'           shift, and enter state 79
	'case'         shift, and enter state 80
	'gate'         shift, and enter state 81
	'if'           shift, and enter state 82
	'let'          shift, and enter state 83
	'not'          shift, and enter state 84
	'with'         shift, and enter state 85
	'|'            shift, and enter state 86
	L_integ        shift, and enter state 42
	L_Var          shift, and enter state 8
	L_Bit          shift, and enter state 87
	L_Lambda       shift, and enter state 88

	Integer        goto state 47
	Var            goto state 48
	Bit            goto state 49
	Lambda         goto state 50
	IntegerExpression1goto state 51
	IntegerExpression2goto state 52
	IntegerExpression3goto state 53
	IntegerExpressiongoto state 54
	BoolValue      goto state 55
	BoolExpression goto state 56
	BoolExpression1goto state 57
	BoolExpression2goto state 58
	BasisState     goto state 59
	Term4          goto state 60
	Term3          goto state 61
	Term2          goto state 62
	Term1          goto state 63
	Term           goto state 64
	List1          goto state 65
	List           goto state 66

State 46

	ListArg -> Arg ListArg .                            (rule 173)

	'='            reduce using rule 173


State 47

	IntegerExpression3 -> Integer .                     (rule 15)

	'$'            reduce using rule 15
	'&&'           reduce using rule 15
	'('            reduce using rule 15
	'()'           reduce using rule 15
	')'            reduce using rule 15
	'*'            reduce using rule 15
	'+'            reduce using rule 15
	','            reduce using rule 15
	'-'            reduce using rule 15
	'->'           reduce using rule 15
	'.'            reduce using rule 15
	'/'            reduce using rule 15
	'/='           reduce using rule 15
	':'            reduce using rule 15
	';'            reduce using rule 15
	'<'            reduce using rule 15
	'<='           reduce using rule 15
	'=='           reduce using rule 15
	'>'            reduce using rule 15
	'>='           reduce using rule 15
	'@+'           reduce using rule 15
	'@+i'          reduce using rule 15
	'@-'           reduce using rule 15
	'@-i'          reduce using rule 15
	'@0'           reduce using rule 15
	'@1'           reduce using rule 15
	'False'        reduce using rule 15
	'True'         reduce using rule 15
	'['            reduce using rule 15
	'[]'           reduce using rule 15
	']'            reduce using rule 15
	'case'         reduce using rule 15
	'else'         reduce using rule 15
	'gate'         reduce using rule 15
	'if'           reduce using rule 15
	'let'          reduce using rule 15
	'not'          reduce using rule 15
	'of'           reduce using rule 15
	'then'         reduce using rule 15
	'with'         reduce using rule 15
	'|'            reduce using rule 15
	'||'           reduce using rule 15
	'}'            reduce using rule 15
	L_integ        reduce using rule 15
	L_Var          reduce using rule 15
	L_Bit          reduce using rule 15
	L_Lambda       reduce using rule 15


State 48

	Term3 -> Var .                                      (rule 137)
	Term1 -> Var . '<-' Term ';' Term                   (rule 153)

	'$'            reduce using rule 137
	'('            reduce using rule 137
	'()'           reduce using rule 137
	')'            reduce using rule 137
	'*'            reduce using rule 137
	','            reduce using rule 137
	'-'            reduce using rule 137
	'->'           reduce using rule 137
	'.'            reduce using rule 137
	':'            reduce using rule 137
	';'            reduce using rule 137
	'<-'           shift, and enter state 169
	'@+'           reduce using rule 137
	'@+i'          reduce using rule 137
	'@-'           reduce using rule 137
	'@-i'          reduce using rule 137
	'@0'           reduce using rule 137
	'@1'           reduce using rule 137
	'False'        reduce using rule 137
	'True'         reduce using rule 137
	'['            reduce using rule 137
	'[]'           reduce using rule 137
	']'            reduce using rule 137
	'case'         reduce using rule 137
	'else'         reduce using rule 137
	'gate'         reduce using rule 137
	'if'           reduce using rule 137
	'let'          reduce using rule 137
	'not'          reduce using rule 137
	'of'           reduce using rule 137
	'then'         reduce using rule 137
	'with'         reduce using rule 137
	'|'            reduce using rule 137
	'}'            reduce using rule 137
	L_integ        reduce using rule 137
	L_Var          reduce using rule 137
	L_Bit          reduce using rule 137
	L_Lambda       reduce using rule 137


State 49

	Term3 -> Bit .                                      (rule 131)

	'$'            reduce using rule 131
	'('            reduce using rule 131
	'()'           reduce using rule 131
	')'            reduce using rule 131
	'*'            reduce using rule 131
	','            reduce using rule 131
	'-'            reduce using rule 131
	'->'           reduce using rule 131
	'.'            reduce using rule 131
	':'            reduce using rule 131
	';'            reduce using rule 131
	'@+'           reduce using rule 131
	'@+i'          reduce using rule 131
	'@-'           reduce using rule 131
	'@-i'          reduce using rule 131
	'@0'           reduce using rule 131
	'@1'           reduce using rule 131
	'False'        reduce using rule 131
	'True'         reduce using rule 131
	'['            reduce using rule 131
	'[]'           reduce using rule 131
	']'            reduce using rule 131
	'case'         reduce using rule 131
	'else'         reduce using rule 131
	'gate'         reduce using rule 131
	'if'           reduce using rule 131
	'let'          reduce using rule 131
	'not'          reduce using rule 131
	'of'           reduce using rule 131
	'then'         reduce using rule 131
	'with'         reduce using rule 131
	'|'            reduce using rule 131
	'}'            reduce using rule 131
	L_integ        reduce using rule 131
	L_Var          reduce using rule 131
	L_Bit          reduce using rule 131
	L_Lambda       reduce using rule 131


State 50

	Term1 -> Lambda . Var Type '.' Term                 (rule 156)

	L_Var          shift, and enter state 8

	Var            goto state 168

State 51

	IntegerExpression1 -> IntegerExpression1 . '+' IntegerExpression2    (rule 9)
	IntegerExpression1 -> IntegerExpression1 . '-' IntegerExpression2    (rule 10)
	IntegerExpression -> IntegerExpression1 .           (rule 17)

	'$'            reduce using rule 17
	'('            reduce using rule 17
	'()'           reduce using rule 17
	')'            reduce using rule 17
	'*'            reduce using rule 17
	'+'            shift, and enter state 166
			(reduce using rule 17)

	','            reduce using rule 17
	'-'            shift, and enter state 167
			(reduce using rule 17)

	'->'           reduce using rule 17
	'.'            reduce using rule 17
	':'            reduce using rule 17
	';'            reduce using rule 17
	'@+'           reduce using rule 17
	'@+i'          reduce using rule 17
	'@-'           reduce using rule 17
	'@-i'          reduce using rule 17
	'@0'           reduce using rule 17
	'@1'           reduce using rule 17
	'False'        reduce using rule 17
	'True'         reduce using rule 17
	'['            reduce using rule 17
	'[]'           reduce using rule 17
	']'            reduce using rule 17
	'case'         reduce using rule 17
	'else'         reduce using rule 17
	'gate'         reduce using rule 17
	'if'           reduce using rule 17
	'let'          reduce using rule 17
	'not'          reduce using rule 17
	'of'           reduce using rule 17
	'then'         reduce using rule 17
	'with'         reduce using rule 17
	'|'            reduce using rule 17
	'}'            reduce using rule 17
	L_integ        reduce using rule 17
	L_Var          reduce using rule 17
	L_Bit          reduce using rule 17
	L_Lambda       reduce using rule 17


State 52

	IntegerExpression1 -> IntegerExpression2 .          (rule 11)
	IntegerExpression2 -> IntegerExpression2 . '*' IntegerExpression3    (rule 12)
	IntegerExpression2 -> IntegerExpression2 . '/' IntegerExpression3    (rule 13)
	BoolExpression2 -> IntegerExpression2 . '==' IntegerExpression2    (rule 27)
	BoolExpression2 -> IntegerExpression2 . '/=' IntegerExpression2    (rule 28)
	BoolExpression2 -> IntegerExpression2 . '>' IntegerExpression2    (rule 29)
	BoolExpression2 -> IntegerExpression2 . '>=' IntegerExpression2    (rule 30)
	BoolExpression2 -> IntegerExpression2 . '<' IntegerExpression2    (rule 31)
	BoolExpression2 -> IntegerExpression2 . '<=' IntegerExpression2    (rule 32)

	'$'            reduce using rule 11
	'('            reduce using rule 11
	'()'           reduce using rule 11
	')'            reduce using rule 11
	'*'            shift, and enter state 158
			(reduce using rule 11)

	'+'            reduce using rule 11
	','            reduce using rule 11
	'-'            reduce using rule 11
	'->'           reduce using rule 11
	'.'            reduce using rule 11
	'/'            shift, and enter state 159
	'/='           shift, and enter state 160
	':'            reduce using rule 11
	';'            reduce using rule 11
	'<'            shift, and enter state 161
	'<='           shift, and enter state 162
	'=='           shift, and enter state 163
	'>'            shift, and enter state 164
	'>='           shift, and enter state 165
	'@+'           reduce using rule 11
	'@+i'          reduce using rule 11
	'@-'           reduce using rule 11
	'@-i'          reduce using rule 11
	'@0'           reduce using rule 11
	'@1'           reduce using rule 11
	'False'        reduce using rule 11
	'True'         reduce using rule 11
	'['            reduce using rule 11
	'[]'           reduce using rule 11
	']'            reduce using rule 11
	'case'         reduce using rule 11
	'else'         reduce using rule 11
	'gate'         reduce using rule 11
	'if'           reduce using rule 11
	'let'          reduce using rule 11
	'not'          reduce using rule 11
	'of'           reduce using rule 11
	'then'         reduce using rule 11
	'with'         reduce using rule 11
	'|'            reduce using rule 11
	'}'            reduce using rule 11
	L_integ        reduce using rule 11
	L_Var          reduce using rule 11
	L_Bit          reduce using rule 11
	L_Lambda       reduce using rule 11


State 53

	IntegerExpression2 -> IntegerExpression3 .          (rule 14)

	'$'            reduce using rule 14
	'&&'           reduce using rule 14
	'('            reduce using rule 14
	'()'           reduce using rule 14
	')'            reduce using rule 14
	'*'            reduce using rule 14
	'+'            reduce using rule 14
	','            reduce using rule 14
	'-'            reduce using rule 14
	'->'           reduce using rule 14
	'.'            reduce using rule 14
	'/'            reduce using rule 14
	'/='           reduce using rule 14
	':'            reduce using rule 14
	';'            reduce using rule 14
	'<'            reduce using rule 14
	'<='           reduce using rule 14
	'=='           reduce using rule 14
	'>'            reduce using rule 14
	'>='           reduce using rule 14
	'@+'           reduce using rule 14
	'@+i'          reduce using rule 14
	'@-'           reduce using rule 14
	'@-i'          reduce using rule 14
	'@0'           reduce using rule 14
	'@1'           reduce using rule 14
	'False'        reduce using rule 14
	'True'         reduce using rule 14
	'['            reduce using rule 14
	'[]'           reduce using rule 14
	']'            reduce using rule 14
	'case'         reduce using rule 14
	'else'         reduce using rule 14
	'gate'         reduce using rule 14
	'if'           reduce using rule 14
	'let'          reduce using rule 14
	'not'          reduce using rule 14
	'of'           reduce using rule 14
	'then'         reduce using rule 14
	'with'         reduce using rule 14
	'|'            reduce using rule 14
	'||'           reduce using rule 14
	'}'            reduce using rule 14
	L_integ        reduce using rule 14
	L_Var          reduce using rule 14
	L_Bit          reduce using rule 14
	L_Lambda       reduce using rule 14


State 54

	Term3 -> IntegerExpression .                        (rule 134)

	'$'            reduce using rule 134
	'('            reduce using rule 134
	'()'           reduce using rule 134
	')'            reduce using rule 134
	'*'            reduce using rule 134
	','            reduce using rule 134
	'-'            reduce using rule 134
	'->'           reduce using rule 134
	'.'            reduce using rule 134
	':'            reduce using rule 134
	';'            reduce using rule 134
	'@+'           reduce using rule 134
	'@+i'          reduce using rule 134
	'@-'           reduce using rule 134
	'@-i'          reduce using rule 134
	'@0'           reduce using rule 134
	'@1'           reduce using rule 134
	'False'        reduce using rule 134
	'True'         reduce using rule 134
	'['            reduce using rule 134
	'[]'           reduce using rule 134
	']'            reduce using rule 134
	'case'         reduce using rule 134
	'else'         reduce using rule 134
	'gate'         reduce using rule 134
	'if'           reduce using rule 134
	'let'          reduce using rule 134
	'not'          reduce using rule 134
	'of'           reduce using rule 134
	'then'         reduce using rule 134
	'with'         reduce using rule 134
	'|'            reduce using rule 134
	'}'            reduce using rule 134
	L_integ        reduce using rule 134
	L_Var          reduce using rule 134
	L_Bit          reduce using rule 134
	L_Lambda       reduce using rule 134


State 55

	BoolExpression2 -> BoolValue .                      (rule 33)

	'$'            reduce using rule 33
	'&&'           reduce using rule 33
	'('            reduce using rule 33
	'()'           reduce using rule 33
	')'            reduce using rule 33
	'*'            reduce using rule 33
	','            reduce using rule 33
	'-'            reduce using rule 33
	'->'           reduce using rule 33
	'.'            reduce using rule 33
	'/='           reduce using rule 33
	':'            reduce using rule 33
	';'            reduce using rule 33
	'=='           reduce using rule 33
	'@+'           reduce using rule 33
	'@+i'          reduce using rule 33
	'@-'           reduce using rule 33
	'@-i'          reduce using rule 33
	'@0'           reduce using rule 33
	'@1'           reduce using rule 33
	'False'        reduce using rule 33
	'True'         reduce using rule 33
	'['            reduce using rule 33
	'[]'           reduce using rule 33
	']'            reduce using rule 33
	'case'         reduce using rule 33
	'else'         reduce using rule 33
	'gate'         reduce using rule 33
	'if'           reduce using rule 33
	'let'          reduce using rule 33
	'not'          reduce using rule 33
	'of'           reduce using rule 33
	'then'         reduce using rule 33
	'with'         reduce using rule 33
	'|'            reduce using rule 33
	'||'           reduce using rule 33
	'}'            reduce using rule 33
	L_integ        reduce using rule 33
	L_Var          reduce using rule 33
	L_Bit          reduce using rule 33
	L_Lambda       reduce using rule 33


State 56

	BoolExpression -> BoolExpression . '&&' BoolExpression1    (rule 20)
	BoolExpression -> BoolExpression . '||' BoolExpression1    (rule 21)
	Term3 -> BoolExpression .                           (rule 133)

	'$'            reduce using rule 133
	'&&'           shift, and enter state 156
	'('            reduce using rule 133
	'()'           reduce using rule 133
	')'            reduce using rule 133
	'*'            reduce using rule 133
	','            reduce using rule 133
	'-'            reduce using rule 133
	'->'           reduce using rule 133
	'.'            reduce using rule 133
	':'            reduce using rule 133
	';'            reduce using rule 133
	'@+'           reduce using rule 133
	'@+i'          reduce using rule 133
	'@-'           reduce using rule 133
	'@-i'          reduce using rule 133
	'@0'           reduce using rule 133
	'@1'           reduce using rule 133
	'False'        reduce using rule 133
	'True'         reduce using rule 133
	'['            reduce using rule 133
	'[]'           reduce using rule 133
	']'            reduce using rule 133
	'case'         reduce using rule 133
	'else'         reduce using rule 133
	'gate'         reduce using rule 133
	'if'           reduce using rule 133
	'let'          reduce using rule 133
	'not'          reduce using rule 133
	'of'           reduce using rule 133
	'then'         reduce using rule 133
	'with'         reduce using rule 133
	'|'            reduce using rule 133
	'||'           shift, and enter state 157
	'}'            reduce using rule 133
	L_integ        reduce using rule 133
	L_Var          reduce using rule 133
	L_Bit          reduce using rule 133
	L_Lambda       reduce using rule 133


State 57

	BoolExpression -> BoolExpression1 .                 (rule 23)
	BoolExpression1 -> BoolExpression1 . '==' BoolExpression2    (rule 24)
	BoolExpression1 -> BoolExpression1 . '/=' BoolExpression2    (rule 25)

	'$'            reduce using rule 23
	'&&'           reduce using rule 23
	'('            reduce using rule 23
	'()'           reduce using rule 23
	')'            reduce using rule 23
	'*'            reduce using rule 23
	','            reduce using rule 23
	'-'            reduce using rule 23
	'->'           reduce using rule 23
	'.'            reduce using rule 23
	'/='           shift, and enter state 154
	':'            reduce using rule 23
	';'            reduce using rule 23
	'=='           shift, and enter state 155
	'@+'           reduce using rule 23
	'@+i'          reduce using rule 23
	'@-'           reduce using rule 23
	'@-i'          reduce using rule 23
	'@0'           reduce using rule 23
	'@1'           reduce using rule 23
	'False'        reduce using rule 23
	'True'         reduce using rule 23
	'['            reduce using rule 23
	'[]'           reduce using rule 23
	']'            reduce using rule 23
	'case'         reduce using rule 23
	'else'         reduce using rule 23
	'gate'         reduce using rule 23
	'if'           reduce using rule 23
	'let'          reduce using rule 23
	'not'          reduce using rule 23
	'of'           reduce using rule 23
	'then'         reduce using rule 23
	'with'         reduce using rule 23
	'|'            reduce using rule 23
	'||'           reduce using rule 23
	'}'            reduce using rule 23
	L_integ        reduce using rule 23
	L_Var          reduce using rule 23
	L_Bit          reduce using rule 23
	L_Lambda       reduce using rule 23


State 58

	BoolExpression1 -> BoolExpression2 .                (rule 26)

	'$'            reduce using rule 26
	'&&'           reduce using rule 26
	'('            reduce using rule 26
	'()'           reduce using rule 26
	')'            reduce using rule 26
	'*'            reduce using rule 26
	','            reduce using rule 26
	'-'            reduce using rule 26
	'->'           reduce using rule 26
	'.'            reduce using rule 26
	'/='           reduce using rule 26
	':'            reduce using rule 26
	';'            reduce using rule 26
	'=='           reduce using rule 26
	'@+'           reduce using rule 26
	'@+i'          reduce using rule 26
	'@-'           reduce using rule 26
	'@-i'          reduce using rule 26
	'@0'           reduce using rule 26
	'@1'           reduce using rule 26
	'False'        reduce using rule 26
	'True'         reduce using rule 26
	'['            reduce using rule 26
	'[]'           reduce using rule 26
	']'            reduce using rule 26
	'case'         reduce using rule 26
	'else'         reduce using rule 26
	'gate'         reduce using rule 26
	'if'           reduce using rule 26
	'let'          reduce using rule 26
	'not'          reduce using rule 26
	'of'           reduce using rule 26
	'then'         reduce using rule 26
	'with'         reduce using rule 26
	'|'            reduce using rule 26
	'||'           reduce using rule 26
	'}'            reduce using rule 26
	L_integ        reduce using rule 26
	L_Var          reduce using rule 26
	L_Bit          reduce using rule 26
	L_Lambda       reduce using rule 26


State 59

	Term3 -> BasisState .                               (rule 132)

	'$'            reduce using rule 132
	'('            reduce using rule 132
	'()'           reduce using rule 132
	')'            reduce using rule 132
	'*'            reduce using rule 132
	','            reduce using rule 132
	'-'            reduce using rule 132
	'->'           reduce using rule 132
	'.'            reduce using rule 132
	':'            reduce using rule 132
	';'            reduce using rule 132
	'@+'           reduce using rule 132
	'@+i'          reduce using rule 132
	'@-'           reduce using rule 132
	'@-i'          reduce using rule 132
	'@0'           reduce using rule 132
	'@1'           reduce using rule 132
	'False'        reduce using rule 132
	'True'         reduce using rule 132
	'['            reduce using rule 132
	'[]'           reduce using rule 132
	']'            reduce using rule 132
	'case'         reduce using rule 132
	'else'         reduce using rule 132
	'gate'         reduce using rule 132
	'if'           reduce using rule 132
	'let'          reduce using rule 132
	'not'          reduce using rule 132
	'of'           reduce using rule 132
	'then'         reduce using rule 132
	'with'         reduce using rule 132
	'|'            reduce using rule 132
	'}'            reduce using rule 132
	L_integ        reduce using rule 132
	L_Var          reduce using rule 132
	L_Bit          reduce using rule 132
	L_Lambda       reduce using rule 132


State 60

	Term3 -> Term4 .                                    (rule 139)

	'$'            reduce using rule 139
	'('            reduce using rule 139
	'()'           reduce using rule 139
	')'            reduce using rule 139
	'*'            reduce using rule 139
	','            reduce using rule 139
	'-'            reduce using rule 139
	'->'           reduce using rule 139
	'.'            reduce using rule 139
	':'            reduce using rule 139
	';'            reduce using rule 139
	'@+'           reduce using rule 139
	'@+i'          reduce using rule 139
	'@-'           reduce using rule 139
	'@-i'          reduce using rule 139
	'@0'           reduce using rule 139
	'@1'           reduce using rule 139
	'False'        reduce using rule 139
	'True'         reduce using rule 139
	'['            reduce using rule 139
	'[]'           reduce using rule 139
	']'            reduce using rule 139
	'case'         reduce using rule 139
	'else'         reduce using rule 139
	'gate'         reduce using rule 139
	'if'           reduce using rule 139
	'let'          reduce using rule 139
	'not'          reduce using rule 139
	'of'           reduce using rule 139
	'then'         reduce using rule 139
	'with'         reduce using rule 139
	'|'            reduce using rule 139
	'}'            reduce using rule 139
	L_integ        reduce using rule 139
	L_Var          reduce using rule 139
	L_Bit          reduce using rule 139
	L_Lambda       reduce using rule 139


State 61

	Term2 -> Term3 .                                    (rule 149)
	List -> Term3 . ':' List1                           (rule 165)

	'$'            reduce using rule 149
	'('            reduce using rule 149
	'()'           reduce using rule 149
	')'            reduce using rule 149
	'*'            reduce using rule 149
	','            reduce using rule 149
	'-'            reduce using rule 149
	'->'           reduce using rule 149
	'.'            reduce using rule 149
	':'            shift, and enter state 153
	';'            reduce using rule 149
	'@+'           reduce using rule 149
	'@+i'          reduce using rule 149
	'@-'           reduce using rule 149
	'@-i'          reduce using rule 149
	'@0'           reduce using rule 149
	'@1'           reduce using rule 149
	'False'        reduce using rule 149
	'True'         reduce using rule 149
	'['            reduce using rule 149
	'[]'           reduce using rule 149
	']'            reduce using rule 149
	'case'         reduce using rule 149
	'else'         reduce using rule 149
	'gate'         reduce using rule 149
	'if'           reduce using rule 149
	'let'          reduce using rule 149
	'not'          reduce using rule 149
	'of'           reduce using rule 149
	'then'         reduce using rule 149
	'with'         reduce using rule 149
	'|'            reduce using rule 149
	'}'            reduce using rule 149
	L_integ        reduce using rule 149
	L_Var          reduce using rule 149
	L_Bit          reduce using rule 149
	L_Lambda       reduce using rule 149


State 62

	Term2 -> Term2 . Term3                              (rule 146)
	Term2 -> Term2 . '.' Term3                          (rule 147)
	Term2 -> Term2 . '*' Term3                          (rule 148)
	Term1 -> Term2 .                                    (rule 157)

	'$'            reduce using rule 157
	'('            shift, and enter state 67
			(reduce using rule 157)

	'()'           shift, and enter state 68
			(reduce using rule 157)

	')'            reduce using rule 157
	'*'            shift, and enter state 151
	','            reduce using rule 157
	'-'            shift, and enter state 69
			(reduce using rule 157)

	'->'           reduce using rule 157
	'.'            shift, and enter state 152
	';'            reduce using rule 157
	'@+'           shift, and enter state 70
			(reduce using rule 157)

	'@+i'          shift, and enter state 71
			(reduce using rule 157)

	'@-'           shift, and enter state 72
			(reduce using rule 157)

	'@-i'          shift, and enter state 73
			(reduce using rule 157)

	'@0'           shift, and enter state 74
			(reduce using rule 157)

	'@1'           shift, and enter state 75
			(reduce using rule 157)

	'False'        shift, and enter state 76
			(reduce using rule 157)

	'True'         shift, and enter state 77
			(reduce using rule 157)

	'['            shift, and enter state 78
			(reduce using rule 157)

	'[]'           shift, and enter state 79
			(reduce using rule 157)

	']'            reduce using rule 157
	'case'         reduce using rule 157
	'else'         reduce using rule 157
	'gate'         shift, and enter state 81
			(reduce using rule 157)

	'if'           reduce using rule 157
	'let'          reduce using rule 157
	'not'          shift, and enter state 84
			(reduce using rule 157)

	'of'           reduce using rule 157
	'then'         reduce using rule 157
	'with'         reduce using rule 157
	'|'            reduce using rule 157
	'}'            reduce using rule 157
	L_integ        shift, and enter state 42
			(reduce using rule 157)

	L_Var          shift, and enter state 8
			(reduce using rule 157)

	L_Bit          shift, and enter state 87
			(reduce using rule 157)

	L_Lambda       reduce using rule 157

	Integer        goto state 47
	Var            goto state 149
	Bit            goto state 49
	IntegerExpression1goto state 51
	IntegerExpression2goto state 52
	IntegerExpression3goto state 53
	IntegerExpressiongoto state 54
	BoolValue      goto state 55
	BoolExpression goto state 56
	BoolExpression1goto state 57
	BoolExpression2goto state 58
	BasisState     goto state 59
	Term4          goto state 60
	Term3          goto state 150
	List1          goto state 65
	List           goto state 66

State 63

	Term -> Term1 . '$' Term                            (rule 158)
	Term -> Term1 .                                     (rule 159)

	'$'            shift, and enter state 148
			(reduce using rule 159)

	'('            reduce using rule 159
	'()'           reduce using rule 159
	')'            reduce using rule 159
	','            reduce using rule 159
	'-'            reduce using rule 159
	'->'           reduce using rule 159
	';'            reduce using rule 159
	'@+'           reduce using rule 159
	'@+i'          reduce using rule 159
	'@-'           reduce using rule 159
	'@-i'          reduce using rule 159
	'@0'           reduce using rule 159
	'@1'           reduce using rule 159
	'False'        reduce using rule 159
	'True'         reduce using rule 159
	'['            reduce using rule 159
	'[]'           reduce using rule 159
	']'            reduce using rule 159
	'case'         reduce using rule 159
	'else'         reduce using rule 159
	'gate'         reduce using rule 159
	'if'           reduce using rule 159
	'let'          reduce using rule 159
	'not'          reduce using rule 159
	'of'           reduce using rule 159
	'then'         reduce using rule 159
	'with'         reduce using rule 159
	'|'            reduce using rule 159
	'}'            reduce using rule 159
	L_integ        reduce using rule 159
	L_Var          reduce using rule 159
	L_Bit          reduce using rule 159
	L_Lambda       reduce using rule 159


State 64

	FunctionDefinition -> Var ListArg '=' Term .        (rule 174)

	';'            reduce using rule 174


State 65

	List -> List1 .                                     (rule 166)

	'!!'           reduce using rule 166
	'$'            reduce using rule 166
	'('            reduce using rule 166
	'()'           reduce using rule 166
	')'            reduce using rule 166
	'*'            reduce using rule 166
	'++'           reduce using rule 166
	','            reduce using rule 166
	'-'            reduce using rule 166
	'->'           reduce using rule 166
	'.'            reduce using rule 166
	':'            reduce using rule 166
	';'            reduce using rule 166
	'@+'           reduce using rule 166
	'@+i'          reduce using rule 166
	'@-'           reduce using rule 166
	'@-i'          reduce using rule 166
	'@0'           reduce using rule 166
	'@1'           reduce using rule 166
	'False'        reduce using rule 166
	'True'         reduce using rule 166
	'['            reduce using rule 166
	'[]'           reduce using rule 166
	']'            reduce using rule 166
	'case'         reduce using rule 166
	'else'         reduce using rule 166
	'gate'         reduce using rule 166
	'if'           reduce using rule 166
	'let'          reduce using rule 166
	'not'          reduce using rule 166
	'of'           reduce using rule 166
	'then'         reduce using rule 166
	'with'         reduce using rule 166
	'|'            reduce using rule 166
	'}'            reduce using rule 166
	L_integ        reduce using rule 166
	L_Var          reduce using rule 166
	L_Bit          reduce using rule 166
	L_Lambda       reduce using rule 166


State 66

	Term4 -> List . '!!' Integer                        (rule 128)
	Term3 -> List .                                     (rule 136)
	List -> List . '++' List1                           (rule 164)

	'!!'           shift, and enter state 146
	'$'            reduce using rule 136
	'('            reduce using rule 136
	'()'           reduce using rule 136
	')'            reduce using rule 136
	'*'            reduce using rule 136
	'++'           shift, and enter state 147
	','            reduce using rule 136
	'-'            reduce using rule 136
	'->'           reduce using rule 136
	'.'            reduce using rule 136
	':'            reduce using rule 136
	';'            reduce using rule 136
	'@+'           reduce using rule 136
	'@+i'          reduce using rule 136
	'@-'           reduce using rule 136
	'@-i'          reduce using rule 136
	'@0'           reduce using rule 136
	'@1'           reduce using rule 136
	'False'        reduce using rule 136
	'True'         reduce using rule 136
	'['            reduce using rule 136
	'[]'           reduce using rule 136
	']'            reduce using rule 136
	'case'         reduce using rule 136
	'else'         reduce using rule 136
	'gate'         reduce using rule 136
	'if'           reduce using rule 136
	'let'          reduce using rule 136
	'not'          reduce using rule 136
	'of'           reduce using rule 136
	'then'         reduce using rule 136
	'with'         reduce using rule 136
	'|'            reduce using rule 136
	'}'            reduce using rule 136
	L_integ        reduce using rule 136
	L_Var          reduce using rule 136
	L_Bit          reduce using rule 136
	L_Lambda       reduce using rule 136


State 67

	IntegerExpression3 -> '(' . IntegerExpression ')'    (rule 16)
	BoolExpression2 -> '(' . BoolExpression ')'         (rule 34)
	Term4 -> '(' . Term ')'                             (rule 129)
	Term3 -> '(' . Term ',' ListTerm ')'                (rule 138)
	List1 -> '(' . List ')'                             (rule 163)

	'('            shift, and enter state 67
	'()'           shift, and enter state 68
	'-'            shift, and enter state 69
	'@+'           shift, and enter state 70
	'@+i'          shift, and enter state 71
	'@-'           shift, and enter state 72
	'@-i'          shift, and enter state 73
	'@0'           shift, and enter state 74
	'@1'           shift, and enter state 75
	'False'        shift, and enter state 76
	'True'         shift, and enter state 77
	'['            shift, and enter state 78
	'[]'           shift, and enter state 79
	'case'         shift, and enter state 80
	'gate'         shift, and enter state 81
	'if'           shift, and enter state 82
	'let'          shift, and enter state 83
	'not'          shift, and enter state 84
	'with'         shift, and enter state 85
	'|'            shift, and enter state 86
	L_integ        shift, and enter state 42
	L_Var          shift, and enter state 8
	L_Bit          shift, and enter state 87
	L_Lambda       shift, and enter state 88

	Integer        goto state 47
	Var            goto state 48
	Bit            goto state 49
	Lambda         goto state 50
	IntegerExpression1goto state 51
	IntegerExpression2goto state 52
	IntegerExpression3goto state 53
	IntegerExpressiongoto state 142
	BoolValue      goto state 55
	BoolExpression goto state 143
	BoolExpression1goto state 57
	BoolExpression2goto state 58
	BasisState     goto state 59
	Term4          goto state 60
	Term3          goto state 61
	Term2          goto state 62
	Term1          goto state 63
	Term           goto state 144
	List1          goto state 65
	List           goto state 145

State 68

	Term3 -> '()' .                                     (rule 130)

	'$'            reduce using rule 130
	'('            reduce using rule 130
	'()'           reduce using rule 130
	')'            reduce using rule 130
	'*'            reduce using rule 130
	','            reduce using rule 130
	'-'            reduce using rule 130
	'->'           reduce using rule 130
	'.'            reduce using rule 130
	':'            reduce using rule 130
	';'            reduce using rule 130
	'@+'           reduce using rule 130
	'@+i'          reduce using rule 130
	'@-'           reduce using rule 130
	'@-i'          reduce using rule 130
	'@0'           reduce using rule 130
	'@1'           reduce using rule 130
	'False'        reduce using rule 130
	'True'         reduce using rule 130
	'['            reduce using rule 130
	'[]'           reduce using rule 130
	']'            reduce using rule 130
	'case'         reduce using rule 130
	'else'         reduce using rule 130
	'gate'         reduce using rule 130
	'if'           reduce using rule 130
	'let'          reduce using rule 130
	'not'          reduce using rule 130
	'of'           reduce using rule 130
	'then'         reduce using rule 130
	'with'         reduce using rule 130
	'|'            reduce using rule 130
	'}'            reduce using rule 130
	L_integ        reduce using rule 130
	L_Var          reduce using rule 130
	L_Bit          reduce using rule 130
	L_Lambda       reduce using rule 130


State 69

	IntegerExpression1 -> '-' . IntegerExpression       (rule 8)

	'('            shift, and enter state 141
	'-'            shift, and enter state 69
	L_integ        shift, and enter state 42

	Integer        goto state 47
	IntegerExpression1goto state 51
	IntegerExpression2goto state 139
	IntegerExpression3goto state 53
	IntegerExpressiongoto state 140

State 70

	BasisState -> '@+' .                                (rule 55)

	'$'            reduce using rule 55
	'('            reduce using rule 55
	'()'           reduce using rule 55
	')'            reduce using rule 55
	'*'            reduce using rule 55
	','            reduce using rule 55
	'-'            reduce using rule 55
	'->'           reduce using rule 55
	'.'            reduce using rule 55
	':'            reduce using rule 55
	';'            reduce using rule 55
	'@+'           reduce using rule 55
	'@+i'          reduce using rule 55
	'@-'           reduce using rule 55
	'@-i'          reduce using rule 55
	'@0'           reduce using rule 55
	'@1'           reduce using rule 55
	'False'        reduce using rule 55
	'True'         reduce using rule 55
	'['            reduce using rule 55
	'[]'           reduce using rule 55
	']'            reduce using rule 55
	'case'         reduce using rule 55
	'else'         reduce using rule 55
	'gate'         reduce using rule 55
	'if'           reduce using rule 55
	'let'          reduce using rule 55
	'not'          reduce using rule 55
	'of'           reduce using rule 55
	'then'         reduce using rule 55
	'with'         reduce using rule 55
	'|'            reduce using rule 55
	'}'            reduce using rule 55
	L_integ        reduce using rule 55
	L_Var          reduce using rule 55
	L_Bit          reduce using rule 55
	L_Lambda       reduce using rule 55


State 71

	BasisState -> '@+i' .                               (rule 57)

	'$'            reduce using rule 57
	'('            reduce using rule 57
	'()'           reduce using rule 57
	')'            reduce using rule 57
	'*'            reduce using rule 57
	','            reduce using rule 57
	'-'            reduce using rule 57
	'->'           reduce using rule 57
	'.'            reduce using rule 57
	':'            reduce using rule 57
	';'            reduce using rule 57
	'@+'           reduce using rule 57
	'@+i'          reduce using rule 57
	'@-'           reduce using rule 57
	'@-i'          reduce using rule 57
	'@0'           reduce using rule 57
	'@1'           reduce using rule 57
	'False'        reduce using rule 57
	'True'         reduce using rule 57
	'['            reduce using rule 57
	'[]'           reduce using rule 57
	']'            reduce using rule 57
	'case'         reduce using rule 57
	'else'         reduce using rule 57
	'gate'         reduce using rule 57
	'if'           reduce using rule 57
	'let'          reduce using rule 57
	'not'          reduce using rule 57
	'of'           reduce using rule 57
	'then'         reduce using rule 57
	'with'         reduce using rule 57
	'|'            reduce using rule 57
	'}'            reduce using rule 57
	L_integ        reduce using rule 57
	L_Var          reduce using rule 57
	L_Bit          reduce using rule 57
	L_Lambda       reduce using rule 57


State 72

	BasisState -> '@-' .                                (rule 56)

	'$'            reduce using rule 56
	'('            reduce using rule 56
	'()'           reduce using rule 56
	')'            reduce using rule 56
	'*'            reduce using rule 56
	','            reduce using rule 56
	'-'            reduce using rule 56
	'->'           reduce using rule 56
	'.'            reduce using rule 56
	':'            reduce using rule 56
	';'            reduce using rule 56
	'@+'           reduce using rule 56
	'@+i'          reduce using rule 56
	'@-'           reduce using rule 56
	'@-i'          reduce using rule 56
	'@0'           reduce using rule 56
	'@1'           reduce using rule 56
	'False'        reduce using rule 56
	'True'         reduce using rule 56
	'['            reduce using rule 56
	'[]'           reduce using rule 56
	']'            reduce using rule 56
	'case'         reduce using rule 56
	'else'         reduce using rule 56
	'gate'         reduce using rule 56
	'if'           reduce using rule 56
	'let'          reduce using rule 56
	'not'          reduce using rule 56
	'of'           reduce using rule 56
	'then'         reduce using rule 56
	'with'         reduce using rule 56
	'|'            reduce using rule 56
	'}'            reduce using rule 56
	L_integ        reduce using rule 56
	L_Var          reduce using rule 56
	L_Bit          reduce using rule 56
	L_Lambda       reduce using rule 56


State 73

	BasisState -> '@-i' .                               (rule 58)

	'$'            reduce using rule 58
	'('            reduce using rule 58
	'()'           reduce using rule 58
	')'            reduce using rule 58
	'*'            reduce using rule 58
	','            reduce using rule 58
	'-'            reduce using rule 58
	'->'           reduce using rule 58
	'.'            reduce using rule 58
	':'            reduce using rule 58
	';'            reduce using rule 58
	'@+'           reduce using rule 58
	'@+i'          reduce using rule 58
	'@-'           reduce using rule 58
	'@-i'          reduce using rule 58
	'@0'           reduce using rule 58
	'@1'           reduce using rule 58
	'False'        reduce using rule 58
	'True'         reduce using rule 58
	'['            reduce using rule 58
	'[]'           reduce using rule 58
	']'            reduce using rule 58
	'case'         reduce using rule 58
	'else'         reduce using rule 58
	'gate'         reduce using rule 58
	'if'           reduce using rule 58
	'let'          reduce using rule 58
	'not'          reduce using rule 58
	'of'           reduce using rule 58
	'then'         reduce using rule 58
	'with'         reduce using rule 58
	'|'            reduce using rule 58
	'}'            reduce using rule 58
	L_integ        reduce using rule 58
	L_Var          reduce using rule 58
	L_Bit          reduce using rule 58
	L_Lambda       reduce using rule 58


State 74

	BasisState -> '@0' .                                (rule 53)

	'$'            reduce using rule 53
	'('            reduce using rule 53
	'()'           reduce using rule 53
	')'            reduce using rule 53
	'*'            reduce using rule 53
	','            reduce using rule 53
	'-'            reduce using rule 53
	'->'           reduce using rule 53
	'.'            reduce using rule 53
	':'            reduce using rule 53
	';'            reduce using rule 53
	'@+'           reduce using rule 53
	'@+i'          reduce using rule 53
	'@-'           reduce using rule 53
	'@-i'          reduce using rule 53
	'@0'           reduce using rule 53
	'@1'           reduce using rule 53
	'False'        reduce using rule 53
	'True'         reduce using rule 53
	'['            reduce using rule 53
	'[]'           reduce using rule 53
	']'            reduce using rule 53
	'case'         reduce using rule 53
	'else'         reduce using rule 53
	'gate'         reduce using rule 53
	'if'           reduce using rule 53
	'let'          reduce using rule 53
	'not'          reduce using rule 53
	'of'           reduce using rule 53
	'then'         reduce using rule 53
	'with'         reduce using rule 53
	'|'            reduce using rule 53
	'}'            reduce using rule 53
	L_integ        reduce using rule 53
	L_Var          reduce using rule 53
	L_Bit          reduce using rule 53
	L_Lambda       reduce using rule 53


State 75

	BasisState -> '@1' .                                (rule 54)

	'$'            reduce using rule 54
	'('            reduce using rule 54
	'()'           reduce using rule 54
	')'            reduce using rule 54
	'*'            reduce using rule 54
	','            reduce using rule 54
	'-'            reduce using rule 54
	'->'           reduce using rule 54
	'.'            reduce using rule 54
	':'            reduce using rule 54
	';'            reduce using rule 54
	'@+'           reduce using rule 54
	'@+i'          reduce using rule 54
	'@-'           reduce using rule 54
	'@-i'          reduce using rule 54
	'@0'           reduce using rule 54
	'@1'           reduce using rule 54
	'False'        reduce using rule 54
	'True'         reduce using rule 54
	'['            reduce using rule 54
	'[]'           reduce using rule 54
	']'            reduce using rule 54
	'case'         reduce using rule 54
	'else'         reduce using rule 54
	'gate'         reduce using rule 54
	'if'           reduce using rule 54
	'let'          reduce using rule 54
	'not'          reduce using rule 54
	'of'           reduce using rule 54
	'then'         reduce using rule 54
	'with'         reduce using rule 54
	'|'            reduce using rule 54
	'}'            reduce using rule 54
	L_integ        reduce using rule 54
	L_Var          reduce using rule 54
	L_Bit          reduce using rule 54
	L_Lambda       reduce using rule 54


State 76

	BoolValue -> 'False' .                              (rule 19)

	'$'            reduce using rule 19
	'&&'           reduce using rule 19
	'('            reduce using rule 19
	'()'           reduce using rule 19
	')'            reduce using rule 19
	'*'            reduce using rule 19
	','            reduce using rule 19
	'-'            reduce using rule 19
	'->'           reduce using rule 19
	'.'            reduce using rule 19
	'/='           reduce using rule 19
	':'            reduce using rule 19
	';'            reduce using rule 19
	'=='           reduce using rule 19
	'@+'           reduce using rule 19
	'@+i'          reduce using rule 19
	'@-'           reduce using rule 19
	'@-i'          reduce using rule 19
	'@0'           reduce using rule 19
	'@1'           reduce using rule 19
	'False'        reduce using rule 19
	'True'         reduce using rule 19
	'['            reduce using rule 19
	'[]'           reduce using rule 19
	']'            reduce using rule 19
	'case'         reduce using rule 19
	'else'         reduce using rule 19
	'gate'         reduce using rule 19
	'if'           reduce using rule 19
	'let'          reduce using rule 19
	'not'          reduce using rule 19
	'of'           reduce using rule 19
	'then'         reduce using rule 19
	'with'         reduce using rule 19
	'|'            reduce using rule 19
	'||'           reduce using rule 19
	'}'            reduce using rule 19
	L_integ        reduce using rule 19
	L_Var          reduce using rule 19
	L_Bit          reduce using rule 19
	L_Lambda       reduce using rule 19


State 77

	BoolValue -> 'True' .                               (rule 18)

	'$'            reduce using rule 18
	'&&'           reduce using rule 18
	'('            reduce using rule 18
	'()'           reduce using rule 18
	')'            reduce using rule 18
	'*'            reduce using rule 18
	','            reduce using rule 18
	'-'            reduce using rule 18
	'->'           reduce using rule 18
	'.'            reduce using rule 18
	'/='           reduce using rule 18
	':'            reduce using rule 18
	';'            reduce using rule 18
	'=='           reduce using rule 18
	'@+'           reduce using rule 18
	'@+i'          reduce using rule 18
	'@-'           reduce using rule 18
	'@-i'          reduce using rule 18
	'@0'           reduce using rule 18
	'@1'           reduce using rule 18
	'False'        reduce using rule 18
	'True'         reduce using rule 18
	'['            reduce using rule 18
	'[]'           reduce using rule 18
	']'            reduce using rule 18
	'case'         reduce using rule 18
	'else'         reduce using rule 18
	'gate'         reduce using rule 18
	'if'           reduce using rule 18
	'let'          reduce using rule 18
	'not'          reduce using rule 18
	'of'           reduce using rule 18
	'then'         reduce using rule 18
	'with'         reduce using rule 18
	'|'            reduce using rule 18
	'||'           reduce using rule 18
	'}'            reduce using rule 18
	L_integ        reduce using rule 18
	L_Var          reduce using rule 18
	L_Bit          reduce using rule 18
	L_Lambda       reduce using rule 18


State 78

	List1 -> '[' . Term ']'                             (rule 161)
	List1 -> '[' . Term ',' ListTerm ']'                (rule 162)

	'('            shift, and enter state 67
	'()'           shift, and enter state 68
	'-'            shift, and enter state 69
	'@+'           shift, and enter state 70
	'@+i'          shift, and enter state 71
	'@-'           shift, and enter state 72
	'@-i'          shift, and enter state 73
	'@0'           shift, and enter state 74
	'@1'           shift, and enter state 75
	'False'        shift, and enter state 76
	'True'         shift, and enter state 77
	'['            shift, and enter state 78
	'[]'           shift, and enter state 79
	'case'         shift, and enter state 80
	'gate'         shift, and enter state 81
	'if'           shift, and enter state 82
	'let'          shift, and enter state 83
	'not'          shift, and enter state 84
	'with'         shift, and enter state 85
	'|'            shift, and enter state 86
	L_integ        shift, and enter state 42
	L_Var          shift, and enter state 8
	L_Bit          shift, and enter state 87
	L_Lambda       shift, and enter state 88

	Integer        goto state 47
	Var            goto state 48
	Bit            goto state 49
	Lambda         goto state 50
	IntegerExpression1goto state 51
	IntegerExpression2goto state 52
	IntegerExpression3goto state 53
	IntegerExpressiongoto state 54
	BoolValue      goto state 55
	BoolExpression goto state 56
	BoolExpression1goto state 57
	BoolExpression2goto state 58
	BasisState     goto state 59
	Term4          goto state 60
	Term3          goto state 61
	Term2          goto state 62
	Term1          goto state 63
	Term           goto state 138
	List1          goto state 65
	List           goto state 66

State 79

	List1 -> '[]' .                                     (rule 160)

	'!!'           reduce using rule 160
	'$'            reduce using rule 160
	'('            reduce using rule 160
	'()'           reduce using rule 160
	')'            reduce using rule 160
	'*'            reduce using rule 160
	'++'           reduce using rule 160
	','            reduce using rule 160
	'-'            reduce using rule 160
	'->'           reduce using rule 160
	'.'            reduce using rule 160
	':'            reduce using rule 160
	';'            reduce using rule 160
	'@+'           reduce using rule 160
	'@+i'          reduce using rule 160
	'@-'           reduce using rule 160
	'@-i'          reduce using rule 160
	'@0'           reduce using rule 160
	'@1'           reduce using rule 160
	'False'        reduce using rule 160
	'True'         reduce using rule 160
	'['            reduce using rule 160
	'[]'           reduce using rule 160
	']'            reduce using rule 160
	'case'         reduce using rule 160
	'else'         reduce using rule 160
	'gate'         reduce using rule 160
	'if'           reduce using rule 160
	'let'          reduce using rule 160
	'not'          reduce using rule 160
	'of'           reduce using rule 160
	'then'         reduce using rule 160
	'with'         reduce using rule 160
	'|'            reduce using rule 160
	'}'            reduce using rule 160
	L_integ        reduce using rule 160
	L_Var          reduce using rule 160
	L_Bit          reduce using rule 160
	L_Lambda       reduce using rule 160


State 80

	Term1 -> 'case' . Term 'of' '{' ListCaseExpression '}'    (rule 155)

	'('            shift, and enter state 67
	'()'           shift, and enter state 68
	'-'            shift, and enter state 69
	'@+'           shift, and enter state 70
	'@+i'          shift, and enter state 71
	'@-'           shift, and enter state 72
	'@-i'          shift, and enter state 73
	'@0'           shift, and enter state 74
	'@1'           shift, and enter state 75
	'False'        shift, and enter state 76
	'True'         shift, and enter state 77
	'['            shift, and enter state 78
	'[]'           shift, and enter state 79
	'case'         shift, and enter state 80
	'gate'         shift, and enter state 81
	'if'           shift, and enter state 82
	'let'          shift, and enter state 83
	'not'          shift, and enter state 84
	'with'         shift, and enter state 85
	'|'            shift, and enter state 86
	L_integ        shift, and enter state 42
	L_Var          shift, and enter state 8
	L_Bit          shift, and enter state 87
	L_Lambda       shift, and enter state 88

	Integer        goto state 47
	Var            goto state 48
	Bit            goto state 49
	Lambda         goto state 50
	IntegerExpression1goto state 51
	IntegerExpression2goto state 52
	IntegerExpression3goto state 53
	IntegerExpressiongoto state 54
	BoolValue      goto state 55
	BoolExpression goto state 56
	BoolExpression1goto state 57
	BoolExpression2goto state 58
	BasisState     goto state 59
	Term4          goto state 60
	Term3          goto state 61
	Term2          goto state 62
	Term1          goto state 63
	Term           goto state 137
	List1          goto state 65
	List           goto state 66

State 81

	Term3 -> 'gate' . Gate                              (rule 135)

	'FSWAP'        shift, and enter state 101
	'H'            shift, and enter state 102
	'ID'           shift, and enter state 103
	'ISWAP'        shift, and enter state 104
	'QFT'          shift, and enter state 105
	'QFT_DAG'      shift, and enter state 106
	'ROOT_SWAP'    shift, and enter state 107
	'ROOT_SWAP_DAG'shift, and enter state 108
	'ROOT_X'       shift, and enter state 109
	'ROOT_X_DAG'   shift, and enter state 110
	'ROOT_Y'       shift, and enter state 111
	'ROOT_Y_DAG'   shift, and enter state 112
	'ROOT_Z'       shift, and enter state 113
	'ROOT_Z_DAG'   shift, and enter state 114
	'RX'           shift, and enter state 115
	'RY'           shift, and enter state 116
	'RZ'           shift, and enter state 117
	'S'            shift, and enter state 118
	'SQRT_SWAP'    shift, and enter state 119
	'SQRT_SWAP_DAG'shift, and enter state 120
	'SQRT_X'       shift, and enter state 121
	'SQRT_X_DAG'   shift, and enter state 122
	'SQRT_Y'       shift, and enter state 123
	'SQRT_Y_DAG'   shift, and enter state 124
	'SWAP'         shift, and enter state 125
	'SWAP_THETA'   shift, and enter state 126
	'S_DAG'        shift, and enter state 127
	'T'            shift, and enter state 128
	'T_DAG'        shift, and enter state 129
	'U1'           shift, and enter state 130
	'U2'           shift, and enter state 131
	'U3'           shift, and enter state 132
	'X'            shift, and enter state 133
	'Y'            shift, and enter state 134
	'Z'            shift, and enter state 135
	L_GateVar      shift, and enter state 136

	GateVar        goto state 99
	Gate           goto state 100

State 82

	Term1 -> 'if' . Term 'then' Term 'else' Term        (rule 150)

	'('            shift, and enter state 67
	'()'           shift, and enter state 68
	'-'            shift, and enter state 69
	'@+'           shift, and enter state 70
	'@+i'          shift, and enter state 71
	'@-'           shift, and enter state 72
	'@-i'          shift, and enter state 73
	'@0'           shift, and enter state 74
	'@1'           shift, and enter state 75
	'False'        shift, and enter state 76
	'True'         shift, and enter state 77
	'['            shift, and enter state 78
	'[]'           shift, and enter state 79
	'case'         shift, and enter state 80
	'gate'         shift, and enter state 81
	'if'           shift, and enter state 82
	'let'          shift, and enter state 83
	'not'          shift, and enter state 84
	'with'         shift, and enter state 85
	'|'            shift, and enter state 86
	L_integ        shift, and enter state 42
	L_Var          shift, and enter state 8
	L_Bit          shift, and enter state 87
	L_Lambda       shift, and enter state 88

	Integer        goto state 47
	Var            goto state 48
	Bit            goto state 49
	Lambda         goto state 50
	IntegerExpression1goto state 51
	IntegerExpression2goto state 52
	IntegerExpression3goto state 53
	IntegerExpressiongoto state 54
	BoolValue      goto state 55
	BoolExpression goto state 56
	BoolExpression1goto state 57
	BoolExpression2goto state 58
	BasisState     goto state 59
	Term4          goto state 60
	Term3          goto state 61
	Term2          goto state 62
	Term1          goto state 63
	Term           goto state 98
	List1          goto state 65
	List           goto state 66

State 83

	Term1 -> 'let' . '{' Var '=' Term '}' 'in' Term     (rule 151)
	Term1 -> 'let' . '{' '(' Var ',' ListVar ')' '=' Term '}' 'in' Term    (rule 152)

	'{'            shift, and enter state 97


State 84

	BoolExpression -> 'not' . BoolExpression1           (rule 22)

	'('            shift, and enter state 96
	'False'        shift, and enter state 76
	'True'         shift, and enter state 77
	L_integ        shift, and enter state 42

	Integer        goto state 47
	IntegerExpression2goto state 94
	IntegerExpression3goto state 53
	BoolValue      goto state 55
	BoolExpression1goto state 95
	BoolExpression2goto state 58

State 85

	Term2 -> 'with' . ControlTerm 'ctrl' ControlBasisState    (rule 140)
	Term2 -> 'with' . ControlTerms 'ctrl' ControlBasisStates    (rule 141)
	Term2 -> 'with' . ControlVars 'ctrl' ControlBasisStates    (rule 142)
	Term2 -> 'with' . ControlTerm 'ctrl' ControlBit     (rule 143)
	Term2 -> 'with' . ControlTerms 'ctrl' ControlBits    (rule 144)
	Term2 -> 'with' . ControlVars 'ctrl' ControlBits    (rule 145)

	'['            shift, and enter state 93

	ControlTerm    goto state 90
	ControlTerms   goto state 91
	ControlVars    goto state 92

State 86

	Term1 -> '|' . Var ',' ListVar '|' '<-' Term ';' Term    (rule 154)

	L_Var          shift, and enter state 8

	Var            goto state 89

State 87

	Bit -> L_Bit .                                      (rule 5)

	'$'            reduce using rule 5
	'('            reduce using rule 5
	'()'           reduce using rule 5
	')'            reduce using rule 5
	'*'            reduce using rule 5
	','            reduce using rule 5
	'-'            reduce using rule 5
	'->'           reduce using rule 5
	'.'            reduce using rule 5
	':'            reduce using rule 5
	';'            reduce using rule 5
	'@+'           reduce using rule 5
	'@+i'          reduce using rule 5
	'@-'           reduce using rule 5
	'@-i'          reduce using rule 5
	'@0'           reduce using rule 5
	'@1'           reduce using rule 5
	'False'        reduce using rule 5
	'True'         reduce using rule 5
	'['            reduce using rule 5
	'[]'           reduce using rule 5
	']'            reduce using rule 5
	'case'         reduce using rule 5
	'else'         reduce using rule 5
	'gate'         reduce using rule 5
	'if'           reduce using rule 5
	'let'          reduce using rule 5
	'not'          reduce using rule 5
	'of'           reduce using rule 5
	'then'         reduce using rule 5
	'with'         reduce using rule 5
	'|'            reduce using rule 5
	'}'            reduce using rule 5
	L_integ        reduce using rule 5
	L_Var          reduce using rule 5
	L_Bit          reduce using rule 5
	L_Lambda       reduce using rule 5


State 88

	Lambda -> L_Lambda .                                (rule 6)

	L_Var          reduce using rule 6


State 89

	Term1 -> '|' Var . ',' ListVar '|' '<-' Term ';' Term    (rule 154)

	','            shift, and enter state 229


State 90

	Term2 -> 'with' ControlTerm . 'ctrl' ControlBasisState    (rule 140)
	Term2 -> 'with' ControlTerm . 'ctrl' ControlBit     (rule 143)

	'ctrl'         shift, and enter state 228


State 91

	Term2 -> 'with' ControlTerms . 'ctrl' ControlBasisStates    (rule 141)
	Term2 -> 'with' ControlTerms . 'ctrl' ControlBits    (rule 144)

	'ctrl'         shift, and enter state 227


State 92

	Term2 -> 'with' ControlVars . 'ctrl' ControlBasisStates    (rule 142)
	Term2 -> 'with' ControlVars . 'ctrl' ControlBits    (rule 145)

	'ctrl'         shift, and enter state 226


State 93

	ControlTerm -> '[' . Term ']'                       (rule 122)
	ControlTerms -> '[' . Term ',' ListTerm ']'         (rule 123)
	ControlVars -> '[' . Var ',' ListVar ']'            (rule 125)

	'('            shift, and enter state 67
	'()'           shift, and enter state 68
	'-'            shift, and enter state 69
	'@+'           shift, and enter state 70
	'@+i'          shift, and enter state 71
	'@-'           shift, and enter state 72
	'@-i'          shift, and enter state 73
	'@0'           shift, and enter state 74
	'@1'           shift, and enter state 75
	'False'        shift, and enter state 76
	'True'         shift, and enter state 77
	'['            shift, and enter state 78
	'[]'           shift, and enter state 79
	'case'         shift, and enter state 80
	'gate'         shift, and enter state 81
	'if'           shift, and enter state 82
	'let'          shift, and enter state 83
	'not'          shift, and enter state 84
	'with'         shift, and enter state 85
	'|'            shift, and enter state 86
	L_integ        shift, and enter state 42
	L_Var          shift, and enter state 8
	L_Bit          shift, and enter state 87
	L_Lambda       shift, and enter state 88

	Integer        goto state 47
	Var            goto state 224
	Bit            goto state 49
	Lambda         goto state 50
	IntegerExpression1goto state 51
	IntegerExpression2goto state 52
	IntegerExpression3goto state 53
	IntegerExpressiongoto state 54
	BoolValue      goto state 55
	BoolExpression goto state 56
	BoolExpression1goto state 57
	BoolExpression2goto state 58
	BasisState     goto state 59
	Term4          goto state 60
	Term3          goto state 61
	Term2          goto state 62
	Term1          goto state 63
	Term           goto state 225
	List1          goto state 65
	List           goto state 66

State 94

	IntegerExpression2 -> IntegerExpression2 . '*' IntegerExpression3    (rule 12)
	IntegerExpression2 -> IntegerExpression2 . '/' IntegerExpression3    (rule 13)
	BoolExpression2 -> IntegerExpression2 . '==' IntegerExpression2    (rule 27)
	BoolExpression2 -> IntegerExpression2 . '/=' IntegerExpression2    (rule 28)
	BoolExpression2 -> IntegerExpression2 . '>' IntegerExpression2    (rule 29)
	BoolExpression2 -> IntegerExpression2 . '>=' IntegerExpression2    (rule 30)
	BoolExpression2 -> IntegerExpression2 . '<' IntegerExpression2    (rule 31)
	BoolExpression2 -> IntegerExpression2 . '<=' IntegerExpression2    (rule 32)

	'*'            shift, and enter state 158
	'/'            shift, and enter state 159
	'/='           shift, and enter state 160
	'<'            shift, and enter state 161
	'<='           shift, and enter state 162
	'=='           shift, and enter state 163
	'>'            shift, and enter state 164
	'>='           shift, and enter state 165


State 95

	BoolExpression -> 'not' BoolExpression1 .           (rule 22)
	BoolExpression1 -> BoolExpression1 . '==' BoolExpression2    (rule 24)
	BoolExpression1 -> BoolExpression1 . '/=' BoolExpression2    (rule 25)

	'$'            reduce using rule 22
	'&&'           reduce using rule 22
	'('            reduce using rule 22
	'()'           reduce using rule 22
	')'            reduce using rule 22
	'*'            reduce using rule 22
	','            reduce using rule 22
	'-'            reduce using rule 22
	'->'           reduce using rule 22
	'.'            reduce using rule 22
	'/='           shift, and enter state 154
	':'            reduce using rule 22
	';'            reduce using rule 22
	'=='           shift, and enter state 155
	'@+'           reduce using rule 22
	'@+i'          reduce using rule 22
	'@-'           reduce using rule 22
	'@-i'          reduce using rule 22
	'@0'           reduce using rule 22
	'@1'           reduce using rule 22
	'False'        reduce using rule 22
	'True'         reduce using rule 22
	'['            reduce using rule 22
	'[]'           reduce using rule 22
	']'            reduce using rule 22
	'case'         reduce using rule 22
	'else'         reduce using rule 22
	'gate'         reduce using rule 22
	'if'           reduce using rule 22
	'let'          reduce using rule 22
	'not'          reduce using rule 22
	'of'           reduce using rule 22
	'then'         reduce using rule 22
	'with'         reduce using rule 22
	'|'            reduce using rule 22
	'||'           reduce using rule 22
	'}'            reduce using rule 22
	L_integ        reduce using rule 22
	L_Var          reduce using rule 22
	L_Bit          reduce using rule 22
	L_Lambda       reduce using rule 22


State 96

	IntegerExpression3 -> '(' . IntegerExpression ')'    (rule 16)
	BoolExpression2 -> '(' . BoolExpression ')'         (rule 34)

	'('            shift, and enter state 96
	'-'            shift, and enter state 69
	'False'        shift, and enter state 76
	'True'         shift, and enter state 77
	'not'          shift, and enter state 84
	L_integ        shift, and enter state 42

	Integer        goto state 47
	IntegerExpression1goto state 51
	IntegerExpression2goto state 52
	IntegerExpression3goto state 53
	IntegerExpressiongoto state 198
	BoolValue      goto state 55
	BoolExpression goto state 223
	BoolExpression1goto state 57
	BoolExpression2goto state 58

State 97

	Term1 -> 'let' '{' . Var '=' Term '}' 'in' Term     (rule 151)
	Term1 -> 'let' '{' . '(' Var ',' ListVar ')' '=' Term '}' 'in' Term    (rule 152)

	'('            shift, and enter state 222
	L_Var          shift, and enter state 8

	Var            goto state 221

State 98

	Term1 -> 'if' Term . 'then' Term 'else' Term        (rule 150)

	'then'         shift, and enter state 220


State 99

	Gate -> GateVar . '[' Angle ',' Angle ',' Angle ']'    (rule 104)
	Gate -> GateVar . '[' Angle ',' Angle ']'           (rule 105)
	Gate -> GateVar . '[' Angle ']'                     (rule 106)
	Gate -> GateVar . '[' Integer ']'                   (rule 107)
	Gate -> GateVar . '[' Var ']'                       (rule 108)
	Gate -> GateVar .                                   (rule 109)

	'$'            reduce using rule 109
	'('            reduce using rule 109
	'()'           reduce using rule 109
	')'            reduce using rule 109
	'*'            reduce using rule 109
	','            reduce using rule 109
	'-'            reduce using rule 109
	'->'           reduce using rule 109
	'.'            reduce using rule 109
	':'            reduce using rule 109
	';'            reduce using rule 109
	'@+'           reduce using rule 109
	'@+i'          reduce using rule 109
	'@-'           reduce using rule 109
	'@-i'          reduce using rule 109
	'@0'           reduce using rule 109
	'@1'           reduce using rule 109
	'False'        reduce using rule 109
	'True'         reduce using rule 109
	'['            shift, and enter state 219
			(reduce using rule 109)

	'[]'           reduce using rule 109
	']'            reduce using rule 109
	'case'         reduce using rule 109
	'else'         reduce using rule 109
	'gate'         reduce using rule 109
	'if'           reduce using rule 109
	'let'          reduce using rule 109
	'not'          reduce using rule 109
	'of'           reduce using rule 109
	'then'         reduce using rule 109
	'with'         reduce using rule 109
	'|'            reduce using rule 109
	'}'            reduce using rule 109
	L_integ        reduce using rule 109
	L_Var          reduce using rule 109
	L_Bit          reduce using rule 109
	L_Lambda       reduce using rule 109


State 100

	Term3 -> 'gate' Gate .                              (rule 135)

	'$'            reduce using rule 135
	'('            reduce using rule 135
	'()'           reduce using rule 135
	')'            reduce using rule 135
	'*'            reduce using rule 135
	','            reduce using rule 135
	'-'            reduce using rule 135
	'->'           reduce using rule 135
	'.'            reduce using rule 135
	':'            reduce using rule 135
	';'            reduce using rule 135
	'@+'           reduce using rule 135
	'@+i'          reduce using rule 135
	'@-'           reduce using rule 135
	'@-i'          reduce using rule 135
	'@0'           reduce using rule 135
	'@1'           reduce using rule 135
	'False'        reduce using rule 135
	'True'         reduce using rule 135
	'['            reduce using rule 135
	'[]'           reduce using rule 135
	']'            reduce using rule 135
	'case'         reduce using rule 135
	'else'         reduce using rule 135
	'gate'         reduce using rule 135
	'if'           reduce using rule 135
	'let'          reduce using rule 135
	'not'          reduce using rule 135
	'of'           reduce using rule 135
	'then'         reduce using rule 135
	'with'         reduce using rule 135
	'|'            reduce using rule 135
	'}'            reduce using rule 135
	L_integ        reduce using rule 135
	L_Var          reduce using rule 135
	L_Bit          reduce using rule 135
	L_Lambda       reduce using rule 135


State 101

	Gate -> 'FSWAP' .                                   (rule 94)

	'$'            reduce using rule 94
	'('            reduce using rule 94
	'()'           reduce using rule 94
	')'            reduce using rule 94
	'*'            reduce using rule 94
	','            reduce using rule 94
	'-'            reduce using rule 94
	'->'           reduce using rule 94
	'.'            reduce using rule 94
	':'            reduce using rule 94
	';'            reduce using rule 94
	'@+'           reduce using rule 94
	'@+i'          reduce using rule 94
	'@-'           reduce using rule 94
	'@-i'          reduce using rule 94
	'@0'           reduce using rule 94
	'@1'           reduce using rule 94
	'False'        reduce using rule 94
	'True'         reduce using rule 94
	'['            reduce using rule 94
	'[]'           reduce using rule 94
	']'            reduce using rule 94
	'case'         reduce using rule 94
	'else'         reduce using rule 94
	'gate'         reduce using rule 94
	'if'           reduce using rule 94
	'let'          reduce using rule 94
	'not'          reduce using rule 94
	'of'           reduce using rule 94
	'then'         reduce using rule 94
	'with'         reduce using rule 94
	'|'            reduce using rule 94
	'}'            reduce using rule 94
	L_integ        reduce using rule 94
	L_Var          reduce using rule 94
	L_Bit          reduce using rule 94
	L_Lambda       reduce using rule 94


State 102

	Gate -> 'H' .                                       (rule 59)

	'$'            reduce using rule 59
	'('            reduce using rule 59
	'()'           reduce using rule 59
	')'            reduce using rule 59
	'*'            reduce using rule 59
	','            reduce using rule 59
	'-'            reduce using rule 59
	'->'           reduce using rule 59
	'.'            reduce using rule 59
	':'            reduce using rule 59
	';'            reduce using rule 59
	'@+'           reduce using rule 59
	'@+i'          reduce using rule 59
	'@-'           reduce using rule 59
	'@-i'          reduce using rule 59
	'@0'           reduce using rule 59
	'@1'           reduce using rule 59
	'False'        reduce using rule 59
	'True'         reduce using rule 59
	'['            reduce using rule 59
	'[]'           reduce using rule 59
	']'            reduce using rule 59
	'case'         reduce using rule 59
	'else'         reduce using rule 59
	'gate'         reduce using rule 59
	'if'           reduce using rule 59
	'let'          reduce using rule 59
	'not'          reduce using rule 59
	'of'           reduce using rule 59
	'then'         reduce using rule 59
	'with'         reduce using rule 59
	'|'            reduce using rule 59
	'}'            reduce using rule 59
	L_integ        reduce using rule 59
	L_Var          reduce using rule 59
	L_Bit          reduce using rule 59
	L_Lambda       reduce using rule 59


State 103

	Gate -> 'ID' .                                      (rule 63)

	'$'            reduce using rule 63
	'('            reduce using rule 63
	'()'           reduce using rule 63
	')'            reduce using rule 63
	'*'            reduce using rule 63
	','            reduce using rule 63
	'-'            reduce using rule 63
	'->'           reduce using rule 63
	'.'            reduce using rule 63
	':'            reduce using rule 63
	';'            reduce using rule 63
	'@+'           reduce using rule 63
	'@+i'          reduce using rule 63
	'@-'           reduce using rule 63
	'@-i'          reduce using rule 63
	'@0'           reduce using rule 63
	'@1'           reduce using rule 63
	'False'        reduce using rule 63
	'True'         reduce using rule 63
	'['            reduce using rule 63
	'[]'           reduce using rule 63
	']'            reduce using rule 63
	'case'         reduce using rule 63
	'else'         reduce using rule 63
	'gate'         reduce using rule 63
	'if'           reduce using rule 63
	'let'          reduce using rule 63
	'not'          reduce using rule 63
	'of'           reduce using rule 63
	'then'         reduce using rule 63
	'with'         reduce using rule 63
	'|'            reduce using rule 63
	'}'            reduce using rule 63
	L_integ        reduce using rule 63
	L_Var          reduce using rule 63
	L_Bit          reduce using rule 63
	L_Lambda       reduce using rule 63


State 104

	Gate -> 'ISWAP' .                                   (rule 93)

	'$'            reduce using rule 93
	'('            reduce using rule 93
	'()'           reduce using rule 93
	')'            reduce using rule 93
	'*'            reduce using rule 93
	','            reduce using rule 93
	'-'            reduce using rule 93
	'->'           reduce using rule 93
	'.'            reduce using rule 93
	':'            reduce using rule 93
	';'            reduce using rule 93
	'@+'           reduce using rule 93
	'@+i'          reduce using rule 93
	'@-'           reduce using rule 93
	'@-i'          reduce using rule 93
	'@0'           reduce using rule 93
	'@1'           reduce using rule 93
	'False'        reduce using rule 93
	'True'         reduce using rule 93
	'['            reduce using rule 93
	'[]'           reduce using rule 93
	']'            reduce using rule 93
	'case'         reduce using rule 93
	'else'         reduce using rule 93
	'gate'         reduce using rule 93
	'if'           reduce using rule 93
	'let'          reduce using rule 93
	'not'          reduce using rule 93
	'of'           reduce using rule 93
	'then'         reduce using rule 93
	'with'         reduce using rule 93
	'|'            reduce using rule 93
	'}'            reduce using rule 93
	L_integ        reduce using rule 93
	L_Var          reduce using rule 93
	L_Bit          reduce using rule 93
	L_Lambda       reduce using rule 93


State 105

	Gate -> 'QFT' . '[' Integer ']'                     (rule 100)
	Gate -> 'QFT' . '[' Var ']'                         (rule 101)

	'['            shift, and enter state 218


State 106

	Gate -> 'QFT_DAG' . '[' Integer ']'                 (rule 102)
	Gate -> 'QFT_DAG' . '[' Var ']'                     (rule 103)

	'['            shift, and enter state 217


State 107

	Gate -> 'ROOT_SWAP' . '[' Integer ']'               (rule 96)
	Gate -> 'ROOT_SWAP' . '[' Var ']'                   (rule 97)

	'['            shift, and enter state 216


State 108

	Gate -> 'ROOT_SWAP_DAG' . '[' Integer ']'           (rule 98)
	Gate -> 'ROOT_SWAP_DAG' . '[' Var ']'               (rule 99)

	'['            shift, and enter state 215


State 109

	Gate -> 'ROOT_X' . '[' Integer ']'                  (rule 64)
	Gate -> 'ROOT_X' . '[' Var ']'                      (rule 65)

	'['            shift, and enter state 214


State 110

	Gate -> 'ROOT_X_DAG' . '[' Integer ']'              (rule 66)
	Gate -> 'ROOT_X_DAG' . '[' Var ']'                  (rule 67)

	'['            shift, and enter state 213


State 111

	Gate -> 'ROOT_Y' . '[' Integer ']'                  (rule 68)
	Gate -> 'ROOT_Y' . '[' Var ']'                      (rule 69)

	'['            shift, and enter state 212


State 112

	Gate -> 'ROOT_Y_DAG' . '[' Integer ']'              (rule 70)
	Gate -> 'ROOT_Y_DAG' . '[' Var ']'                  (rule 71)

	'['            shift, and enter state 211


State 113

	Gate -> 'ROOT_Z' . '[' Integer ']'                  (rule 72)
	Gate -> 'ROOT_Z' . '[' Var ']'                      (rule 73)

	'['            shift, and enter state 210


State 114

	Gate -> 'ROOT_Z_DAG' . '[' Integer ']'              (rule 74)
	Gate -> 'ROOT_Z_DAG' . '[' Var ']'                  (rule 75)

	'['            shift, and enter state 209


State 115

	Gate -> 'RX' . '[' Angle ']'                        (rule 84)

	'['            shift, and enter state 208


State 116

	Gate -> 'RY' . '[' Angle ']'                        (rule 85)

	'['            shift, and enter state 207


State 117

	Gate -> 'RZ' . '[' Angle ']'                        (rule 86)

	'['            shift, and enter state 206


State 118

	Gate -> 'S' .                                       (rule 76)

	'$'            reduce using rule 76
	'('            reduce using rule 76
	'()'           reduce using rule 76
	')'            reduce using rule 76
	'*'            reduce using rule 76
	','            reduce using rule 76
	'-'            reduce using rule 76
	'->'           reduce using rule 76
	'.'            reduce using rule 76
	':'            reduce using rule 76
	';'            reduce using rule 76
	'@+'           reduce using rule 76
	'@+i'          reduce using rule 76
	'@-'           reduce using rule 76
	'@-i'          reduce using rule 76
	'@0'           reduce using rule 76
	'@1'           reduce using rule 76
	'False'        reduce using rule 76
	'True'         reduce using rule 76
	'['            reduce using rule 76
	'[]'           reduce using rule 76
	']'            reduce using rule 76
	'case'         reduce using rule 76
	'else'         reduce using rule 76
	'gate'         reduce using rule 76
	'if'           reduce using rule 76
	'let'          reduce using rule 76
	'not'          reduce using rule 76
	'of'           reduce using rule 76
	'then'         reduce using rule 76
	'with'         reduce using rule 76
	'|'            reduce using rule 76
	'}'            reduce using rule 76
	L_integ        reduce using rule 76
	L_Var          reduce using rule 76
	L_Bit          reduce using rule 76
	L_Lambda       reduce using rule 76


State 119

	Gate -> 'SQRT_SWAP' .                               (rule 91)

	'$'            reduce using rule 91
	'('            reduce using rule 91
	'()'           reduce using rule 91
	')'            reduce using rule 91
	'*'            reduce using rule 91
	','            reduce using rule 91
	'-'            reduce using rule 91
	'->'           reduce using rule 91
	'.'            reduce using rule 91
	':'            reduce using rule 91
	';'            reduce using rule 91
	'@+'           reduce using rule 91
	'@+i'          reduce using rule 91
	'@-'           reduce using rule 91
	'@-i'          reduce using rule 91
	'@0'           reduce using rule 91
	'@1'           reduce using rule 91
	'False'        reduce using rule 91
	'True'         reduce using rule 91
	'['            reduce using rule 91
	'[]'           reduce using rule 91
	']'            reduce using rule 91
	'case'         reduce using rule 91
	'else'         reduce using rule 91
	'gate'         reduce using rule 91
	'if'           reduce using rule 91
	'let'          reduce using rule 91
	'not'          reduce using rule 91
	'of'           reduce using rule 91
	'then'         reduce using rule 91
	'with'         reduce using rule 91
	'|'            reduce using rule 91
	'}'            reduce using rule 91
	L_integ        reduce using rule 91
	L_Var          reduce using rule 91
	L_Bit          reduce using rule 91
	L_Lambda       reduce using rule 91


State 120

	Gate -> 'SQRT_SWAP_DAG' .                           (rule 92)

	'$'            reduce using rule 92
	'('            reduce using rule 92
	'()'           reduce using rule 92
	')'            reduce using rule 92
	'*'            reduce using rule 92
	','            reduce using rule 92
	'-'            reduce using rule 92
	'->'           reduce using rule 92
	'.'            reduce using rule 92
	':'            reduce using rule 92
	';'            reduce using rule 92
	'@+'           reduce using rule 92
	'@+i'          reduce using rule 92
	'@-'           reduce using rule 92
	'@-i'          reduce using rule 92
	'@0'           reduce using rule 92
	'@1'           reduce using rule 92
	'False'        reduce using rule 92
	'True'         reduce using rule 92
	'['            reduce using rule 92
	'[]'           reduce using rule 92
	']'            reduce using rule 92
	'case'         reduce using rule 92
	'else'         reduce using rule 92
	'gate'         reduce using rule 92
	'if'           reduce using rule 92
	'let'          reduce using rule 92
	'not'          reduce using rule 92
	'of'           reduce using rule 92
	'then'         reduce using rule 92
	'with'         reduce using rule 92
	'|'            reduce using rule 92
	'}'            reduce using rule 92
	L_integ        reduce using rule 92
	L_Var          reduce using rule 92
	L_Bit          reduce using rule 92
	L_Lambda       reduce using rule 92


State 121

	Gate -> 'SQRT_X' .                                  (rule 80)

	'$'            reduce using rule 80
	'('            reduce using rule 80
	'()'           reduce using rule 80
	')'            reduce using rule 80
	'*'            reduce using rule 80
	','            reduce using rule 80
	'-'            reduce using rule 80
	'->'           reduce using rule 80
	'.'            reduce using rule 80
	':'            reduce using rule 80
	';'            reduce using rule 80
	'@+'           reduce using rule 80
	'@+i'          reduce using rule 80
	'@-'           reduce using rule 80
	'@-i'          reduce using rule 80
	'@0'           reduce using rule 80
	'@1'           reduce using rule 80
	'False'        reduce using rule 80
	'True'         reduce using rule 80
	'['            reduce using rule 80
	'[]'           reduce using rule 80
	']'            reduce using rule 80
	'case'         reduce using rule 80
	'else'         reduce using rule 80
	'gate'         reduce using rule 80
	'if'           reduce using rule 80
	'let'          reduce using rule 80
	'not'          reduce using rule 80
	'of'           reduce using rule 80
	'then'         reduce using rule 80
	'with'         reduce using rule 80
	'|'            reduce using rule 80
	'}'            reduce using rule 80
	L_integ        reduce using rule 80
	L_Var          reduce using rule 80
	L_Bit          reduce using rule 80
	L_Lambda       reduce using rule 80


State 122

	Gate -> 'SQRT_X_DAG' .                              (rule 81)

	'$'            reduce using rule 81
	'('            reduce using rule 81
	'()'           reduce using rule 81
	')'            reduce using rule 81
	'*'            reduce using rule 81
	','            reduce using rule 81
	'-'            reduce using rule 81
	'->'           reduce using rule 81
	'.'            reduce using rule 81
	':'            reduce using rule 81
	';'            reduce using rule 81
	'@+'           reduce using rule 81
	'@+i'          reduce using rule 81
	'@-'           reduce using rule 81
	'@-i'          reduce using rule 81
	'@0'           reduce using rule 81
	'@1'           reduce using rule 81
	'False'        reduce using rule 81
	'True'         reduce using rule 81
	'['            reduce using rule 81
	'[]'           reduce using rule 81
	']'            reduce using rule 81
	'case'         reduce using rule 81
	'else'         reduce using rule 81
	'gate'         reduce using rule 81
	'if'           reduce using rule 81
	'let'          reduce using rule 81
	'not'          reduce using rule 81
	'of'           reduce using rule 81
	'then'         reduce using rule 81
	'with'         reduce using rule 81
	'|'            reduce using rule 81
	'}'            reduce using rule 81
	L_integ        reduce using rule 81
	L_Var          reduce using rule 81
	L_Bit          reduce using rule 81
	L_Lambda       reduce using rule 81


State 123

	Gate -> 'SQRT_Y' .                                  (rule 82)

	'$'            reduce using rule 82
	'('            reduce using rule 82
	'()'           reduce using rule 82
	')'            reduce using rule 82
	'*'            reduce using rule 82
	','            reduce using rule 82
	'-'            reduce using rule 82
	'->'           reduce using rule 82
	'.'            reduce using rule 82
	':'            reduce using rule 82
	';'            reduce using rule 82
	'@+'           reduce using rule 82
	'@+i'          reduce using rule 82
	'@-'           reduce using rule 82
	'@-i'          reduce using rule 82
	'@0'           reduce using rule 82
	'@1'           reduce using rule 82
	'False'        reduce using rule 82
	'True'         reduce using rule 82
	'['            reduce using rule 82
	'[]'           reduce using rule 82
	']'            reduce using rule 82
	'case'         reduce using rule 82
	'else'         reduce using rule 82
	'gate'         reduce using rule 82
	'if'           reduce using rule 82
	'let'          reduce using rule 82
	'not'          reduce using rule 82
	'of'           reduce using rule 82
	'then'         reduce using rule 82
	'with'         reduce using rule 82
	'|'            reduce using rule 82
	'}'            reduce using rule 82
	L_integ        reduce using rule 82
	L_Var          reduce using rule 82
	L_Bit          reduce using rule 82
	L_Lambda       reduce using rule 82


State 124

	Gate -> 'SQRT_Y_DAG' .                              (rule 83)

	'$'            reduce using rule 83
	'('            reduce using rule 83
	'()'           reduce using rule 83
	')'            reduce using rule 83
	'*'            reduce using rule 83
	','            reduce using rule 83
	'-'            reduce using rule 83
	'->'           reduce using rule 83
	'.'            reduce using rule 83
	':'            reduce using rule 83
	';'            reduce using rule 83
	'@+'           reduce using rule 83
	'@+i'          reduce using rule 83
	'@-'           reduce using rule 83
	'@-i'          reduce using rule 83
	'@0'           reduce using rule 83
	'@1'           reduce using rule 83
	'False'        reduce using rule 83
	'True'         reduce using rule 83
	'['            reduce using rule 83
	'[]'           reduce using rule 83
	']'            reduce using rule 83
	'case'         reduce using rule 83
	'else'         reduce using rule 83
	'gate'         reduce using rule 83
	'if'           reduce using rule 83
	'let'          reduce using rule 83
	'not'          reduce using rule 83
	'of'           reduce using rule 83
	'then'         reduce using rule 83
	'with'         reduce using rule 83
	'|'            reduce using rule 83
	'}'            reduce using rule 83
	L_integ        reduce using rule 83
	L_Var          reduce using rule 83
	L_Bit          reduce using rule 83
	L_Lambda       reduce using rule 83


State 125

	Gate -> 'SWAP' .                                    (rule 90)

	'$'            reduce using rule 90
	'('            reduce using rule 90
	'()'           reduce using rule 90
	')'            reduce using rule 90
	'*'            reduce using rule 90
	','            reduce using rule 90
	'-'            reduce using rule 90
	'->'           reduce using rule 90
	'.'            reduce using rule 90
	':'            reduce using rule 90
	';'            reduce using rule 90
	'@+'           reduce using rule 90
	'@+i'          reduce using rule 90
	'@-'           reduce using rule 90
	'@-i'          reduce using rule 90
	'@0'           reduce using rule 90
	'@1'           reduce using rule 90
	'False'        reduce using rule 90
	'True'         reduce using rule 90
	'['            reduce using rule 90
	'[]'           reduce using rule 90
	']'            reduce using rule 90
	'case'         reduce using rule 90
	'else'         reduce using rule 90
	'gate'         reduce using rule 90
	'if'           reduce using rule 90
	'let'          reduce using rule 90
	'not'          reduce using rule 90
	'of'           reduce using rule 90
	'then'         reduce using rule 90
	'with'         reduce using rule 90
	'|'            reduce using rule 90
	'}'            reduce using rule 90
	L_integ        reduce using rule 90
	L_Var          reduce using rule 90
	L_Bit          reduce using rule 90
	L_Lambda       reduce using rule 90


State 126

	Gate -> 'SWAP_THETA' . '[' Angle ']'                (rule 95)

	'['            shift, and enter state 205


State 127

	Gate -> 'S_DAG' .                                   (rule 77)

	'$'            reduce using rule 77
	'('            reduce using rule 77
	'()'           reduce using rule 77
	')'            reduce using rule 77
	'*'            reduce using rule 77
	','            reduce using rule 77
	'-'            reduce using rule 77
	'->'           reduce using rule 77
	'.'            reduce using rule 77
	':'            reduce using rule 77
	';'            reduce using rule 77
	'@+'           reduce using rule 77
	'@+i'          reduce using rule 77
	'@-'           reduce using rule 77
	'@-i'          reduce using rule 77
	'@0'           reduce using rule 77
	'@1'           reduce using rule 77
	'False'        reduce using rule 77
	'True'         reduce using rule 77
	'['            reduce using rule 77
	'[]'           reduce using rule 77
	']'            reduce using rule 77
	'case'         reduce using rule 77
	'else'         reduce using rule 77
	'gate'         reduce using rule 77
	'if'           reduce using rule 77
	'let'          reduce using rule 77
	'not'          reduce using rule 77
	'of'           reduce using rule 77
	'then'         reduce using rule 77
	'with'         reduce using rule 77
	'|'            reduce using rule 77
	'}'            reduce using rule 77
	L_integ        reduce using rule 77
	L_Var          reduce using rule 77
	L_Bit          reduce using rule 77
	L_Lambda       reduce using rule 77


State 128

	Gate -> 'T' .                                       (rule 78)

	'$'            reduce using rule 78
	'('            reduce using rule 78
	'()'           reduce using rule 78
	')'            reduce using rule 78
	'*'            reduce using rule 78
	','            reduce using rule 78
	'-'            reduce using rule 78
	'->'           reduce using rule 78
	'.'            reduce using rule 78
	':'            reduce using rule 78
	';'            reduce using rule 78
	'@+'           reduce using rule 78
	'@+i'          reduce using rule 78
	'@-'           reduce using rule 78
	'@-i'          reduce using rule 78
	'@0'           reduce using rule 78
	'@1'           reduce using rule 78
	'False'        reduce using rule 78
	'True'         reduce using rule 78
	'['            reduce using rule 78
	'[]'           reduce using rule 78
	']'            reduce using rule 78
	'case'         reduce using rule 78
	'else'         reduce using rule 78
	'gate'         reduce using rule 78
	'if'           reduce using rule 78
	'let'          reduce using rule 78
	'not'          reduce using rule 78
	'of'           reduce using rule 78
	'then'         reduce using rule 78
	'with'         reduce using rule 78
	'|'            reduce using rule 78
	'}'            reduce using rule 78
	L_integ        reduce using rule 78
	L_Var          reduce using rule 78
	L_Bit          reduce using rule 78
	L_Lambda       reduce using rule 78


State 129

	Gate -> 'T_DAG' .                                   (rule 79)

	'$'            reduce using rule 79
	'('            reduce using rule 79
	'()'           reduce using rule 79
	')'            reduce using rule 79
	'*'            reduce using rule 79
	','            reduce using rule 79
	'-'            reduce using rule 79
	'->'           reduce using rule 79
	'.'            reduce using rule 79
	':'            reduce using rule 79
	';'            reduce using rule 79
	'@+'           reduce using rule 79
	'@+i'          reduce using rule 79
	'@-'           reduce using rule 79
	'@-i'          reduce using rule 79
	'@0'           reduce using rule 79
	'@1'           reduce using rule 79
	'False'        reduce using rule 79
	'True'         reduce using rule 79
	'['            reduce using rule 79
	'[]'           reduce using rule 79
	']'            reduce using rule 79
	'case'         reduce using rule 79
	'else'         reduce using rule 79
	'gate'         reduce using rule 79
	'if'           reduce using rule 79
	'let'          reduce using rule 79
	'not'          reduce using rule 79
	'of'           reduce using rule 79
	'then'         reduce using rule 79
	'with'         reduce using rule 79
	'|'            reduce using rule 79
	'}'            reduce using rule 79
	L_integ        reduce using rule 79
	L_Var          reduce using rule 79
	L_Bit          reduce using rule 79
	L_Lambda       reduce using rule 79


State 130

	Gate -> 'U1' . '[' Angle ']'                        (rule 87)

	'['            shift, and enter state 204


State 131

	Gate -> 'U2' . '[' Angle ',' Angle ']'              (rule 88)

	'['            shift, and enter state 203


State 132

	Gate -> 'U3' . '[' Angle ',' Angle ',' Angle ']'    (rule 89)

	'['            shift, and enter state 202


State 133

	Gate -> 'X' .                                       (rule 60)

	'$'            reduce using rule 60
	'('            reduce using rule 60
	'()'           reduce using rule 60
	')'            reduce using rule 60
	'*'            reduce using rule 60
	','            reduce using rule 60
	'-'            reduce using rule 60
	'->'           reduce using rule 60
	'.'            reduce using rule 60
	':'            reduce using rule 60
	';'            reduce using rule 60
	'@+'           reduce using rule 60
	'@+i'          reduce using rule 60
	'@-'           reduce using rule 60
	'@-i'          reduce using rule 60
	'@0'           reduce using rule 60
	'@1'           reduce using rule 60
	'False'        reduce using rule 60
	'True'         reduce using rule 60
	'['            reduce using rule 60
	'[]'           reduce using rule 60
	']'            reduce using rule 60
	'case'         reduce using rule 60
	'else'         reduce using rule 60
	'gate'         reduce using rule 60
	'if'           reduce using rule 60
	'let'          reduce using rule 60
	'not'          reduce using rule 60
	'of'           reduce using rule 60
	'then'         reduce using rule 60
	'with'         reduce using rule 60
	'|'            reduce using rule 60
	'}'            reduce using rule 60
	L_integ        reduce using rule 60
	L_Var          reduce using rule 60
	L_Bit          reduce using rule 60
	L_Lambda       reduce using rule 60


State 134

	Gate -> 'Y' .                                       (rule 61)

	'$'            reduce using rule 61
	'('            reduce using rule 61
	'()'           reduce using rule 61
	')'            reduce using rule 61
	'*'            reduce using rule 61
	','            reduce using rule 61
	'-'            reduce using rule 61
	'->'           reduce using rule 61
	'.'            reduce using rule 61
	':'            reduce using rule 61
	';'            reduce using rule 61
	'@+'           reduce using rule 61
	'@+i'          reduce using rule 61
	'@-'           reduce using rule 61
	'@-i'          reduce using rule 61
	'@0'           reduce using rule 61
	'@1'           reduce using rule 61
	'False'        reduce using rule 61
	'True'         reduce using rule 61
	'['            reduce using rule 61
	'[]'           reduce using rule 61
	']'            reduce using rule 61
	'case'         reduce using rule 61
	'else'         reduce using rule 61
	'gate'         reduce using rule 61
	'if'           reduce using rule 61
	'let'          reduce using rule 61
	'not'          reduce using rule 61
	'of'           reduce using rule 61
	'then'         reduce using rule 61
	'with'         reduce using rule 61
	'|'            reduce using rule 61
	'}'            reduce using rule 61
	L_integ        reduce using rule 61
	L_Var          reduce using rule 61
	L_Bit          reduce using rule 61
	L_Lambda       reduce using rule 61


State 135

	Gate -> 'Z' .                                       (rule 62)

	'$'            reduce using rule 62
	'('            reduce using rule 62
	'()'           reduce using rule 62
	')'            reduce using rule 62
	'*'            reduce using rule 62
	','            reduce using rule 62
	'-'            reduce using rule 62
	'->'           reduce using rule 62
	'.'            reduce using rule 62
	':'            reduce using rule 62
	';'            reduce using rule 62
	'@+'           reduce using rule 62
	'@+i'          reduce using rule 62
	'@-'           reduce using rule 62
	'@-i'          reduce using rule 62
	'@0'           reduce using rule 62
	'@1'           reduce using rule 62
	'False'        reduce using rule 62
	'True'         reduce using rule 62
	'['            reduce using rule 62
	'[]'           reduce using rule 62
	']'            reduce using rule 62
	'case'         reduce using rule 62
	'else'         reduce using rule 62
	'gate'         reduce using rule 62
	'if'           reduce using rule 62
	'let'          reduce using rule 62
	'not'          reduce using rule 62
	'of'           reduce using rule 62
	'then'         reduce using rule 62
	'with'         reduce using rule 62
	'|'            reduce using rule 62
	'}'            reduce using rule 62
	L_integ        reduce using rule 62
	L_Var          reduce using rule 62
	L_Bit          reduce using rule 62
	L_Lambda       reduce using rule 62


State 136

	GateVar -> L_GateVar .                              (rule 3)

	'$'            reduce using rule 3
	'('            reduce using rule 3
	'()'           reduce using rule 3
	')'            reduce using rule 3
	'*'            reduce using rule 3
	','            reduce using rule 3
	'-'            reduce using rule 3
	'->'           reduce using rule 3
	'.'            reduce using rule 3
	':'            reduce using rule 3
	';'            reduce using rule 3
	'@+'           reduce using rule 3
	'@+i'          reduce using rule 3
	'@-'           reduce using rule 3
	'@-i'          reduce using rule 3
	'@0'           reduce using rule 3
	'@1'           reduce using rule 3
	'False'        reduce using rule 3
	'True'         reduce using rule 3
	'['            reduce using rule 3
	'[]'           reduce using rule 3
	']'            reduce using rule 3
	'case'         reduce using rule 3
	'else'         reduce using rule 3
	'gate'         reduce using rule 3
	'if'           reduce using rule 3
	'let'          reduce using rule 3
	'not'          reduce using rule 3
	'of'           reduce using rule 3
	'then'         reduce using rule 3
	'with'         reduce using rule 3
	'|'            reduce using rule 3
	'}'            reduce using rule 3
	L_integ        reduce using rule 3
	L_Var          reduce using rule 3
	L_Bit          reduce using rule 3
	L_Lambda       reduce using rule 3


State 137

	Term1 -> 'case' Term . 'of' '{' ListCaseExpression '}'    (rule 155)

	'of'           shift, and enter state 201


State 138

	List1 -> '[' Term . ']'                             (rule 161)
	List1 -> '[' Term . ',' ListTerm ']'                (rule 162)

	','            shift, and enter state 199
	']'            shift, and enter state 200


State 139

	IntegerExpression1 -> IntegerExpression2 .          (rule 11)
	IntegerExpression2 -> IntegerExpression2 . '*' IntegerExpression3    (rule 12)
	IntegerExpression2 -> IntegerExpression2 . '/' IntegerExpression3    (rule 13)

	'$'            reduce using rule 11
	'('            reduce using rule 11
	'()'           reduce using rule 11
	')'            reduce using rule 11
	'*'            shift, and enter state 158
			(reduce using rule 11)

	'+'            reduce using rule 11
	','            reduce using rule 11
	'-'            reduce using rule 11
	'->'           reduce using rule 11
	'.'            reduce using rule 11
	'/'            shift, and enter state 159
	':'            reduce using rule 11
	';'            reduce using rule 11
	'@+'           reduce using rule 11
	'@+i'          reduce using rule 11
	'@-'           reduce using rule 11
	'@-i'          reduce using rule 11
	'@0'           reduce using rule 11
	'@1'           reduce using rule 11
	'False'        reduce using rule 11
	'True'         reduce using rule 11
	'['            reduce using rule 11
	'[]'           reduce using rule 11
	']'            reduce using rule 11
	'case'         reduce using rule 11
	'else'         reduce using rule 11
	'gate'         reduce using rule 11
	'if'           reduce using rule 11
	'let'          reduce using rule 11
	'not'          reduce using rule 11
	'of'           reduce using rule 11
	'then'         reduce using rule 11
	'with'         reduce using rule 11
	'|'            reduce using rule 11
	'}'            reduce using rule 11
	L_integ        reduce using rule 11
	L_Var          reduce using rule 11
	L_Bit          reduce using rule 11
	L_Lambda       reduce using rule 11


State 140

	IntegerExpression1 -> '-' IntegerExpression .       (rule 8)

	'$'            reduce using rule 8
	'('            reduce using rule 8
	'()'           reduce using rule 8
	')'            reduce using rule 8
	'*'            reduce using rule 8
	'+'            reduce using rule 8
	','            reduce using rule 8
	'-'            reduce using rule 8
	'->'           reduce using rule 8
	'.'            reduce using rule 8
	':'            reduce using rule 8
	';'            reduce using rule 8
	'@+'           reduce using rule 8
	'@+i'          reduce using rule 8
	'@-'           reduce using rule 8
	'@-i'          reduce using rule 8
	'@0'           reduce using rule 8
	'@1'           reduce using rule 8
	'False'        reduce using rule 8
	'True'         reduce using rule 8
	'['            reduce using rule 8
	'[]'           reduce using rule 8
	']'            reduce using rule 8
	'case'         reduce using rule 8
	'else'         reduce using rule 8
	'gate'         reduce using rule 8
	'if'           reduce using rule 8
	'let'          reduce using rule 8
	'not'          reduce using rule 8
	'of'           reduce using rule 8
	'then'         reduce using rule 8
	'with'         reduce using rule 8
	'|'            reduce using rule 8
	'}'            reduce using rule 8
	L_integ        reduce using rule 8
	L_Var          reduce using rule 8
	L_Bit          reduce using rule 8
	L_Lambda       reduce using rule 8


State 141

	IntegerExpression3 -> '(' . IntegerExpression ')'    (rule 16)

	'('            shift, and enter state 141
	'-'            shift, and enter state 69
	L_integ        shift, and enter state 42

	Integer        goto state 47
	IntegerExpression1goto state 51
	IntegerExpression2goto state 139
	IntegerExpression3goto state 53
	IntegerExpressiongoto state 198

State 142

	IntegerExpression3 -> '(' IntegerExpression . ')'    (rule 16)
	Term3 -> IntegerExpression .                        (rule 134)

	'$'            reduce using rule 134
	'('            reduce using rule 134
	'()'           reduce using rule 134
	')'            shift, and enter state 197
			(reduce using rule 134)

	'*'            reduce using rule 134
	','            reduce using rule 134
	'-'            reduce using rule 134
	'.'            reduce using rule 134
	':'            reduce using rule 134
	'@+'           reduce using rule 134
	'@+i'          reduce using rule 134
	'@-'           reduce using rule 134
	'@-i'          reduce using rule 134
	'@0'           reduce using rule 134
	'@1'           reduce using rule 134
	'False'        reduce using rule 134
	'True'         reduce using rule 134
	'['            reduce using rule 134
	'[]'           reduce using rule 134
	'gate'         reduce using rule 134
	'not'          reduce using rule 134
	L_integ        reduce using rule 134
	L_Var          reduce using rule 134
	L_Bit          reduce using rule 134


State 143

	BoolExpression -> BoolExpression . '&&' BoolExpression1    (rule 20)
	BoolExpression -> BoolExpression . '||' BoolExpression1    (rule 21)
	BoolExpression2 -> '(' BoolExpression . ')'         (rule 34)
	Term3 -> BoolExpression .                           (rule 133)

	'$'            reduce using rule 133
	'&&'           shift, and enter state 156
	'('            reduce using rule 133
	'()'           reduce using rule 133
	')'            shift, and enter state 196
			(reduce using rule 133)

	'*'            reduce using rule 133
	','            reduce using rule 133
	'-'            reduce using rule 133
	'.'            reduce using rule 133
	':'            reduce using rule 133
	'@+'           reduce using rule 133
	'@+i'          reduce using rule 133
	'@-'           reduce using rule 133
	'@-i'          reduce using rule 133
	'@0'           reduce using rule 133
	'@1'           reduce using rule 133
	'False'        reduce using rule 133
	'True'         reduce using rule 133
	'['            reduce using rule 133
	'[]'           reduce using rule 133
	'gate'         reduce using rule 133
	'not'          reduce using rule 133
	'||'           shift, and enter state 157
	L_integ        reduce using rule 133
	L_Var          reduce using rule 133
	L_Bit          reduce using rule 133


State 144

	Term4 -> '(' Term . ')'                             (rule 129)
	Term3 -> '(' Term . ',' ListTerm ')'                (rule 138)

	')'            shift, and enter state 194
	','            shift, and enter state 195


State 145

	Term4 -> List . '!!' Integer                        (rule 128)
	Term3 -> List .                                     (rule 136)
	List1 -> '(' List . ')'                             (rule 163)
	List -> List . '++' List1                           (rule 164)

	'!!'           shift, and enter state 146
	'$'            reduce using rule 136
	'('            reduce using rule 136
	'()'           reduce using rule 136
	')'            shift, and enter state 193
			(reduce using rule 136)

	'*'            reduce using rule 136
	'++'           shift, and enter state 147
	','            reduce using rule 136
	'-'            reduce using rule 136
	'.'            reduce using rule 136
	':'            reduce using rule 136
	'@+'           reduce using rule 136
	'@+i'          reduce using rule 136
	'@-'           reduce using rule 136
	'@-i'          reduce using rule 136
	'@0'           reduce using rule 136
	'@1'           reduce using rule 136
	'False'        reduce using rule 136
	'True'         reduce using rule 136
	'['            reduce using rule 136
	'[]'           reduce using rule 136
	'gate'         reduce using rule 136
	'not'          reduce using rule 136
	L_integ        reduce using rule 136
	L_Var          reduce using rule 136
	L_Bit          reduce using rule 136


State 146

	Term4 -> List '!!' . Integer                        (rule 128)

	L_integ        shift, and enter state 42

	Integer        goto state 192

State 147

	List -> List '++' . List1                           (rule 164)

	'('            shift, and enter state 187
	'['            shift, and enter state 78
	'[]'           shift, and enter state 79

	List1          goto state 191

State 148

	Term -> Term1 '$' . Term                            (rule 158)

	'('            shift, and enter state 67
	'()'           shift, and enter state 68
	'-'            shift, and enter state 69
	'@+'           shift, and enter state 70
	'@+i'          shift, and enter state 71
	'@-'           shift, and enter state 72
	'@-i'          shift, and enter state 73
	'@0'           shift, and enter state 74
	'@1'           shift, and enter state 75
	'False'        shift, and enter state 76
	'True'         shift, and enter state 77
	'['            shift, and enter state 78
	'[]'           shift, and enter state 79
	'case'         shift, and enter state 80
	'gate'         shift, and enter state 81
	'if'           shift, and enter state 82
	'let'          shift, and enter state 83
	'not'          shift, and enter state 84
	'with'         shift, and enter state 85
	'|'            shift, and enter state 86
	L_integ        shift, and enter state 42
	L_Var          shift, and enter state 8
	L_Bit          shift, and enter state 87
	L_Lambda       shift, and enter state 88

	Integer        goto state 47
	Var            goto state 48
	Bit            goto state 49
	Lambda         goto state 50
	IntegerExpression1goto state 51
	IntegerExpression2goto state 52
	IntegerExpression3goto state 53
	IntegerExpressiongoto state 54
	BoolValue      goto state 55
	BoolExpression goto state 56
	BoolExpression1goto state 57
	BoolExpression2goto state 58
	BasisState     goto state 59
	Term4          goto state 60
	Term3          goto state 61
	Term2          goto state 62
	Term1          goto state 63
	Term           goto state 190
	List1          goto state 65
	List           goto state 66

State 149

	Term3 -> Var .                                      (rule 137)

	'$'            reduce using rule 137
	'('            reduce using rule 137
	'()'           reduce using rule 137
	')'            reduce using rule 137
	'*'            reduce using rule 137
	','            reduce using rule 137
	'-'            reduce using rule 137
	'->'           reduce using rule 137
	'.'            reduce using rule 137
	':'            reduce using rule 137
	';'            reduce using rule 137
	'@+'           reduce using rule 137
	'@+i'          reduce using rule 137
	'@-'           reduce using rule 137
	'@-i'          reduce using rule 137
	'@0'           reduce using rule 137
	'@1'           reduce using rule 137
	'False'        reduce using rule 137
	'True'         reduce using rule 137
	'['            reduce using rule 137
	'[]'           reduce using rule 137
	']'            reduce using rule 137
	'case'         reduce using rule 137
	'else'         reduce using rule 137
	'gate'         reduce using rule 137
	'if'           reduce using rule 137
	'let'          reduce using rule 137
	'not'          reduce using rule 137
	'of'           reduce using rule 137
	'then'         reduce using rule 137
	'with'         reduce using rule 137
	'|'            reduce using rule 137
	'}'            reduce using rule 137
	L_integ        reduce using rule 137
	L_Var          reduce using rule 137
	L_Bit          reduce using rule 137
	L_Lambda       reduce using rule 137


State 150

	Term2 -> Term2 Term3 .                              (rule 146)
	List -> Term3 . ':' List1                           (rule 165)

	'$'            reduce using rule 146
	'('            reduce using rule 146
	'()'           reduce using rule 146
	')'            reduce using rule 146
	'*'            reduce using rule 146
	','            reduce using rule 146
	'-'            reduce using rule 146
	'->'           reduce using rule 146
	'.'            reduce using rule 146
	':'            shift, and enter state 153
	';'            reduce using rule 146
	'@+'           reduce using rule 146
	'@+i'          reduce using rule 146
	'@-'           reduce using rule 146
	'@-i'          reduce using rule 146
	'@0'           reduce using rule 146
	'@1'           reduce using rule 146
	'False'        reduce using rule 146
	'True'         reduce using rule 146
	'['            reduce using rule 146
	'[]'           reduce using rule 146
	']'            reduce using rule 146
	'case'         reduce using rule 146
	'else'         reduce using rule 146
	'gate'         reduce using rule 146
	'if'           reduce using rule 146
	'let'          reduce using rule 146
	'not'          reduce using rule 146
	'of'           reduce using rule 146
	'then'         reduce using rule 146
	'with'         reduce using rule 146
	'|'            reduce using rule 146
	'}'            reduce using rule 146
	L_integ        reduce using rule 146
	L_Var          reduce using rule 146
	L_Bit          reduce using rule 146
	L_Lambda       reduce using rule 146


State 151

	Term2 -> Term2 '*' . Term3                          (rule 148)

	'('            shift, and enter state 67
	'()'           shift, and enter state 68
	'-'            shift, and enter state 69
	'@+'           shift, and enter state 70
	'@+i'          shift, and enter state 71
	'@-'           shift, and enter state 72
	'@-i'          shift, and enter state 73
	'@0'           shift, and enter state 74
	'@1'           shift, and enter state 75
	'False'        shift, and enter state 76
	'True'         shift, and enter state 77
	'['            shift, and enter state 78
	'[]'           shift, and enter state 79
	'gate'         shift, and enter state 81
	'not'          shift, and enter state 84
	L_integ        shift, and enter state 42
	L_Var          shift, and enter state 8
	L_Bit          shift, and enter state 87

	Integer        goto state 47
	Var            goto state 149
	Bit            goto state 49
	IntegerExpression1goto state 51
	IntegerExpression2goto state 52
	IntegerExpression3goto state 53
	IntegerExpressiongoto state 54
	BoolValue      goto state 55
	BoolExpression goto state 56
	BoolExpression1goto state 57
	BoolExpression2goto state 58
	BasisState     goto state 59
	Term4          goto state 60
	Term3          goto state 189
	List1          goto state 65
	List           goto state 66

State 152

	Term2 -> Term2 '.' . Term3                          (rule 147)

	'('            shift, and enter state 67
	'()'           shift, and enter state 68
	'-'            shift, and enter state 69
	'@+'           shift, and enter state 70
	'@+i'          shift, and enter state 71
	'@-'           shift, and enter state 72
	'@-i'          shift, and enter state 73
	'@0'           shift, and enter state 74
	'@1'           shift, and enter state 75
	'False'        shift, and enter state 76
	'True'         shift, and enter state 77
	'['            shift, and enter state 78
	'[]'           shift, and enter state 79
	'gate'         shift, and enter state 81
	'not'          shift, and enter state 84
	L_integ        shift, and enter state 42
	L_Var          shift, and enter state 8
	L_Bit          shift, and enter state 87

	Integer        goto state 47
	Var            goto state 149
	Bit            goto state 49
	IntegerExpression1goto state 51
	IntegerExpression2goto state 52
	IntegerExpression3goto state 53
	IntegerExpressiongoto state 54
	BoolValue      goto state 55
	BoolExpression goto state 56
	BoolExpression1goto state 57
	BoolExpression2goto state 58
	BasisState     goto state 59
	Term4          goto state 60
	Term3          goto state 188
	List1          goto state 65
	List           goto state 66

State 153

	List -> Term3 ':' . List1                           (rule 165)

	'('            shift, and enter state 187
	'['            shift, and enter state 78
	'[]'           shift, and enter state 79

	List1          goto state 186

State 154

	BoolExpression1 -> BoolExpression1 '/=' . BoolExpression2    (rule 25)

	'('            shift, and enter state 96
	'False'        shift, and enter state 76
	'True'         shift, and enter state 77
	L_integ        shift, and enter state 42

	Integer        goto state 47
	IntegerExpression2goto state 94
	IntegerExpression3goto state 53
	BoolValue      goto state 55
	BoolExpression2goto state 185

State 155

	BoolExpression1 -> BoolExpression1 '==' . BoolExpression2    (rule 24)

	'('            shift, and enter state 96
	'False'        shift, and enter state 76
	'True'         shift, and enter state 77
	L_integ        shift, and enter state 42

	Integer        goto state 47
	IntegerExpression2goto state 94
	IntegerExpression3goto state 53
	BoolValue      goto state 55
	BoolExpression2goto state 184

State 156

	BoolExpression -> BoolExpression '&&' . BoolExpression1    (rule 20)

	'('            shift, and enter state 96
	'False'        shift, and enter state 76
	'True'         shift, and enter state 77
	L_integ        shift, and enter state 42

	Integer        goto state 47
	IntegerExpression2goto state 94
	IntegerExpression3goto state 53
	BoolValue      goto state 55
	BoolExpression1goto state 183
	BoolExpression2goto state 58

State 157

	BoolExpression -> BoolExpression '||' . BoolExpression1    (rule 21)

	'('            shift, and enter state 96
	'False'        shift, and enter state 76
	'True'         shift, and enter state 77
	L_integ        shift, and enter state 42

	Integer        goto state 47
	IntegerExpression2goto state 94
	IntegerExpression3goto state 53
	BoolValue      goto state 55
	BoolExpression1goto state 182
	BoolExpression2goto state 58

State 158

	IntegerExpression2 -> IntegerExpression2 '*' . IntegerExpression3    (rule 12)

	'('            shift, and enter state 141
	L_integ        shift, and enter state 42

	Integer        goto state 47
	IntegerExpression3goto state 181

State 159

	IntegerExpression2 -> IntegerExpression2 '/' . IntegerExpression3    (rule 13)

	'('            shift, and enter state 141
	L_integ        shift, and enter state 42

	Integer        goto state 47
	IntegerExpression3goto state 180

State 160

	BoolExpression2 -> IntegerExpression2 '/=' . IntegerExpression2    (rule 28)

	'('            shift, and enter state 141
	L_integ        shift, and enter state 42

	Integer        goto state 47
	IntegerExpression2goto state 179
	IntegerExpression3goto state 53

State 161

	BoolExpression2 -> IntegerExpression2 '<' . IntegerExpression2    (rule 31)

	'('            shift, and enter state 141
	L_integ        shift, and enter state 42

	Integer        goto state 47
	IntegerExpression2goto state 178
	IntegerExpression3goto state 53

State 162

	BoolExpression2 -> IntegerExpression2 '<=' . IntegerExpression2    (rule 32)

	'('            shift, and enter state 141
	L_integ        shift, and enter state 42

	Integer        goto state 47
	IntegerExpression2goto state 177
	IntegerExpression3goto state 53

State 163

	BoolExpression2 -> IntegerExpression2 '==' . IntegerExpression2    (rule 27)

	'('            shift, and enter state 141
	L_integ        shift, and enter state 42

	Integer        goto state 47
	IntegerExpression2goto state 176
	IntegerExpression3goto state 53

State 164

	BoolExpression2 -> IntegerExpression2 '>' . IntegerExpression2    (rule 29)

	'('            shift, and enter state 141
	L_integ        shift, and enter state 42

	Integer        goto state 47
	IntegerExpression2goto state 175
	IntegerExpression3goto state 53

State 165

	BoolExpression2 -> IntegerExpression2 '>=' . IntegerExpression2    (rule 30)

	'('            shift, and enter state 141
	L_integ        shift, and enter state 42

	Integer        goto state 47
	IntegerExpression2goto state 174
	IntegerExpression3goto state 53

State 166

	IntegerExpression1 -> IntegerExpression1 '+' . IntegerExpression2    (rule 9)

	'('            shift, and enter state 141
	L_integ        shift, and enter state 42

	Integer        goto state 47
	IntegerExpression2goto state 173
	IntegerExpression3goto state 53

State 167

	IntegerExpression1 -> IntegerExpression1 '-' . IntegerExpression2    (rule 10)

	'('            shift, and enter state 141
	L_integ        shift, and enter state 42

	Integer        goto state 47
	IntegerExpression2goto state 172
	IntegerExpression3goto state 53

State 168

	Term1 -> Lambda Var . Type '.' Term                 (rule 156)

	'!'            shift, and enter state 18
	'('            shift, and enter state 19
	'()'           shift, and enter state 20
	'BasisState'   shift, and enter state 21
	'Bit'          shift, and enter state 22
	'Bool'         shift, and enter state 23
	'Int'          shift, and enter state 24
	'Qbit'         shift, and enter state 25
	'['            shift, and enter state 26

	Type           goto state 171
	Type2          goto state 13
	Type3          goto state 14
	Type5          goto state 15
	Type1          goto state 16
	Type4          goto state 17

State 169

	Term1 -> Var '<-' . Term ';' Term                   (rule 153)

	'('            shift, and enter state 67
	'()'           shift, and enter state 68
	'-'            shift, and enter state 69
	'@+'           shift, and enter state 70
	'@+i'          shift, and enter state 71
	'@-'           shift, and enter state 72
	'@-i'          shift, and enter state 73
	'@0'           shift, and enter state 74
	'@1'           shift, and enter state 75
	'False'        shift, and enter state 76
	'True'         shift, and enter state 77
	'['            shift, and enter state 78
	'[]'           shift, and enter state 79
	'case'         shift, and enter state 80
	'gate'         shift, and enter state 81
	'if'           shift, and enter state 82
	'let'          shift, and enter state 83
	'not'          shift, and enter state 84
	'with'         shift, and enter state 85
	'|'            shift, and enter state 86
	L_integ        shift, and enter state 42
	L_Var          shift, and enter state 8
	L_Bit          shift, and enter state 87
	L_Lambda       shift, and enter state 88

	Integer        goto state 47
	Var            goto state 48
	Bit            goto state 49
	Lambda         goto state 50
	IntegerExpression1goto state 51
	IntegerExpression2goto state 52
	IntegerExpression3goto state 53
	IntegerExpressiongoto state 54
	BoolValue      goto state 55
	BoolExpression goto state 56
	BoolExpression1goto state 57
	BoolExpression2goto state 58
	BasisState     goto state 59
	Term4          goto state 60
	Term3          goto state 61
	Term2          goto state 62
	Term1          goto state 63
	Term           goto state 170
	List1          goto state 65
	List           goto state 66

State 170

	Term1 -> Var '<-' Term . ';' Term                   (rule 153)

	';'            shift, and enter state 283


State 171

	Type -> Type . '->' Type1                           (rule 35)
	Term1 -> Lambda Var Type . '.' Term                 (rule 156)

	'->'           shift, and enter state 38
	'.'            shift, and enter state 282


State 172

	IntegerExpression1 -> IntegerExpression1 '-' IntegerExpression2 .    (rule 10)
	IntegerExpression2 -> IntegerExpression2 . '*' IntegerExpression3    (rule 12)
	IntegerExpression2 -> IntegerExpression2 . '/' IntegerExpression3    (rule 13)

	'$'            reduce using rule 10
	'('            reduce using rule 10
	'()'           reduce using rule 10
	')'            reduce using rule 10
	'*'            shift, and enter state 158
			(reduce using rule 10)

	'+'            reduce using rule 10
	','            reduce using rule 10
	'-'            reduce using rule 10
	'->'           reduce using rule 10
	'.'            reduce using rule 10
	'/'            shift, and enter state 159
	':'            reduce using rule 10
	';'            reduce using rule 10
	'@+'           reduce using rule 10
	'@+i'          reduce using rule 10
	'@-'           reduce using rule 10
	'@-i'          reduce using rule 10
	'@0'           reduce using rule 10
	'@1'           reduce using rule 10
	'False'        reduce using rule 10
	'True'         reduce using rule 10
	'['            reduce using rule 10
	'[]'           reduce using rule 10
	']'            reduce using rule 10
	'case'         reduce using rule 10
	'else'         reduce using rule 10
	'gate'         reduce using rule 10
	'if'           reduce using rule 10
	'let'          reduce using rule 10
	'not'          reduce using rule 10
	'of'           reduce using rule 10
	'then'         reduce using rule 10
	'with'         reduce using rule 10
	'|'            reduce using rule 10
	'}'            reduce using rule 10
	L_integ        reduce using rule 10
	L_Var          reduce using rule 10
	L_Bit          reduce using rule 10
	L_Lambda       reduce using rule 10


State 173

	IntegerExpression1 -> IntegerExpression1 '+' IntegerExpression2 .    (rule 9)
	IntegerExpression2 -> IntegerExpression2 . '*' IntegerExpression3    (rule 12)
	IntegerExpression2 -> IntegerExpression2 . '/' IntegerExpression3    (rule 13)

	'$'            reduce using rule 9
	'('            reduce using rule 9
	'()'           reduce using rule 9
	')'            reduce using rule 9
	'*'            shift, and enter state 158
			(reduce using rule 9)

	'+'            reduce using rule 9
	','            reduce using rule 9
	'-'            reduce using rule 9
	'->'           reduce using rule 9
	'.'            reduce using rule 9
	'/'            shift, and enter state 159
	':'            reduce using rule 9
	';'            reduce using rule 9
	'@+'           reduce using rule 9
	'@+i'          reduce using rule 9
	'@-'           reduce using rule 9
	'@-i'          reduce using rule 9
	'@0'           reduce using rule 9
	'@1'           reduce using rule 9
	'False'        reduce using rule 9
	'True'         reduce using rule 9
	'['            reduce using rule 9
	'[]'           reduce using rule 9
	']'            reduce using rule 9
	'case'         reduce using rule 9
	'else'         reduce using rule 9
	'gate'         reduce using rule 9
	'if'           reduce using rule 9
	'let'          reduce using rule 9
	'not'          reduce using rule 9
	'of'           reduce using rule 9
	'then'         reduce using rule 9
	'with'         reduce using rule 9
	'|'            reduce using rule 9
	'}'            reduce using rule 9
	L_integ        reduce using rule 9
	L_Var          reduce using rule 9
	L_Bit          reduce using rule 9
	L_Lambda       reduce using rule 9


State 174

	IntegerExpression2 -> IntegerExpression2 . '*' IntegerExpression3    (rule 12)
	IntegerExpression2 -> IntegerExpression2 . '/' IntegerExpression3    (rule 13)
	BoolExpression2 -> IntegerExpression2 '>=' IntegerExpression2 .    (rule 30)

	'$'            reduce using rule 30
	'&&'           reduce using rule 30
	'('            reduce using rule 30
	'()'           reduce using rule 30
	')'            reduce using rule 30
	'*'            shift, and enter state 158
			(reduce using rule 30)

	','            reduce using rule 30
	'-'            reduce using rule 30
	'->'           reduce using rule 30
	'.'            reduce using rule 30
	'/'            shift, and enter state 159
	'/='           reduce using rule 30
	':'            reduce using rule 30
	';'            reduce using rule 30
	'=='           reduce using rule 30
	'@+'           reduce using rule 30
	'@+i'          reduce using rule 30
	'@-'           reduce using rule 30
	'@-i'          reduce using rule 30
	'@0'           reduce using rule 30
	'@1'           reduce using rule 30
	'False'        reduce using rule 30
	'True'         reduce using rule 30
	'['            reduce using rule 30
	'[]'           reduce using rule 30
	']'            reduce using rule 30
	'case'         reduce using rule 30
	'else'         reduce using rule 30
	'gate'         reduce using rule 30
	'if'           reduce using rule 30
	'let'          reduce using rule 30
	'not'          reduce using rule 30
	'of'           reduce using rule 30
	'then'         reduce using rule 30
	'with'         reduce using rule 30
	'|'            reduce using rule 30
	'||'           reduce using rule 30
	'}'            reduce using rule 30
	L_integ        reduce using rule 30
	L_Var          reduce using rule 30
	L_Bit          reduce using rule 30
	L_Lambda       reduce using rule 30


State 175

	IntegerExpression2 -> IntegerExpression2 . '*' IntegerExpression3    (rule 12)
	IntegerExpression2 -> IntegerExpression2 . '/' IntegerExpression3    (rule 13)
	BoolExpression2 -> IntegerExpression2 '>' IntegerExpression2 .    (rule 29)

	'$'            reduce using rule 29
	'&&'           reduce using rule 29
	'('            reduce using rule 29
	'()'           reduce using rule 29
	')'            reduce using rule 29
	'*'            shift, and enter state 158
			(reduce using rule 29)

	','            reduce using rule 29
	'-'            reduce using rule 29
	'->'           reduce using rule 29
	'.'            reduce using rule 29
	'/'            shift, and enter state 159
	'/='           reduce using rule 29
	':'            reduce using rule 29
	';'            reduce using rule 29
	'=='           reduce using rule 29
	'@+'           reduce using rule 29
	'@+i'          reduce using rule 29
	'@-'           reduce using rule 29
	'@-i'          reduce using rule 29
	'@0'           reduce using rule 29
	'@1'           reduce using rule 29
	'False'        reduce using rule 29
	'True'         reduce using rule 29
	'['            reduce using rule 29
	'[]'           reduce using rule 29
	']'            reduce using rule 29
	'case'         reduce using rule 29
	'else'         reduce using rule 29
	'gate'         reduce using rule 29
	'if'           reduce using rule 29
	'let'          reduce using rule 29
	'not'          reduce using rule 29
	'of'           reduce using rule 29
	'then'         reduce using rule 29
	'with'         reduce using rule 29
	'|'            reduce using rule 29
	'||'           reduce using rule 29
	'}'            reduce using rule 29
	L_integ        reduce using rule 29
	L_Var          reduce using rule 29
	L_Bit          reduce using rule 29
	L_Lambda       reduce using rule 29


State 176

	IntegerExpression2 -> IntegerExpression2 . '*' IntegerExpression3    (rule 12)
	IntegerExpression2 -> IntegerExpression2 . '/' IntegerExpression3    (rule 13)
	BoolExpression2 -> IntegerExpression2 '==' IntegerExpression2 .    (rule 27)

	'$'            reduce using rule 27
	'&&'           reduce using rule 27
	'('            reduce using rule 27
	'()'           reduce using rule 27
	')'            reduce using rule 27
	'*'            shift, and enter state 158
			(reduce using rule 27)

	','            reduce using rule 27
	'-'            reduce using rule 27
	'->'           reduce using rule 27
	'.'            reduce using rule 27
	'/'            shift, and enter state 159
	'/='           reduce using rule 27
	':'            reduce using rule 27
	';'            reduce using rule 27
	'=='           reduce using rule 27
	'@+'           reduce using rule 27
	'@+i'          reduce using rule 27
	'@-'           reduce using rule 27
	'@-i'          reduce using rule 27
	'@0'           reduce using rule 27
	'@1'           reduce using rule 27
	'False'        reduce using rule 27
	'True'         reduce using rule 27
	'['            reduce using rule 27
	'[]'           reduce using rule 27
	']'            reduce using rule 27
	'case'         reduce using rule 27
	'else'         reduce using rule 27
	'gate'         reduce using rule 27
	'if'           reduce using rule 27
	'let'          reduce using rule 27
	'not'          reduce using rule 27
	'of'           reduce using rule 27
	'then'         reduce using rule 27
	'with'         reduce using rule 27
	'|'            reduce using rule 27
	'||'           reduce using rule 27
	'}'            reduce using rule 27
	L_integ        reduce using rule 27
	L_Var          reduce using rule 27
	L_Bit          reduce using rule 27
	L_Lambda       reduce using rule 27


State 177

	IntegerExpression2 -> IntegerExpression2 . '*' IntegerExpression3    (rule 12)
	IntegerExpression2 -> IntegerExpression2 . '/' IntegerExpression3    (rule 13)
	BoolExpression2 -> IntegerExpression2 '<=' IntegerExpression2 .    (rule 32)

	'$'            reduce using rule 32
	'&&'           reduce using rule 32
	'('            reduce using rule 32
	'()'           reduce using rule 32
	')'            reduce using rule 32
	'*'            shift, and enter state 158
			(reduce using rule 32)

	','            reduce using rule 32
	'-'            reduce using rule 32
	'->'           reduce using rule 32
	'.'            reduce using rule 32
	'/'            shift, and enter state 159
	'/='           reduce using rule 32
	':'            reduce using rule 32
	';'            reduce using rule 32
	'=='           reduce using rule 32
	'@+'           reduce using rule 32
	'@+i'          reduce using rule 32
	'@-'           reduce using rule 32
	'@-i'          reduce using rule 32
	'@0'           reduce using rule 32
	'@1'           reduce using rule 32
	'False'        reduce using rule 32
	'True'         reduce using rule 32
	'['            reduce using rule 32
	'[]'           reduce using rule 32
	']'            reduce using rule 32
	'case'         reduce using rule 32
	'else'         reduce using rule 32
	'gate'         reduce using rule 32
	'if'           reduce using rule 32
	'let'          reduce using rule 32
	'not'          reduce using rule 32
	'of'           reduce using rule 32
	'then'         reduce using rule 32
	'with'         reduce using rule 32
	'|'            reduce using rule 32
	'||'           reduce using rule 32
	'}'            reduce using rule 32
	L_integ        reduce using rule 32
	L_Var          reduce using rule 32
	L_Bit          reduce using rule 32
	L_Lambda       reduce using rule 32


State 178

	IntegerExpression2 -> IntegerExpression2 . '*' IntegerExpression3    (rule 12)
	IntegerExpression2 -> IntegerExpression2 . '/' IntegerExpression3    (rule 13)
	BoolExpression2 -> IntegerExpression2 '<' IntegerExpression2 .    (rule 31)

	'$'            reduce using rule 31
	'&&'           reduce using rule 31
	'('            reduce using rule 31
	'()'           reduce using rule 31
	')'            reduce using rule 31
	'*'            shift, and enter state 158
			(reduce using rule 31)

	','            reduce using rule 31
	'-'            reduce using rule 31
	'->'           reduce using rule 31
	'.'            reduce using rule 31
	'/'            shift, and enter state 159
	'/='           reduce using rule 31
	':'            reduce using rule 31
	';'            reduce using rule 31
	'=='           reduce using rule 31
	'@+'           reduce using rule 31
	'@+i'          reduce using rule 31
	'@-'           reduce using rule 31
	'@-i'          reduce using rule 31
	'@0'           reduce using rule 31
	'@1'           reduce using rule 31
	'False'        reduce using rule 31
	'True'         reduce using rule 31
	'['            reduce using rule 31
	'[]'           reduce using rule 31
	']'            reduce using rule 31
	'case'         reduce using rule 31
	'else'         reduce using rule 31
	'gate'         reduce using rule 31
	'if'           reduce using rule 31
	'let'          reduce using rule 31
	'not'          reduce using rule 31
	'of'           reduce using rule 31
	'then'         reduce using rule 31
	'with'         reduce using rule 31
	'|'            reduce using rule 31
	'||'           reduce using rule 31
	'}'            reduce using rule 31
	L_integ        reduce using rule 31
	L_Var          reduce using rule 31
	L_Bit          reduce using rule 31
	L_Lambda       reduce using rule 31


State 179

	IntegerExpression2 -> IntegerExpression2 . '*' IntegerExpression3    (rule 12)
	IntegerExpression2 -> IntegerExpression2 . '/' IntegerExpression3    (rule 13)
	BoolExpression2 -> IntegerExpression2 '/=' IntegerExpression2 .    (rule 28)

	'$'            reduce using rule 28
	'&&'           reduce using rule 28
	'('            reduce using rule 28
	'()'           reduce using rule 28
	')'            reduce using rule 28
	'*'            shift, and enter state 158
			(reduce using rule 28)

	','            reduce using rule 28
	'-'            reduce using rule 28
	'->'           reduce using rule 28
	'.'            reduce using rule 28
	'/'            shift, and enter state 159
	'/='           reduce using rule 28
	':'            reduce using rule 28
	';'            reduce using rule 28
	'=='           reduce using rule 28
	'@+'           reduce using rule 28
	'@+i'          reduce using rule 28
	'@-'           reduce using rule 28
	'@-i'          reduce using rule 28
	'@0'           reduce using rule 28
	'@1'           reduce using rule 28
	'False'        reduce using rule 28
	'True'         reduce using rule 28
	'['            reduce using rule 28
	'[]'           reduce using rule 28
	']'            reduce using rule 28
	'case'         reduce using rule 28
	'else'         reduce using rule 28
	'gate'         reduce using rule 28
	'if'           reduce using rule 28
	'let'          reduce using rule 28
	'not'          reduce using rule 28
	'of'           reduce using rule 28
	'then'         reduce using rule 28
	'with'         reduce using rule 28
	'|'            reduce using rule 28
	'||'           reduce using rule 28
	'}'            reduce using rule 28
	L_integ        reduce using rule 28
	L_Var          reduce using rule 28
	L_Bit          reduce using rule 28
	L_Lambda       reduce using rule 28


State 180

	IntegerExpression2 -> IntegerExpression2 '/' IntegerExpression3 .    (rule 13)

	'$'            reduce using rule 13
	'&&'           reduce using rule 13
	'('            reduce using rule 13
	'()'           reduce using rule 13
	')'            reduce using rule 13
	'*'            reduce using rule 13
	'+'            reduce using rule 13
	','            reduce using rule 13
	'-'            reduce using rule 13
	'->'           reduce using rule 13
	'.'            reduce using rule 13
	'/'            reduce using rule 13
	'/='           reduce using rule 13
	':'            reduce using rule 13
	';'            reduce using rule 13
	'<'            reduce using rule 13
	'<='           reduce using rule 13
	'=='           reduce using rule 13
	'>'            reduce using rule 13
	'>='           reduce using rule 13
	'@+'           reduce using rule 13
	'@+i'          reduce using rule 13
	'@-'           reduce using rule 13
	'@-i'          reduce using rule 13
	'@0'           reduce using rule 13
	'@1'           reduce using rule 13
	'False'        reduce using rule 13
	'True'         reduce using rule 13
	'['            reduce using rule 13
	'[]'           reduce using rule 13
	']'            reduce using rule 13
	'case'         reduce using rule 13
	'else'         reduce using rule 13
	'gate'         reduce using rule 13
	'if'           reduce using rule 13
	'let'          reduce using rule 13
	'not'          reduce using rule 13
	'of'           reduce using rule 13
	'then'         reduce using rule 13
	'with'         reduce using rule 13
	'|'            reduce using rule 13
	'||'           reduce using rule 13
	'}'            reduce using rule 13
	L_integ        reduce using rule 13
	L_Var          reduce using rule 13
	L_Bit          reduce using rule 13
	L_Lambda       reduce using rule 13


State 181

	IntegerExpression2 -> IntegerExpression2 '*' IntegerExpression3 .    (rule 12)

	'$'            reduce using rule 12
	'&&'           reduce using rule 12
	'('            reduce using rule 12
	'()'           reduce using rule 12
	')'            reduce using rule 12
	'*'            reduce using rule 12
	'+'            reduce using rule 12
	','            reduce using rule 12
	'-'            reduce using rule 12
	'->'           reduce using rule 12
	'.'            reduce using rule 12
	'/'            reduce using rule 12
	'/='           reduce using rule 12
	':'            reduce using rule 12
	';'            reduce using rule 12
	'<'            reduce using rule 12
	'<='           reduce using rule 12
	'=='           reduce using rule 12
	'>'            reduce using rule 12
	'>='           reduce using rule 12
	'@+'           reduce using rule 12
	'@+i'          reduce using rule 12
	'@-'           reduce using rule 12
	'@-i'          reduce using rule 12
	'@0'           reduce using rule 12
	'@1'           reduce using rule 12
	'False'        reduce using rule 12
	'True'         reduce using rule 12
	'['            reduce using rule 12
	'[]'           reduce using rule 12
	']'            reduce using rule 12
	'case'         reduce using rule 12
	'else'         reduce using rule 12
	'gate'         reduce using rule 12
	'if'           reduce using rule 12
	'let'          reduce using rule 12
	'not'          reduce using rule 12
	'of'           reduce using rule 12
	'then'         reduce using rule 12
	'with'         reduce using rule 12
	'|'            reduce using rule 12
	'||'           reduce using rule 12
	'}'            reduce using rule 12
	L_integ        reduce using rule 12
	L_Var          reduce using rule 12
	L_Bit          reduce using rule 12
	L_Lambda       reduce using rule 12


State 182

	BoolExpression -> BoolExpression '||' BoolExpression1 .    (rule 21)
	BoolExpression1 -> BoolExpression1 . '==' BoolExpression2    (rule 24)
	BoolExpression1 -> BoolExpression1 . '/=' BoolExpression2    (rule 25)

	'$'            reduce using rule 21
	'&&'           reduce using rule 21
	'('            reduce using rule 21
	'()'           reduce using rule 21
	')'            reduce using rule 21
	'*'            reduce using rule 21
	','            reduce using rule 21
	'-'            reduce using rule 21
	'->'           reduce using rule 21
	'.'            reduce using rule 21
	'/='           shift, and enter state 154
	':'            reduce using rule 21
	';'            reduce using rule 21
	'=='           shift, and enter state 155
	'@+'           reduce using rule 21
	'@+i'          reduce using rule 21
	'@-'           reduce using rule 21
	'@-i'          reduce using rule 21
	'@0'           reduce using rule 21
	'@1'           reduce using rule 21
	'False'        reduce using rule 21
	'True'         reduce using rule 21
	'['            reduce using rule 21
	'[]'           reduce using rule 21
	']'            reduce using rule 21
	'case'         reduce using rule 21
	'else'         reduce using rule 21
	'gate'         reduce using rule 21
	'if'           reduce using rule 21
	'let'          reduce using rule 21
	'not'          reduce using rule 21
	'of'           reduce using rule 21
	'then'         reduce using rule 21
	'with'         reduce using rule 21
	'|'            reduce using rule 21
	'||'           reduce using rule 21
	'}'            reduce using rule 21
	L_integ        reduce using rule 21
	L_Var          reduce using rule 21
	L_Bit          reduce using rule 21
	L_Lambda       reduce using rule 21


State 183

	BoolExpression -> BoolExpression '&&' BoolExpression1 .    (rule 20)
	BoolExpression1 -> BoolExpression1 . '==' BoolExpression2    (rule 24)
	BoolExpression1 -> BoolExpression1 . '/=' BoolExpression2    (rule 25)

	'$'            reduce using rule 20
	'&&'           reduce using rule 20
	'('            reduce using rule 20
	'()'           reduce using rule 20
	')'            reduce using rule 20
	'*'            reduce using rule 20
	','            reduce using rule 20
	'-'            reduce using rule 20
	'->'           reduce using rule 20
	'.'            reduce using rule 20
	'/='           shift, and enter state 154
	':'            reduce using rule 20
	';'            reduce using rule 20
	'=='           shift, and enter state 155
	'@+'           reduce using rule 20
	'@+i'          reduce using rule 20
	'@-'           reduce using rule 20
	'@-i'          reduce using rule 20
	'@0'           reduce using rule 20
	'@1'           reduce using rule 20
	'False'        reduce using rule 20
	'True'         reduce using rule 20
	'['            reduce using rule 20
	'[]'           reduce using rule 20
	']'            reduce using rule 20
	'case'         reduce using rule 20
	'else'         reduce using rule 20
	'gate'         reduce using rule 20
	'if'           reduce using rule 20
	'let'          reduce using rule 20
	'not'          reduce using rule 20
	'of'           reduce using rule 20
	'then'         reduce using rule 20
	'with'         reduce using rule 20
	'|'            reduce using rule 20
	'||'           reduce using rule 20
	'}'            reduce using rule 20
	L_integ        reduce using rule 20
	L_Var          reduce using rule 20
	L_Bit          reduce using rule 20
	L_Lambda       reduce using rule 20


State 184

	BoolExpression1 -> BoolExpression1 '==' BoolExpression2 .    (rule 24)

	'$'            reduce using rule 24
	'&&'           reduce using rule 24
	'('            reduce using rule 24
	'()'           reduce using rule 24
	')'            reduce using rule 24
	'*'            reduce using rule 24
	','            reduce using rule 24
	'-'            reduce using rule 24
	'->'           reduce using rule 24
	'.'            reduce using rule 24
	'/='           reduce using rule 24
	':'            reduce using rule 24
	';'            reduce using rule 24
	'=='           reduce using rule 24
	'@+'           reduce using rule 24
	'@+i'          reduce using rule 24
	'@-'           reduce using rule 24
	'@-i'          reduce using rule 24
	'@0'           reduce using rule 24
	'@1'           reduce using rule 24
	'False'        reduce using rule 24
	'True'         reduce using rule 24
	'['            reduce using rule 24
	'[]'           reduce using rule 24
	']'            reduce using rule 24
	'case'         reduce using rule 24
	'else'         reduce using rule 24
	'gate'         reduce using rule 24
	'if'           reduce using rule 24
	'let'          reduce using rule 24
	'not'          reduce using rule 24
	'of'           reduce using rule 24
	'then'         reduce using rule 24
	'with'         reduce using rule 24
	'|'            reduce using rule 24
	'||'           reduce using rule 24
	'}'            reduce using rule 24
	L_integ        reduce using rule 24
	L_Var          reduce using rule 24
	L_Bit          reduce using rule 24
	L_Lambda       reduce using rule 24


State 185

	BoolExpression1 -> BoolExpression1 '/=' BoolExpression2 .    (rule 25)

	'$'            reduce using rule 25
	'&&'           reduce using rule 25
	'('            reduce using rule 25
	'()'           reduce using rule 25
	')'            reduce using rule 25
	'*'            reduce using rule 25
	','            reduce using rule 25
	'-'            reduce using rule 25
	'->'           reduce using rule 25
	'.'            reduce using rule 25
	'/='           reduce using rule 25
	':'            reduce using rule 25
	';'            reduce using rule 25
	'=='           reduce using rule 25
	'@+'           reduce using rule 25
	'@+i'          reduce using rule 25
	'@-'           reduce using rule 25
	'@-i'          reduce using rule 25
	'@0'           reduce using rule 25
	'@1'           reduce using rule 25
	'False'        reduce using rule 25
	'True'         reduce using rule 25
	'['            reduce using rule 25
	'[]'           reduce using rule 25
	']'            reduce using rule 25
	'case'         reduce using rule 25
	'else'         reduce using rule 25
	'gate'         reduce using rule 25
	'if'           reduce using rule 25
	'let'          reduce using rule 25
	'not'          reduce using rule 25
	'of'           reduce using rule 25
	'then'         reduce using rule 25
	'with'         reduce using rule 25
	'|'            reduce using rule 25
	'||'           reduce using rule 25
	'}'            reduce using rule 25
	L_integ        reduce using rule 25
	L_Var          reduce using rule 25
	L_Bit          reduce using rule 25
	L_Lambda       reduce using rule 25


State 186

	List -> Term3 ':' List1 .                           (rule 165)

	'!!'           reduce using rule 165
	'$'            reduce using rule 165
	'('            reduce using rule 165
	'()'           reduce using rule 165
	')'            reduce using rule 165
	'*'            reduce using rule 165
	'++'           reduce using rule 165
	','            reduce using rule 165
	'-'            reduce using rule 165
	'->'           reduce using rule 165
	'.'            reduce using rule 165
	':'            reduce using rule 165
	';'            reduce using rule 165
	'@+'           reduce using rule 165
	'@+i'          reduce using rule 165
	'@-'           reduce using rule 165
	'@-i'          reduce using rule 165
	'@0'           reduce using rule 165
	'@1'           reduce using rule 165
	'False'        reduce using rule 165
	'True'         reduce using rule 165
	'['            reduce using rule 165
	'[]'           reduce using rule 165
	']'            reduce using rule 165
	'case'         reduce using rule 165
	'else'         reduce using rule 165
	'gate'         reduce using rule 165
	'if'           reduce using rule 165
	'let'          reduce using rule 165
	'not'          reduce using rule 165
	'of'           reduce using rule 165
	'then'         reduce using rule 165
	'with'         reduce using rule 165
	'|'            reduce using rule 165
	'}'            reduce using rule 165
	L_integ        reduce using rule 165
	L_Var          reduce using rule 165
	L_Bit          reduce using rule 165
	L_Lambda       reduce using rule 165


State 187

	List1 -> '(' . List ')'                             (rule 163)

	'('            shift, and enter state 67
	'()'           shift, and enter state 68
	'-'            shift, and enter state 69
	'@+'           shift, and enter state 70
	'@+i'          shift, and enter state 71
	'@-'           shift, and enter state 72
	'@-i'          shift, and enter state 73
	'@0'           shift, and enter state 74
	'@1'           shift, and enter state 75
	'False'        shift, and enter state 76
	'True'         shift, and enter state 77
	'['            shift, and enter state 78
	'[]'           shift, and enter state 79
	'gate'         shift, and enter state 81
	'not'          shift, and enter state 84
	L_integ        shift, and enter state 42
	L_Var          shift, and enter state 8
	L_Bit          shift, and enter state 87

	Integer        goto state 47
	Var            goto state 149
	Bit            goto state 49
	IntegerExpression1goto state 51
	IntegerExpression2goto state 52
	IntegerExpression3goto state 53
	IntegerExpressiongoto state 54
	BoolValue      goto state 55
	BoolExpression goto state 56
	BoolExpression1goto state 57
	BoolExpression2goto state 58
	BasisState     goto state 59
	Term4          goto state 60
	Term3          goto state 281
	List1          goto state 65
	List           goto state 145

State 188

	Term2 -> Term2 '.' Term3 .                          (rule 147)
	List -> Term3 . ':' List1                           (rule 165)

	'$'            reduce using rule 147
	'('            reduce using rule 147
	'()'           reduce using rule 147
	')'            reduce using rule 147
	'*'            reduce using rule 147
	','            reduce using rule 147
	'-'            reduce using rule 147
	'->'           reduce using rule 147
	'.'            reduce using rule 147
	':'            shift, and enter state 153
	';'            reduce using rule 147
	'@+'           reduce using rule 147
	'@+i'          reduce using rule 147
	'@-'           reduce using rule 147
	'@-i'          reduce using rule 147
	'@0'           reduce using rule 147
	'@1'           reduce using rule 147
	'False'        reduce using rule 147
	'True'         reduce using rule 147
	'['            reduce using rule 147
	'[]'           reduce using rule 147
	']'            reduce using rule 147
	'case'         reduce using rule 147
	'else'         reduce using rule 147
	'gate'         reduce using rule 147
	'if'           reduce using rule 147
	'let'          reduce using rule 147
	'not'          reduce using rule 147
	'of'           reduce using rule 147
	'then'         reduce using rule 147
	'with'         reduce using rule 147
	'|'            reduce using rule 147
	'}'            reduce using rule 147
	L_integ        reduce using rule 147
	L_Var          reduce using rule 147
	L_Bit          reduce using rule 147
	L_Lambda       reduce using rule 147


State 189

	Term2 -> Term2 '*' Term3 .                          (rule 148)
	List -> Term3 . ':' List1                           (rule 165)

	'$'            reduce using rule 148
	'('            reduce using rule 148
	'()'           reduce using rule 148
	')'            reduce using rule 148
	'*'            reduce using rule 148
	','            reduce using rule 148
	'-'            reduce using rule 148
	'->'           reduce using rule 148
	'.'            reduce using rule 148
	':'            shift, and enter state 153
	';'            reduce using rule 148
	'@+'           reduce using rule 148
	'@+i'          reduce using rule 148
	'@-'           reduce using rule 148
	'@-i'          reduce using rule 148
	'@0'           reduce using rule 148
	'@1'           reduce using rule 148
	'False'        reduce using rule 148
	'True'         reduce using rule 148
	'['            reduce using rule 148
	'[]'           reduce using rule 148
	']'            reduce using rule 148
	'case'         reduce using rule 148
	'else'         reduce using rule 148
	'gate'         reduce using rule 148
	'if'           reduce using rule 148
	'let'          reduce using rule 148
	'not'          reduce using rule 148
	'of'           reduce using rule 148
	'then'         reduce using rule 148
	'with'         reduce using rule 148
	'|'            reduce using rule 148
	'}'            reduce using rule 148
	L_integ        reduce using rule 148
	L_Var          reduce using rule 148
	L_Bit          reduce using rule 148
	L_Lambda       reduce using rule 148


State 190

	Term -> Term1 '$' Term .                            (rule 158)

	'$'            reduce using rule 158
	'('            reduce using rule 158
	'()'           reduce using rule 158
	')'            reduce using rule 158
	','            reduce using rule 158
	'-'            reduce using rule 158
	'->'           reduce using rule 158
	';'            reduce using rule 158
	'@+'           reduce using rule 158
	'@+i'          reduce using rule 158
	'@-'           reduce using rule 158
	'@-i'          reduce using rule 158
	'@0'           reduce using rule 158
	'@1'           reduce using rule 158
	'False'        reduce using rule 158
	'True'         reduce using rule 158
	'['            reduce using rule 158
	'[]'           reduce using rule 158
	']'            reduce using rule 158
	'case'         reduce using rule 158
	'else'         reduce using rule 158
	'gate'         reduce using rule 158
	'if'           reduce using rule 158
	'let'          reduce using rule 158
	'not'          reduce using rule 158
	'of'           reduce using rule 158
	'then'         reduce using rule 158
	'with'         reduce using rule 158
	'|'            reduce using rule 158
	'}'            reduce using rule 158
	L_integ        reduce using rule 158
	L_Var          reduce using rule 158
	L_Bit          reduce using rule 158
	L_Lambda       reduce using rule 158


State 191

	List -> List '++' List1 .                           (rule 164)

	'!!'           reduce using rule 164
	'$'            reduce using rule 164
	'('            reduce using rule 164
	'()'           reduce using rule 164
	')'            reduce using rule 164
	'*'            reduce using rule 164
	'++'           reduce using rule 164
	','            reduce using rule 164
	'-'            reduce using rule 164
	'->'           reduce using rule 164
	'.'            reduce using rule 164
	':'            reduce using rule 164
	';'            reduce using rule 164
	'@+'           reduce using rule 164
	'@+i'          reduce using rule 164
	'@-'           reduce using rule 164
	'@-i'          reduce using rule 164
	'@0'           reduce using rule 164
	'@1'           reduce using rule 164
	'False'        reduce using rule 164
	'True'         reduce using rule 164
	'['            reduce using rule 164
	'[]'           reduce using rule 164
	']'            reduce using rule 164
	'case'         reduce using rule 164
	'else'         reduce using rule 164
	'gate'         reduce using rule 164
	'if'           reduce using rule 164
	'let'          reduce using rule 164
	'not'          reduce using rule 164
	'of'           reduce using rule 164
	'then'         reduce using rule 164
	'with'         reduce using rule 164
	'|'            reduce using rule 164
	'}'            reduce using rule 164
	L_integ        reduce using rule 164
	L_Var          reduce using rule 164
	L_Bit          reduce using rule 164
	L_Lambda       reduce using rule 164


State 192

	Term4 -> List '!!' Integer .                        (rule 128)

	'$'            reduce using rule 128
	'('            reduce using rule 128
	'()'           reduce using rule 128
	')'            reduce using rule 128
	'*'            reduce using rule 128
	','            reduce using rule 128
	'-'            reduce using rule 128
	'->'           reduce using rule 128
	'.'            reduce using rule 128
	':'            reduce using rule 128
	';'            reduce using rule 128
	'@+'           reduce using rule 128
	'@+i'          reduce using rule 128
	'@-'           reduce using rule 128
	'@-i'          reduce using rule 128
	'@0'           reduce using rule 128
	'@1'           reduce using rule 128
	'False'        reduce using rule 128
	'True'         reduce using rule 128
	'['            reduce using rule 128
	'[]'           reduce using rule 128
	']'            reduce using rule 128
	'case'         reduce using rule 128
	'else'         reduce using rule 128
	'gate'         reduce using rule 128
	'if'           reduce using rule 128
	'let'          reduce using rule 128
	'not'          reduce using rule 128
	'of'           reduce using rule 128
	'then'         reduce using rule 128
	'with'         reduce using rule 128
	'|'            reduce using rule 128
	'}'            reduce using rule 128
	L_integ        reduce using rule 128
	L_Var          reduce using rule 128
	L_Bit          reduce using rule 128
	L_Lambda       reduce using rule 128


State 193

	List1 -> '(' List ')' .                             (rule 163)

	'!!'           reduce using rule 163
	'$'            reduce using rule 163
	'('            reduce using rule 163
	'()'           reduce using rule 163
	')'            reduce using rule 163
	'*'            reduce using rule 163
	'++'           reduce using rule 163
	','            reduce using rule 163
	'-'            reduce using rule 163
	'->'           reduce using rule 163
	'.'            reduce using rule 163
	':'            reduce using rule 163
	';'            reduce using rule 163
	'@+'           reduce using rule 163
	'@+i'          reduce using rule 163
	'@-'           reduce using rule 163
	'@-i'          reduce using rule 163
	'@0'           reduce using rule 163
	'@1'           reduce using rule 163
	'False'        reduce using rule 163
	'True'         reduce using rule 163
	'['            reduce using rule 163
	'[]'           reduce using rule 163
	']'            reduce using rule 163
	'case'         reduce using rule 163
	'else'         reduce using rule 163
	'gate'         reduce using rule 163
	'if'           reduce using rule 163
	'let'          reduce using rule 163
	'not'          reduce using rule 163
	'of'           reduce using rule 163
	'then'         reduce using rule 163
	'with'         reduce using rule 163
	'|'            reduce using rule 163
	'}'            reduce using rule 163
	L_integ        reduce using rule 163
	L_Var          reduce using rule 163
	L_Bit          reduce using rule 163
	L_Lambda       reduce using rule 163


State 194

	Term4 -> '(' Term ')' .                             (rule 129)

	'$'            reduce using rule 129
	'('            reduce using rule 129
	'()'           reduce using rule 129
	')'            reduce using rule 129
	'*'            reduce using rule 129
	','            reduce using rule 129
	'-'            reduce using rule 129
	'->'           reduce using rule 129
	'.'            reduce using rule 129
	':'            reduce using rule 129
	';'            reduce using rule 129
	'@+'           reduce using rule 129
	'@+i'          reduce using rule 129
	'@-'           reduce using rule 129
	'@-i'          reduce using rule 129
	'@0'           reduce using rule 129
	'@1'           reduce using rule 129
	'False'        reduce using rule 129
	'True'         reduce using rule 129
	'['            reduce using rule 129
	'[]'           reduce using rule 129
	']'            reduce using rule 129
	'case'         reduce using rule 129
	'else'         reduce using rule 129
	'gate'         reduce using rule 129
	'if'           reduce using rule 129
	'let'          reduce using rule 129
	'not'          reduce using rule 129
	'of'           reduce using rule 129
	'then'         reduce using rule 129
	'with'         reduce using rule 129
	'|'            reduce using rule 129
	'}'            reduce using rule 129
	L_integ        reduce using rule 129
	L_Var          reduce using rule 129
	L_Bit          reduce using rule 129
	L_Lambda       reduce using rule 129


State 195

	Term3 -> '(' Term ',' . ListTerm ')'                (rule 138)

	'('            shift, and enter state 67
	'()'           shift, and enter state 68
	'-'            shift, and enter state 69
	'@+'           shift, and enter state 70
	'@+i'          shift, and enter state 71
	'@-'           shift, and enter state 72
	'@-i'          shift, and enter state 73
	'@0'           shift, and enter state 74
	'@1'           shift, and enter state 75
	'False'        shift, and enter state 76
	'True'         shift, and enter state 77
	'['            shift, and enter state 78
	'[]'           shift, and enter state 79
	'case'         shift, and enter state 80
	'gate'         shift, and enter state 81
	'if'           shift, and enter state 82
	'let'          shift, and enter state 83
	'not'          shift, and enter state 84
	'with'         shift, and enter state 85
	'|'            shift, and enter state 86
	L_integ        shift, and enter state 42
	L_Var          shift, and enter state 8
	L_Bit          shift, and enter state 87
	L_Lambda       shift, and enter state 88

	Integer        goto state 47
	Var            goto state 48
	Bit            goto state 49
	Lambda         goto state 50
	IntegerExpression1goto state 51
	IntegerExpression2goto state 52
	IntegerExpression3goto state 53
	IntegerExpressiongoto state 54
	BoolValue      goto state 55
	BoolExpression goto state 56
	BoolExpression1goto state 57
	BoolExpression2goto state 58
	BasisState     goto state 59
	ListTerm       goto state 280
	Term4          goto state 60
	Term3          goto state 61
	Term2          goto state 62
	Term1          goto state 63
	Term           goto state 279
	List1          goto state 65
	List           goto state 66

State 196

	BoolExpression2 -> '(' BoolExpression ')' .         (rule 34)

	'$'            reduce using rule 34
	'&&'           reduce using rule 34
	'('            reduce using rule 34
	'()'           reduce using rule 34
	')'            reduce using rule 34
	'*'            reduce using rule 34
	','            reduce using rule 34
	'-'            reduce using rule 34
	'->'           reduce using rule 34
	'.'            reduce using rule 34
	'/='           reduce using rule 34
	':'            reduce using rule 34
	';'            reduce using rule 34
	'=='           reduce using rule 34
	'@+'           reduce using rule 34
	'@+i'          reduce using rule 34
	'@-'           reduce using rule 34
	'@-i'          reduce using rule 34
	'@0'           reduce using rule 34
	'@1'           reduce using rule 34
	'False'        reduce using rule 34
	'True'         reduce using rule 34
	'['            reduce using rule 34
	'[]'           reduce using rule 34
	']'            reduce using rule 34
	'case'         reduce using rule 34
	'else'         reduce using rule 34
	'gate'         reduce using rule 34
	'if'           reduce using rule 34
	'let'          reduce using rule 34
	'not'          reduce using rule 34
	'of'           reduce using rule 34
	'then'         reduce using rule 34
	'with'         reduce using rule 34
	'|'            reduce using rule 34
	'||'           reduce using rule 34
	'}'            reduce using rule 34
	L_integ        reduce using rule 34
	L_Var          reduce using rule 34
	L_Bit          reduce using rule 34
	L_Lambda       reduce using rule 34


State 197

	IntegerExpression3 -> '(' IntegerExpression ')' .    (rule 16)

	'$'            reduce using rule 16
	'&&'           reduce using rule 16
	'('            reduce using rule 16
	'()'           reduce using rule 16
	')'            reduce using rule 16
	'*'            reduce using rule 16
	'+'            reduce using rule 16
	','            reduce using rule 16
	'-'            reduce using rule 16
	'->'           reduce using rule 16
	'.'            reduce using rule 16
	'/'            reduce using rule 16
	'/='           reduce using rule 16
	':'            reduce using rule 16
	';'            reduce using rule 16
	'<'            reduce using rule 16
	'<='           reduce using rule 16
	'=='           reduce using rule 16
	'>'            reduce using rule 16
	'>='           reduce using rule 16
	'@+'           reduce using rule 16
	'@+i'          reduce using rule 16
	'@-'           reduce using rule 16
	'@-i'          reduce using rule 16
	'@0'           reduce using rule 16
	'@1'           reduce using rule 16
	'False'        reduce using rule 16
	'True'         reduce using rule 16
	'['            reduce using rule 16
	'[]'           reduce using rule 16
	']'            reduce using rule 16
	'case'         reduce using rule 16
	'else'         reduce using rule 16
	'gate'         reduce using rule 16
	'if'           reduce using rule 16
	'let'          reduce using rule 16
	'not'          reduce using rule 16
	'of'           reduce using rule 16
	'then'         reduce using rule 16
	'with'         reduce using rule 16
	'|'            reduce using rule 16
	'||'           reduce using rule 16
	'}'            reduce using rule 16
	L_integ        reduce using rule 16
	L_Var          reduce using rule 16
	L_Bit          reduce using rule 16
	L_Lambda       reduce using rule 16


State 198

	IntegerExpression3 -> '(' IntegerExpression . ')'    (rule 16)

	')'            shift, and enter state 197


State 199

	List1 -> '[' Term ',' . ListTerm ']'                (rule 162)

	'('            shift, and enter state 67
	'()'           shift, and enter state 68
	'-'            shift, and enter state 69
	'@+'           shift, and enter state 70
	'@+i'          shift, and enter state 71
	'@-'           shift, and enter state 72
	'@-i'          shift, and enter state 73
	'@0'           shift, and enter state 74
	'@1'           shift, and enter state 75
	'False'        shift, and enter state 76
	'True'         shift, and enter state 77
	'['            shift, and enter state 78
	'[]'           shift, and enter state 79
	'case'         shift, and enter state 80
	'gate'         shift, and enter state 81
	'if'           shift, and enter state 82
	'let'          shift, and enter state 83
	'not'          shift, and enter state 84
	'with'         shift, and enter state 85
	'|'            shift, and enter state 86
	L_integ        shift, and enter state 42
	L_Var          shift, and enter state 8
	L_Bit          shift, and enter state 87
	L_Lambda       shift, and enter state 88

	Integer        goto state 47
	Var            goto state 48
	Bit            goto state 49
	Lambda         goto state 50
	IntegerExpression1goto state 51
	IntegerExpression2goto state 52
	IntegerExpression3goto state 53
	IntegerExpressiongoto state 54
	BoolValue      goto state 55
	BoolExpression goto state 56
	BoolExpression1goto state 57
	BoolExpression2goto state 58
	BasisState     goto state 59
	ListTerm       goto state 278
	Term4          goto state 60
	Term3          goto state 61
	Term2          goto state 62
	Term1          goto state 63
	Term           goto state 279
	List1          goto state 65
	List           goto state 66

State 200

	List1 -> '[' Term ']' .                             (rule 161)

	'!!'           reduce using rule 161
	'$'            reduce using rule 161
	'('            reduce using rule 161
	'()'           reduce using rule 161
	')'            reduce using rule 161
	'*'            reduce using rule 161
	'++'           reduce using rule 161
	','            reduce using rule 161
	'-'            reduce using rule 161
	'->'           reduce using rule 161
	'.'            reduce using rule 161
	':'            reduce using rule 161
	';'            reduce using rule 161
	'@+'           reduce using rule 161
	'@+i'          reduce using rule 161
	'@-'           reduce using rule 161
	'@-i'          reduce using rule 161
	'@0'           reduce using rule 161
	'@1'           reduce using rule 161
	'False'        reduce using rule 161
	'True'         reduce using rule 161
	'['            reduce using rule 161
	'[]'           reduce using rule 161
	']'            reduce using rule 161
	'case'         reduce using rule 161
	'else'         reduce using rule 161
	'gate'         reduce using rule 161
	'if'           reduce using rule 161
	'let'          reduce using rule 161
	'not'          reduce using rule 161
	'of'           reduce using rule 161
	'then'         reduce using rule 161
	'with'         reduce using rule 161
	'|'            reduce using rule 161
	'}'            reduce using rule 161
	L_integ        reduce using rule 161
	L_Var          reduce using rule 161
	L_Bit          reduce using rule 161
	L_Lambda       reduce using rule 161


State 201

	Term1 -> 'case' Term 'of' . '{' ListCaseExpression '}'    (rule 155)

	'{'            shift, and enter state 277


State 202

	Gate -> 'U3' '[' . Angle ',' Angle ',' Angle ']'    (rule 89)

	L_doubl        shift, and enter state 2

	Double         goto state 246
	Angle          goto state 276

State 203

	Gate -> 'U2' '[' . Angle ',' Angle ']'              (rule 88)

	L_doubl        shift, and enter state 2

	Double         goto state 246
	Angle          goto state 275

State 204

	Gate -> 'U1' '[' . Angle ']'                        (rule 87)

	L_doubl        shift, and enter state 2

	Double         goto state 246
	Angle          goto state 274

State 205

	Gate -> 'SWAP_THETA' '[' . Angle ']'                (rule 95)

	L_doubl        shift, and enter state 2

	Double         goto state 246
	Angle          goto state 273

State 206

	Gate -> 'RZ' '[' . Angle ']'                        (rule 86)

	L_doubl        shift, and enter state 2

	Double         goto state 246
	Angle          goto state 272

State 207

	Gate -> 'RY' '[' . Angle ']'                        (rule 85)

	L_doubl        shift, and enter state 2

	Double         goto state 246
	Angle          goto state 271

State 208

	Gate -> 'RX' '[' . Angle ']'                        (rule 84)

	L_doubl        shift, and enter state 2

	Double         goto state 246
	Angle          goto state 270

State 209

	Gate -> 'ROOT_Z_DAG' '[' . Integer ']'              (rule 74)
	Gate -> 'ROOT_Z_DAG' '[' . Var ']'                  (rule 75)

	L_integ        shift, and enter state 42
	L_Var          shift, and enter state 8

	Integer        goto state 268
	Var            goto state 269

State 210

	Gate -> 'ROOT_Z' '[' . Integer ']'                  (rule 72)
	Gate -> 'ROOT_Z' '[' . Var ']'                      (rule 73)

	L_integ        shift, and enter state 42
	L_Var          shift, and enter state 8

	Integer        goto state 266
	Var            goto state 267

State 211

	Gate -> 'ROOT_Y_DAG' '[' . Integer ']'              (rule 70)
	Gate -> 'ROOT_Y_DAG' '[' . Var ']'                  (rule 71)

	L_integ        shift, and enter state 42
	L_Var          shift, and enter state 8

	Integer        goto state 264
	Var            goto state 265

State 212

	Gate -> 'ROOT_Y' '[' . Integer ']'                  (rule 68)
	Gate -> 'ROOT_Y' '[' . Var ']'                      (rule 69)

	L_integ        shift, and enter state 42
	L_Var          shift, and enter state 8

	Integer        goto state 262
	Var            goto state 263

State 213

	Gate -> 'ROOT_X_DAG' '[' . Integer ']'              (rule 66)
	Gate -> 'ROOT_X_DAG' '[' . Var ']'                  (rule 67)

	L_integ        shift, and enter state 42
	L_Var          shift, and enter state 8

	Integer        goto state 260
	Var            goto state 261

State 214

	Gate -> 'ROOT_X' '[' . Integer ']'                  (rule 64)
	Gate -> 'ROOT_X' '[' . Var ']'                      (rule 65)

	L_integ        shift, and enter state 42
	L_Var          shift, and enter state 8

	Integer        goto state 258
	Var            goto state 259

State 215

	Gate -> 'ROOT_SWAP_DAG' '[' . Integer ']'           (rule 98)
	Gate -> 'ROOT_SWAP_DAG' '[' . Var ']'               (rule 99)

	L_integ        shift, and enter state 42
	L_Var          shift, and enter state 8

	Integer        goto state 256
	Var            goto state 257

State 216

	Gate -> 'ROOT_SWAP' '[' . Integer ']'               (rule 96)
	Gate -> 'ROOT_SWAP' '[' . Var ']'                   (rule 97)

	L_integ        shift, and enter state 42
	L_Var          shift, and enter state 8

	Integer        goto state 254
	Var            goto state 255

State 217

	Gate -> 'QFT_DAG' '[' . Integer ']'                 (rule 102)
	Gate -> 'QFT_DAG' '[' . Var ']'                     (rule 103)

	L_integ        shift, and enter state 42
	L_Var          shift, and enter state 8

	Integer        goto state 252
	Var            goto state 253

State 218

	Gate -> 'QFT' '[' . Integer ']'                     (rule 100)
	Gate -> 'QFT' '[' . Var ']'                         (rule 101)

	L_integ        shift, and enter state 42
	L_Var          shift, and enter state 8

	Integer        goto state 250
	Var            goto state 251

State 219

	Gate -> GateVar '[' . Angle ',' Angle ',' Angle ']'    (rule 104)
	Gate -> GateVar '[' . Angle ',' Angle ']'           (rule 105)
	Gate -> GateVar '[' . Angle ']'                     (rule 106)
	Gate -> GateVar '[' . Integer ']'                   (rule 107)
	Gate -> GateVar '[' . Var ']'                       (rule 108)

	L_doubl        shift, and enter state 2
	L_integ        shift, and enter state 42
	L_Var          shift, and enter state 8

	Double         goto state 246
	Integer        goto state 247
	Var            goto state 248
	Angle          goto state 249

State 220

	Term1 -> 'if' Term 'then' . Term 'else' Term        (rule 150)

	'('            shift, and enter state 67
	'()'           shift, and enter state 68
	'-'            shift, and enter state 69
	'@+'           shift, and enter state 70
	'@+i'          shift, and enter state 71
	'@-'           shift, and enter state 72
	'@-i'          shift, and enter state 73
	'@0'           shift, and enter state 74
	'@1'           shift, and enter state 75
	'False'        shift, and enter state 76
	'True'         shift, and enter state 77
	'['            shift, and enter state 78
	'[]'           shift, and enter state 79
	'case'         shift, and enter state 80
	'gate'         shift, and enter state 81
	'if'           shift, and enter state 82
	'let'          shift, and enter state 83
	'not'          shift, and enter state 84
	'with'         shift, and enter state 85
	'|'            shift, and enter state 86
	L_integ        shift, and enter state 42
	L_Var          shift, and enter state 8
	L_Bit          shift, and enter state 87
	L_Lambda       shift, and enter state 88

	Integer        goto state 47
	Var            goto state 48
	Bit            goto state 49
	Lambda         goto state 50
	IntegerExpression1goto state 51
	IntegerExpression2goto state 52
	IntegerExpression3goto state 53
	IntegerExpressiongoto state 54
	BoolValue      goto state 55
	BoolExpression goto state 56
	BoolExpression1goto state 57
	BoolExpression2goto state 58
	BasisState     goto state 59
	Term4          goto state 60
	Term3          goto state 61
	Term2          goto state 62
	Term1          goto state 63
	Term           goto state 245
	List1          goto state 65
	List           goto state 66

State 221

	Term1 -> 'let' '{' Var . '=' Term '}' 'in' Term     (rule 151)

	'='            shift, and enter state 244


State 222

	Term1 -> 'let' '{' '(' . Var ',' ListVar ')' '=' Term '}' 'in' Term    (rule 152)

	L_Var          shift, and enter state 8

	Var            goto state 243

State 223

	BoolExpression -> BoolExpression . '&&' BoolExpression1    (rule 20)
	BoolExpression -> BoolExpression . '||' BoolExpression1    (rule 21)
	BoolExpression2 -> '(' BoolExpression . ')'         (rule 34)

	'&&'           shift, and enter state 156
	')'            shift, and enter state 196
	'||'           shift, and enter state 157


State 224

	ControlVars -> '[' Var . ',' ListVar ']'            (rule 125)
	Term3 -> Var .                                      (rule 137)
	Term1 -> Var . '<-' Term ';' Term                   (rule 153)

	'$'            reduce using rule 137
	'('            reduce using rule 137
	'()'           reduce using rule 137
	'*'            reduce using rule 137
	','            shift, and enter state 242
			(reduce using rule 137)

	'-'            reduce using rule 137
	'.'            reduce using rule 137
	':'            reduce using rule 137
	'<-'           shift, and enter state 169
	'@+'           reduce using rule 137
	'@+i'          reduce using rule 137
	'@-'           reduce using rule 137
	'@-i'          reduce using rule 137
	'@0'           reduce using rule 137
	'@1'           reduce using rule 137
	'False'        reduce using rule 137
	'True'         reduce using rule 137
	'['            reduce using rule 137
	'[]'           reduce using rule 137
	']'            reduce using rule 137
	'gate'         reduce using rule 137
	'not'          reduce using rule 137
	L_integ        reduce using rule 137
	L_Var          reduce using rule 137
	L_Bit          reduce using rule 137


State 225

	ControlTerm -> '[' Term . ']'                       (rule 122)
	ControlTerms -> '[' Term . ',' ListTerm ']'         (rule 123)

	','            shift, and enter state 240
	']'            shift, and enter state 241


State 226

	Term2 -> 'with' ControlVars 'ctrl' . ControlBasisStates    (rule 142)
	Term2 -> 'with' ControlVars 'ctrl' . ControlBits    (rule 145)

	'['            shift, and enter state 237

	ControlBasisStatesgoto state 238
	ControlBits    goto state 239

State 227

	Term2 -> 'with' ControlTerms 'ctrl' . ControlBasisStates    (rule 141)
	Term2 -> 'with' ControlTerms 'ctrl' . ControlBits    (rule 144)

	'['            shift, and enter state 237

	ControlBasisStatesgoto state 235
	ControlBits    goto state 236

State 228

	Term2 -> 'with' ControlTerm 'ctrl' . ControlBasisState    (rule 140)
	Term2 -> 'with' ControlTerm 'ctrl' . ControlBit     (rule 143)

	'['            shift, and enter state 234

	ControlBasisStategoto state 232
	ControlBit     goto state 233

State 229

	Term1 -> '|' Var ',' . ListVar '|' '<-' Term ';' Term    (rule 154)

	L_Var          shift, and enter state 8

	Var            goto state 230
	ListVar        goto state 231

State 230

	ListVar -> Var .                                    (rule 110)
	ListVar -> Var . ',' ListVar                        (rule 111)

	')'            reduce using rule 110
	','            shift, and enter state 333
	']'            reduce using rule 110
	'|'            reduce using rule 110


State 231

	Term1 -> '|' Var ',' ListVar . '|' '<-' Term ';' Term    (rule 154)

	'|'            shift, and enter state 332


State 232

	Term2 -> 'with' ControlTerm 'ctrl' ControlBasisState .    (rule 140)

	'$'            reduce using rule 140
	'('            reduce using rule 140
	'()'           reduce using rule 140
	')'            reduce using rule 140
	'*'            reduce using rule 140
	','            reduce using rule 140
	'-'            reduce using rule 140
	'->'           reduce using rule 140
	'.'            reduce using rule 140
	';'            reduce using rule 140
	'@+'           reduce using rule 140
	'@+i'          reduce using rule 140
	'@-'           reduce using rule 140
	'@-i'          reduce using rule 140
	'@0'           reduce using rule 140
	'@1'           reduce using rule 140
	'False'        reduce using rule 140
	'True'         reduce using rule 140
	'['            reduce using rule 140
	'[]'           reduce using rule 140
	']'            reduce using rule 140
	'case'         reduce using rule 140
	'else'         reduce using rule 140
	'gate'         reduce using rule 140
	'if'           reduce using rule 140
	'let'          reduce using rule 140
	'not'          reduce using rule 140
	'of'           reduce using rule 140
	'then'         reduce using rule 140
	'with'         reduce using rule 140
	'|'            reduce using rule 140
	'}'            reduce using rule 140
	L_integ        reduce using rule 140
	L_Var          reduce using rule 140
	L_Bit          reduce using rule 140
	L_Lambda       reduce using rule 140


State 233

	Term2 -> 'with' ControlTerm 'ctrl' ControlBit .     (rule 143)

	'$'            reduce using rule 143
	'('            reduce using rule 143
	'()'           reduce using rule 143
	')'            reduce using rule 143
	'*'            reduce using rule 143
	','            reduce using rule 143
	'-'            reduce using rule 143
	'->'           reduce using rule 143
	'.'            reduce using rule 143
	';'            reduce using rule 143
	'@+'           reduce using rule 143
	'@+i'          reduce using rule 143
	'@-'           reduce using rule 143
	'@-i'          reduce using rule 143
	'@0'           reduce using rule 143
	'@1'           reduce using rule 143
	'False'        reduce using rule 143
	'True'         reduce using rule 143
	'['            reduce using rule 143
	'[]'           reduce using rule 143
	']'            reduce using rule 143
	'case'         reduce using rule 143
	'else'         reduce using rule 143
	'gate'         reduce using rule 143
	'if'           reduce using rule 143
	'let'          reduce using rule 143
	'not'          reduce using rule 143
	'of'           reduce using rule 143
	'then'         reduce using rule 143
	'with'         reduce using rule 143
	'|'            reduce using rule 143
	'}'            reduce using rule 143
	L_integ        reduce using rule 143
	L_Var          reduce using rule 143
	L_Bit          reduce using rule 143
	L_Lambda       reduce using rule 143


State 234

	ControlBasisState -> '[' . BasisState ']'           (rule 114)
	ControlBit -> '[' . Bit ']'                         (rule 118)

	'@+'           shift, and enter state 70
	'@+i'          shift, and enter state 71
	'@-'           shift, and enter state 72
	'@-i'          shift, and enter state 73
	'@0'           shift, and enter state 74
	'@1'           shift, and enter state 75
	L_Bit          shift, and enter state 87

	Bit            goto state 330
	BasisState     goto state 331

State 235

	Term2 -> 'with' ControlTerms 'ctrl' ControlBasisStates .    (rule 141)

	'$'            reduce using rule 141
	'('            reduce using rule 141
	'()'           reduce using rule 141
	')'            reduce using rule 141
	'*'            reduce using rule 141
	','            reduce using rule 141
	'-'            reduce using rule 141
	'->'           reduce using rule 141
	'.'            reduce using rule 141
	';'            reduce using rule 141
	'@+'           reduce using rule 141
	'@+i'          reduce using rule 141
	'@-'           reduce using rule 141
	'@-i'          reduce using rule 141
	'@0'           reduce using rule 141
	'@1'           reduce using rule 141
	'False'        reduce using rule 141
	'True'         reduce using rule 141
	'['            reduce using rule 141
	'[]'           reduce using rule 141
	']'            reduce using rule 141
	'case'         reduce using rule 141
	'else'         reduce using rule 141
	'gate'         reduce using rule 141
	'if'           reduce using rule 141
	'let'          reduce using rule 141
	'not'          reduce using rule 141
	'of'           reduce using rule 141
	'then'         reduce using rule 141
	'with'         reduce using rule 141
	'|'            reduce using rule 141
	'}'            reduce using rule 141
	L_integ        reduce using rule 141
	L_Var          reduce using rule 141
	L_Bit          reduce using rule 141
	L_Lambda       reduce using rule 141


State 236

	Term2 -> 'with' ControlTerms 'ctrl' ControlBits .    (rule 144)

	'$'            reduce using rule 144
	'('            reduce using rule 144
	'()'           reduce using rule 144
	')'            reduce using rule 144
	'*'            reduce using rule 144
	','            reduce using rule 144
	'-'            reduce using rule 144
	'->'           reduce using rule 144
	'.'            reduce using rule 144
	';'            reduce using rule 144
	'@+'           reduce using rule 144
	'@+i'          reduce using rule 144
	'@-'           reduce using rule 144
	'@-i'          reduce using rule 144
	'@0'           reduce using rule 144
	'@1'           reduce using rule 144
	'False'        reduce using rule 144
	'True'         reduce using rule 144
	'['            reduce using rule 144
	'[]'           reduce using rule 144
	']'            reduce using rule 144
	'case'         reduce using rule 144
	'else'         reduce using rule 144
	'gate'         reduce using rule 144
	'if'           reduce using rule 144
	'let'          reduce using rule 144
	'not'          reduce using rule 144
	'of'           reduce using rule 144
	'then'         reduce using rule 144
	'with'         reduce using rule 144
	'|'            reduce using rule 144
	'}'            reduce using rule 144
	L_integ        reduce using rule 144
	L_Var          reduce using rule 144
	L_Bit          reduce using rule 144
	L_Lambda       reduce using rule 144


State 237

	ControlBasisStates -> '[' . BasisState ',' ListBasisState ']'    (rule 115)
	ControlBits -> '[' . Bit ',' ListBit ']'            (rule 119)

	'@+'           shift, and enter state 70
	'@+i'          shift, and enter state 71
	'@-'           shift, and enter state 72
	'@-i'          shift, and enter state 73
	'@0'           shift, and enter state 74
	'@1'           shift, and enter state 75
	L_Bit          shift, and enter state 87

	Bit            goto state 328
	BasisState     goto state 329

State 238

	Term2 -> 'with' ControlVars 'ctrl' ControlBasisStates .    (rule 142)

	'$'            reduce using rule 142
	'('            reduce using rule 142
	'()'           reduce using rule 142
	')'            reduce using rule 142
	'*'            reduce using rule 142
	','            reduce using rule 142
	'-'            reduce using rule 142
	'->'           reduce using rule 142
	'.'            reduce using rule 142
	';'            reduce using rule 142
	'@+'           reduce using rule 142
	'@+i'          reduce using rule 142
	'@-'           reduce using rule 142
	'@-i'          reduce using rule 142
	'@0'           reduce using rule 142
	'@1'           reduce using rule 142
	'False'        reduce using rule 142
	'True'         reduce using rule 142
	'['            reduce using rule 142
	'[]'           reduce using rule 142
	']'            reduce using rule 142
	'case'         reduce using rule 142
	'else'         reduce using rule 142
	'gate'         reduce using rule 142
	'if'           reduce using rule 142
	'let'          reduce using rule 142
	'not'          reduce using rule 142
	'of'           reduce using rule 142
	'then'         reduce using rule 142
	'with'         reduce using rule 142
	'|'            reduce using rule 142
	'}'            reduce using rule 142
	L_integ        reduce using rule 142
	L_Var          reduce using rule 142
	L_Bit          reduce using rule 142
	L_Lambda       reduce using rule 142


State 239

	Term2 -> 'with' ControlVars 'ctrl' ControlBits .    (rule 145)

	'$'            reduce using rule 145
	'('            reduce using rule 145
	'()'           reduce using rule 145
	')'            reduce using rule 145
	'*'            reduce using rule 145
	','            reduce using rule 145
	'-'            reduce using rule 145
	'->'           reduce using rule 145
	'.'            reduce using rule 145
	';'            reduce using rule 145
	'@+'           reduce using rule 145
	'@+i'          reduce using rule 145
	'@-'           reduce using rule 145
	'@-i'          reduce using rule 145
	'@0'           reduce using rule 145
	'@1'           reduce using rule 145
	'False'        reduce using rule 145
	'True'         reduce using rule 145
	'['            reduce using rule 145
	'[]'           reduce using rule 145
	']'            reduce using rule 145
	'case'         reduce using rule 145
	'else'         reduce using rule 145
	'gate'         reduce using rule 145
	'if'           reduce using rule 145
	'let'          reduce using rule 145
	'not'          reduce using rule 145
	'of'           reduce using rule 145
	'then'         reduce using rule 145
	'with'         reduce using rule 145
	'|'            reduce using rule 145
	'}'            reduce using rule 145
	L_integ        reduce using rule 145
	L_Var          reduce using rule 145
	L_Bit          reduce using rule 145
	L_Lambda       reduce using rule 145


State 240

	ControlTerms -> '[' Term ',' . ListTerm ']'         (rule 123)

	'('            shift, and enter state 67
	'()'           shift, and enter state 68
	'-'            shift, and enter state 69
	'@+'           shift, and enter state 70
	'@+i'          shift, and enter state 71
	'@-'           shift, and enter state 72
	'@-i'          shift, and enter state 73
	'@0'           shift, and enter state 74
	'@1'           shift, and enter state 75
	'False'        shift, and enter state 76
	'True'         shift, and enter state 77
	'['            shift, and enter state 78
	'[]'           shift, and enter state 79
	'case'         shift, and enter state 80
	'gate'         shift, and enter state 81
	'if'           shift, and enter state 82
	'let'          shift, and enter state 83
	'not'          shift, and enter state 84
	'with'         shift, and enter state 85
	'|'            shift, and enter state 86
	L_integ        shift, and enter state 42
	L_Var          shift, and enter state 8
	L_Bit          shift, and enter state 87
	L_Lambda       shift, and enter state 88

	Integer        goto state 47
	Var            goto state 48
	Bit            goto state 49
	Lambda         goto state 50
	IntegerExpression1goto state 51
	IntegerExpression2goto state 52
	IntegerExpression3goto state 53
	IntegerExpressiongoto state 54
	BoolValue      goto state 55
	BoolExpression goto state 56
	BoolExpression1goto state 57
	BoolExpression2goto state 58
	BasisState     goto state 59
	ListTerm       goto state 327
	Term4          goto state 60
	Term3          goto state 61
	Term2          goto state 62
	Term1          goto state 63
	Term           goto state 279
	List1          goto state 65
	List           goto state 66

State 241

	ControlTerm -> '[' Term ']' .                       (rule 122)

	'ctrl'         reduce using rule 122


State 242

	ControlVars -> '[' Var ',' . ListVar ']'            (rule 125)

	L_Var          shift, and enter state 8

	Var            goto state 230
	ListVar        goto state 326

State 243

	Term1 -> 'let' '{' '(' Var . ',' ListVar ')' '=' Term '}' 'in' Term    (rule 152)

	','            shift, and enter state 325


State 244

	Term1 -> 'let' '{' Var '=' . Term '}' 'in' Term     (rule 151)

	'('            shift, and enter state 67
	'()'           shift, and enter state 68
	'-'            shift, and enter state 69
	'@+'           shift, and enter state 70
	'@+i'          shift, and enter state 71
	'@-'           shift, and enter state 72
	'@-i'          shift, and enter state 73
	'@0'           shift, and enter state 74
	'@1'           shift, and enter state 75
	'False'        shift, and enter state 76
	'True'         shift, and enter state 77
	'['            shift, and enter state 78
	'[]'           shift, and enter state 79
	'case'         shift, and enter state 80
	'gate'         shift, and enter state 81
	'if'           shift, and enter state 82
	'let'          shift, and enter state 83
	'not'          shift, and enter state 84
	'with'         shift, and enter state 85
	'|'            shift, and enter state 86
	L_integ        shift, and enter state 42
	L_Var          shift, and enter state 8
	L_Bit          shift, and enter state 87
	L_Lambda       shift, and enter state 88

	Integer        goto state 47
	Var            goto state 48
	Bit            goto state 49
	Lambda         goto state 50
	IntegerExpression1goto state 51
	IntegerExpression2goto state 52
	IntegerExpression3goto state 53
	IntegerExpressiongoto state 54
	BoolValue      goto state 55
	BoolExpression goto state 56
	BoolExpression1goto state 57
	BoolExpression2goto state 58
	BasisState     goto state 59
	Term4          goto state 60
	Term3          goto state 61
	Term2          goto state 62
	Term1          goto state 63
	Term           goto state 324
	List1          goto state 65
	List           goto state 66

State 245

	Term1 -> 'if' Term 'then' Term . 'else' Term        (rule 150)

	'else'         shift, and enter state 323


State 246

	Angle -> Double .                                   (rule 52)

	','            reduce using rule 52
	']'            reduce using rule 52


State 247

	Gate -> GateVar '[' Integer . ']'                   (rule 107)

	']'            shift, and enter state 322


State 248

	Gate -> GateVar '[' Var . ']'                       (rule 108)

	']'            shift, and enter state 321


State 249

	Gate -> GateVar '[' Angle . ',' Angle ',' Angle ']'    (rule 104)
	Gate -> GateVar '[' Angle . ',' Angle ']'           (rule 105)
	Gate -> GateVar '[' Angle . ']'                     (rule 106)

	','            shift, and enter state 319
	']'            shift, and enter state 320


State 250

	Gate -> 'QFT' '[' Integer . ']'                     (rule 100)

	']'            shift, and enter state 318


State 251

	Gate -> 'QFT' '[' Var . ']'                         (rule 101)

	']'            shift, and enter state 317


State 252

	Gate -> 'QFT_DAG' '[' Integer . ']'                 (rule 102)

	']'            shift, and enter state 316


State 253

	Gate -> 'QFT_DAG' '[' Var . ']'                     (rule 103)

	']'            shift, and enter state 315


State 254

	Gate -> 'ROOT_SWAP' '[' Integer . ']'               (rule 96)

	']'            shift, and enter state 314


State 255

	Gate -> 'ROOT_SWAP' '[' Var . ']'                   (rule 97)

	']'            shift, and enter state 313


State 256

	Gate -> 'ROOT_SWAP_DAG' '[' Integer . ']'           (rule 98)

	']'            shift, and enter state 312


State 257

	Gate -> 'ROOT_SWAP_DAG' '[' Var . ']'               (rule 99)

	']'            shift, and enter state 311


State 258

	Gate -> 'ROOT_X' '[' Integer . ']'                  (rule 64)

	']'            shift, and enter state 310


State 259

	Gate -> 'ROOT_X' '[' Var . ']'                      (rule 65)

	']'            shift, and enter state 309


State 260

	Gate -> 'ROOT_X_DAG' '[' Integer . ']'              (rule 66)

	']'            shift, and enter state 308


State 261

	Gate -> 'ROOT_X_DAG' '[' Var . ']'                  (rule 67)

	']'            shift, and enter state 307


State 262

	Gate -> 'ROOT_Y' '[' Integer . ']'                  (rule 68)

	']'            shift, and enter state 306


State 263

	Gate -> 'ROOT_Y' '[' Var . ']'                      (rule 69)

	']'            shift, and enter state 305


State 264

	Gate -> 'ROOT_Y_DAG' '[' Integer . ']'              (rule 70)

	']'            shift, and enter state 304


State 265

	Gate -> 'ROOT_Y_DAG' '[' Var . ']'                  (rule 71)

	']'            shift, and enter state 303


State 266

	Gate -> 'ROOT_Z' '[' Integer . ']'                  (rule 72)

	']'            shift, and enter state 302


State 267

	Gate -> 'ROOT_Z' '[' Var . ']'                      (rule 73)

	']'            shift, and enter state 301


State 268

	Gate -> 'ROOT_Z_DAG' '[' Integer . ']'              (rule 74)

	']'            shift, and enter state 300


State 269

	Gate -> 'ROOT_Z_DAG' '[' Var . ']'                  (rule 75)

	']'            shift, and enter state 299


State 270

	Gate -> 'RX' '[' Angle . ']'                        (rule 84)

	']'            shift, and enter state 298


State 271

	Gate -> 'RY' '[' Angle . ']'                        (rule 85)

	']'            shift, and enter state 297


State 272

	Gate -> 'RZ' '[' Angle . ']'                        (rule 86)

	']'            shift, and enter state 296


State 273

	Gate -> 'SWAP_THETA' '[' Angle . ']'                (rule 95)

	']'            shift, and enter state 295


State 274

	Gate -> 'U1' '[' Angle . ']'                        (rule 87)

	']'            shift, and enter state 294


State 275

	Gate -> 'U2' '[' Angle . ',' Angle ']'              (rule 88)

	','            shift, and enter state 293


State 276

	Gate -> 'U3' '[' Angle . ',' Angle ',' Angle ']'    (rule 89)

	','            shift, and enter state 292


State 277

	Term1 -> 'case' Term 'of' '{' . ListCaseExpression '}'    (rule 155)

	'('            shift, and enter state 67
	'()'           shift, and enter state 68
	'-'            shift, and enter state 69
	'@+'           shift, and enter state 70
	'@+i'          shift, and enter state 71
	'@-'           shift, and enter state 72
	'@-i'          shift, and enter state 73
	'@0'           shift, and enter state 74
	'@1'           shift, and enter state 75
	'False'        shift, and enter state 76
	'True'         shift, and enter state 77
	'['            shift, and enter state 78
	'[]'           shift, and enter state 79
	'case'         shift, and enter state 80
	'gate'         shift, and enter state 81
	'if'           shift, and enter state 82
	'let'          shift, and enter state 83
	'not'          shift, and enter state 84
	'with'         shift, and enter state 85
	'|'            shift, and enter state 86
	L_integ        shift, and enter state 42
	L_Var          shift, and enter state 8
	L_Bit          shift, and enter state 87
	L_Lambda       shift, and enter state 88

	Integer        goto state 47
	Var            goto state 48
	Bit            goto state 49
	Lambda         goto state 50
	IntegerExpression1goto state 51
	IntegerExpression2goto state 52
	IntegerExpression3goto state 53
	IntegerExpressiongoto state 54
	BoolValue      goto state 55
	BoolExpression goto state 56
	BoolExpression1goto state 57
	BoolExpression2goto state 58
	BasisState     goto state 59
	Term4          goto state 60
	Term3          goto state 61
	Term2          goto state 62
	Term1          goto state 63
	Term           goto state 289
	List1          goto state 65
	List           goto state 66
	CaseExpression goto state 290
	ListCaseExpressiongoto state 291

State 278

	List1 -> '[' Term ',' ListTerm . ']'                (rule 162)

	']'            shift, and enter state 288


State 279

	ListTerm -> Term .                                  (rule 126)
	ListTerm -> Term . ',' ListTerm                     (rule 127)

	')'            reduce using rule 126
	','            shift, and enter state 287
	']'            reduce using rule 126


State 280

	Term3 -> '(' Term ',' ListTerm . ')'                (rule 138)

	')'            shift, and enter state 286


State 281

	List -> Term3 . ':' List1                           (rule 165)

	':'            shift, and enter state 153


State 282

	Term1 -> Lambda Var Type '.' . Term                 (rule 156)

	'('            shift, and enter state 67
	'()'           shift, and enter state 68
	'-'            shift, and enter state 69
	'@+'           shift, and enter state 70
	'@+i'          shift, and enter state 71
	'@-'           shift, and enter state 72
	'@-i'          shift, and enter state 73
	'@0'           shift, and enter state 74
	'@1'           shift, and enter state 75
	'False'        shift, and enter state 76
	'True'         shift, and enter state 77
	'['            shift, and enter state 78
	'[]'           shift, and enter state 79
	'case'         shift, and enter state 80
	'gate'         shift, and enter state 81
	'if'           shift, and enter state 82
	'let'          shift, and enter state 83
	'not'          shift, and enter state 84
	'with'         shift, and enter state 85
	'|'            shift, and enter state 86
	L_integ        shift, and enter state 42
	L_Var          shift, and enter state 8
	L_Bit          shift, and enter state 87
	L_Lambda       shift, and enter state 88

	Integer        goto state 47
	Var            goto state 48
	Bit            goto state 49
	Lambda         goto state 50
	IntegerExpression1goto state 51
	IntegerExpression2goto state 52
	IntegerExpression3goto state 53
	IntegerExpressiongoto state 54
	BoolValue      goto state 55
	BoolExpression goto state 56
	BoolExpression1goto state 57
	BoolExpression2goto state 58
	BasisState     goto state 59
	Term4          goto state 60
	Term3          goto state 61
	Term2          goto state 62
	Term1          goto state 63
	Term           goto state 285
	List1          goto state 65
	List           goto state 66

State 283

	Term1 -> Var '<-' Term ';' . Term                   (rule 153)

	'('            shift, and enter state 67
	'()'           shift, and enter state 68
	'-'            shift, and enter state 69
	'@+'           shift, and enter state 70
	'@+i'          shift, and enter state 71
	'@-'           shift, and enter state 72
	'@-i'          shift, and enter state 73
	'@0'           shift, and enter state 74
	'@1'           shift, and enter state 75
	'False'        shift, and enter state 76
	'True'         shift, and enter state 77
	'['            shift, and enter state 78
	'[]'           shift, and enter state 79
	'case'         shift, and enter state 80
	'gate'         shift, and enter state 81
	'if'           shift, and enter state 82
	'let'          shift, and enter state 83
	'not'          shift, and enter state 84
	'with'         shift, and enter state 85
	'|'            shift, and enter state 86
	L_integ        shift, and enter state 42
	L_Var          shift, and enter state 8
	L_Bit          shift, and enter state 87
	L_Lambda       shift, and enter state 88

	Integer        goto state 47
	Var            goto state 48
	Bit            goto state 49
	Lambda         goto state 50
	IntegerExpression1goto state 51
	IntegerExpression2goto state 52
	IntegerExpression3goto state 53
	IntegerExpressiongoto state 54
	BoolValue      goto state 55
	BoolExpression goto state 56
	BoolExpression1goto state 57
	BoolExpression2goto state 58
	BasisState     goto state 59
	Term4          goto state 60
	Term3          goto state 61
	Term2          goto state 62
	Term1          goto state 63
	Term           goto state 284
	List1          goto state 65
	List           goto state 66

State 284

	Term1 -> Var '<-' Term ';' Term .                   (rule 153)

	'$'            reduce using rule 153
	'('            reduce using rule 153
	'()'           reduce using rule 153
	')'            reduce using rule 153
	','            reduce using rule 153
	'-'            reduce using rule 153
	'->'           reduce using rule 153
	';'            reduce using rule 153
	'@+'           reduce using rule 153
	'@+i'          reduce using rule 153
	'@-'           reduce using rule 153
	'@-i'          reduce using rule 153
	'@0'           reduce using rule 153
	'@1'           reduce using rule 153
	'False'        reduce using rule 153
	'True'         reduce using rule 153
	'['            reduce using rule 153
	'[]'           reduce using rule 153
	']'            reduce using rule 153
	'case'         reduce using rule 153
	'else'         reduce using rule 153
	'gate'         reduce using rule 153
	'if'           reduce using rule 153
	'let'          reduce using rule 153
	'not'          reduce using rule 153
	'of'           reduce using rule 153
	'then'         reduce using rule 153
	'with'         reduce using rule 153
	'|'            reduce using rule 153
	'}'            reduce using rule 153
	L_integ        reduce using rule 153
	L_Var          reduce using rule 153
	L_Bit          reduce using rule 153
	L_Lambda       reduce using rule 153


State 285

	Term1 -> Lambda Var Type '.' Term .                 (rule 156)

	'$'            reduce using rule 156
	'('            reduce using rule 156
	'()'           reduce using rule 156
	')'            reduce using rule 156
	','            reduce using rule 156
	'-'            reduce using rule 156
	'->'           reduce using rule 156
	';'            reduce using rule 156
	'@+'           reduce using rule 156
	'@+i'          reduce using rule 156
	'@-'           reduce using rule 156
	'@-i'          reduce using rule 156
	'@0'           reduce using rule 156
	'@1'           reduce using rule 156
	'False'        reduce using rule 156
	'True'         reduce using rule 156
	'['            reduce using rule 156
	'[]'           reduce using rule 156
	']'            reduce using rule 156
	'case'         reduce using rule 156
	'else'         reduce using rule 156
	'gate'         reduce using rule 156
	'if'           reduce using rule 156
	'let'          reduce using rule 156
	'not'          reduce using rule 156
	'of'           reduce using rule 156
	'then'         reduce using rule 156
	'with'         reduce using rule 156
	'|'            reduce using rule 156
	'}'            reduce using rule 156
	L_integ        reduce using rule 156
	L_Var          reduce using rule 156
	L_Bit          reduce using rule 156
	L_Lambda       reduce using rule 156


State 286

	Term3 -> '(' Term ',' ListTerm ')' .                (rule 138)

	'$'            reduce using rule 138
	'('            reduce using rule 138
	'()'           reduce using rule 138
	')'            reduce using rule 138
	'*'            reduce using rule 138
	','            reduce using rule 138
	'-'            reduce using rule 138
	'->'           reduce using rule 138
	'.'            reduce using rule 138
	':'            reduce using rule 138
	';'            reduce using rule 138
	'@+'           reduce using rule 138
	'@+i'          reduce using rule 138
	'@-'           reduce using rule 138
	'@-i'          reduce using rule 138
	'@0'           reduce using rule 138
	'@1'           reduce using rule 138
	'False'        reduce using rule 138
	'True'         reduce using rule 138
	'['            reduce using rule 138
	'[]'           reduce using rule 138
	']'            reduce using rule 138
	'case'         reduce using rule 138
	'else'         reduce using rule 138
	'gate'         reduce using rule 138
	'if'           reduce using rule 138
	'let'          reduce using rule 138
	'not'          reduce using rule 138
	'of'           reduce using rule 138
	'then'         reduce using rule 138
	'with'         reduce using rule 138
	'|'            reduce using rule 138
	'}'            reduce using rule 138
	L_integ        reduce using rule 138
	L_Var          reduce using rule 138
	L_Bit          reduce using rule 138
	L_Lambda       reduce using rule 138


State 287

	ListTerm -> Term ',' . ListTerm                     (rule 127)

	'('            shift, and enter state 67
	'()'           shift, and enter state 68
	'-'            shift, and enter state 69
	'@+'           shift, and enter state 70
	'@+i'          shift, and enter state 71
	'@-'           shift, and enter state 72
	'@-i'          shift, and enter state 73
	'@0'           shift, and enter state 74
	'@1'           shift, and enter state 75
	'False'        shift, and enter state 76
	'True'         shift, and enter state 77
	'['            shift, and enter state 78
	'[]'           shift, and enter state 79
	'case'         shift, and enter state 80
	'gate'         shift, and enter state 81
	'if'           shift, and enter state 82
	'let'          shift, and enter state 83
	'not'          shift, and enter state 84
	'with'         shift, and enter state 85
	'|'            shift, and enter state 86
	L_integ        shift, and enter state 42
	L_Var          shift, and enter state 8
	L_Bit          shift, and enter state 87
	L_Lambda       shift, and enter state 88

	Integer        goto state 47
	Var            goto state 48
	Bit            goto state 49
	Lambda         goto state 50
	IntegerExpression1goto state 51
	IntegerExpression2goto state 52
	IntegerExpression3goto state 53
	IntegerExpressiongoto state 54
	BoolValue      goto state 55
	BoolExpression goto state 56
	BoolExpression1goto state 57
	BoolExpression2goto state 58
	BasisState     goto state 59
	ListTerm       goto state 352
	Term4          goto state 60
	Term3          goto state 61
	Term2          goto state 62
	Term1          goto state 63
	Term           goto state 279
	List1          goto state 65
	List           goto state 66

State 288

	List1 -> '[' Term ',' ListTerm ']' .                (rule 162)

	'!!'           reduce using rule 162
	'$'            reduce using rule 162
	'('            reduce using rule 162
	'()'           reduce using rule 162
	')'            reduce using rule 162
	'*'            reduce using rule 162
	'++'           reduce using rule 162
	','            reduce using rule 162
	'-'            reduce using rule 162
	'->'           reduce using rule 162
	'.'            reduce using rule 162
	':'            reduce using rule 162
	';'            reduce using rule 162
	'@+'           reduce using rule 162
	'@+i'          reduce using rule 162
	'@-'           reduce using rule 162
	'@-i'          reduce using rule 162
	'@0'           reduce using rule 162
	'@1'           reduce using rule 162
	'False'        reduce using rule 162
	'True'         reduce using rule 162
	'['            reduce using rule 162
	'[]'           reduce using rule 162
	']'            reduce using rule 162
	'case'         reduce using rule 162
	'else'         reduce using rule 162
	'gate'         reduce using rule 162
	'if'           reduce using rule 162
	'let'          reduce using rule 162
	'not'          reduce using rule 162
	'of'           reduce using rule 162
	'then'         reduce using rule 162
	'with'         reduce using rule 162
	'|'            reduce using rule 162
	'}'            reduce using rule 162
	L_integ        reduce using rule 162
	L_Var          reduce using rule 162
	L_Bit          reduce using rule 162
	L_Lambda       reduce using rule 162


State 289

	CaseExpression -> Term . '->' Term                  (rule 167)

	'->'           shift, and enter state 351


State 290

	CaseExpression -> CaseExpression . ';'              (rule 168)
	ListCaseExpression -> CaseExpression .              (rule 169)
	ListCaseExpression -> CaseExpression . ListCaseExpression    (rule 170)

	'('            shift, and enter state 67
	'()'           shift, and enter state 68
	'-'            shift, and enter state 69
	';'            shift, and enter state 350
	'@+'           shift, and enter state 70
	'@+i'          shift, and enter state 71
	'@-'           shift, and enter state 72
	'@-i'          shift, and enter state 73
	'@0'           shift, and enter state 74
	'@1'           shift, and enter state 75
	'False'        shift, and enter state 76
	'True'         shift, and enter state 77
	'['            shift, and enter state 78
	'[]'           shift, and enter state 79
	'case'         shift, and enter state 80
	'gate'         shift, and enter state 81
	'if'           shift, and enter state 82
	'let'          shift, and enter state 83
	'not'          shift, and enter state 84
	'with'         shift, and enter state 85
	'|'            shift, and enter state 86
	'}'            reduce using rule 169
	L_integ        shift, and enter state 42
	L_Var          shift, and enter state 8
	L_Bit          shift, and enter state 87
	L_Lambda       shift, and enter state 88

	Integer        goto state 47
	Var            goto state 48
	Bit            goto state 49
	Lambda         goto state 50
	IntegerExpression1goto state 51
	IntegerExpression2goto state 52
	IntegerExpression3goto state 53
	IntegerExpressiongoto state 54
	BoolValue      goto state 55
	BoolExpression goto state 56
	BoolExpression1goto state 57
	BoolExpression2goto state 58
	BasisState     goto state 59
	Term4          goto state 60
	Term3          goto state 61
	Term2          goto state 62
	Term1          goto state 63
	Term           goto state 289
	List1          goto state 65
	List           goto state 66
	CaseExpression goto state 290
	ListCaseExpressiongoto state 349

State 291

	Term1 -> 'case' Term 'of' '{' ListCaseExpression . '}'    (rule 155)

	'}'            shift, and enter state 348


State 292

	Gate -> 'U3' '[' Angle ',' . Angle ',' Angle ']'    (rule 89)

	L_doubl        shift, and enter state 2

	Double         goto state 246
	Angle          goto state 347

State 293

	Gate -> 'U2' '[' Angle ',' . Angle ']'              (rule 88)

	L_doubl        shift, and enter state 2

	Double         goto state 246
	Angle          goto state 346

State 294

	Gate -> 'U1' '[' Angle ']' .                        (rule 87)

	'$'            reduce using rule 87
	'('            reduce using rule 87
	'()'           reduce using rule 87
	')'            reduce using rule 87
	'*'            reduce using rule 87
	','            reduce using rule 87
	'-'            reduce using rule 87
	'->'           reduce using rule 87
	'.'            reduce using rule 87
	':'            reduce using rule 87
	';'            reduce using rule 87
	'@+'           reduce using rule 87
	'@+i'          reduce using rule 87
	'@-'           reduce using rule 87
	'@-i'          reduce using rule 87
	'@0'           reduce using rule 87
	'@1'           reduce using rule 87
	'False'        reduce using rule 87
	'True'         reduce using rule 87
	'['            reduce using rule 87
	'[]'           reduce using rule 87
	']'            reduce using rule 87
	'case'         reduce using rule 87
	'else'         reduce using rule 87
	'gate'         reduce using rule 87
	'if'           reduce using rule 87
	'let'          reduce using rule 87
	'not'          reduce using rule 87
	'of'           reduce using rule 87
	'then'         reduce using rule 87
	'with'         reduce using rule 87
	'|'            reduce using rule 87
	'}'            reduce using rule 87
	L_integ        reduce using rule 87
	L_Var          reduce using rule 87
	L_Bit          reduce using rule 87
	L_Lambda       reduce using rule 87


State 295

	Gate -> 'SWAP_THETA' '[' Angle ']' .                (rule 95)

	'$'            reduce using rule 95
	'('            reduce using rule 95
	'()'           reduce using rule 95
	')'            reduce using rule 95
	'*'            reduce using rule 95
	','            reduce using rule 95
	'-'            reduce using rule 95
	'->'           reduce using rule 95
	'.'            reduce using rule 95
	':'            reduce using rule 95
	';'            reduce using rule 95
	'@+'           reduce using rule 95
	'@+i'          reduce using rule 95
	'@-'           reduce using rule 95
	'@-i'          reduce using rule 95
	'@0'           reduce using rule 95
	'@1'           reduce using rule 95
	'False'        reduce using rule 95
	'True'         reduce using rule 95
	'['            reduce using rule 95
	'[]'           reduce using rule 95
	']'            reduce using rule 95
	'case'         reduce using rule 95
	'else'         reduce using rule 95
	'gate'         reduce using rule 95
	'if'           reduce using rule 95
	'let'          reduce using rule 95
	'not'          reduce using rule 95
	'of'           reduce using rule 95
	'then'         reduce using rule 95
	'with'         reduce using rule 95
	'|'            reduce using rule 95
	'}'            reduce using rule 95
	L_integ        reduce using rule 95
	L_Var          reduce using rule 95
	L_Bit          reduce using rule 95
	L_Lambda       reduce using rule 95


State 296

	Gate -> 'RZ' '[' Angle ']' .                        (rule 86)

	'$'            reduce using rule 86
	'('            reduce using rule 86
	'()'           reduce using rule 86
	')'            reduce using rule 86
	'*'            reduce using rule 86
	','            reduce using rule 86
	'-'            reduce using rule 86
	'->'           reduce using rule 86
	'.'            reduce using rule 86
	':'            reduce using rule 86
	';'            reduce using rule 86
	'@+'           reduce using rule 86
	'@+i'          reduce using rule 86
	'@-'           reduce using rule 86
	'@-i'          reduce using rule 86
	'@0'           reduce using rule 86
	'@1'           reduce using rule 86
	'False'        reduce using rule 86
	'True'         reduce using rule 86
	'['            reduce using rule 86
	'[]'           reduce using rule 86
	']'            reduce using rule 86
	'case'         reduce using rule 86
	'else'         reduce using rule 86
	'gate'         reduce using rule 86
	'if'           reduce using rule 86
	'let'          reduce using rule 86
	'not'          reduce using rule 86
	'of'           reduce using rule 86
	'then'         reduce using rule 86
	'with'         reduce using rule 86
	'|'            reduce using rule 86
	'}'            reduce using rule 86
	L_integ        reduce using rule 86
	L_Var          reduce using rule 86
	L_Bit          reduce using rule 86
	L_Lambda       reduce using rule 86


State 297

	Gate -> 'RY' '[' Angle ']' .                        (rule 85)

	'$'            reduce using rule 85
	'('            reduce using rule 85
	'()'           reduce using rule 85
	')'            reduce using rule 85
	'*'            reduce using rule 85
	','            reduce using rule 85
	'-'            reduce using rule 85
	'->'           reduce using rule 85
	'.'            reduce using rule 85
	':'            reduce using rule 85
	';'            reduce using rule 85
	'@+'           reduce using rule 85
	'@+i'          reduce using rule 85
	'@-'           reduce using rule 85
	'@-i'          reduce using rule 85
	'@0'           reduce using rule 85
	'@1'           reduce using rule 85
	'False'        reduce using rule 85
	'True'         reduce using rule 85
	'['            reduce using rule 85
	'[]'           reduce using rule 85
	']'            reduce using rule 85
	'case'         reduce using rule 85
	'else'         reduce using rule 85
	'gate'         reduce using rule 85
	'if'           reduce using rule 85
	'let'          reduce using rule 85
	'not'          reduce using rule 85
	'of'           reduce using rule 85
	'then'         reduce using rule 85
	'with'         reduce using rule 85
	'|'            reduce using rule 85
	'}'            reduce using rule 85
	L_integ        reduce using rule 85
	L_Var          reduce using rule 85
	L_Bit          reduce using rule 85
	L_Lambda       reduce using rule 85


State 298

	Gate -> 'RX' '[' Angle ']' .                        (rule 84)

	'$'            reduce using rule 84
	'('            reduce using rule 84
	'()'           reduce using rule 84
	')'            reduce using rule 84
	'*'            reduce using rule 84
	','            reduce using rule 84
	'-'            reduce using rule 84
	'->'           reduce using rule 84
	'.'            reduce using rule 84
	':'            reduce using rule 84
	';'            reduce using rule 84
	'@+'           reduce using rule 84
	'@+i'          reduce using rule 84
	'@-'           reduce using rule 84
	'@-i'          reduce using rule 84
	'@0'           reduce using rule 84
	'@1'           reduce using rule 84
	'False'        reduce using rule 84
	'True'         reduce using rule 84
	'['            reduce using rule 84
	'[]'           reduce using rule 84
	']'            reduce using rule 84
	'case'         reduce using rule 84
	'else'         reduce using rule 84
	'gate'         reduce using rule 84
	'if'           reduce using rule 84
	'let'          reduce using rule 84
	'not'          reduce using rule 84
	'of'           reduce using rule 84
	'then'         reduce using rule 84
	'with'         reduce using rule 84
	'|'            reduce using rule 84
	'}'            reduce using rule 84
	L_integ        reduce using rule 84
	L_Var          reduce using rule 84
	L_Bit          reduce using rule 84
	L_Lambda       reduce using rule 84


State 299

	Gate -> 'ROOT_Z_DAG' '[' Var ']' .                  (rule 75)

	'$'            reduce using rule 75
	'('            reduce using rule 75
	'()'           reduce using rule 75
	')'            reduce using rule 75
	'*'            reduce using rule 75
	','            reduce using rule 75
	'-'            reduce using rule 75
	'->'           reduce using rule 75
	'.'            reduce using rule 75
	':'            reduce using rule 75
	';'            reduce using rule 75
	'@+'           reduce using rule 75
	'@+i'          reduce using rule 75
	'@-'           reduce using rule 75
	'@-i'          reduce using rule 75
	'@0'           reduce using rule 75
	'@1'           reduce using rule 75
	'False'        reduce using rule 75
	'True'         reduce using rule 75
	'['            reduce using rule 75
	'[]'           reduce using rule 75
	']'            reduce using rule 75
	'case'         reduce using rule 75
	'else'         reduce using rule 75
	'gate'         reduce using rule 75
	'if'           reduce using rule 75
	'let'          reduce using rule 75
	'not'          reduce using rule 75
	'of'           reduce using rule 75
	'then'         reduce using rule 75
	'with'         reduce using rule 75
	'|'            reduce using rule 75
	'}'            reduce using rule 75
	L_integ        reduce using rule 75
	L_Var          reduce using rule 75
	L_Bit          reduce using rule 75
	L_Lambda       reduce using rule 75


State 300

	Gate -> 'ROOT_Z_DAG' '[' Integer ']' .              (rule 74)

	'$'            reduce using rule 74
	'('            reduce using rule 74
	'()'           reduce using rule 74
	')'            reduce using rule 74
	'*'            reduce using rule 74
	','            reduce using rule 74
	'-'            reduce using rule 74
	'->'           reduce using rule 74
	'.'            reduce using rule 74
	':'            reduce using rule 74
	';'            reduce using rule 74
	'@+'           reduce using rule 74
	'@+i'          reduce using rule 74
	'@-'           reduce using rule 74
	'@-i'          reduce using rule 74
	'@0'           reduce using rule 74
	'@1'           reduce using rule 74
	'False'        reduce using rule 74
	'True'         reduce using rule 74
	'['            reduce using rule 74
	'[]'           reduce using rule 74
	']'            reduce using rule 74
	'case'         reduce using rule 74
	'else'         reduce using rule 74
	'gate'         reduce using rule 74
	'if'           reduce using rule 74
	'let'          reduce using rule 74
	'not'          reduce using rule 74
	'of'           reduce using rule 74
	'then'         reduce using rule 74
	'with'         reduce using rule 74
	'|'            reduce using rule 74
	'}'            reduce using rule 74
	L_integ        reduce using rule 74
	L_Var          reduce using rule 74
	L_Bit          reduce using rule 74
	L_Lambda       reduce using rule 74


State 301

	Gate -> 'ROOT_Z' '[' Var ']' .                      (rule 73)

	'$'            reduce using rule 73
	'('            reduce using rule 73
	'()'           reduce using rule 73
	')'            reduce using rule 73
	'*'            reduce using rule 73
	','            reduce using rule 73
	'-'            reduce using rule 73
	'->'           reduce using rule 73
	'.'            reduce using rule 73
	':'            reduce using rule 73
	';'            reduce using rule 73
	'@+'           reduce using rule 73
	'@+i'          reduce using rule 73
	'@-'           reduce using rule 73
	'@-i'          reduce using rule 73
	'@0'           reduce using rule 73
	'@1'           reduce using rule 73
	'False'        reduce using rule 73
	'True'         reduce using rule 73
	'['            reduce using rule 73
	'[]'           reduce using rule 73
	']'            reduce using rule 73
	'case'         reduce using rule 73
	'else'         reduce using rule 73
	'gate'         reduce using rule 73
	'if'           reduce using rule 73
	'let'          reduce using rule 73
	'not'          reduce using rule 73
	'of'           reduce using rule 73
	'then'         reduce using rule 73
	'with'         reduce using rule 73
	'|'            reduce using rule 73
	'}'            reduce using rule 73
	L_integ        reduce using rule 73
	L_Var          reduce using rule 73
	L_Bit          reduce using rule 73
	L_Lambda       reduce using rule 73


State 302

	Gate -> 'ROOT_Z' '[' Integer ']' .                  (rule 72)

	'$'            reduce using rule 72
	'('            reduce using rule 72
	'()'           reduce using rule 72
	')'            reduce using rule 72
	'*'            reduce using rule 72
	','            reduce using rule 72
	'-'            reduce using rule 72
	'->'           reduce using rule 72
	'.'            reduce using rule 72
	':'            reduce using rule 72
	';'            reduce using rule 72
	'@+'           reduce using rule 72
	'@+i'          reduce using rule 72
	'@-'           reduce using rule 72
	'@-i'          reduce using rule 72
	'@0'           reduce using rule 72
	'@1'           reduce using rule 72
	'False'        reduce using rule 72
	'True'         reduce using rule 72
	'['            reduce using rule 72
	'[]'           reduce using rule 72
	']'            reduce using rule 72
	'case'         reduce using rule 72
	'else'         reduce using rule 72
	'gate'         reduce using rule 72
	'if'           reduce using rule 72
	'let'          reduce using rule 72
	'not'          reduce using rule 72
	'of'           reduce using rule 72
	'then'         reduce using rule 72
	'with'         reduce using rule 72
	'|'            reduce using rule 72
	'}'            reduce using rule 72
	L_integ        reduce using rule 72
	L_Var          reduce using rule 72
	L_Bit          reduce using rule 72
	L_Lambda       reduce using rule 72


State 303

	Gate -> 'ROOT_Y_DAG' '[' Var ']' .                  (rule 71)

	'$'            reduce using rule 71
	'('            reduce using rule 71
	'()'           reduce using rule 71
	')'            reduce using rule 71
	'*'            reduce using rule 71
	','            reduce using rule 71
	'-'            reduce using rule 71
	'->'           reduce using rule 71
	'.'            reduce using rule 71
	':'            reduce using rule 71
	';'            reduce using rule 71
	'@+'           reduce using rule 71
	'@+i'          reduce using rule 71
	'@-'           reduce using rule 71
	'@-i'          reduce using rule 71
	'@0'           reduce using rule 71
	'@1'           reduce using rule 71
	'False'        reduce using rule 71
	'True'         reduce using rule 71
	'['            reduce using rule 71
	'[]'           reduce using rule 71
	']'            reduce using rule 71
	'case'         reduce using rule 71
	'else'         reduce using rule 71
	'gate'         reduce using rule 71
	'if'           reduce using rule 71
	'let'          reduce using rule 71
	'not'          reduce using rule 71
	'of'           reduce using rule 71
	'then'         reduce using rule 71
	'with'         reduce using rule 71
	'|'            reduce using rule 71
	'}'            reduce using rule 71
	L_integ        reduce using rule 71
	L_Var          reduce using rule 71
	L_Bit          reduce using rule 71
	L_Lambda       reduce using rule 71


State 304

	Gate -> 'ROOT_Y_DAG' '[' Integer ']' .              (rule 70)

	'$'            reduce using rule 70
	'('            reduce using rule 70
	'()'           reduce using rule 70
	')'            reduce using rule 70
	'*'            reduce using rule 70
	','            reduce using rule 70
	'-'            reduce using rule 70
	'->'           reduce using rule 70
	'.'            reduce using rule 70
	':'            reduce using rule 70
	';'            reduce using rule 70
	'@+'           reduce using rule 70
	'@+i'          reduce using rule 70
	'@-'           reduce using rule 70
	'@-i'          reduce using rule 70
	'@0'           reduce using rule 70
	'@1'           reduce using rule 70
	'False'        reduce using rule 70
	'True'         reduce using rule 70
	'['            reduce using rule 70
	'[]'           reduce using rule 70
	']'            reduce using rule 70
	'case'         reduce using rule 70
	'else'         reduce using rule 70
	'gate'         reduce using rule 70
	'if'           reduce using rule 70
	'let'          reduce using rule 70
	'not'          reduce using rule 70
	'of'           reduce using rule 70
	'then'         reduce using rule 70
	'with'         reduce using rule 70
	'|'            reduce using rule 70
	'}'            reduce using rule 70
	L_integ        reduce using rule 70
	L_Var          reduce using rule 70
	L_Bit          reduce using rule 70
	L_Lambda       reduce using rule 70


State 305

	Gate -> 'ROOT_Y' '[' Var ']' .                      (rule 69)

	'$'            reduce using rule 69
	'('            reduce using rule 69
	'()'           reduce using rule 69
	')'            reduce using rule 69
	'*'            reduce using rule 69
	','            reduce using rule 69
	'-'            reduce using rule 69
	'->'           reduce using rule 69
	'.'            reduce using rule 69
	':'            reduce using rule 69
	';'            reduce using rule 69
	'@+'           reduce using rule 69
	'@+i'          reduce using rule 69
	'@-'           reduce using rule 69
	'@-i'          reduce using rule 69
	'@0'           reduce using rule 69
	'@1'           reduce using rule 69
	'False'        reduce using rule 69
	'True'         reduce using rule 69
	'['            reduce using rule 69
	'[]'           reduce using rule 69
	']'            reduce using rule 69
	'case'         reduce using rule 69
	'else'         reduce using rule 69
	'gate'         reduce using rule 69
	'if'           reduce using rule 69
	'let'          reduce using rule 69
	'not'          reduce using rule 69
	'of'           reduce using rule 69
	'then'         reduce using rule 69
	'with'         reduce using rule 69
	'|'            reduce using rule 69
	'}'            reduce using rule 69
	L_integ        reduce using rule 69
	L_Var          reduce using rule 69
	L_Bit          reduce using rule 69
	L_Lambda       reduce using rule 69


State 306

	Gate -> 'ROOT_Y' '[' Integer ']' .                  (rule 68)

	'$'            reduce using rule 68
	'('            reduce using rule 68
	'()'           reduce using rule 68
	')'            reduce using rule 68
	'*'            reduce using rule 68
	','            reduce using rule 68
	'-'            reduce using rule 68
	'->'           reduce using rule 68
	'.'            reduce using rule 68
	':'            reduce using rule 68
	';'            reduce using rule 68
	'@+'           reduce using rule 68
	'@+i'          reduce using rule 68
	'@-'           reduce using rule 68
	'@-i'          reduce using rule 68
	'@0'           reduce using rule 68
	'@1'           reduce using rule 68
	'False'        reduce using rule 68
	'True'         reduce using rule 68
	'['            reduce using rule 68
	'[]'           reduce using rule 68
	']'            reduce using rule 68
	'case'         reduce using rule 68
	'else'         reduce using rule 68
	'gate'         reduce using rule 68
	'if'           reduce using rule 68
	'let'          reduce using rule 68
	'not'          reduce using rule 68
	'of'           reduce using rule 68
	'then'         reduce using rule 68
	'with'         reduce using rule 68
	'|'            reduce using rule 68
	'}'            reduce using rule 68
	L_integ        reduce using rule 68
	L_Var          reduce using rule 68
	L_Bit          reduce using rule 68
	L_Lambda       reduce using rule 68


State 307

	Gate -> 'ROOT_X_DAG' '[' Var ']' .                  (rule 67)

	'$'            reduce using rule 67
	'('            reduce using rule 67
	'()'           reduce using rule 67
	')'            reduce using rule 67
	'*'            reduce using rule 67
	','            reduce using rule 67
	'-'            reduce using rule 67
	'->'           reduce using rule 67
	'.'            reduce using rule 67
	':'            reduce using rule 67
	';'            reduce using rule 67
	'@+'           reduce using rule 67
	'@+i'          reduce using rule 67
	'@-'           reduce using rule 67
	'@-i'          reduce using rule 67
	'@0'           reduce using rule 67
	'@1'           reduce using rule 67
	'False'        reduce using rule 67
	'True'         reduce using rule 67
	'['            reduce using rule 67
	'[]'           reduce using rule 67
	']'            reduce using rule 67
	'case'         reduce using rule 67
	'else'         reduce using rule 67
	'gate'         reduce using rule 67
	'if'           reduce using rule 67
	'let'          reduce using rule 67
	'not'          reduce using rule 67
	'of'           reduce using rule 67
	'then'         reduce using rule 67
	'with'         reduce using rule 67
	'|'            reduce using rule 67
	'}'            reduce using rule 67
	L_integ        reduce using rule 67
	L_Var          reduce using rule 67
	L_Bit          reduce using rule 67
	L_Lambda       reduce using rule 67


State 308

	Gate -> 'ROOT_X_DAG' '[' Integer ']' .              (rule 66)

	'$'            reduce using rule 66
	'('            reduce using rule 66
	'()'           reduce using rule 66
	')'            reduce using rule 66
	'*'            reduce using rule 66
	','            reduce using rule 66
	'-'            reduce using rule 66
	'->'           reduce using rule 66
	'.'            reduce using rule 66
	':'            reduce using rule 66
	';'            reduce using rule 66
	'@+'           reduce using rule 66
	'@+i'          reduce using rule 66
	'@-'           reduce using rule 66
	'@-i'          reduce using rule 66
	'@0'           reduce using rule 66
	'@1'           reduce using rule 66
	'False'        reduce using rule 66
	'True'         reduce using rule 66
	'['            reduce using rule 66
	'[]'           reduce using rule 66
	']'            reduce using rule 66
	'case'         reduce using rule 66
	'else'         reduce using rule 66
	'gate'         reduce using rule 66
	'if'           reduce using rule 66
	'let'          reduce using rule 66
	'not'          reduce using rule 66
	'of'           reduce using rule 66
	'then'         reduce using rule 66
	'with'         reduce using rule 66
	'|'            reduce using rule 66
	'}'            reduce using rule 66
	L_integ        reduce using rule 66
	L_Var          reduce using rule 66
	L_Bit          reduce using rule 66
	L_Lambda       reduce using rule 66


State 309

	Gate -> 'ROOT_X' '[' Var ']' .                      (rule 65)

	'$'            reduce using rule 65
	'('            reduce using rule 65
	'()'           reduce using rule 65
	')'            reduce using rule 65
	'*'            reduce using rule 65
	','            reduce using rule 65
	'-'            reduce using rule 65
	'->'           reduce using rule 65
	'.'            reduce using rule 65
	':'            reduce using rule 65
	';'            reduce using rule 65
	'@+'           reduce using rule 65
	'@+i'          reduce using rule 65
	'@-'           reduce using rule 65
	'@-i'          reduce using rule 65
	'@0'           reduce using rule 65
	'@1'           reduce using rule 65
	'False'        reduce using rule 65
	'True'         reduce using rule 65
	'['            reduce using rule 65
	'[]'           reduce using rule 65
	']'            reduce using rule 65
	'case'         reduce using rule 65
	'else'         reduce using rule 65
	'gate'         reduce using rule 65
	'if'           reduce using rule 65
	'let'          reduce using rule 65
	'not'          reduce using rule 65
	'of'           reduce using rule 65
	'then'         reduce using rule 65
	'with'         reduce using rule 65
	'|'            reduce using rule 65
	'}'            reduce using rule 65
	L_integ        reduce using rule 65
	L_Var          reduce using rule 65
	L_Bit          reduce using rule 65
	L_Lambda       reduce using rule 65


State 310

	Gate -> 'ROOT_X' '[' Integer ']' .                  (rule 64)

	'$'            reduce using rule 64
	'('            reduce using rule 64
	'()'           reduce using rule 64
	')'            reduce using rule 64
	'*'            reduce using rule 64
	','            reduce using rule 64
	'-'            reduce using rule 64
	'->'           reduce using rule 64
	'.'            reduce using rule 64
	':'            reduce using rule 64
	';'            reduce using rule 64
	'@+'           reduce using rule 64
	'@+i'          reduce using rule 64
	'@-'           reduce using rule 64
	'@-i'          reduce using rule 64
	'@0'           reduce using rule 64
	'@1'           reduce using rule 64
	'False'        reduce using rule 64
	'True'         reduce using rule 64
	'['            reduce using rule 64
	'[]'           reduce using rule 64
	']'            reduce using rule 64
	'case'         reduce using rule 64
	'else'         reduce using rule 64
	'gate'         reduce using rule 64
	'if'           reduce using rule 64
	'let'          reduce using rule 64
	'not'          reduce using rule 64
	'of'           reduce using rule 64
	'then'         reduce using rule 64
	'with'         reduce using rule 64
	'|'            reduce using rule 64
	'}'            reduce using rule 64
	L_integ        reduce using rule 64
	L_Var          reduce using rule 64
	L_Bit          reduce using rule 64
	L_Lambda       reduce using rule 64


State 311

	Gate -> 'ROOT_SWAP_DAG' '[' Var ']' .               (rule 99)

	'$'            reduce using rule 99
	'('            reduce using rule 99
	'()'           reduce using rule 99
	')'            reduce using rule 99
	'*'            reduce using rule 99
	','            reduce using rule 99
	'-'            reduce using rule 99
	'->'           reduce using rule 99
	'.'            reduce using rule 99
	':'            reduce using rule 99
	';'            reduce using rule 99
	'@+'           reduce using rule 99
	'@+i'          reduce using rule 99
	'@-'           reduce using rule 99
	'@-i'          reduce using rule 99
	'@0'           reduce using rule 99
	'@1'           reduce using rule 99
	'False'        reduce using rule 99
	'True'         reduce using rule 99
	'['            reduce using rule 99
	'[]'           reduce using rule 99
	']'            reduce using rule 99
	'case'         reduce using rule 99
	'else'         reduce using rule 99
	'gate'         reduce using rule 99
	'if'           reduce using rule 99
	'let'          reduce using rule 99
	'not'          reduce using rule 99
	'of'           reduce using rule 99
	'then'         reduce using rule 99
	'with'         reduce using rule 99
	'|'            reduce using rule 99
	'}'            reduce using rule 99
	L_integ        reduce using rule 99
	L_Var          reduce using rule 99
	L_Bit          reduce using rule 99
	L_Lambda       reduce using rule 99


State 312

	Gate -> 'ROOT_SWAP_DAG' '[' Integer ']' .           (rule 98)

	'$'            reduce using rule 98
	'('            reduce using rule 98
	'()'           reduce using rule 98
	')'            reduce using rule 98
	'*'            reduce using rule 98
	','            reduce using rule 98
	'-'            reduce using rule 98
	'->'           reduce using rule 98
	'.'            reduce using rule 98
	':'            reduce using rule 98
	';'            reduce using rule 98
	'@+'           reduce using rule 98
	'@+i'          reduce using rule 98
	'@-'           reduce using rule 98
	'@-i'          reduce using rule 98
	'@0'           reduce using rule 98
	'@1'           reduce using rule 98
	'False'        reduce using rule 98
	'True'         reduce using rule 98
	'['            reduce using rule 98
	'[]'           reduce using rule 98
	']'            reduce using rule 98
	'case'         reduce using rule 98
	'else'         reduce using rule 98
	'gate'         reduce using rule 98
	'if'           reduce using rule 98
	'let'          reduce using rule 98
	'not'          reduce using rule 98
	'of'           reduce using rule 98
	'then'         reduce using rule 98
	'with'         reduce using rule 98
	'|'            reduce using rule 98
	'}'            reduce using rule 98
	L_integ        reduce using rule 98
	L_Var          reduce using rule 98
	L_Bit          reduce using rule 98
	L_Lambda       reduce using rule 98


State 313

	Gate -> 'ROOT_SWAP' '[' Var ']' .                   (rule 97)

	'$'            reduce using rule 97
	'('            reduce using rule 97
	'()'           reduce using rule 97
	')'            reduce using rule 97
	'*'            reduce using rule 97
	','            reduce using rule 97
	'-'            reduce using rule 97
	'->'           reduce using rule 97
	'.'            reduce using rule 97
	':'            reduce using rule 97
	';'            reduce using rule 97
	'@+'           reduce using rule 97
	'@+i'          reduce using rule 97
	'@-'           reduce using rule 97
	'@-i'          reduce using rule 97
	'@0'           reduce using rule 97
	'@1'           reduce using rule 97
	'False'        reduce using rule 97
	'True'         reduce using rule 97
	'['            reduce using rule 97
	'[]'           reduce using rule 97
	']'            reduce using rule 97
	'case'         reduce using rule 97
	'else'         reduce using rule 97
	'gate'         reduce using rule 97
	'if'           reduce using rule 97
	'let'          reduce using rule 97
	'not'          reduce using rule 97
	'of'           reduce using rule 97
	'then'         reduce using rule 97
	'with'         reduce using rule 97
	'|'            reduce using rule 97
	'}'            reduce using rule 97
	L_integ        reduce using rule 97
	L_Var          reduce using rule 97
	L_Bit          reduce using rule 97
	L_Lambda       reduce using rule 97


State 314

	Gate -> 'ROOT_SWAP' '[' Integer ']' .               (rule 96)

	'$'            reduce using rule 96
	'('            reduce using rule 96
	'()'           reduce using rule 96
	')'            reduce using rule 96
	'*'            reduce using rule 96
	','            reduce using rule 96
	'-'            reduce using rule 96
	'->'           reduce using rule 96
	'.'            reduce using rule 96
	':'            reduce using rule 96
	';'            reduce using rule 96
	'@+'           reduce using rule 96
	'@+i'          reduce using rule 96
	'@-'           reduce using rule 96
	'@-i'          reduce using rule 96
	'@0'           reduce using rule 96
	'@1'           reduce using rule 96
	'False'        reduce using rule 96
	'True'         reduce using rule 96
	'['            reduce using rule 96
	'[]'           reduce using rule 96
	']'            reduce using rule 96
	'case'         reduce using rule 96
	'else'         reduce using rule 96
	'gate'         reduce using rule 96
	'if'           reduce using rule 96
	'let'          reduce using rule 96
	'not'          reduce using rule 96
	'of'           reduce using rule 96
	'then'         reduce using rule 96
	'with'         reduce using rule 96
	'|'            reduce using rule 96
	'}'            reduce using rule 96
	L_integ        reduce using rule 96
	L_Var          reduce using rule 96
	L_Bit          reduce using rule 96
	L_Lambda       reduce using rule 96


State 315

	Gate -> 'QFT_DAG' '[' Var ']' .                     (rule 103)

	'$'            reduce using rule 103
	'('            reduce using rule 103
	'()'           reduce using rule 103
	')'            reduce using rule 103
	'*'            reduce using rule 103
	','            reduce using rule 103
	'-'            reduce using rule 103
	'->'           reduce using rule 103
	'.'            reduce using rule 103
	':'            reduce using rule 103
	';'            reduce using rule 103
	'@+'           reduce using rule 103
	'@+i'          reduce using rule 103
	'@-'           reduce using rule 103
	'@-i'          reduce using rule 103
	'@0'           reduce using rule 103
	'@1'           reduce using rule 103
	'False'        reduce using rule 103
	'True'         reduce using rule 103
	'['            reduce using rule 103
	'[]'           reduce using rule 103
	']'            reduce using rule 103
	'case'         reduce using rule 103
	'else'         reduce using rule 103
	'gate'         reduce using rule 103
	'if'           reduce using rule 103
	'let'          reduce using rule 103
	'not'          reduce using rule 103
	'of'           reduce using rule 103
	'then'         reduce using rule 103
	'with'         reduce using rule 103
	'|'            reduce using rule 103
	'}'            reduce using rule 103
	L_integ        reduce using rule 103
	L_Var          reduce using rule 103
	L_Bit          reduce using rule 103
	L_Lambda       reduce using rule 103


State 316

	Gate -> 'QFT_DAG' '[' Integer ']' .                 (rule 102)

	'$'            reduce using rule 102
	'('            reduce using rule 102
	'()'           reduce using rule 102
	')'            reduce using rule 102
	'*'            reduce using rule 102
	','            reduce using rule 102
	'-'            reduce using rule 102
	'->'           reduce using rule 102
	'.'            reduce using rule 102
	':'            reduce using rule 102
	';'            reduce using rule 102
	'@+'           reduce using rule 102
	'@+i'          reduce using rule 102
	'@-'           reduce using rule 102
	'@-i'          reduce using rule 102
	'@0'           reduce using rule 102
	'@1'           reduce using rule 102
	'False'        reduce using rule 102
	'True'         reduce using rule 102
	'['            reduce using rule 102
	'[]'           reduce using rule 102
	']'            reduce using rule 102
	'case'         reduce using rule 102
	'else'         reduce using rule 102
	'gate'         reduce using rule 102
	'if'           reduce using rule 102
	'let'          reduce using rule 102
	'not'          reduce using rule 102
	'of'           reduce using rule 102
	'then'         reduce using rule 102
	'with'         reduce using rule 102
	'|'            reduce using rule 102
	'}'            reduce using rule 102
	L_integ        reduce using rule 102
	L_Var          reduce using rule 102
	L_Bit          reduce using rule 102
	L_Lambda       reduce using rule 102


State 317

	Gate -> 'QFT' '[' Var ']' .                         (rule 101)

	'$'            reduce using rule 101
	'('            reduce using rule 101
	'()'           reduce using rule 101
	')'            reduce using rule 101
	'*'            reduce using rule 101
	','            reduce using rule 101
	'-'            reduce using rule 101
	'->'           reduce using rule 101
	'.'            reduce using rule 101
	':'            reduce using rule 101
	';'            reduce using rule 101
	'@+'           reduce using rule 101
	'@+i'          reduce using rule 101
	'@-'           reduce using rule 101
	'@-i'          reduce using rule 101
	'@0'           reduce using rule 101
	'@1'           reduce using rule 101
	'False'        reduce using rule 101
	'True'         reduce using rule 101
	'['            reduce using rule 101
	'[]'           reduce using rule 101
	']'            reduce using rule 101
	'case'         reduce using rule 101
	'else'         reduce using rule 101
	'gate'         reduce using rule 101
	'if'           reduce using rule 101
	'let'          reduce using rule 101
	'not'          reduce using rule 101
	'of'           reduce using rule 101
	'then'         reduce using rule 101
	'with'         reduce using rule 101
	'|'            reduce using rule 101
	'}'            reduce using rule 101
	L_integ        reduce using rule 101
	L_Var          reduce using rule 101
	L_Bit          reduce using rule 101
	L_Lambda       reduce using rule 101


State 318

	Gate -> 'QFT' '[' Integer ']' .                     (rule 100)

	'$'            reduce using rule 100
	'('            reduce using rule 100
	'()'           reduce using rule 100
	')'            reduce using rule 100
	'*'            reduce using rule 100
	','            reduce using rule 100
	'-'            reduce using rule 100
	'->'           reduce using rule 100
	'.'            reduce using rule 100
	':'            reduce using rule 100
	';'            reduce using rule 100
	'@+'           reduce using rule 100
	'@+i'          reduce using rule 100
	'@-'           reduce using rule 100
	'@-i'          reduce using rule 100
	'@0'           reduce using rule 100
	'@1'           reduce using rule 100
	'False'        reduce using rule 100
	'True'         reduce using rule 100
	'['            reduce using rule 100
	'[]'           reduce using rule 100
	']'            reduce using rule 100
	'case'         reduce using rule 100
	'else'         reduce using rule 100
	'gate'         reduce using rule 100
	'if'           reduce using rule 100
	'let'          reduce using rule 100
	'not'          reduce using rule 100
	'of'           reduce using rule 100
	'then'         reduce using rule 100
	'with'         reduce using rule 100
	'|'            reduce using rule 100
	'}'            reduce using rule 100
	L_integ        reduce using rule 100
	L_Var          reduce using rule 100
	L_Bit          reduce using rule 100
	L_Lambda       reduce using rule 100


State 319

	Gate -> GateVar '[' Angle ',' . Angle ',' Angle ']'    (rule 104)
	Gate -> GateVar '[' Angle ',' . Angle ']'           (rule 105)

	L_doubl        shift, and enter state 2

	Double         goto state 246
	Angle          goto state 345

State 320

	Gate -> GateVar '[' Angle ']' .                     (rule 106)

	'$'            reduce using rule 106
	'('            reduce using rule 106
	'()'           reduce using rule 106
	')'            reduce using rule 106
	'*'            reduce using rule 106
	','            reduce using rule 106
	'-'            reduce using rule 106
	'->'           reduce using rule 106
	'.'            reduce using rule 106
	':'            reduce using rule 106
	';'            reduce using rule 106
	'@+'           reduce using rule 106
	'@+i'          reduce using rule 106
	'@-'           reduce using rule 106
	'@-i'          reduce using rule 106
	'@0'           reduce using rule 106
	'@1'           reduce using rule 106
	'False'        reduce using rule 106
	'True'         reduce using rule 106
	'['            reduce using rule 106
	'[]'           reduce using rule 106
	']'            reduce using rule 106
	'case'         reduce using rule 106
	'else'         reduce using rule 106
	'gate'         reduce using rule 106
	'if'           reduce using rule 106
	'let'          reduce using rule 106
	'not'          reduce using rule 106
	'of'           reduce using rule 106
	'then'         reduce using rule 106
	'with'         reduce using rule 106
	'|'            reduce using rule 106
	'}'            reduce using rule 106
	L_integ        reduce using rule 106
	L_Var          reduce using rule 106
	L_Bit          reduce using rule 106
	L_Lambda       reduce using rule 106


State 321

	Gate -> GateVar '[' Var ']' .                       (rule 108)

	'$'            reduce using rule 108
	'('            reduce using rule 108
	'()'           reduce using rule 108
	')'            reduce using rule 108
	'*'            reduce using rule 108
	','            reduce using rule 108
	'-'            reduce using rule 108
	'->'           reduce using rule 108
	'.'            reduce using rule 108
	':'            reduce using rule 108
	';'            reduce using rule 108
	'@+'           reduce using rule 108
	'@+i'          reduce using rule 108
	'@-'           reduce using rule 108
	'@-i'          reduce using rule 108
	'@0'           reduce using rule 108
	'@1'           reduce using rule 108
	'False'        reduce using rule 108
	'True'         reduce using rule 108
	'['            reduce using rule 108
	'[]'           reduce using rule 108
	']'            reduce using rule 108
	'case'         reduce using rule 108
	'else'         reduce using rule 108
	'gate'         reduce using rule 108
	'if'           reduce using rule 108
	'let'          reduce using rule 108
	'not'          reduce using rule 108
	'of'           reduce using rule 108
	'then'         reduce using rule 108
	'with'         reduce using rule 108
	'|'            reduce using rule 108
	'}'            reduce using rule 108
	L_integ        reduce using rule 108
	L_Var          reduce using rule 108
	L_Bit          reduce using rule 108
	L_Lambda       reduce using rule 108


State 322

	Gate -> GateVar '[' Integer ']' .                   (rule 107)

	'$'            reduce using rule 107
	'('            reduce using rule 107
	'()'           reduce using rule 107
	')'            reduce using rule 107
	'*'            reduce using rule 107
	','            reduce using rule 107
	'-'            reduce using rule 107
	'->'           reduce using rule 107
	'.'            reduce using rule 107
	':'            reduce using rule 107
	';'            reduce using rule 107
	'@+'           reduce using rule 107
	'@+i'          reduce using rule 107
	'@-'           reduce using rule 107
	'@-i'          reduce using rule 107
	'@0'           reduce using rule 107
	'@1'           reduce using rule 107
	'False'        reduce using rule 107
	'True'         reduce using rule 107
	'['            reduce using rule 107
	'[]'           reduce using rule 107
	']'            reduce using rule 107
	'case'         reduce using rule 107
	'else'         reduce using rule 107
	'gate'         reduce using rule 107
	'if'           reduce using rule 107
	'let'          reduce using rule 107
	'not'          reduce using rule 107
	'of'           reduce using rule 107
	'then'         reduce using rule 107
	'with'         reduce using rule 107
	'|'            reduce using rule 107
	'}'            reduce using rule 107
	L_integ        reduce using rule 107
	L_Var          reduce using rule 107
	L_Bit          reduce using rule 107
	L_Lambda       reduce using rule 107


State 323

	Term1 -> 'if' Term 'then' Term 'else' . Term        (rule 150)

	'('            shift, and enter state 67
	'()'           shift, and enter state 68
	'-'            shift, and enter state 69
	'@+'           shift, and enter state 70
	'@+i'          shift, and enter state 71
	'@-'           shift, and enter state 72
	'@-i'          shift, and enter state 73
	'@0'           shift, and enter state 74
	'@1'           shift, and enter state 75
	'False'        shift, and enter state 76
	'True'         shift, and enter state 77
	'['            shift, and enter state 78
	'[]'           shift, and enter state 79
	'case'         shift, and enter state 80
	'gate'         shift, and enter state 81
	'if'           shift, and enter state 82
	'let'          shift, and enter state 83
	'not'          shift, and enter state 84
	'with'         shift, and enter state 85
	'|'            shift, and enter state 86
	L_integ        shift, and enter state 42
	L_Var          shift, and enter state 8
	L_Bit          shift, and enter state 87
	L_Lambda       shift, and enter state 88

	Integer        goto state 47
	Var            goto state 48
	Bit            goto state 49
	Lambda         goto state 50
	IntegerExpression1goto state 51
	IntegerExpression2goto state 52
	IntegerExpression3goto state 53
	IntegerExpressiongoto state 54
	BoolValue      goto state 55
	BoolExpression goto state 56
	BoolExpression1goto state 57
	BoolExpression2goto state 58
	BasisState     goto state 59
	Term4          goto state 60
	Term3          goto state 61
	Term2          goto state 62
	Term1          goto state 63
	Term           goto state 344
	List1          goto state 65
	List           goto state 66

State 324

	Term1 -> 'let' '{' Var '=' Term . '}' 'in' Term     (rule 151)

	'}'            shift, and enter state 343


State 325

	Term1 -> 'let' '{' '(' Var ',' . ListVar ')' '=' Term '}' 'in' Term    (rule 152)

	L_Var          shift, and enter state 8

	Var            goto state 230
	ListVar        goto state 342

State 326

	ControlVars -> '[' Var ',' ListVar . ']'            (rule 125)

	']'            shift, and enter state 341


State 327

	ControlTerms -> '[' Term ',' ListTerm . ']'         (rule 123)

	']'            shift, and enter state 340


State 328

	ControlBits -> '[' Bit . ',' ListBit ']'            (rule 119)

	','            shift, and enter state 339


State 329

	ControlBasisStates -> '[' BasisState . ',' ListBasisState ']'    (rule 115)

	','            shift, and enter state 338


State 330

	ControlBit -> '[' Bit . ']'                         (rule 118)

	']'            shift, and enter state 337


State 331

	ControlBasisState -> '[' BasisState . ']'           (rule 114)

	']'            shift, and enter state 336


State 332

	Term1 -> '|' Var ',' ListVar '|' . '<-' Term ';' Term    (rule 154)

	'<-'           shift, and enter state 335


State 333

	ListVar -> Var ',' . ListVar                        (rule 111)

	L_Var          shift, and enter state 8

	Var            goto state 230
	ListVar        goto state 334

State 334

	ListVar -> Var ',' ListVar .                        (rule 111)

	')'            reduce using rule 111
	']'            reduce using rule 111
	'|'            reduce using rule 111


State 335

	Term1 -> '|' Var ',' ListVar '|' '<-' . Term ';' Term    (rule 154)

	'('            shift, and enter state 67
	'()'           shift, and enter state 68
	'-'            shift, and enter state 69
	'@+'           shift, and enter state 70
	'@+i'          shift, and enter state 71
	'@-'           shift, and enter state 72
	'@-i'          shift, and enter state 73
	'@0'           shift, and enter state 74
	'@1'           shift, and enter state 75
	'False'        shift, and enter state 76
	'True'         shift, and enter state 77
	'['            shift, and enter state 78
	'[]'           shift, and enter state 79
	'case'         shift, and enter state 80
	'gate'         shift, and enter state 81
	'if'           shift, and enter state 82
	'let'          shift, and enter state 83
	'not'          shift, and enter state 84
	'with'         shift, and enter state 85
	'|'            shift, and enter state 86
	L_integ        shift, and enter state 42
	L_Var          shift, and enter state 8
	L_Bit          shift, and enter state 87
	L_Lambda       shift, and enter state 88

	Integer        goto state 47
	Var            goto state 48
	Bit            goto state 49
	Lambda         goto state 50
	IntegerExpression1goto state 51
	IntegerExpression2goto state 52
	IntegerExpression3goto state 53
	IntegerExpressiongoto state 54
	BoolValue      goto state 55
	BoolExpression goto state 56
	BoolExpression1goto state 57
	BoolExpression2goto state 58
	BasisState     goto state 59
	Term4          goto state 60
	Term3          goto state 61
	Term2          goto state 62
	Term1          goto state 63
	Term           goto state 364
	List1          goto state 65
	List           goto state 66

State 336

	ControlBasisState -> '[' BasisState ']' .           (rule 114)

	'$'            reduce using rule 114
	'('            reduce using rule 114
	'()'           reduce using rule 114
	')'            reduce using rule 114
	'*'            reduce using rule 114
	','            reduce using rule 114
	'-'            reduce using rule 114
	'->'           reduce using rule 114
	'.'            reduce using rule 114
	';'            reduce using rule 114
	'@+'           reduce using rule 114
	'@+i'          reduce using rule 114
	'@-'           reduce using rule 114
	'@-i'          reduce using rule 114
	'@0'           reduce using rule 114
	'@1'           reduce using rule 114
	'False'        reduce using rule 114
	'True'         reduce using rule 114
	'['            reduce using rule 114
	'[]'           reduce using rule 114
	']'            reduce using rule 114
	'case'         reduce using rule 114
	'else'         reduce using rule 114
	'gate'         reduce using rule 114
	'if'           reduce using rule 114
	'let'          reduce using rule 114
	'not'          reduce using rule 114
	'of'           reduce using rule 114
	'then'         reduce using rule 114
	'with'         reduce using rule 114
	'|'            reduce using rule 114
	'}'            reduce using rule 114
	L_integ        reduce using rule 114
	L_Var          reduce using rule 114
	L_Bit          reduce using rule 114
	L_Lambda       reduce using rule 114


State 337

	ControlBit -> '[' Bit ']' .                         (rule 118)

	'$'            reduce using rule 118
	'('            reduce using rule 118
	'()'           reduce using rule 118
	')'            reduce using rule 118
	'*'            reduce using rule 118
	','            reduce using rule 118
	'-'            reduce using rule 118
	'->'           reduce using rule 118
	'.'            reduce using rule 118
	';'            reduce using rule 118
	'@+'           reduce using rule 118
	'@+i'          reduce using rule 118
	'@-'           reduce using rule 118
	'@-i'          reduce using rule 118
	'@0'           reduce using rule 118
	'@1'           reduce using rule 118
	'False'        reduce using rule 118
	'True'         reduce using rule 118
	'['            reduce using rule 118
	'[]'           reduce using rule 118
	']'            reduce using rule 118
	'case'         reduce using rule 118
	'else'         reduce using rule 118
	'gate'         reduce using rule 118
	'if'           reduce using rule 118
	'let'          reduce using rule 118
	'not'          reduce using rule 118
	'of'           reduce using rule 118
	'then'         reduce using rule 118
	'with'         reduce using rule 118
	'|'            reduce using rule 118
	'}'            reduce using rule 118
	L_integ        reduce using rule 118
	L_Var          reduce using rule 118
	L_Bit          reduce using rule 118
	L_Lambda       reduce using rule 118


State 338

	ControlBasisStates -> '[' BasisState ',' . ListBasisState ']'    (rule 115)

	'@+'           shift, and enter state 70
	'@+i'          shift, and enter state 71
	'@-'           shift, and enter state 72
	'@-i'          shift, and enter state 73
	'@0'           shift, and enter state 74
	'@1'           shift, and enter state 75

	BasisState     goto state 362
	ListBasisState goto state 363

State 339

	ControlBits -> '[' Bit ',' . ListBit ']'            (rule 119)

	L_Bit          shift, and enter state 87

	Bit            goto state 360
	ListBit        goto state 361

State 340

	ControlTerms -> '[' Term ',' ListTerm ']' .         (rule 123)

	'ctrl'         reduce using rule 123


State 341

	ControlVars -> '[' Var ',' ListVar ']' .            (rule 125)

	'ctrl'         reduce using rule 125


State 342

	Term1 -> 'let' '{' '(' Var ',' ListVar . ')' '=' Term '}' 'in' Term    (rule 152)

	')'            shift, and enter state 359


State 343

	Term1 -> 'let' '{' Var '=' Term '}' . 'in' Term     (rule 151)

	'in'           shift, and enter state 358


State 344

	Term1 -> 'if' Term 'then' Term 'else' Term .        (rule 150)

	'$'            reduce using rule 150
	'('            reduce using rule 150
	'()'           reduce using rule 150
	')'            reduce using rule 150
	','            reduce using rule 150
	'-'            reduce using rule 150
	'->'           reduce using rule 150
	';'            reduce using rule 150
	'@+'           reduce using rule 150
	'@+i'          reduce using rule 150
	'@-'           reduce using rule 150
	'@-i'          reduce using rule 150
	'@0'           reduce using rule 150
	'@1'           reduce using rule 150
	'False'        reduce using rule 150
	'True'         reduce using rule 150
	'['            reduce using rule 150
	'[]'           reduce using rule 150
	']'            reduce using rule 150
	'case'         reduce using rule 150
	'else'         reduce using rule 150
	'gate'         reduce using rule 150
	'if'           reduce using rule 150
	'let'          reduce using rule 150
	'not'          reduce using rule 150
	'of'           reduce using rule 150
	'then'         reduce using rule 150
	'with'         reduce using rule 150
	'|'            reduce using rule 150
	'}'            reduce using rule 150
	L_integ        reduce using rule 150
	L_Var          reduce using rule 150
	L_Bit          reduce using rule 150
	L_Lambda       reduce using rule 150


State 345

	Gate -> GateVar '[' Angle ',' Angle . ',' Angle ']'    (rule 104)
	Gate -> GateVar '[' Angle ',' Angle . ']'           (rule 105)

	','            shift, and enter state 356
	']'            shift, and enter state 357


State 346

	Gate -> 'U2' '[' Angle ',' Angle . ']'              (rule 88)

	']'            shift, and enter state 355


State 347

	Gate -> 'U3' '[' Angle ',' Angle . ',' Angle ']'    (rule 89)

	','            shift, and enter state 354


State 348

	Term1 -> 'case' Term 'of' '{' ListCaseExpression '}' .    (rule 155)

	'$'            reduce using rule 155
	'('            reduce using rule 155
	'()'           reduce using rule 155
	')'            reduce using rule 155
	','            reduce using rule 155
	'-'            reduce using rule 155
	'->'           reduce using rule 155
	';'            reduce using rule 155
	'@+'           reduce using rule 155
	'@+i'          reduce using rule 155
	'@-'           reduce using rule 155
	'@-i'          reduce using rule 155
	'@0'           reduce using rule 155
	'@1'           reduce using rule 155
	'False'        reduce using rule 155
	'True'         reduce using rule 155
	'['            reduce using rule 155
	'[]'           reduce using rule 155
	']'            reduce using rule 155
	'case'         reduce using rule 155
	'else'         reduce using rule 155
	'gate'         reduce using rule 155
	'if'           reduce using rule 155
	'let'          reduce using rule 155
	'not'          reduce using rule 155
	'of'           reduce using rule 155
	'then'         reduce using rule 155
	'with'         reduce using rule 155
	'|'            reduce using rule 155
	'}'            reduce using rule 155
	L_integ        reduce using rule 155
	L_Var          reduce using rule 155
	L_Bit          reduce using rule 155
	L_Lambda       reduce using rule 155


State 349

	ListCaseExpression -> CaseExpression ListCaseExpression .    (rule 170)

	'}'            reduce using rule 170


State 350

	CaseExpression -> CaseExpression ';' .              (rule 168)

	'('            reduce using rule 168
	'()'           reduce using rule 168
	'-'            reduce using rule 168
	';'            reduce using rule 168
	'@+'           reduce using rule 168
	'@+i'          reduce using rule 168
	'@-'           reduce using rule 168
	'@-i'          reduce using rule 168
	'@0'           reduce using rule 168
	'@1'           reduce using rule 168
	'False'        reduce using rule 168
	'True'         reduce using rule 168
	'['            reduce using rule 168
	'[]'           reduce using rule 168
	'case'         reduce using rule 168
	'gate'         reduce using rule 168
	'if'           reduce using rule 168
	'let'          reduce using rule 168
	'not'          reduce using rule 168
	'with'         reduce using rule 168
	'|'            reduce using rule 168
	'}'            reduce using rule 168
	L_integ        reduce using rule 168
	L_Var          reduce using rule 168
	L_Bit          reduce using rule 168
	L_Lambda       reduce using rule 168


State 351

	CaseExpression -> Term '->' . Term                  (rule 167)

	'('            shift, and enter state 67
	'()'           shift, and enter state 68
	'-'            shift, and enter state 69
	'@+'           shift, and enter state 70
	'@+i'          shift, and enter state 71
	'@-'           shift, and enter state 72
	'@-i'          shift, and enter state 73
	'@0'           shift, and enter state 74
	'@1'           shift, and enter state 75
	'False'        shift, and enter state 76
	'True'         shift, and enter state 77
	'['            shift, and enter state 78
	'[]'           shift, and enter state 79
	'case'         shift, and enter state 80
	'gate'         shift, and enter state 81
	'if'           shift, and enter state 82
	'let'          shift, and enter state 83
	'not'          shift, and enter state 84
	'with'         shift, and enter state 85
	'|'            shift, and enter state 86
	L_integ        shift, and enter state 42
	L_Var          shift, and enter state 8
	L_Bit          shift, and enter state 87
	L_Lambda       shift, and enter state 88

	Integer        goto state 47
	Var            goto state 48
	Bit            goto state 49
	Lambda         goto state 50
	IntegerExpression1goto state 51
	IntegerExpression2goto state 52
	IntegerExpression3goto state 53
	IntegerExpressiongoto state 54
	BoolValue      goto state 55
	BoolExpression goto state 56
	BoolExpression1goto state 57
	BoolExpression2goto state 58
	BasisState     goto state 59
	Term4          goto state 60
	Term3          goto state 61
	Term2          goto state 62
	Term1          goto state 63
	Term           goto state 353
	List1          goto state 65
	List           goto state 66

State 352

	ListTerm -> Term ',' ListTerm .                     (rule 127)

	')'            reduce using rule 127
	']'            reduce using rule 127


State 353

	CaseExpression -> Term '->' Term .                  (rule 167)

	'('            reduce using rule 167
	'()'           reduce using rule 167
	'-'            reduce using rule 167
	';'            reduce using rule 167
	'@+'           reduce using rule 167
	'@+i'          reduce using rule 167
	'@-'           reduce using rule 167
	'@-i'          reduce using rule 167
	'@0'           reduce using rule 167
	'@1'           reduce using rule 167
	'False'        reduce using rule 167
	'True'         reduce using rule 167
	'['            reduce using rule 167
	'[]'           reduce using rule 167
	'case'         reduce using rule 167
	'gate'         reduce using rule 167
	'if'           reduce using rule 167
	'let'          reduce using rule 167
	'not'          reduce using rule 167
	'with'         reduce using rule 167
	'|'            reduce using rule 167
	'}'            reduce using rule 167
	L_integ        reduce using rule 167
	L_Var          reduce using rule 167
	L_Bit          reduce using rule 167
	L_Lambda       reduce using rule 167


State 354

	Gate -> 'U3' '[' Angle ',' Angle ',' . Angle ']'    (rule 89)

	L_doubl        shift, and enter state 2

	Double         goto state 246
	Angle          goto state 373

State 355

	Gate -> 'U2' '[' Angle ',' Angle ']' .              (rule 88)

	'$'            reduce using rule 88
	'('            reduce using rule 88
	'()'           reduce using rule 88
	')'            reduce using rule 88
	'*'            reduce using rule 88
	','            reduce using rule 88
	'-'            reduce using rule 88
	'->'           reduce using rule 88
	'.'            reduce using rule 88
	':'            reduce using rule 88
	';'            reduce using rule 88
	'@+'           reduce using rule 88
	'@+i'          reduce using rule 88
	'@-'           reduce using rule 88
	'@-i'          reduce using rule 88
	'@0'           reduce using rule 88
	'@1'           reduce using rule 88
	'False'        reduce using rule 88
	'True'         reduce using rule 88
	'['            reduce using rule 88
	'[]'           reduce using rule 88
	']'            reduce using rule 88
	'case'         reduce using rule 88
	'else'         reduce using rule 88
	'gate'         reduce using rule 88
	'if'           reduce using rule 88
	'let'          reduce using rule 88
	'not'          reduce using rule 88
	'of'           reduce using rule 88
	'then'         reduce using rule 88
	'with'         reduce using rule 88
	'|'            reduce using rule 88
	'}'            reduce using rule 88
	L_integ        reduce using rule 88
	L_Var          reduce using rule 88
	L_Bit          reduce using rule 88
	L_Lambda       reduce using rule 88


State 356

	Gate -> GateVar '[' Angle ',' Angle ',' . Angle ']'    (rule 104)

	L_doubl        shift, and enter state 2

	Double         goto state 246
	Angle          goto state 372

State 357

	Gate -> GateVar '[' Angle ',' Angle ']' .           (rule 105)

	'$'            reduce using rule 105
	'('            reduce using rule 105
	'()'           reduce using rule 105
	')'            reduce using rule 105
	'*'            reduce using rule 105
	','            reduce using rule 105
	'-'            reduce using rule 105
	'->'           reduce using rule 105
	'.'            reduce using rule 105
	':'            reduce using rule 105
	';'            reduce using rule 105
	'@+'           reduce using rule 105
	'@+i'          reduce using rule 105
	'@-'           reduce using rule 105
	'@-i'          reduce using rule 105
	'@0'           reduce using rule 105
	'@1'           reduce using rule 105
	'False'        reduce using rule 105
	'True'         reduce using rule 105
	'['            reduce using rule 105
	'[]'           reduce using rule 105
	']'            reduce using rule 105
	'case'         reduce using rule 105
	'else'         reduce using rule 105
	'gate'         reduce using rule 105
	'if'           reduce using rule 105
	'let'          reduce using rule 105
	'not'          reduce using rule 105
	'of'           reduce using rule 105
	'then'         reduce using rule 105
	'with'         reduce using rule 105
	'|'            reduce using rule 105
	'}'            reduce using rule 105
	L_integ        reduce using rule 105
	L_Var          reduce using rule 105
	L_Bit          reduce using rule 105
	L_Lambda       reduce using rule 105


State 358

	Term1 -> 'let' '{' Var '=' Term '}' 'in' . Term     (rule 151)

	'('            shift, and enter state 67
	'()'           shift, and enter state 68
	'-'            shift, and enter state 69
	'@+'           shift, and enter state 70
	'@+i'          shift, and enter state 71
	'@-'           shift, and enter state 72
	'@-i'          shift, and enter state 73
	'@0'           shift, and enter state 74
	'@1'           shift, and enter state 75
	'False'        shift, and enter state 76
	'True'         shift, and enter state 77
	'['            shift, and enter state 78
	'[]'           shift, and enter state 79
	'case'         shift, and enter state 80
	'gate'         shift, and enter state 81
	'if'           shift, and enter state 82
	'let'          shift, and enter state 83
	'not'          shift, and enter state 84
	'with'         shift, and enter state 85
	'|'            shift, and enter state 86
	L_integ        shift, and enter state 42
	L_Var          shift, and enter state 8
	L_Bit          shift, and enter state 87
	L_Lambda       shift, and enter state 88

	Integer        goto state 47
	Var            goto state 48
	Bit            goto state 49
	Lambda         goto state 50
	IntegerExpression1goto state 51
	IntegerExpression2goto state 52
	IntegerExpression3goto state 53
	IntegerExpressiongoto state 54
	BoolValue      goto state 55
	BoolExpression goto state 56
	BoolExpression1goto state 57
	BoolExpression2goto state 58
	BasisState     goto state 59
	Term4          goto state 60
	Term3          goto state 61
	Term2          goto state 62
	Term1          goto state 63
	Term           goto state 371
	List1          goto state 65
	List           goto state 66

State 359

	Term1 -> 'let' '{' '(' Var ',' ListVar ')' . '=' Term '}' 'in' Term    (rule 152)

	'='            shift, and enter state 370


State 360

	ListBit -> Bit .                                    (rule 112)
	ListBit -> Bit . ',' ListBit                        (rule 113)

	','            shift, and enter state 369
	']'            reduce using rule 112


State 361

	ControlBits -> '[' Bit ',' ListBit . ']'            (rule 119)

	']'            shift, and enter state 368


State 362

	ListBasisState -> BasisState .                      (rule 116)
	ListBasisState -> BasisState . ',' ListBasisState    (rule 117)

	','            shift, and enter state 367
	']'            reduce using rule 116


State 363

	ControlBasisStates -> '[' BasisState ',' ListBasisState . ']'    (rule 115)

	']'            shift, and enter state 366


State 364

	Term1 -> '|' Var ',' ListVar '|' '<-' Term . ';' Term    (rule 154)

	';'            shift, and enter state 365


State 365

	Term1 -> '|' Var ',' ListVar '|' '<-' Term ';' . Term    (rule 154)

	'('            shift, and enter state 67
	'()'           shift, and enter state 68
	'-'            shift, and enter state 69
	'@+'           shift, and enter state 70
	'@+i'          shift, and enter state 71
	'@-'           shift, and enter state 72
	'@-i'          shift, and enter state 73
	'@0'           shift, and enter state 74
	'@1'           shift, and enter state 75
	'False'        shift, and enter state 76
	'True'         shift, and enter state 77
	'['            shift, and enter state 78
	'[]'           shift, and enter state 79
	'case'         shift, and enter state 80
	'gate'         shift, and enter state 81
	'if'           shift, and enter state 82
	'let'          shift, and enter state 83
	'not'          shift, and enter state 84
	'with'         shift, and enter state 85
	'|'            shift, and enter state 86
	L_integ        shift, and enter state 42
	L_Var          shift, and enter state 8
	L_Bit          shift, and enter state 87
	L_Lambda       shift, and enter state 88

	Integer        goto state 47
	Var            goto state 48
	Bit            goto state 49
	Lambda         goto state 50
	IntegerExpression1goto state 51
	IntegerExpression2goto state 52
	IntegerExpression3goto state 53
	IntegerExpressiongoto state 54
	BoolValue      goto state 55
	BoolExpression goto state 56
	BoolExpression1goto state 57
	BoolExpression2goto state 58
	BasisState     goto state 59
	Term4          goto state 60
	Term3          goto state 61
	Term2          goto state 62
	Term1          goto state 63
	Term           goto state 379
	List1          goto state 65
	List           goto state 66

State 366

	ControlBasisStates -> '[' BasisState ',' ListBasisState ']' .    (rule 115)

	'$'            reduce using rule 115
	'('            reduce using rule 115
	'()'           reduce using rule 115
	')'            reduce using rule 115
	'*'            reduce using rule 115
	','            reduce using rule 115
	'-'            reduce using rule 115
	'->'           reduce using rule 115
	'.'            reduce using rule 115
	';'            reduce using rule 115
	'@+'           reduce using rule 115
	'@+i'          reduce using rule 115
	'@-'           reduce using rule 115
	'@-i'          reduce using rule 115
	'@0'           reduce using rule 115
	'@1'           reduce using rule 115
	'False'        reduce using rule 115
	'True'         reduce using rule 115
	'['            reduce using rule 115
	'[]'           reduce using rule 115
	']'            reduce using rule 115
	'case'         reduce using rule 115
	'else'         reduce using rule 115
	'gate'         reduce using rule 115
	'if'           reduce using rule 115
	'let'          reduce using rule 115
	'not'          reduce using rule 115
	'of'           reduce using rule 115
	'then'         reduce using rule 115
	'with'         reduce using rule 115
	'|'            reduce using rule 115
	'}'            reduce using rule 115
	L_integ        reduce using rule 115
	L_Var          reduce using rule 115
	L_Bit          reduce using rule 115
	L_Lambda       reduce using rule 115


State 367

	ListBasisState -> BasisState ',' . ListBasisState    (rule 117)

	'@+'           shift, and enter state 70
	'@+i'          shift, and enter state 71
	'@-'           shift, and enter state 72
	'@-i'          shift, and enter state 73
	'@0'           shift, and enter state 74
	'@1'           shift, and enter state 75

	BasisState     goto state 362
	ListBasisState goto state 378

State 368

	ControlBits -> '[' Bit ',' ListBit ']' .            (rule 119)

	'$'            reduce using rule 119
	'('            reduce using rule 119
	'()'           reduce using rule 119
	')'            reduce using rule 119
	'*'            reduce using rule 119
	','            reduce using rule 119
	'-'            reduce using rule 119
	'->'           reduce using rule 119
	'.'            reduce using rule 119
	';'            reduce using rule 119
	'@+'           reduce using rule 119
	'@+i'          reduce using rule 119
	'@-'           reduce using rule 119
	'@-i'          reduce using rule 119
	'@0'           reduce using rule 119
	'@1'           reduce using rule 119
	'False'        reduce using rule 119
	'True'         reduce using rule 119
	'['            reduce using rule 119
	'[]'           reduce using rule 119
	']'            reduce using rule 119
	'case'         reduce using rule 119
	'else'         reduce using rule 119
	'gate'         reduce using rule 119
	'if'           reduce using rule 119
	'let'          reduce using rule 119
	'not'          reduce using rule 119
	'of'           reduce using rule 119
	'then'         reduce using rule 119
	'with'         reduce using rule 119
	'|'            reduce using rule 119
	'}'            reduce using rule 119
	L_integ        reduce using rule 119
	L_Var          reduce using rule 119
	L_Bit          reduce using rule 119
	L_Lambda       reduce using rule 119


State 369

	ListBit -> Bit ',' . ListBit                        (rule 113)

	L_Bit          shift, and enter state 87

	Bit            goto state 360
	ListBit        goto state 377

State 370

	Term1 -> 'let' '{' '(' Var ',' ListVar ')' '=' . Term '}' 'in' Term    (rule 152)

	'('            shift, and enter state 67
	'()'           shift, and enter state 68
	'-'            shift, and enter state 69
	'@+'           shift, and enter state 70
	'@+i'          shift, and enter state 71
	'@-'           shift, and enter state 72
	'@-i'          shift, and enter state 73
	'@0'           shift, and enter state 74
	'@1'           shift, and enter state 75
	'False'        shift, and enter state 76
	'True'         shift, and enter state 77
	'['            shift, and enter state 78
	'[]'           shift, and enter state 79
	'case'         shift, and enter state 80
	'gate'         shift, and enter state 81
	'if'           shift, and enter state 82
	'let'          shift, and enter state 83
	'not'          shift, and enter state 84
	'with'         shift, and enter state 85
	'|'            shift, and enter state 86
	L_integ        shift, and enter state 42
	L_Var          shift, and enter state 8
	L_Bit          shift, and enter state 87
	L_Lambda       shift, and enter state 88

	Integer        goto state 47
	Var            goto state 48
	Bit            goto state 49
	Lambda         goto state 50
	IntegerExpression1goto state 51
	IntegerExpression2goto state 52
	IntegerExpression3goto state 53
	IntegerExpressiongoto state 54
	BoolValue      goto state 55
	BoolExpression goto state 56
	BoolExpression1goto state 57
	BoolExpression2goto state 58
	BasisState     goto state 59
	Term4          goto state 60
	Term3          goto state 61
	Term2          goto state 62
	Term1          goto state 63
	Term           goto state 376
	List1          goto state 65
	List           goto state 66

State 371

	Term1 -> 'let' '{' Var '=' Term '}' 'in' Term .     (rule 151)

	'$'            reduce using rule 151
	'('            reduce using rule 151
	'()'           reduce using rule 151
	')'            reduce using rule 151
	','            reduce using rule 151
	'-'            reduce using rule 151
	'->'           reduce using rule 151
	';'            reduce using rule 151
	'@+'           reduce using rule 151
	'@+i'          reduce using rule 151
	'@-'           reduce using rule 151
	'@-i'          reduce using rule 151
	'@0'           reduce using rule 151
	'@1'           reduce using rule 151
	'False'        reduce using rule 151
	'True'         reduce using rule 151
	'['            reduce using rule 151
	'[]'           reduce using rule 151
	']'            reduce using rule 151
	'case'         reduce using rule 151
	'else'         reduce using rule 151
	'gate'         reduce using rule 151
	'if'           reduce using rule 151
	'let'          reduce using rule 151
	'not'          reduce using rule 151
	'of'           reduce using rule 151
	'then'         reduce using rule 151
	'with'         reduce using rule 151
	'|'            reduce using rule 151
	'}'            reduce using rule 151
	L_integ        reduce using rule 151
	L_Var          reduce using rule 151
	L_Bit          reduce using rule 151
	L_Lambda       reduce using rule 151


State 372

	Gate -> GateVar '[' Angle ',' Angle ',' Angle . ']'    (rule 104)

	']'            shift, and enter state 375


State 373

	Gate -> 'U3' '[' Angle ',' Angle ',' Angle . ']'    (rule 89)

	']'            shift, and enter state 374


State 374

	Gate -> 'U3' '[' Angle ',' Angle ',' Angle ']' .    (rule 89)

	'$'            reduce using rule 89
	'('            reduce using rule 89
	'()'           reduce using rule 89
	')'            reduce using rule 89
	'*'            reduce using rule 89
	','            reduce using rule 89
	'-'            reduce using rule 89
	'->'           reduce using rule 89
	'.'            reduce using rule 89
	':'            reduce using rule 89
	';'            reduce using rule 89
	'@+'           reduce using rule 89
	'@+i'          reduce using rule 89
	'@-'           reduce using rule 89
	'@-i'          reduce using rule 89
	'@0'           reduce using rule 89
	'@1'           reduce using rule 89
	'False'        reduce using rule 89
	'True'         reduce using rule 89
	'['            reduce using rule 89
	'[]'           reduce using rule 89
	']'            reduce using rule 89
	'case'         reduce using rule 89
	'else'         reduce using rule 89
	'gate'         reduce using rule 89
	'if'           reduce using rule 89
	'let'          reduce using rule 89
	'not'          reduce using rule 89
	'of'           reduce using rule 89
	'then'         reduce using rule 89
	'with'         reduce using rule 89
	'|'            reduce using rule 89
	'}'            reduce using rule 89
	L_integ        reduce using rule 89
	L_Var          reduce using rule 89
	L_Bit          reduce using rule 89
	L_Lambda       reduce using rule 89


State 375

	Gate -> GateVar '[' Angle ',' Angle ',' Angle ']' .    (rule 104)

	'$'            reduce using rule 104
	'('            reduce using rule 104
	'()'           reduce using rule 104
	')'            reduce using rule 104
	'*'            reduce using rule 104
	','            reduce using rule 104
	'-'            reduce using rule 104
	'->'           reduce using rule 104
	'.'            reduce using rule 104
	':'            reduce using rule 104
	';'            reduce using rule 104
	'@+'           reduce using rule 104
	'@+i'          reduce using rule 104
	'@-'           reduce using rule 104
	'@-i'          reduce using rule 104
	'@0'           reduce using rule 104
	'@1'           reduce using rule 104
	'False'        reduce using rule 104
	'True'         reduce using rule 104
	'['            reduce using rule 104
	'[]'           reduce using rule 104
	']'            reduce using rule 104
	'case'         reduce using rule 104
	'else'         reduce using rule 104
	'gate'         reduce using rule 104
	'if'           reduce using rule 104
	'let'          reduce using rule 104
	'not'          reduce using rule 104
	'of'           reduce using rule 104
	'then'         reduce using rule 104
	'with'         reduce using rule 104
	'|'            reduce using rule 104
	'}'            reduce using rule 104
	L_integ        reduce using rule 104
	L_Var          reduce using rule 104
	L_Bit          reduce using rule 104
	L_Lambda       reduce using rule 104


State 376

	Term1 -> 'let' '{' '(' Var ',' ListVar ')' '=' Term . '}' 'in' Term    (rule 152)

	'}'            shift, and enter state 380


State 377

	ListBit -> Bit ',' ListBit .                        (rule 113)

	']'            reduce using rule 113


State 378

	ListBasisState -> BasisState ',' ListBasisState .    (rule 117)

	']'            reduce using rule 117


State 379

	Term1 -> '|' Var ',' ListVar '|' '<-' Term ';' Term .    (rule 154)

	'$'            reduce using rule 154
	'('            reduce using rule 154
	'()'           reduce using rule 154
	')'            reduce using rule 154
	','            reduce using rule 154
	'-'            reduce using rule 154
	'->'           reduce using rule 154
	';'            reduce using rule 154
	'@+'           reduce using rule 154
	'@+i'          reduce using rule 154
	'@-'           reduce using rule 154
	'@-i'          reduce using rule 154
	'@0'           reduce using rule 154
	'@1'           reduce using rule 154
	'False'        reduce using rule 154
	'True'         reduce using rule 154
	'['            reduce using rule 154
	'[]'           reduce using rule 154
	']'            reduce using rule 154
	'case'         reduce using rule 154
	'else'         reduce using rule 154
	'gate'         reduce using rule 154
	'if'           reduce using rule 154
	'let'          reduce using rule 154
	'not'          reduce using rule 154
	'of'           reduce using rule 154
	'then'         reduce using rule 154
	'with'         reduce using rule 154
	'|'            reduce using rule 154
	'}'            reduce using rule 154
	L_integ        reduce using rule 154
	L_Var          reduce using rule 154
	L_Bit          reduce using rule 154
	L_Lambda       reduce using rule 154


State 380

	Term1 -> 'let' '{' '(' Var ',' ListVar ')' '=' Term '}' . 'in' Term    (rule 152)

	'in'           shift, and enter state 381


State 381

	Term1 -> 'let' '{' '(' Var ',' ListVar ')' '=' Term '}' 'in' . Term    (rule 152)

	'('            shift, and enter state 67
	'()'           shift, and enter state 68
	'-'            shift, and enter state 69
	'@+'           shift, and enter state 70
	'@+i'          shift, and enter state 71
	'@-'           shift, and enter state 72
	'@-i'          shift, and enter state 73
	'@0'           shift, and enter state 74
	'@1'           shift, and enter state 75
	'False'        shift, and enter state 76
	'True'         shift, and enter state 77
	'['            shift, and enter state 78
	'[]'           shift, and enter state 79
	'case'         shift, and enter state 80
	'gate'         shift, and enter state 81
	'if'           shift, and enter state 82
	'let'          shift, and enter state 83
	'not'          shift, and enter state 84
	'with'         shift, and enter state 85
	'|'            shift, and enter state 86
	L_integ        shift, and enter state 42
	L_Var          shift, and enter state 8
	L_Bit          shift, and enter state 87
	L_Lambda       shift, and enter state 88

	Integer        goto state 47
	Var            goto state 48
	Bit            goto state 49
	Lambda         goto state 50
	IntegerExpression1goto state 51
	IntegerExpression2goto state 52
	IntegerExpression3goto state 53
	IntegerExpressiongoto state 54
	BoolValue      goto state 55
	BoolExpression goto state 56
	BoolExpression1goto state 57
	BoolExpression2goto state 58
	BasisState     goto state 59
	Term4          goto state 60
	Term3          goto state 61
	Term2          goto state 62
	Term1          goto state 63
	Term           goto state 382
	List1          goto state 65
	List           goto state 66

State 382

	Term1 -> 'let' '{' '(' Var ',' ListVar ')' '=' Term '}' 'in' Term .    (rule 152)

	'$'            reduce using rule 152
	'('            reduce using rule 152
	'()'           reduce using rule 152
	')'            reduce using rule 152
	','            reduce using rule 152
	'-'            reduce using rule 152
	'->'           reduce using rule 152
	';'            reduce using rule 152
	'@+'           reduce using rule 152
	'@+i'          reduce using rule 152
	'@-'           reduce using rule 152
	'@-i'          reduce using rule 152
	'@0'           reduce using rule 152
	'@1'           reduce using rule 152
	'False'        reduce using rule 152
	'True'         reduce using rule 152
	'['            reduce using rule 152
	'[]'           reduce using rule 152
	']'            reduce using rule 152
	'case'         reduce using rule 152
	'else'         reduce using rule 152
	'gate'         reduce using rule 152
	'if'           reduce using rule 152
	'let'          reduce using rule 152
	'not'          reduce using rule 152
	'of'           reduce using rule 152
	'then'         reduce using rule 152
	'with'         reduce using rule 152
	'|'            reduce using rule 152
	'}'            reduce using rule 152
	L_integ        reduce using rule 152
	L_Var          reduce using rule 152
	L_Bit          reduce using rule 152
	L_Lambda       reduce using rule 152


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 181
Number of terminals: 99
Number of non-terminals: 53
Number of states: 383
