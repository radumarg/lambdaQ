-----------------------------------------------------------------------------
Info file generated by Happy Version 1.20.0 from Frontend/LambdaQ/Par.y
-----------------------------------------------------------------------------

state 43 contains 1 reduce/reduce conflicts.

rule 27 is unused

-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_pProgram -> Program                         (0)
	Double -> L_doubl                                  (1)
	Integer -> L_integ                                 (2)
	Var -> L_Var                                       (3)
	Lambda -> L_Lambda                                 (4)
	Program -> ListFunctionDeclaration                 (5)
	Type3 -> 'Bit'                                     (6)
	Type3 -> 'Qbit'                                    (7)
	Type3 -> 'State'                                   (8)
	Type3 -> 'Unitary'                                 (9)
	Type3 -> '()'                                      (10)
	Type3 -> '(' Type ')'                              (11)
	Type2 -> '!' Type3                                 (12)
	Type2 -> Type3 '**' Integer                        (13)
	Type2 -> Type3                                     (14)
	Type1 -> Type2 '+' Type1                           (15)
	Type1 -> Type2 '*' Type1                           (16)
	Type1 -> Type2                                     (17)
	Type -> Type1 '->' Type                            (18)
	Type -> Type1                                      (19)
	Angle -> Double                                    (20)
	BasisState -> '@0'                                 (21)
	BasisState -> '@1'                                 (22)
	BasisState -> '@+'                                 (23)
	BasisState -> '@-'                                 (24)
	BasisState -> '@+i'                                (25)
	BasisState -> '@-i'                                (26)
	Bit -> Integer                                     (27)
	Gate -> 'H'                                        (28)
	Gate -> 'X'                                        (29)
	Gate -> 'Y'                                        (30)
	Gate -> 'Z'                                        (31)
	Gate -> 'ID'                                       (32)
	Gate -> 'ROOT_X' Integer                           (33)
	Gate -> 'ROOT_X_DAG' Integer                       (34)
	Gate -> 'ROOT_Y' Integer                           (35)
	Gate -> 'ROOT_Y_DAG' Integer                       (36)
	Gate -> 'ROOT_Z' Integer                           (37)
	Gate -> 'ROOT_Z_DAG' Integer                       (38)
	Gate -> 'S'                                        (39)
	Gate -> 'S_DAG'                                    (40)
	Gate -> 'T'                                        (41)
	Gate -> 'T_DAG'                                    (42)
	Gate -> 'SQRT_X'                                   (43)
	Gate -> 'SQRT_X_DAG'                               (44)
	Gate -> 'SQRT_Y'                                   (45)
	Gate -> 'SQRT_Y_DAG'                               (46)
	Gate -> 'RX' Angle                                 (47)
	Gate -> 'RY' Angle                                 (48)
	Gate -> 'RZ' Angle                                 (49)
	Gate -> 'U1' Angle                                 (50)
	Gate -> 'U2' '(' Angle ',' Angle ')'               (51)
	Gate -> 'U3' '(' Angle ',' Angle ',' Angle ')'     (52)
	Gate -> 'SWAP'                                     (53)
	Gate -> 'SQRT_SWAP'                                (54)
	Gate -> 'SQRT_SWAP_DAG'                            (55)
	Gate -> 'ISWAP'                                    (56)
	Gate -> 'FSWAP'                                    (57)
	Gate -> 'SWAP_THETA' Angle                         (58)
	Gate -> 'ROOT_SWAP' Integer                        (59)
	Gate -> 'ROOT_SWAP_DAG' Integer                    (60)
	LetVariable -> Var                                 (61)
	ListLetVariable ->                                 (62)
	ListLetVariable -> LetVariable                     (63)
	ListLetVariable -> LetVariable ',' ListLetVariable   (64)
	Tuple -> '(' Term ',' ListTerm ')'                 (65)
	Controls -> '[' Term ',' ListTerm ']'              (66)
	ListTerm -> Term                                   (67)
	ListTerm -> Term ',' ListTerm                      (68)
	ControlBasisStates -> '[' BasisState ',' ListBasisState ']'   (69)
	ListBasisState -> BasisState                       (70)
	ListBasisState -> BasisState ',' ListBasisState    (71)
	ControlBits -> '[' Integer ',' ListInteger ']'     (72)
	ListInteger -> Integer                             (73)
	ListInteger -> Integer ',' ListInteger             (74)
	Term3 -> BasisState                                (75)
	Term3 -> Gate                                      (76)
	Term3 -> Var                                       (77)
	Term3 -> Tuple                                     (78)
	Term3 -> '()'                                      (79)
	Term3 -> '(' Term ')'                              (80)
	Term1 -> 'if' Term 'then' Term 'else' Term         (81)
	Term1 -> 'let' '{' '(' LetVariable ',' ListLetVariable ')' '=' Term '}' 'in' Term   (82)
	Term1 -> LetVariable ',' ListLetVariable '<-' Term ';' Term   (83)
	Term1 -> 'case' Term 'of' CaseExpression ListCaseExpression   (84)
	Term1 -> Lambda FunctionType '.' Term              (85)
	Term1 -> 'with' Controls 'ctrl' ControlBasisStates   (86)
	Term1 -> 'with' Controls 'ctrl' ControlBits        (87)
	Term1 -> Term2 '$' Term1                           (88)
	Term1 -> Term2                                     (89)
	Term2 -> Term2 Term3                               (90)
	Term2 -> Term2 '.' Term3                           (91)
	Term2 -> Term3                                     (92)
	Term -> Term1                                      (93)
	CaseExpression -> Term '->' Var                    (94)
	ListCaseExpression -> CaseExpression               (95)
	ListCaseExpression -> CaseExpression ListCaseExpression   (96)
	Arg -> Var                                         (97)
	ListArg ->                                         (98)
	ListArg -> Arg ListArg                             (99)
	FunctionDefinition -> Var ListArg '=' Term         (100)
	FunctionDefinition -> FunctionDefinition ';'       (101)
	FunctionType -> Var '::' Type                      (102)
	FunctionType -> FunctionType ';'                   (103)
	FunctionDeclaration -> FunctionType ';' FunctionDefinition ';'   (104)
	ListFunctionDeclaration ->                         (105)
	ListFunctionDeclaration -> FunctionDeclaration ListFunctionDeclaration   (106)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	'!'            { PT _ (TS _ 1) }
	'$'            { PT _ (TS _ 2) }
	'('            { PT _ (TS _ 3) }
	'()'           { PT _ (TS _ 4) }
	')'            { PT _ (TS _ 5) }
	'*'            { PT _ (TS _ 6) }
	'**'           { PT _ (TS _ 7) }
	'+'            { PT _ (TS _ 8) }
	','            { PT _ (TS _ 9) }
	'->'           { PT _ (TS _ 10) }
	'.'            { PT _ (TS _ 11) }
	'::'           { PT _ (TS _ 12) }
	';'            { PT _ (TS _ 13) }
	'<-'           { PT _ (TS _ 14) }
	'='            { PT _ (TS _ 15) }
	'@+'           { PT _ (TS _ 16) }
	'@+i'          { PT _ (TS _ 17) }
	'@-'           { PT _ (TS _ 18) }
	'@-i'          { PT _ (TS _ 19) }
	'@0'           { PT _ (TS _ 20) }
	'@1'           { PT _ (TS _ 21) }
	'Bit'          { PT _ (TS _ 22) }
	'FSWAP'        { PT _ (TS _ 23) }
	'H'            { PT _ (TS _ 24) }
	'ID'           { PT _ (TS _ 25) }
	'ISWAP'        { PT _ (TS _ 26) }
	'Qbit'         { PT _ (TS _ 27) }
	'ROOT_SWAP'    { PT _ (TS _ 28) }
	'ROOT_SWAP_DAG'{ PT _ (TS _ 29) }
	'ROOT_X'       { PT _ (TS _ 30) }
	'ROOT_X_DAG'   { PT _ (TS _ 31) }
	'ROOT_Y'       { PT _ (TS _ 32) }
	'ROOT_Y_DAG'   { PT _ (TS _ 33) }
	'ROOT_Z'       { PT _ (TS _ 34) }
	'ROOT_Z_DAG'   { PT _ (TS _ 35) }
	'RX'           { PT _ (TS _ 36) }
	'RY'           { PT _ (TS _ 37) }
	'RZ'           { PT _ (TS _ 38) }
	'S'            { PT _ (TS _ 39) }
	'SQRT_SWAP'    { PT _ (TS _ 40) }
	'SQRT_SWAP_DAG'{ PT _ (TS _ 41) }
	'SQRT_X'       { PT _ (TS _ 42) }
	'SQRT_X_DAG'   { PT _ (TS _ 43) }
	'SQRT_Y'       { PT _ (TS _ 44) }
	'SQRT_Y_DAG'   { PT _ (TS _ 45) }
	'SWAP'         { PT _ (TS _ 46) }
	'SWAP_THETA'   { PT _ (TS _ 47) }
	'S_DAG'        { PT _ (TS _ 48) }
	'State'        { PT _ (TS _ 49) }
	'T'            { PT _ (TS _ 50) }
	'T_DAG'        { PT _ (TS _ 51) }
	'U1'           { PT _ (TS _ 52) }
	'U2'           { PT _ (TS _ 53) }
	'U3'           { PT _ (TS _ 54) }
	'Unitary'      { PT _ (TS _ 55) }
	'X'            { PT _ (TS _ 56) }
	'Y'            { PT _ (TS _ 57) }
	'Z'            { PT _ (TS _ 58) }
	'['            { PT _ (TS _ 59) }
	']'            { PT _ (TS _ 60) }
	'case'         { PT _ (TS _ 61) }
	'ctrl'         { PT _ (TS _ 62) }
	'else'         { PT _ (TS _ 63) }
	'if'           { PT _ (TS _ 64) }
	'in'           { PT _ (TS _ 65) }
	'let'          { PT _ (TS _ 66) }
	'of'           { PT _ (TS _ 67) }
	'then'         { PT _ (TS _ 68) }
	'with'         { PT _ (TS _ 69) }
	'{'            { PT _ (TS _ 70) }
	'}'            { PT _ (TS _ 71) }
	L_doubl        { PT _ (TD $$) }
	L_integ        { PT _ (TI $$) }
	L_Var          { PT _ (T_Var _) }
	L_Lambda       { PT _ (T_Lambda $$) }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_pProgram rule  0
	Double          rule  1
	Integer         rule  2
	Var             rule  3
	Lambda          rule  4
	Program         rule  5
	Type3           rules 6, 7, 8, 9, 10, 11
	Type2           rules 12, 13, 14
	Type1           rules 15, 16, 17
	Type            rules 18, 19
	Angle           rule  20
	BasisState      rules 21, 22, 23, 24, 25, 26
	Bit             rule  27
	Gate            rules 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60
	LetVariable     rule  61
	ListLetVariable rules 62, 63, 64
	Tuple           rule  65
	Controls        rule  66
	ListTerm        rules 67, 68
	ControlBasisStates rule  69
	ListBasisState  rules 70, 71
	ControlBits     rule  72
	ListInteger     rules 73, 74
	Term3           rules 75, 76, 77, 78, 79, 80
	Term1           rules 81, 82, 83, 84, 85, 86, 87, 88, 89
	Term2           rules 90, 91, 92
	Term            rule  93
	CaseExpression  rule  94
	ListCaseExpression rules 95, 96
	Arg             rule  97
	ListArg         rules 98, 99
	FunctionDefinition rules 100, 101
	FunctionType    rules 102, 103
	FunctionDeclaration rule  104
	ListFunctionDeclaration rules 105, 106

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0

	%start_pProgram -> . Program                        (rule 0)

	L_Var          shift, and enter state 8
	%eof           reduce using rule 105

	Var            goto state 3
	Program        goto state 4
	FunctionType   goto state 5
	FunctionDeclarationgoto state 6
	ListFunctionDeclarationgoto state 7

State 1

	Double -> . L_doubl                                 (rule 1)

	L_doubl        shift, and enter state 2


State 2

	Double -> L_doubl .                                 (rule 1)

	'$'            reduce using rule 1
	'('            reduce using rule 1
	'()'           reduce using rule 1
	')'            reduce using rule 1
	','            reduce using rule 1
	'->'           reduce using rule 1
	'.'            reduce using rule 1
	';'            reduce using rule 1
	'@+'           reduce using rule 1
	'@+i'          reduce using rule 1
	'@-'           reduce using rule 1
	'@-i'          reduce using rule 1
	'@0'           reduce using rule 1
	'@1'           reduce using rule 1
	'FSWAP'        reduce using rule 1
	'H'            reduce using rule 1
	'ID'           reduce using rule 1
	'ISWAP'        reduce using rule 1
	'ROOT_SWAP'    reduce using rule 1
	'ROOT_SWAP_DAG'reduce using rule 1
	'ROOT_X'       reduce using rule 1
	'ROOT_X_DAG'   reduce using rule 1
	'ROOT_Y'       reduce using rule 1
	'ROOT_Y_DAG'   reduce using rule 1
	'ROOT_Z'       reduce using rule 1
	'ROOT_Z_DAG'   reduce using rule 1
	'RX'           reduce using rule 1
	'RY'           reduce using rule 1
	'RZ'           reduce using rule 1
	'S'            reduce using rule 1
	'SQRT_SWAP'    reduce using rule 1
	'SQRT_SWAP_DAG'reduce using rule 1
	'SQRT_X'       reduce using rule 1
	'SQRT_X_DAG'   reduce using rule 1
	'SQRT_Y'       reduce using rule 1
	'SQRT_Y_DAG'   reduce using rule 1
	'SWAP'         reduce using rule 1
	'SWAP_THETA'   reduce using rule 1
	'S_DAG'        reduce using rule 1
	'T'            reduce using rule 1
	'T_DAG'        reduce using rule 1
	'U1'           reduce using rule 1
	'U2'           reduce using rule 1
	'U3'           reduce using rule 1
	'X'            reduce using rule 1
	'Y'            reduce using rule 1
	'Z'            reduce using rule 1
	']'            reduce using rule 1
	'else'         reduce using rule 1
	'of'           reduce using rule 1
	'then'         reduce using rule 1
	'}'            reduce using rule 1
	L_Var          reduce using rule 1


State 3

	FunctionType -> Var . '::' Type                     (rule 102)

	'::'           shift, and enter state 11


State 4

	%start_pProgram -> Program .                        (rule 0)

	%eof           accept


State 5

	FunctionType -> FunctionType . ';'                  (rule 103)
	FunctionDeclaration -> FunctionType . ';' FunctionDefinition ';'    (rule 104)

	';'            shift, and enter state 10


State 6

	ListFunctionDeclaration -> FunctionDeclaration . ListFunctionDeclaration    (rule 106)

	L_Var          shift, and enter state 8
	%eof           reduce using rule 105

	Var            goto state 3
	FunctionType   goto state 5
	FunctionDeclarationgoto state 6
	ListFunctionDeclarationgoto state 9

State 7

	Program -> ListFunctionDeclaration .                (rule 5)

	%eof           reduce using rule 5


State 8

	Var -> L_Var .                                      (rule 3)

	'$'            reduce using rule 3
	'('            reduce using rule 3
	'()'           reduce using rule 3
	')'            reduce using rule 3
	','            reduce using rule 3
	'->'           reduce using rule 3
	'.'            reduce using rule 3
	'::'           reduce using rule 3
	';'            reduce using rule 3
	'<-'           reduce using rule 3
	'='            reduce using rule 3
	'@+'           reduce using rule 3
	'@+i'          reduce using rule 3
	'@-'           reduce using rule 3
	'@-i'          reduce using rule 3
	'@0'           reduce using rule 3
	'@1'           reduce using rule 3
	'FSWAP'        reduce using rule 3
	'H'            reduce using rule 3
	'ID'           reduce using rule 3
	'ISWAP'        reduce using rule 3
	'ROOT_SWAP'    reduce using rule 3
	'ROOT_SWAP_DAG'reduce using rule 3
	'ROOT_X'       reduce using rule 3
	'ROOT_X_DAG'   reduce using rule 3
	'ROOT_Y'       reduce using rule 3
	'ROOT_Y_DAG'   reduce using rule 3
	'ROOT_Z'       reduce using rule 3
	'ROOT_Z_DAG'   reduce using rule 3
	'RX'           reduce using rule 3
	'RY'           reduce using rule 3
	'RZ'           reduce using rule 3
	'S'            reduce using rule 3
	'SQRT_SWAP'    reduce using rule 3
	'SQRT_SWAP_DAG'reduce using rule 3
	'SQRT_X'       reduce using rule 3
	'SQRT_X_DAG'   reduce using rule 3
	'SQRT_Y'       reduce using rule 3
	'SQRT_Y_DAG'   reduce using rule 3
	'SWAP'         reduce using rule 3
	'SWAP_THETA'   reduce using rule 3
	'S_DAG'        reduce using rule 3
	'T'            reduce using rule 3
	'T_DAG'        reduce using rule 3
	'U1'           reduce using rule 3
	'U2'           reduce using rule 3
	'U3'           reduce using rule 3
	'X'            reduce using rule 3
	'Y'            reduce using rule 3
	'Z'            reduce using rule 3
	']'            reduce using rule 3
	'case'         reduce using rule 3
	'else'         reduce using rule 3
	'if'           reduce using rule 3
	'let'          reduce using rule 3
	'of'           reduce using rule 3
	'then'         reduce using rule 3
	'with'         reduce using rule 3
	'}'            reduce using rule 3
	L_Var          reduce using rule 3
	L_Lambda       reduce using rule 3


State 9

	ListFunctionDeclaration -> FunctionDeclaration ListFunctionDeclaration .    (rule 106)

	%eof           reduce using rule 106


State 10

	FunctionType -> FunctionType ';' .                  (rule 103)
	FunctionDeclaration -> FunctionType ';' . FunctionDefinition ';'    (rule 104)

	';'            reduce using rule 103
	L_Var          shift, and enter state 8

	Var            goto state 23
	FunctionDefinitiongoto state 24

State 11

	FunctionType -> Var '::' . Type                     (rule 102)

	'!'            shift, and enter state 16
	'('            shift, and enter state 17
	'()'           shift, and enter state 18
	'Bit'          shift, and enter state 19
	'Qbit'         shift, and enter state 20
	'State'        shift, and enter state 21
	'Unitary'      shift, and enter state 22

	Type3          goto state 12
	Type2          goto state 13
	Type1          goto state 14
	Type           goto state 15

State 12

	Type2 -> Type3 . '**' Integer                       (rule 13)
	Type2 -> Type3 .                                    (rule 14)

	')'            reduce using rule 14
	'*'            reduce using rule 14
	'**'           shift, and enter state 34
	'+'            reduce using rule 14
	'->'           reduce using rule 14
	'.'            reduce using rule 14
	';'            reduce using rule 14


State 13

	Type1 -> Type2 . '+' Type1                          (rule 15)
	Type1 -> Type2 . '*' Type1                          (rule 16)
	Type1 -> Type2 .                                    (rule 17)

	')'            reduce using rule 17
	'*'            shift, and enter state 32
	'+'            shift, and enter state 33
	'->'           reduce using rule 17
	'.'            reduce using rule 17
	';'            reduce using rule 17


State 14

	Type -> Type1 . '->' Type                           (rule 18)
	Type -> Type1 .                                     (rule 19)

	')'            reduce using rule 19
	'->'           shift, and enter state 31
	'.'            reduce using rule 19
	';'            reduce using rule 19


State 15

	FunctionType -> Var '::' Type .                     (rule 102)

	'.'            reduce using rule 102
	';'            reduce using rule 102


State 16

	Type2 -> '!' . Type3                                (rule 12)

	'('            shift, and enter state 17
	'()'           shift, and enter state 18
	'Bit'          shift, and enter state 19
	'Qbit'         shift, and enter state 20
	'State'        shift, and enter state 21
	'Unitary'      shift, and enter state 22

	Type3          goto state 30

State 17

	Type3 -> '(' . Type ')'                             (rule 11)

	'!'            shift, and enter state 16
	'('            shift, and enter state 17
	'()'           shift, and enter state 18
	'Bit'          shift, and enter state 19
	'Qbit'         shift, and enter state 20
	'State'        shift, and enter state 21
	'Unitary'      shift, and enter state 22

	Type3          goto state 12
	Type2          goto state 13
	Type1          goto state 14
	Type           goto state 29

State 18

	Type3 -> '()' .                                     (rule 10)

	')'            reduce using rule 10
	'*'            reduce using rule 10
	'**'           reduce using rule 10
	'+'            reduce using rule 10
	'->'           reduce using rule 10
	'.'            reduce using rule 10
	';'            reduce using rule 10


State 19

	Type3 -> 'Bit' .                                    (rule 6)

	')'            reduce using rule 6
	'*'            reduce using rule 6
	'**'           reduce using rule 6
	'+'            reduce using rule 6
	'->'           reduce using rule 6
	'.'            reduce using rule 6
	';'            reduce using rule 6


State 20

	Type3 -> 'Qbit' .                                   (rule 7)

	')'            reduce using rule 7
	'*'            reduce using rule 7
	'**'           reduce using rule 7
	'+'            reduce using rule 7
	'->'           reduce using rule 7
	'.'            reduce using rule 7
	';'            reduce using rule 7


State 21

	Type3 -> 'State' .                                  (rule 8)

	')'            reduce using rule 8
	'*'            reduce using rule 8
	'**'           reduce using rule 8
	'+'            reduce using rule 8
	'->'           reduce using rule 8
	'.'            reduce using rule 8
	';'            reduce using rule 8


State 22

	Type3 -> 'Unitary' .                                (rule 9)

	')'            reduce using rule 9
	'*'            reduce using rule 9
	'**'           reduce using rule 9
	'+'            reduce using rule 9
	'->'           reduce using rule 9
	'.'            reduce using rule 9
	';'            reduce using rule 9


State 23

	FunctionDefinition -> Var . ListArg '=' Term        (rule 100)

	'='            reduce using rule 98
	L_Var          shift, and enter state 8

	Var            goto state 26
	Arg            goto state 27
	ListArg        goto state 28

State 24

	FunctionDefinition -> FunctionDefinition . ';'      (rule 101)
	FunctionDeclaration -> FunctionType ';' FunctionDefinition . ';'    (rule 104)

	';'            shift, and enter state 25


State 25

	FunctionDefinition -> FunctionDefinition ';' .      (rule 101)
	FunctionDeclaration -> FunctionType ';' FunctionDefinition ';' .    (rule 104)

	';'            reduce using rule 101
	L_Var          reduce using rule 104
	%eof           reduce using rule 104


State 26

	Arg -> Var .                                        (rule 97)

	'='            reduce using rule 97
	L_Var          reduce using rule 97


State 27

	ListArg -> Arg . ListArg                            (rule 99)

	'='            reduce using rule 98
	L_Var          shift, and enter state 8

	Var            goto state 26
	Arg            goto state 27
	ListArg        goto state 42

State 28

	FunctionDefinition -> Var ListArg . '=' Term        (rule 100)

	'='            shift, and enter state 41


State 29

	Type3 -> '(' Type . ')'                             (rule 11)

	')'            shift, and enter state 40


State 30

	Type2 -> '!' Type3 .                                (rule 12)

	')'            reduce using rule 12
	'*'            reduce using rule 12
	'+'            reduce using rule 12
	'->'           reduce using rule 12
	'.'            reduce using rule 12
	';'            reduce using rule 12


State 31

	Type -> Type1 '->' . Type                           (rule 18)

	'!'            shift, and enter state 16
	'('            shift, and enter state 17
	'()'           shift, and enter state 18
	'Bit'          shift, and enter state 19
	'Qbit'         shift, and enter state 20
	'State'        shift, and enter state 21
	'Unitary'      shift, and enter state 22

	Type3          goto state 12
	Type2          goto state 13
	Type1          goto state 14
	Type           goto state 39

State 32

	Type1 -> Type2 '*' . Type1                          (rule 16)

	'!'            shift, and enter state 16
	'('            shift, and enter state 17
	'()'           shift, and enter state 18
	'Bit'          shift, and enter state 19
	'Qbit'         shift, and enter state 20
	'State'        shift, and enter state 21
	'Unitary'      shift, and enter state 22

	Type3          goto state 12
	Type2          goto state 13
	Type1          goto state 38

State 33

	Type1 -> Type2 '+' . Type1                          (rule 15)

	'!'            shift, and enter state 16
	'('            shift, and enter state 17
	'()'           shift, and enter state 18
	'Bit'          shift, and enter state 19
	'Qbit'         shift, and enter state 20
	'State'        shift, and enter state 21
	'Unitary'      shift, and enter state 22

	Type3          goto state 12
	Type2          goto state 13
	Type1          goto state 37

State 34

	Type2 -> Type3 '**' . Integer                       (rule 13)

	L_integ        shift, and enter state 36

	Integer        goto state 35

State 35

	Type2 -> Type3 '**' Integer .                       (rule 13)

	')'            reduce using rule 13
	'*'            reduce using rule 13
	'+'            reduce using rule 13
	'->'           reduce using rule 13
	'.'            reduce using rule 13
	';'            reduce using rule 13


State 36

	Integer -> L_integ .                                (rule 2)

	'$'            reduce using rule 2
	'('            reduce using rule 2
	'()'           reduce using rule 2
	')'            reduce using rule 2
	'*'            reduce using rule 2
	'+'            reduce using rule 2
	','            reduce using rule 2
	'->'           reduce using rule 2
	'.'            reduce using rule 2
	';'            reduce using rule 2
	'@+'           reduce using rule 2
	'@+i'          reduce using rule 2
	'@-'           reduce using rule 2
	'@-i'          reduce using rule 2
	'@0'           reduce using rule 2
	'@1'           reduce using rule 2
	'FSWAP'        reduce using rule 2
	'H'            reduce using rule 2
	'ID'           reduce using rule 2
	'ISWAP'        reduce using rule 2
	'ROOT_SWAP'    reduce using rule 2
	'ROOT_SWAP_DAG'reduce using rule 2
	'ROOT_X'       reduce using rule 2
	'ROOT_X_DAG'   reduce using rule 2
	'ROOT_Y'       reduce using rule 2
	'ROOT_Y_DAG'   reduce using rule 2
	'ROOT_Z'       reduce using rule 2
	'ROOT_Z_DAG'   reduce using rule 2
	'RX'           reduce using rule 2
	'RY'           reduce using rule 2
	'RZ'           reduce using rule 2
	'S'            reduce using rule 2
	'SQRT_SWAP'    reduce using rule 2
	'SQRT_SWAP_DAG'reduce using rule 2
	'SQRT_X'       reduce using rule 2
	'SQRT_X_DAG'   reduce using rule 2
	'SQRT_Y'       reduce using rule 2
	'SQRT_Y_DAG'   reduce using rule 2
	'SWAP'         reduce using rule 2
	'SWAP_THETA'   reduce using rule 2
	'S_DAG'        reduce using rule 2
	'T'            reduce using rule 2
	'T_DAG'        reduce using rule 2
	'U1'           reduce using rule 2
	'U2'           reduce using rule 2
	'U3'           reduce using rule 2
	'X'            reduce using rule 2
	'Y'            reduce using rule 2
	'Z'            reduce using rule 2
	']'            reduce using rule 2
	'else'         reduce using rule 2
	'of'           reduce using rule 2
	'then'         reduce using rule 2
	'}'            reduce using rule 2
	L_Var          reduce using rule 2


State 37

	Type1 -> Type2 '+' Type1 .                          (rule 15)

	')'            reduce using rule 15
	'->'           reduce using rule 15
	'.'            reduce using rule 15
	';'            reduce using rule 15


State 38

	Type1 -> Type2 '*' Type1 .                          (rule 16)

	')'            reduce using rule 16
	'->'           reduce using rule 16
	'.'            reduce using rule 16
	';'            reduce using rule 16


State 39

	Type -> Type1 '->' Type .                           (rule 18)

	')'            reduce using rule 18
	'.'            reduce using rule 18
	';'            reduce using rule 18


State 40

	Type3 -> '(' Type ')' .                             (rule 11)

	')'            reduce using rule 11
	'*'            reduce using rule 11
	'**'           reduce using rule 11
	'+'            reduce using rule 11
	'->'           reduce using rule 11
	'.'            reduce using rule 11
	';'            reduce using rule 11


State 41

	FunctionDefinition -> Var ListArg '=' . Term        (rule 100)

	'('            shift, and enter state 53
	'()'           shift, and enter state 54
	'@+'           shift, and enter state 55
	'@+i'          shift, and enter state 56
	'@-'           shift, and enter state 57
	'@-i'          shift, and enter state 58
	'@0'           shift, and enter state 59
	'@1'           shift, and enter state 60
	'FSWAP'        shift, and enter state 61
	'H'            shift, and enter state 62
	'ID'           shift, and enter state 63
	'ISWAP'        shift, and enter state 64
	'ROOT_SWAP'    shift, and enter state 65
	'ROOT_SWAP_DAG'shift, and enter state 66
	'ROOT_X'       shift, and enter state 67
	'ROOT_X_DAG'   shift, and enter state 68
	'ROOT_Y'       shift, and enter state 69
	'ROOT_Y_DAG'   shift, and enter state 70
	'ROOT_Z'       shift, and enter state 71
	'ROOT_Z_DAG'   shift, and enter state 72
	'RX'           shift, and enter state 73
	'RY'           shift, and enter state 74
	'RZ'           shift, and enter state 75
	'S'            shift, and enter state 76
	'SQRT_SWAP'    shift, and enter state 77
	'SQRT_SWAP_DAG'shift, and enter state 78
	'SQRT_X'       shift, and enter state 79
	'SQRT_X_DAG'   shift, and enter state 80
	'SQRT_Y'       shift, and enter state 81
	'SQRT_Y_DAG'   shift, and enter state 82
	'SWAP'         shift, and enter state 83
	'SWAP_THETA'   shift, and enter state 84
	'S_DAG'        shift, and enter state 85
	'T'            shift, and enter state 86
	'T_DAG'        shift, and enter state 87
	'U1'           shift, and enter state 88
	'U2'           shift, and enter state 89
	'U3'           shift, and enter state 90
	'X'            shift, and enter state 91
	'Y'            shift, and enter state 92
	'Z'            shift, and enter state 93
	'case'         shift, and enter state 94
	'if'           shift, and enter state 95
	'let'          shift, and enter state 96
	'with'         shift, and enter state 97
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 98

	Var            goto state 43
	Lambda         goto state 44
	BasisState     goto state 45
	Gate           goto state 46
	LetVariable    goto state 47
	Tuple          goto state 48
	Term3          goto state 49
	Term1          goto state 50
	Term2          goto state 51
	Term           goto state 52

State 42

	ListArg -> Arg ListArg .                            (rule 99)

	'='            reduce using rule 99


State 43

	LetVariable -> Var .                                (rule 61)
	Term3 -> Var .                                      (rule 77)

	'$'            reduce using rule 77
	'('            reduce using rule 77
	'()'           reduce using rule 77
	')'            reduce using rule 77
	','            reduce using rule 77
			(reduce using rule 61)

	'->'           reduce using rule 77
	'.'            reduce using rule 77
	';'            reduce using rule 77
	'@+'           reduce using rule 77
	'@+i'          reduce using rule 77
	'@-'           reduce using rule 77
	'@-i'          reduce using rule 77
	'@0'           reduce using rule 77
	'@1'           reduce using rule 77
	'FSWAP'        reduce using rule 77
	'H'            reduce using rule 77
	'ID'           reduce using rule 77
	'ISWAP'        reduce using rule 77
	'ROOT_SWAP'    reduce using rule 77
	'ROOT_SWAP_DAG'reduce using rule 77
	'ROOT_X'       reduce using rule 77
	'ROOT_X_DAG'   reduce using rule 77
	'ROOT_Y'       reduce using rule 77
	'ROOT_Y_DAG'   reduce using rule 77
	'ROOT_Z'       reduce using rule 77
	'ROOT_Z_DAG'   reduce using rule 77
	'RX'           reduce using rule 77
	'RY'           reduce using rule 77
	'RZ'           reduce using rule 77
	'S'            reduce using rule 77
	'SQRT_SWAP'    reduce using rule 77
	'SQRT_SWAP_DAG'reduce using rule 77
	'SQRT_X'       reduce using rule 77
	'SQRT_X_DAG'   reduce using rule 77
	'SQRT_Y'       reduce using rule 77
	'SQRT_Y_DAG'   reduce using rule 77
	'SWAP'         reduce using rule 77
	'SWAP_THETA'   reduce using rule 77
	'S_DAG'        reduce using rule 77
	'T'            reduce using rule 77
	'T_DAG'        reduce using rule 77
	'U1'           reduce using rule 77
	'U2'           reduce using rule 77
	'U3'           reduce using rule 77
	'X'            reduce using rule 77
	'Y'            reduce using rule 77
	'Z'            reduce using rule 77
	']'            reduce using rule 77
	'else'         reduce using rule 77
	'of'           reduce using rule 77
	'then'         reduce using rule 77
	'}'            reduce using rule 77
	L_Var          reduce using rule 77


State 44

	Term1 -> Lambda . FunctionType '.' Term             (rule 85)

	L_Var          shift, and enter state 8

	Var            goto state 3
	FunctionType   goto state 126

State 45

	Term3 -> BasisState .                               (rule 75)

	'$'            reduce using rule 75
	'('            reduce using rule 75
	'()'           reduce using rule 75
	')'            reduce using rule 75
	','            reduce using rule 75
	'->'           reduce using rule 75
	'.'            reduce using rule 75
	';'            reduce using rule 75
	'@+'           reduce using rule 75
	'@+i'          reduce using rule 75
	'@-'           reduce using rule 75
	'@-i'          reduce using rule 75
	'@0'           reduce using rule 75
	'@1'           reduce using rule 75
	'FSWAP'        reduce using rule 75
	'H'            reduce using rule 75
	'ID'           reduce using rule 75
	'ISWAP'        reduce using rule 75
	'ROOT_SWAP'    reduce using rule 75
	'ROOT_SWAP_DAG'reduce using rule 75
	'ROOT_X'       reduce using rule 75
	'ROOT_X_DAG'   reduce using rule 75
	'ROOT_Y'       reduce using rule 75
	'ROOT_Y_DAG'   reduce using rule 75
	'ROOT_Z'       reduce using rule 75
	'ROOT_Z_DAG'   reduce using rule 75
	'RX'           reduce using rule 75
	'RY'           reduce using rule 75
	'RZ'           reduce using rule 75
	'S'            reduce using rule 75
	'SQRT_SWAP'    reduce using rule 75
	'SQRT_SWAP_DAG'reduce using rule 75
	'SQRT_X'       reduce using rule 75
	'SQRT_X_DAG'   reduce using rule 75
	'SQRT_Y'       reduce using rule 75
	'SQRT_Y_DAG'   reduce using rule 75
	'SWAP'         reduce using rule 75
	'SWAP_THETA'   reduce using rule 75
	'S_DAG'        reduce using rule 75
	'T'            reduce using rule 75
	'T_DAG'        reduce using rule 75
	'U1'           reduce using rule 75
	'U2'           reduce using rule 75
	'U3'           reduce using rule 75
	'X'            reduce using rule 75
	'Y'            reduce using rule 75
	'Z'            reduce using rule 75
	']'            reduce using rule 75
	'else'         reduce using rule 75
	'of'           reduce using rule 75
	'then'         reduce using rule 75
	'}'            reduce using rule 75
	L_Var          reduce using rule 75


State 46

	Term3 -> Gate .                                     (rule 76)

	'$'            reduce using rule 76
	'('            reduce using rule 76
	'()'           reduce using rule 76
	')'            reduce using rule 76
	','            reduce using rule 76
	'->'           reduce using rule 76
	'.'            reduce using rule 76
	';'            reduce using rule 76
	'@+'           reduce using rule 76
	'@+i'          reduce using rule 76
	'@-'           reduce using rule 76
	'@-i'          reduce using rule 76
	'@0'           reduce using rule 76
	'@1'           reduce using rule 76
	'FSWAP'        reduce using rule 76
	'H'            reduce using rule 76
	'ID'           reduce using rule 76
	'ISWAP'        reduce using rule 76
	'ROOT_SWAP'    reduce using rule 76
	'ROOT_SWAP_DAG'reduce using rule 76
	'ROOT_X'       reduce using rule 76
	'ROOT_X_DAG'   reduce using rule 76
	'ROOT_Y'       reduce using rule 76
	'ROOT_Y_DAG'   reduce using rule 76
	'ROOT_Z'       reduce using rule 76
	'ROOT_Z_DAG'   reduce using rule 76
	'RX'           reduce using rule 76
	'RY'           reduce using rule 76
	'RZ'           reduce using rule 76
	'S'            reduce using rule 76
	'SQRT_SWAP'    reduce using rule 76
	'SQRT_SWAP_DAG'reduce using rule 76
	'SQRT_X'       reduce using rule 76
	'SQRT_X_DAG'   reduce using rule 76
	'SQRT_Y'       reduce using rule 76
	'SQRT_Y_DAG'   reduce using rule 76
	'SWAP'         reduce using rule 76
	'SWAP_THETA'   reduce using rule 76
	'S_DAG'        reduce using rule 76
	'T'            reduce using rule 76
	'T_DAG'        reduce using rule 76
	'U1'           reduce using rule 76
	'U2'           reduce using rule 76
	'U3'           reduce using rule 76
	'X'            reduce using rule 76
	'Y'            reduce using rule 76
	'Z'            reduce using rule 76
	']'            reduce using rule 76
	'else'         reduce using rule 76
	'of'           reduce using rule 76
	'then'         reduce using rule 76
	'}'            reduce using rule 76
	L_Var          reduce using rule 76


State 47

	Term1 -> LetVariable . ',' ListLetVariable '<-' Term ';' Term    (rule 83)

	','            shift, and enter state 125


State 48

	Term3 -> Tuple .                                    (rule 78)

	'$'            reduce using rule 78
	'('            reduce using rule 78
	'()'           reduce using rule 78
	')'            reduce using rule 78
	','            reduce using rule 78
	'->'           reduce using rule 78
	'.'            reduce using rule 78
	';'            reduce using rule 78
	'@+'           reduce using rule 78
	'@+i'          reduce using rule 78
	'@-'           reduce using rule 78
	'@-i'          reduce using rule 78
	'@0'           reduce using rule 78
	'@1'           reduce using rule 78
	'FSWAP'        reduce using rule 78
	'H'            reduce using rule 78
	'ID'           reduce using rule 78
	'ISWAP'        reduce using rule 78
	'ROOT_SWAP'    reduce using rule 78
	'ROOT_SWAP_DAG'reduce using rule 78
	'ROOT_X'       reduce using rule 78
	'ROOT_X_DAG'   reduce using rule 78
	'ROOT_Y'       reduce using rule 78
	'ROOT_Y_DAG'   reduce using rule 78
	'ROOT_Z'       reduce using rule 78
	'ROOT_Z_DAG'   reduce using rule 78
	'RX'           reduce using rule 78
	'RY'           reduce using rule 78
	'RZ'           reduce using rule 78
	'S'            reduce using rule 78
	'SQRT_SWAP'    reduce using rule 78
	'SQRT_SWAP_DAG'reduce using rule 78
	'SQRT_X'       reduce using rule 78
	'SQRT_X_DAG'   reduce using rule 78
	'SQRT_Y'       reduce using rule 78
	'SQRT_Y_DAG'   reduce using rule 78
	'SWAP'         reduce using rule 78
	'SWAP_THETA'   reduce using rule 78
	'S_DAG'        reduce using rule 78
	'T'            reduce using rule 78
	'T_DAG'        reduce using rule 78
	'U1'           reduce using rule 78
	'U2'           reduce using rule 78
	'U3'           reduce using rule 78
	'X'            reduce using rule 78
	'Y'            reduce using rule 78
	'Z'            reduce using rule 78
	']'            reduce using rule 78
	'else'         reduce using rule 78
	'of'           reduce using rule 78
	'then'         reduce using rule 78
	'}'            reduce using rule 78
	L_Var          reduce using rule 78


State 49

	Term2 -> Term3 .                                    (rule 92)

	'$'            reduce using rule 92
	'('            reduce using rule 92
	'()'           reduce using rule 92
	')'            reduce using rule 92
	','            reduce using rule 92
	'->'           reduce using rule 92
	'.'            reduce using rule 92
	';'            reduce using rule 92
	'@+'           reduce using rule 92
	'@+i'          reduce using rule 92
	'@-'           reduce using rule 92
	'@-i'          reduce using rule 92
	'@0'           reduce using rule 92
	'@1'           reduce using rule 92
	'FSWAP'        reduce using rule 92
	'H'            reduce using rule 92
	'ID'           reduce using rule 92
	'ISWAP'        reduce using rule 92
	'ROOT_SWAP'    reduce using rule 92
	'ROOT_SWAP_DAG'reduce using rule 92
	'ROOT_X'       reduce using rule 92
	'ROOT_X_DAG'   reduce using rule 92
	'ROOT_Y'       reduce using rule 92
	'ROOT_Y_DAG'   reduce using rule 92
	'ROOT_Z'       reduce using rule 92
	'ROOT_Z_DAG'   reduce using rule 92
	'RX'           reduce using rule 92
	'RY'           reduce using rule 92
	'RZ'           reduce using rule 92
	'S'            reduce using rule 92
	'SQRT_SWAP'    reduce using rule 92
	'SQRT_SWAP_DAG'reduce using rule 92
	'SQRT_X'       reduce using rule 92
	'SQRT_X_DAG'   reduce using rule 92
	'SQRT_Y'       reduce using rule 92
	'SQRT_Y_DAG'   reduce using rule 92
	'SWAP'         reduce using rule 92
	'SWAP_THETA'   reduce using rule 92
	'S_DAG'        reduce using rule 92
	'T'            reduce using rule 92
	'T_DAG'        reduce using rule 92
	'U1'           reduce using rule 92
	'U2'           reduce using rule 92
	'U3'           reduce using rule 92
	'X'            reduce using rule 92
	'Y'            reduce using rule 92
	'Z'            reduce using rule 92
	']'            reduce using rule 92
	'else'         reduce using rule 92
	'of'           reduce using rule 92
	'then'         reduce using rule 92
	'}'            reduce using rule 92
	L_Var          reduce using rule 92


State 50

	Term -> Term1 .                                     (rule 93)

	')'            reduce using rule 93
	','            reduce using rule 93
	'->'           reduce using rule 93
	';'            reduce using rule 93
	']'            reduce using rule 93
	'else'         reduce using rule 93
	'of'           reduce using rule 93
	'then'         reduce using rule 93
	'}'            reduce using rule 93


State 51

	Term1 -> Term2 . '$' Term1                          (rule 88)
	Term1 -> Term2 .                                    (rule 89)
	Term2 -> Term2 . Term3                              (rule 90)
	Term2 -> Term2 . '.' Term3                          (rule 91)

	'$'            shift, and enter state 123
	'('            shift, and enter state 53
	'()'           shift, and enter state 54
	')'            reduce using rule 89
	','            reduce using rule 89
	'->'           reduce using rule 89
	'.'            shift, and enter state 124
	';'            reduce using rule 89
	'@+'           shift, and enter state 55
	'@+i'          shift, and enter state 56
	'@-'           shift, and enter state 57
	'@-i'          shift, and enter state 58
	'@0'           shift, and enter state 59
	'@1'           shift, and enter state 60
	'FSWAP'        shift, and enter state 61
	'H'            shift, and enter state 62
	'ID'           shift, and enter state 63
	'ISWAP'        shift, and enter state 64
	'ROOT_SWAP'    shift, and enter state 65
	'ROOT_SWAP_DAG'shift, and enter state 66
	'ROOT_X'       shift, and enter state 67
	'ROOT_X_DAG'   shift, and enter state 68
	'ROOT_Y'       shift, and enter state 69
	'ROOT_Y_DAG'   shift, and enter state 70
	'ROOT_Z'       shift, and enter state 71
	'ROOT_Z_DAG'   shift, and enter state 72
	'RX'           shift, and enter state 73
	'RY'           shift, and enter state 74
	'RZ'           shift, and enter state 75
	'S'            shift, and enter state 76
	'SQRT_SWAP'    shift, and enter state 77
	'SQRT_SWAP_DAG'shift, and enter state 78
	'SQRT_X'       shift, and enter state 79
	'SQRT_X_DAG'   shift, and enter state 80
	'SQRT_Y'       shift, and enter state 81
	'SQRT_Y_DAG'   shift, and enter state 82
	'SWAP'         shift, and enter state 83
	'SWAP_THETA'   shift, and enter state 84
	'S_DAG'        shift, and enter state 85
	'T'            shift, and enter state 86
	'T_DAG'        shift, and enter state 87
	'U1'           shift, and enter state 88
	'U2'           shift, and enter state 89
	'U3'           shift, and enter state 90
	'X'            shift, and enter state 91
	'Y'            shift, and enter state 92
	'Z'            shift, and enter state 93
	']'            reduce using rule 89
	'else'         reduce using rule 89
	'of'           reduce using rule 89
	'then'         reduce using rule 89
	'}'            reduce using rule 89
	L_Var          shift, and enter state 8

	Var            goto state 121
	BasisState     goto state 45
	Gate           goto state 46
	Tuple          goto state 48
	Term3          goto state 122

State 52

	FunctionDefinition -> Var ListArg '=' Term .        (rule 100)

	';'            reduce using rule 100


State 53

	Tuple -> '(' . Term ',' ListTerm ')'                (rule 65)
	Term3 -> '(' . Term ')'                             (rule 80)

	'('            shift, and enter state 53
	'()'           shift, and enter state 54
	'@+'           shift, and enter state 55
	'@+i'          shift, and enter state 56
	'@-'           shift, and enter state 57
	'@-i'          shift, and enter state 58
	'@0'           shift, and enter state 59
	'@1'           shift, and enter state 60
	'FSWAP'        shift, and enter state 61
	'H'            shift, and enter state 62
	'ID'           shift, and enter state 63
	'ISWAP'        shift, and enter state 64
	'ROOT_SWAP'    shift, and enter state 65
	'ROOT_SWAP_DAG'shift, and enter state 66
	'ROOT_X'       shift, and enter state 67
	'ROOT_X_DAG'   shift, and enter state 68
	'ROOT_Y'       shift, and enter state 69
	'ROOT_Y_DAG'   shift, and enter state 70
	'ROOT_Z'       shift, and enter state 71
	'ROOT_Z_DAG'   shift, and enter state 72
	'RX'           shift, and enter state 73
	'RY'           shift, and enter state 74
	'RZ'           shift, and enter state 75
	'S'            shift, and enter state 76
	'SQRT_SWAP'    shift, and enter state 77
	'SQRT_SWAP_DAG'shift, and enter state 78
	'SQRT_X'       shift, and enter state 79
	'SQRT_X_DAG'   shift, and enter state 80
	'SQRT_Y'       shift, and enter state 81
	'SQRT_Y_DAG'   shift, and enter state 82
	'SWAP'         shift, and enter state 83
	'SWAP_THETA'   shift, and enter state 84
	'S_DAG'        shift, and enter state 85
	'T'            shift, and enter state 86
	'T_DAG'        shift, and enter state 87
	'U1'           shift, and enter state 88
	'U2'           shift, and enter state 89
	'U3'           shift, and enter state 90
	'X'            shift, and enter state 91
	'Y'            shift, and enter state 92
	'Z'            shift, and enter state 93
	'case'         shift, and enter state 94
	'if'           shift, and enter state 95
	'let'          shift, and enter state 96
	'with'         shift, and enter state 97
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 98

	Var            goto state 43
	Lambda         goto state 44
	BasisState     goto state 45
	Gate           goto state 46
	LetVariable    goto state 47
	Tuple          goto state 48
	Term3          goto state 49
	Term1          goto state 50
	Term2          goto state 51
	Term           goto state 120

State 54

	Term3 -> '()' .                                     (rule 79)

	'$'            reduce using rule 79
	'('            reduce using rule 79
	'()'           reduce using rule 79
	')'            reduce using rule 79
	','            reduce using rule 79
	'->'           reduce using rule 79
	'.'            reduce using rule 79
	';'            reduce using rule 79
	'@+'           reduce using rule 79
	'@+i'          reduce using rule 79
	'@-'           reduce using rule 79
	'@-i'          reduce using rule 79
	'@0'           reduce using rule 79
	'@1'           reduce using rule 79
	'FSWAP'        reduce using rule 79
	'H'            reduce using rule 79
	'ID'           reduce using rule 79
	'ISWAP'        reduce using rule 79
	'ROOT_SWAP'    reduce using rule 79
	'ROOT_SWAP_DAG'reduce using rule 79
	'ROOT_X'       reduce using rule 79
	'ROOT_X_DAG'   reduce using rule 79
	'ROOT_Y'       reduce using rule 79
	'ROOT_Y_DAG'   reduce using rule 79
	'ROOT_Z'       reduce using rule 79
	'ROOT_Z_DAG'   reduce using rule 79
	'RX'           reduce using rule 79
	'RY'           reduce using rule 79
	'RZ'           reduce using rule 79
	'S'            reduce using rule 79
	'SQRT_SWAP'    reduce using rule 79
	'SQRT_SWAP_DAG'reduce using rule 79
	'SQRT_X'       reduce using rule 79
	'SQRT_X_DAG'   reduce using rule 79
	'SQRT_Y'       reduce using rule 79
	'SQRT_Y_DAG'   reduce using rule 79
	'SWAP'         reduce using rule 79
	'SWAP_THETA'   reduce using rule 79
	'S_DAG'        reduce using rule 79
	'T'            reduce using rule 79
	'T_DAG'        reduce using rule 79
	'U1'           reduce using rule 79
	'U2'           reduce using rule 79
	'U3'           reduce using rule 79
	'X'            reduce using rule 79
	'Y'            reduce using rule 79
	'Z'            reduce using rule 79
	']'            reduce using rule 79
	'else'         reduce using rule 79
	'of'           reduce using rule 79
	'then'         reduce using rule 79
	'}'            reduce using rule 79
	L_Var          reduce using rule 79


State 55

	BasisState -> '@+' .                                (rule 23)

	'$'            reduce using rule 23
	'('            reduce using rule 23
	'()'           reduce using rule 23
	')'            reduce using rule 23
	','            reduce using rule 23
	'->'           reduce using rule 23
	'.'            reduce using rule 23
	';'            reduce using rule 23
	'@+'           reduce using rule 23
	'@+i'          reduce using rule 23
	'@-'           reduce using rule 23
	'@-i'          reduce using rule 23
	'@0'           reduce using rule 23
	'@1'           reduce using rule 23
	'FSWAP'        reduce using rule 23
	'H'            reduce using rule 23
	'ID'           reduce using rule 23
	'ISWAP'        reduce using rule 23
	'ROOT_SWAP'    reduce using rule 23
	'ROOT_SWAP_DAG'reduce using rule 23
	'ROOT_X'       reduce using rule 23
	'ROOT_X_DAG'   reduce using rule 23
	'ROOT_Y'       reduce using rule 23
	'ROOT_Y_DAG'   reduce using rule 23
	'ROOT_Z'       reduce using rule 23
	'ROOT_Z_DAG'   reduce using rule 23
	'RX'           reduce using rule 23
	'RY'           reduce using rule 23
	'RZ'           reduce using rule 23
	'S'            reduce using rule 23
	'SQRT_SWAP'    reduce using rule 23
	'SQRT_SWAP_DAG'reduce using rule 23
	'SQRT_X'       reduce using rule 23
	'SQRT_X_DAG'   reduce using rule 23
	'SQRT_Y'       reduce using rule 23
	'SQRT_Y_DAG'   reduce using rule 23
	'SWAP'         reduce using rule 23
	'SWAP_THETA'   reduce using rule 23
	'S_DAG'        reduce using rule 23
	'T'            reduce using rule 23
	'T_DAG'        reduce using rule 23
	'U1'           reduce using rule 23
	'U2'           reduce using rule 23
	'U3'           reduce using rule 23
	'X'            reduce using rule 23
	'Y'            reduce using rule 23
	'Z'            reduce using rule 23
	']'            reduce using rule 23
	'else'         reduce using rule 23
	'of'           reduce using rule 23
	'then'         reduce using rule 23
	'}'            reduce using rule 23
	L_Var          reduce using rule 23


State 56

	BasisState -> '@+i' .                               (rule 25)

	'$'            reduce using rule 25
	'('            reduce using rule 25
	'()'           reduce using rule 25
	')'            reduce using rule 25
	','            reduce using rule 25
	'->'           reduce using rule 25
	'.'            reduce using rule 25
	';'            reduce using rule 25
	'@+'           reduce using rule 25
	'@+i'          reduce using rule 25
	'@-'           reduce using rule 25
	'@-i'          reduce using rule 25
	'@0'           reduce using rule 25
	'@1'           reduce using rule 25
	'FSWAP'        reduce using rule 25
	'H'            reduce using rule 25
	'ID'           reduce using rule 25
	'ISWAP'        reduce using rule 25
	'ROOT_SWAP'    reduce using rule 25
	'ROOT_SWAP_DAG'reduce using rule 25
	'ROOT_X'       reduce using rule 25
	'ROOT_X_DAG'   reduce using rule 25
	'ROOT_Y'       reduce using rule 25
	'ROOT_Y_DAG'   reduce using rule 25
	'ROOT_Z'       reduce using rule 25
	'ROOT_Z_DAG'   reduce using rule 25
	'RX'           reduce using rule 25
	'RY'           reduce using rule 25
	'RZ'           reduce using rule 25
	'S'            reduce using rule 25
	'SQRT_SWAP'    reduce using rule 25
	'SQRT_SWAP_DAG'reduce using rule 25
	'SQRT_X'       reduce using rule 25
	'SQRT_X_DAG'   reduce using rule 25
	'SQRT_Y'       reduce using rule 25
	'SQRT_Y_DAG'   reduce using rule 25
	'SWAP'         reduce using rule 25
	'SWAP_THETA'   reduce using rule 25
	'S_DAG'        reduce using rule 25
	'T'            reduce using rule 25
	'T_DAG'        reduce using rule 25
	'U1'           reduce using rule 25
	'U2'           reduce using rule 25
	'U3'           reduce using rule 25
	'X'            reduce using rule 25
	'Y'            reduce using rule 25
	'Z'            reduce using rule 25
	']'            reduce using rule 25
	'else'         reduce using rule 25
	'of'           reduce using rule 25
	'then'         reduce using rule 25
	'}'            reduce using rule 25
	L_Var          reduce using rule 25


State 57

	BasisState -> '@-' .                                (rule 24)

	'$'            reduce using rule 24
	'('            reduce using rule 24
	'()'           reduce using rule 24
	')'            reduce using rule 24
	','            reduce using rule 24
	'->'           reduce using rule 24
	'.'            reduce using rule 24
	';'            reduce using rule 24
	'@+'           reduce using rule 24
	'@+i'          reduce using rule 24
	'@-'           reduce using rule 24
	'@-i'          reduce using rule 24
	'@0'           reduce using rule 24
	'@1'           reduce using rule 24
	'FSWAP'        reduce using rule 24
	'H'            reduce using rule 24
	'ID'           reduce using rule 24
	'ISWAP'        reduce using rule 24
	'ROOT_SWAP'    reduce using rule 24
	'ROOT_SWAP_DAG'reduce using rule 24
	'ROOT_X'       reduce using rule 24
	'ROOT_X_DAG'   reduce using rule 24
	'ROOT_Y'       reduce using rule 24
	'ROOT_Y_DAG'   reduce using rule 24
	'ROOT_Z'       reduce using rule 24
	'ROOT_Z_DAG'   reduce using rule 24
	'RX'           reduce using rule 24
	'RY'           reduce using rule 24
	'RZ'           reduce using rule 24
	'S'            reduce using rule 24
	'SQRT_SWAP'    reduce using rule 24
	'SQRT_SWAP_DAG'reduce using rule 24
	'SQRT_X'       reduce using rule 24
	'SQRT_X_DAG'   reduce using rule 24
	'SQRT_Y'       reduce using rule 24
	'SQRT_Y_DAG'   reduce using rule 24
	'SWAP'         reduce using rule 24
	'SWAP_THETA'   reduce using rule 24
	'S_DAG'        reduce using rule 24
	'T'            reduce using rule 24
	'T_DAG'        reduce using rule 24
	'U1'           reduce using rule 24
	'U2'           reduce using rule 24
	'U3'           reduce using rule 24
	'X'            reduce using rule 24
	'Y'            reduce using rule 24
	'Z'            reduce using rule 24
	']'            reduce using rule 24
	'else'         reduce using rule 24
	'of'           reduce using rule 24
	'then'         reduce using rule 24
	'}'            reduce using rule 24
	L_Var          reduce using rule 24


State 58

	BasisState -> '@-i' .                               (rule 26)

	'$'            reduce using rule 26
	'('            reduce using rule 26
	'()'           reduce using rule 26
	')'            reduce using rule 26
	','            reduce using rule 26
	'->'           reduce using rule 26
	'.'            reduce using rule 26
	';'            reduce using rule 26
	'@+'           reduce using rule 26
	'@+i'          reduce using rule 26
	'@-'           reduce using rule 26
	'@-i'          reduce using rule 26
	'@0'           reduce using rule 26
	'@1'           reduce using rule 26
	'FSWAP'        reduce using rule 26
	'H'            reduce using rule 26
	'ID'           reduce using rule 26
	'ISWAP'        reduce using rule 26
	'ROOT_SWAP'    reduce using rule 26
	'ROOT_SWAP_DAG'reduce using rule 26
	'ROOT_X'       reduce using rule 26
	'ROOT_X_DAG'   reduce using rule 26
	'ROOT_Y'       reduce using rule 26
	'ROOT_Y_DAG'   reduce using rule 26
	'ROOT_Z'       reduce using rule 26
	'ROOT_Z_DAG'   reduce using rule 26
	'RX'           reduce using rule 26
	'RY'           reduce using rule 26
	'RZ'           reduce using rule 26
	'S'            reduce using rule 26
	'SQRT_SWAP'    reduce using rule 26
	'SQRT_SWAP_DAG'reduce using rule 26
	'SQRT_X'       reduce using rule 26
	'SQRT_X_DAG'   reduce using rule 26
	'SQRT_Y'       reduce using rule 26
	'SQRT_Y_DAG'   reduce using rule 26
	'SWAP'         reduce using rule 26
	'SWAP_THETA'   reduce using rule 26
	'S_DAG'        reduce using rule 26
	'T'            reduce using rule 26
	'T_DAG'        reduce using rule 26
	'U1'           reduce using rule 26
	'U2'           reduce using rule 26
	'U3'           reduce using rule 26
	'X'            reduce using rule 26
	'Y'            reduce using rule 26
	'Z'            reduce using rule 26
	']'            reduce using rule 26
	'else'         reduce using rule 26
	'of'           reduce using rule 26
	'then'         reduce using rule 26
	'}'            reduce using rule 26
	L_Var          reduce using rule 26


State 59

	BasisState -> '@0' .                                (rule 21)

	'$'            reduce using rule 21
	'('            reduce using rule 21
	'()'           reduce using rule 21
	')'            reduce using rule 21
	','            reduce using rule 21
	'->'           reduce using rule 21
	'.'            reduce using rule 21
	';'            reduce using rule 21
	'@+'           reduce using rule 21
	'@+i'          reduce using rule 21
	'@-'           reduce using rule 21
	'@-i'          reduce using rule 21
	'@0'           reduce using rule 21
	'@1'           reduce using rule 21
	'FSWAP'        reduce using rule 21
	'H'            reduce using rule 21
	'ID'           reduce using rule 21
	'ISWAP'        reduce using rule 21
	'ROOT_SWAP'    reduce using rule 21
	'ROOT_SWAP_DAG'reduce using rule 21
	'ROOT_X'       reduce using rule 21
	'ROOT_X_DAG'   reduce using rule 21
	'ROOT_Y'       reduce using rule 21
	'ROOT_Y_DAG'   reduce using rule 21
	'ROOT_Z'       reduce using rule 21
	'ROOT_Z_DAG'   reduce using rule 21
	'RX'           reduce using rule 21
	'RY'           reduce using rule 21
	'RZ'           reduce using rule 21
	'S'            reduce using rule 21
	'SQRT_SWAP'    reduce using rule 21
	'SQRT_SWAP_DAG'reduce using rule 21
	'SQRT_X'       reduce using rule 21
	'SQRT_X_DAG'   reduce using rule 21
	'SQRT_Y'       reduce using rule 21
	'SQRT_Y_DAG'   reduce using rule 21
	'SWAP'         reduce using rule 21
	'SWAP_THETA'   reduce using rule 21
	'S_DAG'        reduce using rule 21
	'T'            reduce using rule 21
	'T_DAG'        reduce using rule 21
	'U1'           reduce using rule 21
	'U2'           reduce using rule 21
	'U3'           reduce using rule 21
	'X'            reduce using rule 21
	'Y'            reduce using rule 21
	'Z'            reduce using rule 21
	']'            reduce using rule 21
	'else'         reduce using rule 21
	'of'           reduce using rule 21
	'then'         reduce using rule 21
	'}'            reduce using rule 21
	L_Var          reduce using rule 21


State 60

	BasisState -> '@1' .                                (rule 22)

	'$'            reduce using rule 22
	'('            reduce using rule 22
	'()'           reduce using rule 22
	')'            reduce using rule 22
	','            reduce using rule 22
	'->'           reduce using rule 22
	'.'            reduce using rule 22
	';'            reduce using rule 22
	'@+'           reduce using rule 22
	'@+i'          reduce using rule 22
	'@-'           reduce using rule 22
	'@-i'          reduce using rule 22
	'@0'           reduce using rule 22
	'@1'           reduce using rule 22
	'FSWAP'        reduce using rule 22
	'H'            reduce using rule 22
	'ID'           reduce using rule 22
	'ISWAP'        reduce using rule 22
	'ROOT_SWAP'    reduce using rule 22
	'ROOT_SWAP_DAG'reduce using rule 22
	'ROOT_X'       reduce using rule 22
	'ROOT_X_DAG'   reduce using rule 22
	'ROOT_Y'       reduce using rule 22
	'ROOT_Y_DAG'   reduce using rule 22
	'ROOT_Z'       reduce using rule 22
	'ROOT_Z_DAG'   reduce using rule 22
	'RX'           reduce using rule 22
	'RY'           reduce using rule 22
	'RZ'           reduce using rule 22
	'S'            reduce using rule 22
	'SQRT_SWAP'    reduce using rule 22
	'SQRT_SWAP_DAG'reduce using rule 22
	'SQRT_X'       reduce using rule 22
	'SQRT_X_DAG'   reduce using rule 22
	'SQRT_Y'       reduce using rule 22
	'SQRT_Y_DAG'   reduce using rule 22
	'SWAP'         reduce using rule 22
	'SWAP_THETA'   reduce using rule 22
	'S_DAG'        reduce using rule 22
	'T'            reduce using rule 22
	'T_DAG'        reduce using rule 22
	'U1'           reduce using rule 22
	'U2'           reduce using rule 22
	'U3'           reduce using rule 22
	'X'            reduce using rule 22
	'Y'            reduce using rule 22
	'Z'            reduce using rule 22
	']'            reduce using rule 22
	'else'         reduce using rule 22
	'of'           reduce using rule 22
	'then'         reduce using rule 22
	'}'            reduce using rule 22
	L_Var          reduce using rule 22


State 61

	Gate -> 'FSWAP' .                                   (rule 57)

	'$'            reduce using rule 57
	'('            reduce using rule 57
	'()'           reduce using rule 57
	')'            reduce using rule 57
	','            reduce using rule 57
	'->'           reduce using rule 57
	'.'            reduce using rule 57
	';'            reduce using rule 57
	'@+'           reduce using rule 57
	'@+i'          reduce using rule 57
	'@-'           reduce using rule 57
	'@-i'          reduce using rule 57
	'@0'           reduce using rule 57
	'@1'           reduce using rule 57
	'FSWAP'        reduce using rule 57
	'H'            reduce using rule 57
	'ID'           reduce using rule 57
	'ISWAP'        reduce using rule 57
	'ROOT_SWAP'    reduce using rule 57
	'ROOT_SWAP_DAG'reduce using rule 57
	'ROOT_X'       reduce using rule 57
	'ROOT_X_DAG'   reduce using rule 57
	'ROOT_Y'       reduce using rule 57
	'ROOT_Y_DAG'   reduce using rule 57
	'ROOT_Z'       reduce using rule 57
	'ROOT_Z_DAG'   reduce using rule 57
	'RX'           reduce using rule 57
	'RY'           reduce using rule 57
	'RZ'           reduce using rule 57
	'S'            reduce using rule 57
	'SQRT_SWAP'    reduce using rule 57
	'SQRT_SWAP_DAG'reduce using rule 57
	'SQRT_X'       reduce using rule 57
	'SQRT_X_DAG'   reduce using rule 57
	'SQRT_Y'       reduce using rule 57
	'SQRT_Y_DAG'   reduce using rule 57
	'SWAP'         reduce using rule 57
	'SWAP_THETA'   reduce using rule 57
	'S_DAG'        reduce using rule 57
	'T'            reduce using rule 57
	'T_DAG'        reduce using rule 57
	'U1'           reduce using rule 57
	'U2'           reduce using rule 57
	'U3'           reduce using rule 57
	'X'            reduce using rule 57
	'Y'            reduce using rule 57
	'Z'            reduce using rule 57
	']'            reduce using rule 57
	'else'         reduce using rule 57
	'of'           reduce using rule 57
	'then'         reduce using rule 57
	'}'            reduce using rule 57
	L_Var          reduce using rule 57


State 62

	Gate -> 'H' .                                       (rule 28)

	'$'            reduce using rule 28
	'('            reduce using rule 28
	'()'           reduce using rule 28
	')'            reduce using rule 28
	','            reduce using rule 28
	'->'           reduce using rule 28
	'.'            reduce using rule 28
	';'            reduce using rule 28
	'@+'           reduce using rule 28
	'@+i'          reduce using rule 28
	'@-'           reduce using rule 28
	'@-i'          reduce using rule 28
	'@0'           reduce using rule 28
	'@1'           reduce using rule 28
	'FSWAP'        reduce using rule 28
	'H'            reduce using rule 28
	'ID'           reduce using rule 28
	'ISWAP'        reduce using rule 28
	'ROOT_SWAP'    reduce using rule 28
	'ROOT_SWAP_DAG'reduce using rule 28
	'ROOT_X'       reduce using rule 28
	'ROOT_X_DAG'   reduce using rule 28
	'ROOT_Y'       reduce using rule 28
	'ROOT_Y_DAG'   reduce using rule 28
	'ROOT_Z'       reduce using rule 28
	'ROOT_Z_DAG'   reduce using rule 28
	'RX'           reduce using rule 28
	'RY'           reduce using rule 28
	'RZ'           reduce using rule 28
	'S'            reduce using rule 28
	'SQRT_SWAP'    reduce using rule 28
	'SQRT_SWAP_DAG'reduce using rule 28
	'SQRT_X'       reduce using rule 28
	'SQRT_X_DAG'   reduce using rule 28
	'SQRT_Y'       reduce using rule 28
	'SQRT_Y_DAG'   reduce using rule 28
	'SWAP'         reduce using rule 28
	'SWAP_THETA'   reduce using rule 28
	'S_DAG'        reduce using rule 28
	'T'            reduce using rule 28
	'T_DAG'        reduce using rule 28
	'U1'           reduce using rule 28
	'U2'           reduce using rule 28
	'U3'           reduce using rule 28
	'X'            reduce using rule 28
	'Y'            reduce using rule 28
	'Z'            reduce using rule 28
	']'            reduce using rule 28
	'else'         reduce using rule 28
	'of'           reduce using rule 28
	'then'         reduce using rule 28
	'}'            reduce using rule 28
	L_Var          reduce using rule 28


State 63

	Gate -> 'ID' .                                      (rule 32)

	'$'            reduce using rule 32
	'('            reduce using rule 32
	'()'           reduce using rule 32
	')'            reduce using rule 32
	','            reduce using rule 32
	'->'           reduce using rule 32
	'.'            reduce using rule 32
	';'            reduce using rule 32
	'@+'           reduce using rule 32
	'@+i'          reduce using rule 32
	'@-'           reduce using rule 32
	'@-i'          reduce using rule 32
	'@0'           reduce using rule 32
	'@1'           reduce using rule 32
	'FSWAP'        reduce using rule 32
	'H'            reduce using rule 32
	'ID'           reduce using rule 32
	'ISWAP'        reduce using rule 32
	'ROOT_SWAP'    reduce using rule 32
	'ROOT_SWAP_DAG'reduce using rule 32
	'ROOT_X'       reduce using rule 32
	'ROOT_X_DAG'   reduce using rule 32
	'ROOT_Y'       reduce using rule 32
	'ROOT_Y_DAG'   reduce using rule 32
	'ROOT_Z'       reduce using rule 32
	'ROOT_Z_DAG'   reduce using rule 32
	'RX'           reduce using rule 32
	'RY'           reduce using rule 32
	'RZ'           reduce using rule 32
	'S'            reduce using rule 32
	'SQRT_SWAP'    reduce using rule 32
	'SQRT_SWAP_DAG'reduce using rule 32
	'SQRT_X'       reduce using rule 32
	'SQRT_X_DAG'   reduce using rule 32
	'SQRT_Y'       reduce using rule 32
	'SQRT_Y_DAG'   reduce using rule 32
	'SWAP'         reduce using rule 32
	'SWAP_THETA'   reduce using rule 32
	'S_DAG'        reduce using rule 32
	'T'            reduce using rule 32
	'T_DAG'        reduce using rule 32
	'U1'           reduce using rule 32
	'U2'           reduce using rule 32
	'U3'           reduce using rule 32
	'X'            reduce using rule 32
	'Y'            reduce using rule 32
	'Z'            reduce using rule 32
	']'            reduce using rule 32
	'else'         reduce using rule 32
	'of'           reduce using rule 32
	'then'         reduce using rule 32
	'}'            reduce using rule 32
	L_Var          reduce using rule 32


State 64

	Gate -> 'ISWAP' .                                   (rule 56)

	'$'            reduce using rule 56
	'('            reduce using rule 56
	'()'           reduce using rule 56
	')'            reduce using rule 56
	','            reduce using rule 56
	'->'           reduce using rule 56
	'.'            reduce using rule 56
	';'            reduce using rule 56
	'@+'           reduce using rule 56
	'@+i'          reduce using rule 56
	'@-'           reduce using rule 56
	'@-i'          reduce using rule 56
	'@0'           reduce using rule 56
	'@1'           reduce using rule 56
	'FSWAP'        reduce using rule 56
	'H'            reduce using rule 56
	'ID'           reduce using rule 56
	'ISWAP'        reduce using rule 56
	'ROOT_SWAP'    reduce using rule 56
	'ROOT_SWAP_DAG'reduce using rule 56
	'ROOT_X'       reduce using rule 56
	'ROOT_X_DAG'   reduce using rule 56
	'ROOT_Y'       reduce using rule 56
	'ROOT_Y_DAG'   reduce using rule 56
	'ROOT_Z'       reduce using rule 56
	'ROOT_Z_DAG'   reduce using rule 56
	'RX'           reduce using rule 56
	'RY'           reduce using rule 56
	'RZ'           reduce using rule 56
	'S'            reduce using rule 56
	'SQRT_SWAP'    reduce using rule 56
	'SQRT_SWAP_DAG'reduce using rule 56
	'SQRT_X'       reduce using rule 56
	'SQRT_X_DAG'   reduce using rule 56
	'SQRT_Y'       reduce using rule 56
	'SQRT_Y_DAG'   reduce using rule 56
	'SWAP'         reduce using rule 56
	'SWAP_THETA'   reduce using rule 56
	'S_DAG'        reduce using rule 56
	'T'            reduce using rule 56
	'T_DAG'        reduce using rule 56
	'U1'           reduce using rule 56
	'U2'           reduce using rule 56
	'U3'           reduce using rule 56
	'X'            reduce using rule 56
	'Y'            reduce using rule 56
	'Z'            reduce using rule 56
	']'            reduce using rule 56
	'else'         reduce using rule 56
	'of'           reduce using rule 56
	'then'         reduce using rule 56
	'}'            reduce using rule 56
	L_Var          reduce using rule 56


State 65

	Gate -> 'ROOT_SWAP' . Integer                       (rule 59)

	L_integ        shift, and enter state 36

	Integer        goto state 119

State 66

	Gate -> 'ROOT_SWAP_DAG' . Integer                   (rule 60)

	L_integ        shift, and enter state 36

	Integer        goto state 118

State 67

	Gate -> 'ROOT_X' . Integer                          (rule 33)

	L_integ        shift, and enter state 36

	Integer        goto state 117

State 68

	Gate -> 'ROOT_X_DAG' . Integer                      (rule 34)

	L_integ        shift, and enter state 36

	Integer        goto state 116

State 69

	Gate -> 'ROOT_Y' . Integer                          (rule 35)

	L_integ        shift, and enter state 36

	Integer        goto state 115

State 70

	Gate -> 'ROOT_Y_DAG' . Integer                      (rule 36)

	L_integ        shift, and enter state 36

	Integer        goto state 114

State 71

	Gate -> 'ROOT_Z' . Integer                          (rule 37)

	L_integ        shift, and enter state 36

	Integer        goto state 113

State 72

	Gate -> 'ROOT_Z_DAG' . Integer                      (rule 38)

	L_integ        shift, and enter state 36

	Integer        goto state 112

State 73

	Gate -> 'RX' . Angle                                (rule 47)

	L_doubl        shift, and enter state 2

	Double         goto state 106
	Angle          goto state 111

State 74

	Gate -> 'RY' . Angle                                (rule 48)

	L_doubl        shift, and enter state 2

	Double         goto state 106
	Angle          goto state 110

State 75

	Gate -> 'RZ' . Angle                                (rule 49)

	L_doubl        shift, and enter state 2

	Double         goto state 106
	Angle          goto state 109

State 76

	Gate -> 'S' .                                       (rule 39)

	'$'            reduce using rule 39
	'('            reduce using rule 39
	'()'           reduce using rule 39
	')'            reduce using rule 39
	','            reduce using rule 39
	'->'           reduce using rule 39
	'.'            reduce using rule 39
	';'            reduce using rule 39
	'@+'           reduce using rule 39
	'@+i'          reduce using rule 39
	'@-'           reduce using rule 39
	'@-i'          reduce using rule 39
	'@0'           reduce using rule 39
	'@1'           reduce using rule 39
	'FSWAP'        reduce using rule 39
	'H'            reduce using rule 39
	'ID'           reduce using rule 39
	'ISWAP'        reduce using rule 39
	'ROOT_SWAP'    reduce using rule 39
	'ROOT_SWAP_DAG'reduce using rule 39
	'ROOT_X'       reduce using rule 39
	'ROOT_X_DAG'   reduce using rule 39
	'ROOT_Y'       reduce using rule 39
	'ROOT_Y_DAG'   reduce using rule 39
	'ROOT_Z'       reduce using rule 39
	'ROOT_Z_DAG'   reduce using rule 39
	'RX'           reduce using rule 39
	'RY'           reduce using rule 39
	'RZ'           reduce using rule 39
	'S'            reduce using rule 39
	'SQRT_SWAP'    reduce using rule 39
	'SQRT_SWAP_DAG'reduce using rule 39
	'SQRT_X'       reduce using rule 39
	'SQRT_X_DAG'   reduce using rule 39
	'SQRT_Y'       reduce using rule 39
	'SQRT_Y_DAG'   reduce using rule 39
	'SWAP'         reduce using rule 39
	'SWAP_THETA'   reduce using rule 39
	'S_DAG'        reduce using rule 39
	'T'            reduce using rule 39
	'T_DAG'        reduce using rule 39
	'U1'           reduce using rule 39
	'U2'           reduce using rule 39
	'U3'           reduce using rule 39
	'X'            reduce using rule 39
	'Y'            reduce using rule 39
	'Z'            reduce using rule 39
	']'            reduce using rule 39
	'else'         reduce using rule 39
	'of'           reduce using rule 39
	'then'         reduce using rule 39
	'}'            reduce using rule 39
	L_Var          reduce using rule 39


State 77

	Gate -> 'SQRT_SWAP' .                               (rule 54)

	'$'            reduce using rule 54
	'('            reduce using rule 54
	'()'           reduce using rule 54
	')'            reduce using rule 54
	','            reduce using rule 54
	'->'           reduce using rule 54
	'.'            reduce using rule 54
	';'            reduce using rule 54
	'@+'           reduce using rule 54
	'@+i'          reduce using rule 54
	'@-'           reduce using rule 54
	'@-i'          reduce using rule 54
	'@0'           reduce using rule 54
	'@1'           reduce using rule 54
	'FSWAP'        reduce using rule 54
	'H'            reduce using rule 54
	'ID'           reduce using rule 54
	'ISWAP'        reduce using rule 54
	'ROOT_SWAP'    reduce using rule 54
	'ROOT_SWAP_DAG'reduce using rule 54
	'ROOT_X'       reduce using rule 54
	'ROOT_X_DAG'   reduce using rule 54
	'ROOT_Y'       reduce using rule 54
	'ROOT_Y_DAG'   reduce using rule 54
	'ROOT_Z'       reduce using rule 54
	'ROOT_Z_DAG'   reduce using rule 54
	'RX'           reduce using rule 54
	'RY'           reduce using rule 54
	'RZ'           reduce using rule 54
	'S'            reduce using rule 54
	'SQRT_SWAP'    reduce using rule 54
	'SQRT_SWAP_DAG'reduce using rule 54
	'SQRT_X'       reduce using rule 54
	'SQRT_X_DAG'   reduce using rule 54
	'SQRT_Y'       reduce using rule 54
	'SQRT_Y_DAG'   reduce using rule 54
	'SWAP'         reduce using rule 54
	'SWAP_THETA'   reduce using rule 54
	'S_DAG'        reduce using rule 54
	'T'            reduce using rule 54
	'T_DAG'        reduce using rule 54
	'U1'           reduce using rule 54
	'U2'           reduce using rule 54
	'U3'           reduce using rule 54
	'X'            reduce using rule 54
	'Y'            reduce using rule 54
	'Z'            reduce using rule 54
	']'            reduce using rule 54
	'else'         reduce using rule 54
	'of'           reduce using rule 54
	'then'         reduce using rule 54
	'}'            reduce using rule 54
	L_Var          reduce using rule 54


State 78

	Gate -> 'SQRT_SWAP_DAG' .                           (rule 55)

	'$'            reduce using rule 55
	'('            reduce using rule 55
	'()'           reduce using rule 55
	')'            reduce using rule 55
	','            reduce using rule 55
	'->'           reduce using rule 55
	'.'            reduce using rule 55
	';'            reduce using rule 55
	'@+'           reduce using rule 55
	'@+i'          reduce using rule 55
	'@-'           reduce using rule 55
	'@-i'          reduce using rule 55
	'@0'           reduce using rule 55
	'@1'           reduce using rule 55
	'FSWAP'        reduce using rule 55
	'H'            reduce using rule 55
	'ID'           reduce using rule 55
	'ISWAP'        reduce using rule 55
	'ROOT_SWAP'    reduce using rule 55
	'ROOT_SWAP_DAG'reduce using rule 55
	'ROOT_X'       reduce using rule 55
	'ROOT_X_DAG'   reduce using rule 55
	'ROOT_Y'       reduce using rule 55
	'ROOT_Y_DAG'   reduce using rule 55
	'ROOT_Z'       reduce using rule 55
	'ROOT_Z_DAG'   reduce using rule 55
	'RX'           reduce using rule 55
	'RY'           reduce using rule 55
	'RZ'           reduce using rule 55
	'S'            reduce using rule 55
	'SQRT_SWAP'    reduce using rule 55
	'SQRT_SWAP_DAG'reduce using rule 55
	'SQRT_X'       reduce using rule 55
	'SQRT_X_DAG'   reduce using rule 55
	'SQRT_Y'       reduce using rule 55
	'SQRT_Y_DAG'   reduce using rule 55
	'SWAP'         reduce using rule 55
	'SWAP_THETA'   reduce using rule 55
	'S_DAG'        reduce using rule 55
	'T'            reduce using rule 55
	'T_DAG'        reduce using rule 55
	'U1'           reduce using rule 55
	'U2'           reduce using rule 55
	'U3'           reduce using rule 55
	'X'            reduce using rule 55
	'Y'            reduce using rule 55
	'Z'            reduce using rule 55
	']'            reduce using rule 55
	'else'         reduce using rule 55
	'of'           reduce using rule 55
	'then'         reduce using rule 55
	'}'            reduce using rule 55
	L_Var          reduce using rule 55


State 79

	Gate -> 'SQRT_X' .                                  (rule 43)

	'$'            reduce using rule 43
	'('            reduce using rule 43
	'()'           reduce using rule 43
	')'            reduce using rule 43
	','            reduce using rule 43
	'->'           reduce using rule 43
	'.'            reduce using rule 43
	';'            reduce using rule 43
	'@+'           reduce using rule 43
	'@+i'          reduce using rule 43
	'@-'           reduce using rule 43
	'@-i'          reduce using rule 43
	'@0'           reduce using rule 43
	'@1'           reduce using rule 43
	'FSWAP'        reduce using rule 43
	'H'            reduce using rule 43
	'ID'           reduce using rule 43
	'ISWAP'        reduce using rule 43
	'ROOT_SWAP'    reduce using rule 43
	'ROOT_SWAP_DAG'reduce using rule 43
	'ROOT_X'       reduce using rule 43
	'ROOT_X_DAG'   reduce using rule 43
	'ROOT_Y'       reduce using rule 43
	'ROOT_Y_DAG'   reduce using rule 43
	'ROOT_Z'       reduce using rule 43
	'ROOT_Z_DAG'   reduce using rule 43
	'RX'           reduce using rule 43
	'RY'           reduce using rule 43
	'RZ'           reduce using rule 43
	'S'            reduce using rule 43
	'SQRT_SWAP'    reduce using rule 43
	'SQRT_SWAP_DAG'reduce using rule 43
	'SQRT_X'       reduce using rule 43
	'SQRT_X_DAG'   reduce using rule 43
	'SQRT_Y'       reduce using rule 43
	'SQRT_Y_DAG'   reduce using rule 43
	'SWAP'         reduce using rule 43
	'SWAP_THETA'   reduce using rule 43
	'S_DAG'        reduce using rule 43
	'T'            reduce using rule 43
	'T_DAG'        reduce using rule 43
	'U1'           reduce using rule 43
	'U2'           reduce using rule 43
	'U3'           reduce using rule 43
	'X'            reduce using rule 43
	'Y'            reduce using rule 43
	'Z'            reduce using rule 43
	']'            reduce using rule 43
	'else'         reduce using rule 43
	'of'           reduce using rule 43
	'then'         reduce using rule 43
	'}'            reduce using rule 43
	L_Var          reduce using rule 43


State 80

	Gate -> 'SQRT_X_DAG' .                              (rule 44)

	'$'            reduce using rule 44
	'('            reduce using rule 44
	'()'           reduce using rule 44
	')'            reduce using rule 44
	','            reduce using rule 44
	'->'           reduce using rule 44
	'.'            reduce using rule 44
	';'            reduce using rule 44
	'@+'           reduce using rule 44
	'@+i'          reduce using rule 44
	'@-'           reduce using rule 44
	'@-i'          reduce using rule 44
	'@0'           reduce using rule 44
	'@1'           reduce using rule 44
	'FSWAP'        reduce using rule 44
	'H'            reduce using rule 44
	'ID'           reduce using rule 44
	'ISWAP'        reduce using rule 44
	'ROOT_SWAP'    reduce using rule 44
	'ROOT_SWAP_DAG'reduce using rule 44
	'ROOT_X'       reduce using rule 44
	'ROOT_X_DAG'   reduce using rule 44
	'ROOT_Y'       reduce using rule 44
	'ROOT_Y_DAG'   reduce using rule 44
	'ROOT_Z'       reduce using rule 44
	'ROOT_Z_DAG'   reduce using rule 44
	'RX'           reduce using rule 44
	'RY'           reduce using rule 44
	'RZ'           reduce using rule 44
	'S'            reduce using rule 44
	'SQRT_SWAP'    reduce using rule 44
	'SQRT_SWAP_DAG'reduce using rule 44
	'SQRT_X'       reduce using rule 44
	'SQRT_X_DAG'   reduce using rule 44
	'SQRT_Y'       reduce using rule 44
	'SQRT_Y_DAG'   reduce using rule 44
	'SWAP'         reduce using rule 44
	'SWAP_THETA'   reduce using rule 44
	'S_DAG'        reduce using rule 44
	'T'            reduce using rule 44
	'T_DAG'        reduce using rule 44
	'U1'           reduce using rule 44
	'U2'           reduce using rule 44
	'U3'           reduce using rule 44
	'X'            reduce using rule 44
	'Y'            reduce using rule 44
	'Z'            reduce using rule 44
	']'            reduce using rule 44
	'else'         reduce using rule 44
	'of'           reduce using rule 44
	'then'         reduce using rule 44
	'}'            reduce using rule 44
	L_Var          reduce using rule 44


State 81

	Gate -> 'SQRT_Y' .                                  (rule 45)

	'$'            reduce using rule 45
	'('            reduce using rule 45
	'()'           reduce using rule 45
	')'            reduce using rule 45
	','            reduce using rule 45
	'->'           reduce using rule 45
	'.'            reduce using rule 45
	';'            reduce using rule 45
	'@+'           reduce using rule 45
	'@+i'          reduce using rule 45
	'@-'           reduce using rule 45
	'@-i'          reduce using rule 45
	'@0'           reduce using rule 45
	'@1'           reduce using rule 45
	'FSWAP'        reduce using rule 45
	'H'            reduce using rule 45
	'ID'           reduce using rule 45
	'ISWAP'        reduce using rule 45
	'ROOT_SWAP'    reduce using rule 45
	'ROOT_SWAP_DAG'reduce using rule 45
	'ROOT_X'       reduce using rule 45
	'ROOT_X_DAG'   reduce using rule 45
	'ROOT_Y'       reduce using rule 45
	'ROOT_Y_DAG'   reduce using rule 45
	'ROOT_Z'       reduce using rule 45
	'ROOT_Z_DAG'   reduce using rule 45
	'RX'           reduce using rule 45
	'RY'           reduce using rule 45
	'RZ'           reduce using rule 45
	'S'            reduce using rule 45
	'SQRT_SWAP'    reduce using rule 45
	'SQRT_SWAP_DAG'reduce using rule 45
	'SQRT_X'       reduce using rule 45
	'SQRT_X_DAG'   reduce using rule 45
	'SQRT_Y'       reduce using rule 45
	'SQRT_Y_DAG'   reduce using rule 45
	'SWAP'         reduce using rule 45
	'SWAP_THETA'   reduce using rule 45
	'S_DAG'        reduce using rule 45
	'T'            reduce using rule 45
	'T_DAG'        reduce using rule 45
	'U1'           reduce using rule 45
	'U2'           reduce using rule 45
	'U3'           reduce using rule 45
	'X'            reduce using rule 45
	'Y'            reduce using rule 45
	'Z'            reduce using rule 45
	']'            reduce using rule 45
	'else'         reduce using rule 45
	'of'           reduce using rule 45
	'then'         reduce using rule 45
	'}'            reduce using rule 45
	L_Var          reduce using rule 45


State 82

	Gate -> 'SQRT_Y_DAG' .                              (rule 46)

	'$'            reduce using rule 46
	'('            reduce using rule 46
	'()'           reduce using rule 46
	')'            reduce using rule 46
	','            reduce using rule 46
	'->'           reduce using rule 46
	'.'            reduce using rule 46
	';'            reduce using rule 46
	'@+'           reduce using rule 46
	'@+i'          reduce using rule 46
	'@-'           reduce using rule 46
	'@-i'          reduce using rule 46
	'@0'           reduce using rule 46
	'@1'           reduce using rule 46
	'FSWAP'        reduce using rule 46
	'H'            reduce using rule 46
	'ID'           reduce using rule 46
	'ISWAP'        reduce using rule 46
	'ROOT_SWAP'    reduce using rule 46
	'ROOT_SWAP_DAG'reduce using rule 46
	'ROOT_X'       reduce using rule 46
	'ROOT_X_DAG'   reduce using rule 46
	'ROOT_Y'       reduce using rule 46
	'ROOT_Y_DAG'   reduce using rule 46
	'ROOT_Z'       reduce using rule 46
	'ROOT_Z_DAG'   reduce using rule 46
	'RX'           reduce using rule 46
	'RY'           reduce using rule 46
	'RZ'           reduce using rule 46
	'S'            reduce using rule 46
	'SQRT_SWAP'    reduce using rule 46
	'SQRT_SWAP_DAG'reduce using rule 46
	'SQRT_X'       reduce using rule 46
	'SQRT_X_DAG'   reduce using rule 46
	'SQRT_Y'       reduce using rule 46
	'SQRT_Y_DAG'   reduce using rule 46
	'SWAP'         reduce using rule 46
	'SWAP_THETA'   reduce using rule 46
	'S_DAG'        reduce using rule 46
	'T'            reduce using rule 46
	'T_DAG'        reduce using rule 46
	'U1'           reduce using rule 46
	'U2'           reduce using rule 46
	'U3'           reduce using rule 46
	'X'            reduce using rule 46
	'Y'            reduce using rule 46
	'Z'            reduce using rule 46
	']'            reduce using rule 46
	'else'         reduce using rule 46
	'of'           reduce using rule 46
	'then'         reduce using rule 46
	'}'            reduce using rule 46
	L_Var          reduce using rule 46


State 83

	Gate -> 'SWAP' .                                    (rule 53)

	'$'            reduce using rule 53
	'('            reduce using rule 53
	'()'           reduce using rule 53
	')'            reduce using rule 53
	','            reduce using rule 53
	'->'           reduce using rule 53
	'.'            reduce using rule 53
	';'            reduce using rule 53
	'@+'           reduce using rule 53
	'@+i'          reduce using rule 53
	'@-'           reduce using rule 53
	'@-i'          reduce using rule 53
	'@0'           reduce using rule 53
	'@1'           reduce using rule 53
	'FSWAP'        reduce using rule 53
	'H'            reduce using rule 53
	'ID'           reduce using rule 53
	'ISWAP'        reduce using rule 53
	'ROOT_SWAP'    reduce using rule 53
	'ROOT_SWAP_DAG'reduce using rule 53
	'ROOT_X'       reduce using rule 53
	'ROOT_X_DAG'   reduce using rule 53
	'ROOT_Y'       reduce using rule 53
	'ROOT_Y_DAG'   reduce using rule 53
	'ROOT_Z'       reduce using rule 53
	'ROOT_Z_DAG'   reduce using rule 53
	'RX'           reduce using rule 53
	'RY'           reduce using rule 53
	'RZ'           reduce using rule 53
	'S'            reduce using rule 53
	'SQRT_SWAP'    reduce using rule 53
	'SQRT_SWAP_DAG'reduce using rule 53
	'SQRT_X'       reduce using rule 53
	'SQRT_X_DAG'   reduce using rule 53
	'SQRT_Y'       reduce using rule 53
	'SQRT_Y_DAG'   reduce using rule 53
	'SWAP'         reduce using rule 53
	'SWAP_THETA'   reduce using rule 53
	'S_DAG'        reduce using rule 53
	'T'            reduce using rule 53
	'T_DAG'        reduce using rule 53
	'U1'           reduce using rule 53
	'U2'           reduce using rule 53
	'U3'           reduce using rule 53
	'X'            reduce using rule 53
	'Y'            reduce using rule 53
	'Z'            reduce using rule 53
	']'            reduce using rule 53
	'else'         reduce using rule 53
	'of'           reduce using rule 53
	'then'         reduce using rule 53
	'}'            reduce using rule 53
	L_Var          reduce using rule 53


State 84

	Gate -> 'SWAP_THETA' . Angle                        (rule 58)

	L_doubl        shift, and enter state 2

	Double         goto state 106
	Angle          goto state 108

State 85

	Gate -> 'S_DAG' .                                   (rule 40)

	'$'            reduce using rule 40
	'('            reduce using rule 40
	'()'           reduce using rule 40
	')'            reduce using rule 40
	','            reduce using rule 40
	'->'           reduce using rule 40
	'.'            reduce using rule 40
	';'            reduce using rule 40
	'@+'           reduce using rule 40
	'@+i'          reduce using rule 40
	'@-'           reduce using rule 40
	'@-i'          reduce using rule 40
	'@0'           reduce using rule 40
	'@1'           reduce using rule 40
	'FSWAP'        reduce using rule 40
	'H'            reduce using rule 40
	'ID'           reduce using rule 40
	'ISWAP'        reduce using rule 40
	'ROOT_SWAP'    reduce using rule 40
	'ROOT_SWAP_DAG'reduce using rule 40
	'ROOT_X'       reduce using rule 40
	'ROOT_X_DAG'   reduce using rule 40
	'ROOT_Y'       reduce using rule 40
	'ROOT_Y_DAG'   reduce using rule 40
	'ROOT_Z'       reduce using rule 40
	'ROOT_Z_DAG'   reduce using rule 40
	'RX'           reduce using rule 40
	'RY'           reduce using rule 40
	'RZ'           reduce using rule 40
	'S'            reduce using rule 40
	'SQRT_SWAP'    reduce using rule 40
	'SQRT_SWAP_DAG'reduce using rule 40
	'SQRT_X'       reduce using rule 40
	'SQRT_X_DAG'   reduce using rule 40
	'SQRT_Y'       reduce using rule 40
	'SQRT_Y_DAG'   reduce using rule 40
	'SWAP'         reduce using rule 40
	'SWAP_THETA'   reduce using rule 40
	'S_DAG'        reduce using rule 40
	'T'            reduce using rule 40
	'T_DAG'        reduce using rule 40
	'U1'           reduce using rule 40
	'U2'           reduce using rule 40
	'U3'           reduce using rule 40
	'X'            reduce using rule 40
	'Y'            reduce using rule 40
	'Z'            reduce using rule 40
	']'            reduce using rule 40
	'else'         reduce using rule 40
	'of'           reduce using rule 40
	'then'         reduce using rule 40
	'}'            reduce using rule 40
	L_Var          reduce using rule 40


State 86

	Gate -> 'T' .                                       (rule 41)

	'$'            reduce using rule 41
	'('            reduce using rule 41
	'()'           reduce using rule 41
	')'            reduce using rule 41
	','            reduce using rule 41
	'->'           reduce using rule 41
	'.'            reduce using rule 41
	';'            reduce using rule 41
	'@+'           reduce using rule 41
	'@+i'          reduce using rule 41
	'@-'           reduce using rule 41
	'@-i'          reduce using rule 41
	'@0'           reduce using rule 41
	'@1'           reduce using rule 41
	'FSWAP'        reduce using rule 41
	'H'            reduce using rule 41
	'ID'           reduce using rule 41
	'ISWAP'        reduce using rule 41
	'ROOT_SWAP'    reduce using rule 41
	'ROOT_SWAP_DAG'reduce using rule 41
	'ROOT_X'       reduce using rule 41
	'ROOT_X_DAG'   reduce using rule 41
	'ROOT_Y'       reduce using rule 41
	'ROOT_Y_DAG'   reduce using rule 41
	'ROOT_Z'       reduce using rule 41
	'ROOT_Z_DAG'   reduce using rule 41
	'RX'           reduce using rule 41
	'RY'           reduce using rule 41
	'RZ'           reduce using rule 41
	'S'            reduce using rule 41
	'SQRT_SWAP'    reduce using rule 41
	'SQRT_SWAP_DAG'reduce using rule 41
	'SQRT_X'       reduce using rule 41
	'SQRT_X_DAG'   reduce using rule 41
	'SQRT_Y'       reduce using rule 41
	'SQRT_Y_DAG'   reduce using rule 41
	'SWAP'         reduce using rule 41
	'SWAP_THETA'   reduce using rule 41
	'S_DAG'        reduce using rule 41
	'T'            reduce using rule 41
	'T_DAG'        reduce using rule 41
	'U1'           reduce using rule 41
	'U2'           reduce using rule 41
	'U3'           reduce using rule 41
	'X'            reduce using rule 41
	'Y'            reduce using rule 41
	'Z'            reduce using rule 41
	']'            reduce using rule 41
	'else'         reduce using rule 41
	'of'           reduce using rule 41
	'then'         reduce using rule 41
	'}'            reduce using rule 41
	L_Var          reduce using rule 41


State 87

	Gate -> 'T_DAG' .                                   (rule 42)

	'$'            reduce using rule 42
	'('            reduce using rule 42
	'()'           reduce using rule 42
	')'            reduce using rule 42
	','            reduce using rule 42
	'->'           reduce using rule 42
	'.'            reduce using rule 42
	';'            reduce using rule 42
	'@+'           reduce using rule 42
	'@+i'          reduce using rule 42
	'@-'           reduce using rule 42
	'@-i'          reduce using rule 42
	'@0'           reduce using rule 42
	'@1'           reduce using rule 42
	'FSWAP'        reduce using rule 42
	'H'            reduce using rule 42
	'ID'           reduce using rule 42
	'ISWAP'        reduce using rule 42
	'ROOT_SWAP'    reduce using rule 42
	'ROOT_SWAP_DAG'reduce using rule 42
	'ROOT_X'       reduce using rule 42
	'ROOT_X_DAG'   reduce using rule 42
	'ROOT_Y'       reduce using rule 42
	'ROOT_Y_DAG'   reduce using rule 42
	'ROOT_Z'       reduce using rule 42
	'ROOT_Z_DAG'   reduce using rule 42
	'RX'           reduce using rule 42
	'RY'           reduce using rule 42
	'RZ'           reduce using rule 42
	'S'            reduce using rule 42
	'SQRT_SWAP'    reduce using rule 42
	'SQRT_SWAP_DAG'reduce using rule 42
	'SQRT_X'       reduce using rule 42
	'SQRT_X_DAG'   reduce using rule 42
	'SQRT_Y'       reduce using rule 42
	'SQRT_Y_DAG'   reduce using rule 42
	'SWAP'         reduce using rule 42
	'SWAP_THETA'   reduce using rule 42
	'S_DAG'        reduce using rule 42
	'T'            reduce using rule 42
	'T_DAG'        reduce using rule 42
	'U1'           reduce using rule 42
	'U2'           reduce using rule 42
	'U3'           reduce using rule 42
	'X'            reduce using rule 42
	'Y'            reduce using rule 42
	'Z'            reduce using rule 42
	']'            reduce using rule 42
	'else'         reduce using rule 42
	'of'           reduce using rule 42
	'then'         reduce using rule 42
	'}'            reduce using rule 42
	L_Var          reduce using rule 42


State 88

	Gate -> 'U1' . Angle                                (rule 50)

	L_doubl        shift, and enter state 2

	Double         goto state 106
	Angle          goto state 107

State 89

	Gate -> 'U2' . '(' Angle ',' Angle ')'              (rule 51)

	'('            shift, and enter state 105


State 90

	Gate -> 'U3' . '(' Angle ',' Angle ',' Angle ')'    (rule 52)

	'('            shift, and enter state 104


State 91

	Gate -> 'X' .                                       (rule 29)

	'$'            reduce using rule 29
	'('            reduce using rule 29
	'()'           reduce using rule 29
	')'            reduce using rule 29
	','            reduce using rule 29
	'->'           reduce using rule 29
	'.'            reduce using rule 29
	';'            reduce using rule 29
	'@+'           reduce using rule 29
	'@+i'          reduce using rule 29
	'@-'           reduce using rule 29
	'@-i'          reduce using rule 29
	'@0'           reduce using rule 29
	'@1'           reduce using rule 29
	'FSWAP'        reduce using rule 29
	'H'            reduce using rule 29
	'ID'           reduce using rule 29
	'ISWAP'        reduce using rule 29
	'ROOT_SWAP'    reduce using rule 29
	'ROOT_SWAP_DAG'reduce using rule 29
	'ROOT_X'       reduce using rule 29
	'ROOT_X_DAG'   reduce using rule 29
	'ROOT_Y'       reduce using rule 29
	'ROOT_Y_DAG'   reduce using rule 29
	'ROOT_Z'       reduce using rule 29
	'ROOT_Z_DAG'   reduce using rule 29
	'RX'           reduce using rule 29
	'RY'           reduce using rule 29
	'RZ'           reduce using rule 29
	'S'            reduce using rule 29
	'SQRT_SWAP'    reduce using rule 29
	'SQRT_SWAP_DAG'reduce using rule 29
	'SQRT_X'       reduce using rule 29
	'SQRT_X_DAG'   reduce using rule 29
	'SQRT_Y'       reduce using rule 29
	'SQRT_Y_DAG'   reduce using rule 29
	'SWAP'         reduce using rule 29
	'SWAP_THETA'   reduce using rule 29
	'S_DAG'        reduce using rule 29
	'T'            reduce using rule 29
	'T_DAG'        reduce using rule 29
	'U1'           reduce using rule 29
	'U2'           reduce using rule 29
	'U3'           reduce using rule 29
	'X'            reduce using rule 29
	'Y'            reduce using rule 29
	'Z'            reduce using rule 29
	']'            reduce using rule 29
	'else'         reduce using rule 29
	'of'           reduce using rule 29
	'then'         reduce using rule 29
	'}'            reduce using rule 29
	L_Var          reduce using rule 29


State 92

	Gate -> 'Y' .                                       (rule 30)

	'$'            reduce using rule 30
	'('            reduce using rule 30
	'()'           reduce using rule 30
	')'            reduce using rule 30
	','            reduce using rule 30
	'->'           reduce using rule 30
	'.'            reduce using rule 30
	';'            reduce using rule 30
	'@+'           reduce using rule 30
	'@+i'          reduce using rule 30
	'@-'           reduce using rule 30
	'@-i'          reduce using rule 30
	'@0'           reduce using rule 30
	'@1'           reduce using rule 30
	'FSWAP'        reduce using rule 30
	'H'            reduce using rule 30
	'ID'           reduce using rule 30
	'ISWAP'        reduce using rule 30
	'ROOT_SWAP'    reduce using rule 30
	'ROOT_SWAP_DAG'reduce using rule 30
	'ROOT_X'       reduce using rule 30
	'ROOT_X_DAG'   reduce using rule 30
	'ROOT_Y'       reduce using rule 30
	'ROOT_Y_DAG'   reduce using rule 30
	'ROOT_Z'       reduce using rule 30
	'ROOT_Z_DAG'   reduce using rule 30
	'RX'           reduce using rule 30
	'RY'           reduce using rule 30
	'RZ'           reduce using rule 30
	'S'            reduce using rule 30
	'SQRT_SWAP'    reduce using rule 30
	'SQRT_SWAP_DAG'reduce using rule 30
	'SQRT_X'       reduce using rule 30
	'SQRT_X_DAG'   reduce using rule 30
	'SQRT_Y'       reduce using rule 30
	'SQRT_Y_DAG'   reduce using rule 30
	'SWAP'         reduce using rule 30
	'SWAP_THETA'   reduce using rule 30
	'S_DAG'        reduce using rule 30
	'T'            reduce using rule 30
	'T_DAG'        reduce using rule 30
	'U1'           reduce using rule 30
	'U2'           reduce using rule 30
	'U3'           reduce using rule 30
	'X'            reduce using rule 30
	'Y'            reduce using rule 30
	'Z'            reduce using rule 30
	']'            reduce using rule 30
	'else'         reduce using rule 30
	'of'           reduce using rule 30
	'then'         reduce using rule 30
	'}'            reduce using rule 30
	L_Var          reduce using rule 30


State 93

	Gate -> 'Z' .                                       (rule 31)

	'$'            reduce using rule 31
	'('            reduce using rule 31
	'()'           reduce using rule 31
	')'            reduce using rule 31
	','            reduce using rule 31
	'->'           reduce using rule 31
	'.'            reduce using rule 31
	';'            reduce using rule 31
	'@+'           reduce using rule 31
	'@+i'          reduce using rule 31
	'@-'           reduce using rule 31
	'@-i'          reduce using rule 31
	'@0'           reduce using rule 31
	'@1'           reduce using rule 31
	'FSWAP'        reduce using rule 31
	'H'            reduce using rule 31
	'ID'           reduce using rule 31
	'ISWAP'        reduce using rule 31
	'ROOT_SWAP'    reduce using rule 31
	'ROOT_SWAP_DAG'reduce using rule 31
	'ROOT_X'       reduce using rule 31
	'ROOT_X_DAG'   reduce using rule 31
	'ROOT_Y'       reduce using rule 31
	'ROOT_Y_DAG'   reduce using rule 31
	'ROOT_Z'       reduce using rule 31
	'ROOT_Z_DAG'   reduce using rule 31
	'RX'           reduce using rule 31
	'RY'           reduce using rule 31
	'RZ'           reduce using rule 31
	'S'            reduce using rule 31
	'SQRT_SWAP'    reduce using rule 31
	'SQRT_SWAP_DAG'reduce using rule 31
	'SQRT_X'       reduce using rule 31
	'SQRT_X_DAG'   reduce using rule 31
	'SQRT_Y'       reduce using rule 31
	'SQRT_Y_DAG'   reduce using rule 31
	'SWAP'         reduce using rule 31
	'SWAP_THETA'   reduce using rule 31
	'S_DAG'        reduce using rule 31
	'T'            reduce using rule 31
	'T_DAG'        reduce using rule 31
	'U1'           reduce using rule 31
	'U2'           reduce using rule 31
	'U3'           reduce using rule 31
	'X'            reduce using rule 31
	'Y'            reduce using rule 31
	'Z'            reduce using rule 31
	']'            reduce using rule 31
	'else'         reduce using rule 31
	'of'           reduce using rule 31
	'then'         reduce using rule 31
	'}'            reduce using rule 31
	L_Var          reduce using rule 31


State 94

	Term1 -> 'case' . Term 'of' CaseExpression ListCaseExpression    (rule 84)

	'('            shift, and enter state 53
	'()'           shift, and enter state 54
	'@+'           shift, and enter state 55
	'@+i'          shift, and enter state 56
	'@-'           shift, and enter state 57
	'@-i'          shift, and enter state 58
	'@0'           shift, and enter state 59
	'@1'           shift, and enter state 60
	'FSWAP'        shift, and enter state 61
	'H'            shift, and enter state 62
	'ID'           shift, and enter state 63
	'ISWAP'        shift, and enter state 64
	'ROOT_SWAP'    shift, and enter state 65
	'ROOT_SWAP_DAG'shift, and enter state 66
	'ROOT_X'       shift, and enter state 67
	'ROOT_X_DAG'   shift, and enter state 68
	'ROOT_Y'       shift, and enter state 69
	'ROOT_Y_DAG'   shift, and enter state 70
	'ROOT_Z'       shift, and enter state 71
	'ROOT_Z_DAG'   shift, and enter state 72
	'RX'           shift, and enter state 73
	'RY'           shift, and enter state 74
	'RZ'           shift, and enter state 75
	'S'            shift, and enter state 76
	'SQRT_SWAP'    shift, and enter state 77
	'SQRT_SWAP_DAG'shift, and enter state 78
	'SQRT_X'       shift, and enter state 79
	'SQRT_X_DAG'   shift, and enter state 80
	'SQRT_Y'       shift, and enter state 81
	'SQRT_Y_DAG'   shift, and enter state 82
	'SWAP'         shift, and enter state 83
	'SWAP_THETA'   shift, and enter state 84
	'S_DAG'        shift, and enter state 85
	'T'            shift, and enter state 86
	'T_DAG'        shift, and enter state 87
	'U1'           shift, and enter state 88
	'U2'           shift, and enter state 89
	'U3'           shift, and enter state 90
	'X'            shift, and enter state 91
	'Y'            shift, and enter state 92
	'Z'            shift, and enter state 93
	'case'         shift, and enter state 94
	'if'           shift, and enter state 95
	'let'          shift, and enter state 96
	'with'         shift, and enter state 97
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 98

	Var            goto state 43
	Lambda         goto state 44
	BasisState     goto state 45
	Gate           goto state 46
	LetVariable    goto state 47
	Tuple          goto state 48
	Term3          goto state 49
	Term1          goto state 50
	Term2          goto state 51
	Term           goto state 103

State 95

	Term1 -> 'if' . Term 'then' Term 'else' Term        (rule 81)

	'('            shift, and enter state 53
	'()'           shift, and enter state 54
	'@+'           shift, and enter state 55
	'@+i'          shift, and enter state 56
	'@-'           shift, and enter state 57
	'@-i'          shift, and enter state 58
	'@0'           shift, and enter state 59
	'@1'           shift, and enter state 60
	'FSWAP'        shift, and enter state 61
	'H'            shift, and enter state 62
	'ID'           shift, and enter state 63
	'ISWAP'        shift, and enter state 64
	'ROOT_SWAP'    shift, and enter state 65
	'ROOT_SWAP_DAG'shift, and enter state 66
	'ROOT_X'       shift, and enter state 67
	'ROOT_X_DAG'   shift, and enter state 68
	'ROOT_Y'       shift, and enter state 69
	'ROOT_Y_DAG'   shift, and enter state 70
	'ROOT_Z'       shift, and enter state 71
	'ROOT_Z_DAG'   shift, and enter state 72
	'RX'           shift, and enter state 73
	'RY'           shift, and enter state 74
	'RZ'           shift, and enter state 75
	'S'            shift, and enter state 76
	'SQRT_SWAP'    shift, and enter state 77
	'SQRT_SWAP_DAG'shift, and enter state 78
	'SQRT_X'       shift, and enter state 79
	'SQRT_X_DAG'   shift, and enter state 80
	'SQRT_Y'       shift, and enter state 81
	'SQRT_Y_DAG'   shift, and enter state 82
	'SWAP'         shift, and enter state 83
	'SWAP_THETA'   shift, and enter state 84
	'S_DAG'        shift, and enter state 85
	'T'            shift, and enter state 86
	'T_DAG'        shift, and enter state 87
	'U1'           shift, and enter state 88
	'U2'           shift, and enter state 89
	'U3'           shift, and enter state 90
	'X'            shift, and enter state 91
	'Y'            shift, and enter state 92
	'Z'            shift, and enter state 93
	'case'         shift, and enter state 94
	'if'           shift, and enter state 95
	'let'          shift, and enter state 96
	'with'         shift, and enter state 97
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 98

	Var            goto state 43
	Lambda         goto state 44
	BasisState     goto state 45
	Gate           goto state 46
	LetVariable    goto state 47
	Tuple          goto state 48
	Term3          goto state 49
	Term1          goto state 50
	Term2          goto state 51
	Term           goto state 102

State 96

	Term1 -> 'let' . '{' '(' LetVariable ',' ListLetVariable ')' '=' Term '}' 'in' Term    (rule 82)

	'{'            shift, and enter state 101


State 97

	Term1 -> 'with' . Controls 'ctrl' ControlBasisStates    (rule 86)
	Term1 -> 'with' . Controls 'ctrl' ControlBits       (rule 87)

	'['            shift, and enter state 100

	Controls       goto state 99

State 98

	Lambda -> L_Lambda .                                (rule 4)

	L_Var          reduce using rule 4


State 99

	Term1 -> 'with' Controls . 'ctrl' ControlBasisStates    (rule 86)
	Term1 -> 'with' Controls . 'ctrl' ControlBits       (rule 87)

	'ctrl'         shift, and enter state 142


State 100

	Controls -> '[' . Term ',' ListTerm ']'             (rule 66)

	'('            shift, and enter state 53
	'()'           shift, and enter state 54
	'@+'           shift, and enter state 55
	'@+i'          shift, and enter state 56
	'@-'           shift, and enter state 57
	'@-i'          shift, and enter state 58
	'@0'           shift, and enter state 59
	'@1'           shift, and enter state 60
	'FSWAP'        shift, and enter state 61
	'H'            shift, and enter state 62
	'ID'           shift, and enter state 63
	'ISWAP'        shift, and enter state 64
	'ROOT_SWAP'    shift, and enter state 65
	'ROOT_SWAP_DAG'shift, and enter state 66
	'ROOT_X'       shift, and enter state 67
	'ROOT_X_DAG'   shift, and enter state 68
	'ROOT_Y'       shift, and enter state 69
	'ROOT_Y_DAG'   shift, and enter state 70
	'ROOT_Z'       shift, and enter state 71
	'ROOT_Z_DAG'   shift, and enter state 72
	'RX'           shift, and enter state 73
	'RY'           shift, and enter state 74
	'RZ'           shift, and enter state 75
	'S'            shift, and enter state 76
	'SQRT_SWAP'    shift, and enter state 77
	'SQRT_SWAP_DAG'shift, and enter state 78
	'SQRT_X'       shift, and enter state 79
	'SQRT_X_DAG'   shift, and enter state 80
	'SQRT_Y'       shift, and enter state 81
	'SQRT_Y_DAG'   shift, and enter state 82
	'SWAP'         shift, and enter state 83
	'SWAP_THETA'   shift, and enter state 84
	'S_DAG'        shift, and enter state 85
	'T'            shift, and enter state 86
	'T_DAG'        shift, and enter state 87
	'U1'           shift, and enter state 88
	'U2'           shift, and enter state 89
	'U3'           shift, and enter state 90
	'X'            shift, and enter state 91
	'Y'            shift, and enter state 92
	'Z'            shift, and enter state 93
	'case'         shift, and enter state 94
	'if'           shift, and enter state 95
	'let'          shift, and enter state 96
	'with'         shift, and enter state 97
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 98

	Var            goto state 43
	Lambda         goto state 44
	BasisState     goto state 45
	Gate           goto state 46
	LetVariable    goto state 47
	Tuple          goto state 48
	Term3          goto state 49
	Term1          goto state 50
	Term2          goto state 51
	Term           goto state 141

State 101

	Term1 -> 'let' '{' . '(' LetVariable ',' ListLetVariable ')' '=' Term '}' 'in' Term    (rule 82)

	'('            shift, and enter state 140


State 102

	Term1 -> 'if' Term . 'then' Term 'else' Term        (rule 81)

	'then'         shift, and enter state 139


State 103

	Term1 -> 'case' Term . 'of' CaseExpression ListCaseExpression    (rule 84)

	'of'           shift, and enter state 138


State 104

	Gate -> 'U3' '(' . Angle ',' Angle ',' Angle ')'    (rule 52)

	L_doubl        shift, and enter state 2

	Double         goto state 106
	Angle          goto state 137

State 105

	Gate -> 'U2' '(' . Angle ',' Angle ')'              (rule 51)

	L_doubl        shift, and enter state 2

	Double         goto state 106
	Angle          goto state 136

State 106

	Angle -> Double .                                   (rule 20)

	'$'            reduce using rule 20
	'('            reduce using rule 20
	'()'           reduce using rule 20
	')'            reduce using rule 20
	','            reduce using rule 20
	'->'           reduce using rule 20
	'.'            reduce using rule 20
	';'            reduce using rule 20
	'@+'           reduce using rule 20
	'@+i'          reduce using rule 20
	'@-'           reduce using rule 20
	'@-i'          reduce using rule 20
	'@0'           reduce using rule 20
	'@1'           reduce using rule 20
	'FSWAP'        reduce using rule 20
	'H'            reduce using rule 20
	'ID'           reduce using rule 20
	'ISWAP'        reduce using rule 20
	'ROOT_SWAP'    reduce using rule 20
	'ROOT_SWAP_DAG'reduce using rule 20
	'ROOT_X'       reduce using rule 20
	'ROOT_X_DAG'   reduce using rule 20
	'ROOT_Y'       reduce using rule 20
	'ROOT_Y_DAG'   reduce using rule 20
	'ROOT_Z'       reduce using rule 20
	'ROOT_Z_DAG'   reduce using rule 20
	'RX'           reduce using rule 20
	'RY'           reduce using rule 20
	'RZ'           reduce using rule 20
	'S'            reduce using rule 20
	'SQRT_SWAP'    reduce using rule 20
	'SQRT_SWAP_DAG'reduce using rule 20
	'SQRT_X'       reduce using rule 20
	'SQRT_X_DAG'   reduce using rule 20
	'SQRT_Y'       reduce using rule 20
	'SQRT_Y_DAG'   reduce using rule 20
	'SWAP'         reduce using rule 20
	'SWAP_THETA'   reduce using rule 20
	'S_DAG'        reduce using rule 20
	'T'            reduce using rule 20
	'T_DAG'        reduce using rule 20
	'U1'           reduce using rule 20
	'U2'           reduce using rule 20
	'U3'           reduce using rule 20
	'X'            reduce using rule 20
	'Y'            reduce using rule 20
	'Z'            reduce using rule 20
	']'            reduce using rule 20
	'else'         reduce using rule 20
	'of'           reduce using rule 20
	'then'         reduce using rule 20
	'}'            reduce using rule 20
	L_Var          reduce using rule 20


State 107

	Gate -> 'U1' Angle .                                (rule 50)

	'$'            reduce using rule 50
	'('            reduce using rule 50
	'()'           reduce using rule 50
	')'            reduce using rule 50
	','            reduce using rule 50
	'->'           reduce using rule 50
	'.'            reduce using rule 50
	';'            reduce using rule 50
	'@+'           reduce using rule 50
	'@+i'          reduce using rule 50
	'@-'           reduce using rule 50
	'@-i'          reduce using rule 50
	'@0'           reduce using rule 50
	'@1'           reduce using rule 50
	'FSWAP'        reduce using rule 50
	'H'            reduce using rule 50
	'ID'           reduce using rule 50
	'ISWAP'        reduce using rule 50
	'ROOT_SWAP'    reduce using rule 50
	'ROOT_SWAP_DAG'reduce using rule 50
	'ROOT_X'       reduce using rule 50
	'ROOT_X_DAG'   reduce using rule 50
	'ROOT_Y'       reduce using rule 50
	'ROOT_Y_DAG'   reduce using rule 50
	'ROOT_Z'       reduce using rule 50
	'ROOT_Z_DAG'   reduce using rule 50
	'RX'           reduce using rule 50
	'RY'           reduce using rule 50
	'RZ'           reduce using rule 50
	'S'            reduce using rule 50
	'SQRT_SWAP'    reduce using rule 50
	'SQRT_SWAP_DAG'reduce using rule 50
	'SQRT_X'       reduce using rule 50
	'SQRT_X_DAG'   reduce using rule 50
	'SQRT_Y'       reduce using rule 50
	'SQRT_Y_DAG'   reduce using rule 50
	'SWAP'         reduce using rule 50
	'SWAP_THETA'   reduce using rule 50
	'S_DAG'        reduce using rule 50
	'T'            reduce using rule 50
	'T_DAG'        reduce using rule 50
	'U1'           reduce using rule 50
	'U2'           reduce using rule 50
	'U3'           reduce using rule 50
	'X'            reduce using rule 50
	'Y'            reduce using rule 50
	'Z'            reduce using rule 50
	']'            reduce using rule 50
	'else'         reduce using rule 50
	'of'           reduce using rule 50
	'then'         reduce using rule 50
	'}'            reduce using rule 50
	L_Var          reduce using rule 50


State 108

	Gate -> 'SWAP_THETA' Angle .                        (rule 58)

	'$'            reduce using rule 58
	'('            reduce using rule 58
	'()'           reduce using rule 58
	')'            reduce using rule 58
	','            reduce using rule 58
	'->'           reduce using rule 58
	'.'            reduce using rule 58
	';'            reduce using rule 58
	'@+'           reduce using rule 58
	'@+i'          reduce using rule 58
	'@-'           reduce using rule 58
	'@-i'          reduce using rule 58
	'@0'           reduce using rule 58
	'@1'           reduce using rule 58
	'FSWAP'        reduce using rule 58
	'H'            reduce using rule 58
	'ID'           reduce using rule 58
	'ISWAP'        reduce using rule 58
	'ROOT_SWAP'    reduce using rule 58
	'ROOT_SWAP_DAG'reduce using rule 58
	'ROOT_X'       reduce using rule 58
	'ROOT_X_DAG'   reduce using rule 58
	'ROOT_Y'       reduce using rule 58
	'ROOT_Y_DAG'   reduce using rule 58
	'ROOT_Z'       reduce using rule 58
	'ROOT_Z_DAG'   reduce using rule 58
	'RX'           reduce using rule 58
	'RY'           reduce using rule 58
	'RZ'           reduce using rule 58
	'S'            reduce using rule 58
	'SQRT_SWAP'    reduce using rule 58
	'SQRT_SWAP_DAG'reduce using rule 58
	'SQRT_X'       reduce using rule 58
	'SQRT_X_DAG'   reduce using rule 58
	'SQRT_Y'       reduce using rule 58
	'SQRT_Y_DAG'   reduce using rule 58
	'SWAP'         reduce using rule 58
	'SWAP_THETA'   reduce using rule 58
	'S_DAG'        reduce using rule 58
	'T'            reduce using rule 58
	'T_DAG'        reduce using rule 58
	'U1'           reduce using rule 58
	'U2'           reduce using rule 58
	'U3'           reduce using rule 58
	'X'            reduce using rule 58
	'Y'            reduce using rule 58
	'Z'            reduce using rule 58
	']'            reduce using rule 58
	'else'         reduce using rule 58
	'of'           reduce using rule 58
	'then'         reduce using rule 58
	'}'            reduce using rule 58
	L_Var          reduce using rule 58


State 109

	Gate -> 'RZ' Angle .                                (rule 49)

	'$'            reduce using rule 49
	'('            reduce using rule 49
	'()'           reduce using rule 49
	')'            reduce using rule 49
	','            reduce using rule 49
	'->'           reduce using rule 49
	'.'            reduce using rule 49
	';'            reduce using rule 49
	'@+'           reduce using rule 49
	'@+i'          reduce using rule 49
	'@-'           reduce using rule 49
	'@-i'          reduce using rule 49
	'@0'           reduce using rule 49
	'@1'           reduce using rule 49
	'FSWAP'        reduce using rule 49
	'H'            reduce using rule 49
	'ID'           reduce using rule 49
	'ISWAP'        reduce using rule 49
	'ROOT_SWAP'    reduce using rule 49
	'ROOT_SWAP_DAG'reduce using rule 49
	'ROOT_X'       reduce using rule 49
	'ROOT_X_DAG'   reduce using rule 49
	'ROOT_Y'       reduce using rule 49
	'ROOT_Y_DAG'   reduce using rule 49
	'ROOT_Z'       reduce using rule 49
	'ROOT_Z_DAG'   reduce using rule 49
	'RX'           reduce using rule 49
	'RY'           reduce using rule 49
	'RZ'           reduce using rule 49
	'S'            reduce using rule 49
	'SQRT_SWAP'    reduce using rule 49
	'SQRT_SWAP_DAG'reduce using rule 49
	'SQRT_X'       reduce using rule 49
	'SQRT_X_DAG'   reduce using rule 49
	'SQRT_Y'       reduce using rule 49
	'SQRT_Y_DAG'   reduce using rule 49
	'SWAP'         reduce using rule 49
	'SWAP_THETA'   reduce using rule 49
	'S_DAG'        reduce using rule 49
	'T'            reduce using rule 49
	'T_DAG'        reduce using rule 49
	'U1'           reduce using rule 49
	'U2'           reduce using rule 49
	'U3'           reduce using rule 49
	'X'            reduce using rule 49
	'Y'            reduce using rule 49
	'Z'            reduce using rule 49
	']'            reduce using rule 49
	'else'         reduce using rule 49
	'of'           reduce using rule 49
	'then'         reduce using rule 49
	'}'            reduce using rule 49
	L_Var          reduce using rule 49


State 110

	Gate -> 'RY' Angle .                                (rule 48)

	'$'            reduce using rule 48
	'('            reduce using rule 48
	'()'           reduce using rule 48
	')'            reduce using rule 48
	','            reduce using rule 48
	'->'           reduce using rule 48
	'.'            reduce using rule 48
	';'            reduce using rule 48
	'@+'           reduce using rule 48
	'@+i'          reduce using rule 48
	'@-'           reduce using rule 48
	'@-i'          reduce using rule 48
	'@0'           reduce using rule 48
	'@1'           reduce using rule 48
	'FSWAP'        reduce using rule 48
	'H'            reduce using rule 48
	'ID'           reduce using rule 48
	'ISWAP'        reduce using rule 48
	'ROOT_SWAP'    reduce using rule 48
	'ROOT_SWAP_DAG'reduce using rule 48
	'ROOT_X'       reduce using rule 48
	'ROOT_X_DAG'   reduce using rule 48
	'ROOT_Y'       reduce using rule 48
	'ROOT_Y_DAG'   reduce using rule 48
	'ROOT_Z'       reduce using rule 48
	'ROOT_Z_DAG'   reduce using rule 48
	'RX'           reduce using rule 48
	'RY'           reduce using rule 48
	'RZ'           reduce using rule 48
	'S'            reduce using rule 48
	'SQRT_SWAP'    reduce using rule 48
	'SQRT_SWAP_DAG'reduce using rule 48
	'SQRT_X'       reduce using rule 48
	'SQRT_X_DAG'   reduce using rule 48
	'SQRT_Y'       reduce using rule 48
	'SQRT_Y_DAG'   reduce using rule 48
	'SWAP'         reduce using rule 48
	'SWAP_THETA'   reduce using rule 48
	'S_DAG'        reduce using rule 48
	'T'            reduce using rule 48
	'T_DAG'        reduce using rule 48
	'U1'           reduce using rule 48
	'U2'           reduce using rule 48
	'U3'           reduce using rule 48
	'X'            reduce using rule 48
	'Y'            reduce using rule 48
	'Z'            reduce using rule 48
	']'            reduce using rule 48
	'else'         reduce using rule 48
	'of'           reduce using rule 48
	'then'         reduce using rule 48
	'}'            reduce using rule 48
	L_Var          reduce using rule 48


State 111

	Gate -> 'RX' Angle .                                (rule 47)

	'$'            reduce using rule 47
	'('            reduce using rule 47
	'()'           reduce using rule 47
	')'            reduce using rule 47
	','            reduce using rule 47
	'->'           reduce using rule 47
	'.'            reduce using rule 47
	';'            reduce using rule 47
	'@+'           reduce using rule 47
	'@+i'          reduce using rule 47
	'@-'           reduce using rule 47
	'@-i'          reduce using rule 47
	'@0'           reduce using rule 47
	'@1'           reduce using rule 47
	'FSWAP'        reduce using rule 47
	'H'            reduce using rule 47
	'ID'           reduce using rule 47
	'ISWAP'        reduce using rule 47
	'ROOT_SWAP'    reduce using rule 47
	'ROOT_SWAP_DAG'reduce using rule 47
	'ROOT_X'       reduce using rule 47
	'ROOT_X_DAG'   reduce using rule 47
	'ROOT_Y'       reduce using rule 47
	'ROOT_Y_DAG'   reduce using rule 47
	'ROOT_Z'       reduce using rule 47
	'ROOT_Z_DAG'   reduce using rule 47
	'RX'           reduce using rule 47
	'RY'           reduce using rule 47
	'RZ'           reduce using rule 47
	'S'            reduce using rule 47
	'SQRT_SWAP'    reduce using rule 47
	'SQRT_SWAP_DAG'reduce using rule 47
	'SQRT_X'       reduce using rule 47
	'SQRT_X_DAG'   reduce using rule 47
	'SQRT_Y'       reduce using rule 47
	'SQRT_Y_DAG'   reduce using rule 47
	'SWAP'         reduce using rule 47
	'SWAP_THETA'   reduce using rule 47
	'S_DAG'        reduce using rule 47
	'T'            reduce using rule 47
	'T_DAG'        reduce using rule 47
	'U1'           reduce using rule 47
	'U2'           reduce using rule 47
	'U3'           reduce using rule 47
	'X'            reduce using rule 47
	'Y'            reduce using rule 47
	'Z'            reduce using rule 47
	']'            reduce using rule 47
	'else'         reduce using rule 47
	'of'           reduce using rule 47
	'then'         reduce using rule 47
	'}'            reduce using rule 47
	L_Var          reduce using rule 47


State 112

	Gate -> 'ROOT_Z_DAG' Integer .                      (rule 38)

	'$'            reduce using rule 38
	'('            reduce using rule 38
	'()'           reduce using rule 38
	')'            reduce using rule 38
	','            reduce using rule 38
	'->'           reduce using rule 38
	'.'            reduce using rule 38
	';'            reduce using rule 38
	'@+'           reduce using rule 38
	'@+i'          reduce using rule 38
	'@-'           reduce using rule 38
	'@-i'          reduce using rule 38
	'@0'           reduce using rule 38
	'@1'           reduce using rule 38
	'FSWAP'        reduce using rule 38
	'H'            reduce using rule 38
	'ID'           reduce using rule 38
	'ISWAP'        reduce using rule 38
	'ROOT_SWAP'    reduce using rule 38
	'ROOT_SWAP_DAG'reduce using rule 38
	'ROOT_X'       reduce using rule 38
	'ROOT_X_DAG'   reduce using rule 38
	'ROOT_Y'       reduce using rule 38
	'ROOT_Y_DAG'   reduce using rule 38
	'ROOT_Z'       reduce using rule 38
	'ROOT_Z_DAG'   reduce using rule 38
	'RX'           reduce using rule 38
	'RY'           reduce using rule 38
	'RZ'           reduce using rule 38
	'S'            reduce using rule 38
	'SQRT_SWAP'    reduce using rule 38
	'SQRT_SWAP_DAG'reduce using rule 38
	'SQRT_X'       reduce using rule 38
	'SQRT_X_DAG'   reduce using rule 38
	'SQRT_Y'       reduce using rule 38
	'SQRT_Y_DAG'   reduce using rule 38
	'SWAP'         reduce using rule 38
	'SWAP_THETA'   reduce using rule 38
	'S_DAG'        reduce using rule 38
	'T'            reduce using rule 38
	'T_DAG'        reduce using rule 38
	'U1'           reduce using rule 38
	'U2'           reduce using rule 38
	'U3'           reduce using rule 38
	'X'            reduce using rule 38
	'Y'            reduce using rule 38
	'Z'            reduce using rule 38
	']'            reduce using rule 38
	'else'         reduce using rule 38
	'of'           reduce using rule 38
	'then'         reduce using rule 38
	'}'            reduce using rule 38
	L_Var          reduce using rule 38


State 113

	Gate -> 'ROOT_Z' Integer .                          (rule 37)

	'$'            reduce using rule 37
	'('            reduce using rule 37
	'()'           reduce using rule 37
	')'            reduce using rule 37
	','            reduce using rule 37
	'->'           reduce using rule 37
	'.'            reduce using rule 37
	';'            reduce using rule 37
	'@+'           reduce using rule 37
	'@+i'          reduce using rule 37
	'@-'           reduce using rule 37
	'@-i'          reduce using rule 37
	'@0'           reduce using rule 37
	'@1'           reduce using rule 37
	'FSWAP'        reduce using rule 37
	'H'            reduce using rule 37
	'ID'           reduce using rule 37
	'ISWAP'        reduce using rule 37
	'ROOT_SWAP'    reduce using rule 37
	'ROOT_SWAP_DAG'reduce using rule 37
	'ROOT_X'       reduce using rule 37
	'ROOT_X_DAG'   reduce using rule 37
	'ROOT_Y'       reduce using rule 37
	'ROOT_Y_DAG'   reduce using rule 37
	'ROOT_Z'       reduce using rule 37
	'ROOT_Z_DAG'   reduce using rule 37
	'RX'           reduce using rule 37
	'RY'           reduce using rule 37
	'RZ'           reduce using rule 37
	'S'            reduce using rule 37
	'SQRT_SWAP'    reduce using rule 37
	'SQRT_SWAP_DAG'reduce using rule 37
	'SQRT_X'       reduce using rule 37
	'SQRT_X_DAG'   reduce using rule 37
	'SQRT_Y'       reduce using rule 37
	'SQRT_Y_DAG'   reduce using rule 37
	'SWAP'         reduce using rule 37
	'SWAP_THETA'   reduce using rule 37
	'S_DAG'        reduce using rule 37
	'T'            reduce using rule 37
	'T_DAG'        reduce using rule 37
	'U1'           reduce using rule 37
	'U2'           reduce using rule 37
	'U3'           reduce using rule 37
	'X'            reduce using rule 37
	'Y'            reduce using rule 37
	'Z'            reduce using rule 37
	']'            reduce using rule 37
	'else'         reduce using rule 37
	'of'           reduce using rule 37
	'then'         reduce using rule 37
	'}'            reduce using rule 37
	L_Var          reduce using rule 37


State 114

	Gate -> 'ROOT_Y_DAG' Integer .                      (rule 36)

	'$'            reduce using rule 36
	'('            reduce using rule 36
	'()'           reduce using rule 36
	')'            reduce using rule 36
	','            reduce using rule 36
	'->'           reduce using rule 36
	'.'            reduce using rule 36
	';'            reduce using rule 36
	'@+'           reduce using rule 36
	'@+i'          reduce using rule 36
	'@-'           reduce using rule 36
	'@-i'          reduce using rule 36
	'@0'           reduce using rule 36
	'@1'           reduce using rule 36
	'FSWAP'        reduce using rule 36
	'H'            reduce using rule 36
	'ID'           reduce using rule 36
	'ISWAP'        reduce using rule 36
	'ROOT_SWAP'    reduce using rule 36
	'ROOT_SWAP_DAG'reduce using rule 36
	'ROOT_X'       reduce using rule 36
	'ROOT_X_DAG'   reduce using rule 36
	'ROOT_Y'       reduce using rule 36
	'ROOT_Y_DAG'   reduce using rule 36
	'ROOT_Z'       reduce using rule 36
	'ROOT_Z_DAG'   reduce using rule 36
	'RX'           reduce using rule 36
	'RY'           reduce using rule 36
	'RZ'           reduce using rule 36
	'S'            reduce using rule 36
	'SQRT_SWAP'    reduce using rule 36
	'SQRT_SWAP_DAG'reduce using rule 36
	'SQRT_X'       reduce using rule 36
	'SQRT_X_DAG'   reduce using rule 36
	'SQRT_Y'       reduce using rule 36
	'SQRT_Y_DAG'   reduce using rule 36
	'SWAP'         reduce using rule 36
	'SWAP_THETA'   reduce using rule 36
	'S_DAG'        reduce using rule 36
	'T'            reduce using rule 36
	'T_DAG'        reduce using rule 36
	'U1'           reduce using rule 36
	'U2'           reduce using rule 36
	'U3'           reduce using rule 36
	'X'            reduce using rule 36
	'Y'            reduce using rule 36
	'Z'            reduce using rule 36
	']'            reduce using rule 36
	'else'         reduce using rule 36
	'of'           reduce using rule 36
	'then'         reduce using rule 36
	'}'            reduce using rule 36
	L_Var          reduce using rule 36


State 115

	Gate -> 'ROOT_Y' Integer .                          (rule 35)

	'$'            reduce using rule 35
	'('            reduce using rule 35
	'()'           reduce using rule 35
	')'            reduce using rule 35
	','            reduce using rule 35
	'->'           reduce using rule 35
	'.'            reduce using rule 35
	';'            reduce using rule 35
	'@+'           reduce using rule 35
	'@+i'          reduce using rule 35
	'@-'           reduce using rule 35
	'@-i'          reduce using rule 35
	'@0'           reduce using rule 35
	'@1'           reduce using rule 35
	'FSWAP'        reduce using rule 35
	'H'            reduce using rule 35
	'ID'           reduce using rule 35
	'ISWAP'        reduce using rule 35
	'ROOT_SWAP'    reduce using rule 35
	'ROOT_SWAP_DAG'reduce using rule 35
	'ROOT_X'       reduce using rule 35
	'ROOT_X_DAG'   reduce using rule 35
	'ROOT_Y'       reduce using rule 35
	'ROOT_Y_DAG'   reduce using rule 35
	'ROOT_Z'       reduce using rule 35
	'ROOT_Z_DAG'   reduce using rule 35
	'RX'           reduce using rule 35
	'RY'           reduce using rule 35
	'RZ'           reduce using rule 35
	'S'            reduce using rule 35
	'SQRT_SWAP'    reduce using rule 35
	'SQRT_SWAP_DAG'reduce using rule 35
	'SQRT_X'       reduce using rule 35
	'SQRT_X_DAG'   reduce using rule 35
	'SQRT_Y'       reduce using rule 35
	'SQRT_Y_DAG'   reduce using rule 35
	'SWAP'         reduce using rule 35
	'SWAP_THETA'   reduce using rule 35
	'S_DAG'        reduce using rule 35
	'T'            reduce using rule 35
	'T_DAG'        reduce using rule 35
	'U1'           reduce using rule 35
	'U2'           reduce using rule 35
	'U3'           reduce using rule 35
	'X'            reduce using rule 35
	'Y'            reduce using rule 35
	'Z'            reduce using rule 35
	']'            reduce using rule 35
	'else'         reduce using rule 35
	'of'           reduce using rule 35
	'then'         reduce using rule 35
	'}'            reduce using rule 35
	L_Var          reduce using rule 35


State 116

	Gate -> 'ROOT_X_DAG' Integer .                      (rule 34)

	'$'            reduce using rule 34
	'('            reduce using rule 34
	'()'           reduce using rule 34
	')'            reduce using rule 34
	','            reduce using rule 34
	'->'           reduce using rule 34
	'.'            reduce using rule 34
	';'            reduce using rule 34
	'@+'           reduce using rule 34
	'@+i'          reduce using rule 34
	'@-'           reduce using rule 34
	'@-i'          reduce using rule 34
	'@0'           reduce using rule 34
	'@1'           reduce using rule 34
	'FSWAP'        reduce using rule 34
	'H'            reduce using rule 34
	'ID'           reduce using rule 34
	'ISWAP'        reduce using rule 34
	'ROOT_SWAP'    reduce using rule 34
	'ROOT_SWAP_DAG'reduce using rule 34
	'ROOT_X'       reduce using rule 34
	'ROOT_X_DAG'   reduce using rule 34
	'ROOT_Y'       reduce using rule 34
	'ROOT_Y_DAG'   reduce using rule 34
	'ROOT_Z'       reduce using rule 34
	'ROOT_Z_DAG'   reduce using rule 34
	'RX'           reduce using rule 34
	'RY'           reduce using rule 34
	'RZ'           reduce using rule 34
	'S'            reduce using rule 34
	'SQRT_SWAP'    reduce using rule 34
	'SQRT_SWAP_DAG'reduce using rule 34
	'SQRT_X'       reduce using rule 34
	'SQRT_X_DAG'   reduce using rule 34
	'SQRT_Y'       reduce using rule 34
	'SQRT_Y_DAG'   reduce using rule 34
	'SWAP'         reduce using rule 34
	'SWAP_THETA'   reduce using rule 34
	'S_DAG'        reduce using rule 34
	'T'            reduce using rule 34
	'T_DAG'        reduce using rule 34
	'U1'           reduce using rule 34
	'U2'           reduce using rule 34
	'U3'           reduce using rule 34
	'X'            reduce using rule 34
	'Y'            reduce using rule 34
	'Z'            reduce using rule 34
	']'            reduce using rule 34
	'else'         reduce using rule 34
	'of'           reduce using rule 34
	'then'         reduce using rule 34
	'}'            reduce using rule 34
	L_Var          reduce using rule 34


State 117

	Gate -> 'ROOT_X' Integer .                          (rule 33)

	'$'            reduce using rule 33
	'('            reduce using rule 33
	'()'           reduce using rule 33
	')'            reduce using rule 33
	','            reduce using rule 33
	'->'           reduce using rule 33
	'.'            reduce using rule 33
	';'            reduce using rule 33
	'@+'           reduce using rule 33
	'@+i'          reduce using rule 33
	'@-'           reduce using rule 33
	'@-i'          reduce using rule 33
	'@0'           reduce using rule 33
	'@1'           reduce using rule 33
	'FSWAP'        reduce using rule 33
	'H'            reduce using rule 33
	'ID'           reduce using rule 33
	'ISWAP'        reduce using rule 33
	'ROOT_SWAP'    reduce using rule 33
	'ROOT_SWAP_DAG'reduce using rule 33
	'ROOT_X'       reduce using rule 33
	'ROOT_X_DAG'   reduce using rule 33
	'ROOT_Y'       reduce using rule 33
	'ROOT_Y_DAG'   reduce using rule 33
	'ROOT_Z'       reduce using rule 33
	'ROOT_Z_DAG'   reduce using rule 33
	'RX'           reduce using rule 33
	'RY'           reduce using rule 33
	'RZ'           reduce using rule 33
	'S'            reduce using rule 33
	'SQRT_SWAP'    reduce using rule 33
	'SQRT_SWAP_DAG'reduce using rule 33
	'SQRT_X'       reduce using rule 33
	'SQRT_X_DAG'   reduce using rule 33
	'SQRT_Y'       reduce using rule 33
	'SQRT_Y_DAG'   reduce using rule 33
	'SWAP'         reduce using rule 33
	'SWAP_THETA'   reduce using rule 33
	'S_DAG'        reduce using rule 33
	'T'            reduce using rule 33
	'T_DAG'        reduce using rule 33
	'U1'           reduce using rule 33
	'U2'           reduce using rule 33
	'U3'           reduce using rule 33
	'X'            reduce using rule 33
	'Y'            reduce using rule 33
	'Z'            reduce using rule 33
	']'            reduce using rule 33
	'else'         reduce using rule 33
	'of'           reduce using rule 33
	'then'         reduce using rule 33
	'}'            reduce using rule 33
	L_Var          reduce using rule 33


State 118

	Gate -> 'ROOT_SWAP_DAG' Integer .                   (rule 60)

	'$'            reduce using rule 60
	'('            reduce using rule 60
	'()'           reduce using rule 60
	')'            reduce using rule 60
	','            reduce using rule 60
	'->'           reduce using rule 60
	'.'            reduce using rule 60
	';'            reduce using rule 60
	'@+'           reduce using rule 60
	'@+i'          reduce using rule 60
	'@-'           reduce using rule 60
	'@-i'          reduce using rule 60
	'@0'           reduce using rule 60
	'@1'           reduce using rule 60
	'FSWAP'        reduce using rule 60
	'H'            reduce using rule 60
	'ID'           reduce using rule 60
	'ISWAP'        reduce using rule 60
	'ROOT_SWAP'    reduce using rule 60
	'ROOT_SWAP_DAG'reduce using rule 60
	'ROOT_X'       reduce using rule 60
	'ROOT_X_DAG'   reduce using rule 60
	'ROOT_Y'       reduce using rule 60
	'ROOT_Y_DAG'   reduce using rule 60
	'ROOT_Z'       reduce using rule 60
	'ROOT_Z_DAG'   reduce using rule 60
	'RX'           reduce using rule 60
	'RY'           reduce using rule 60
	'RZ'           reduce using rule 60
	'S'            reduce using rule 60
	'SQRT_SWAP'    reduce using rule 60
	'SQRT_SWAP_DAG'reduce using rule 60
	'SQRT_X'       reduce using rule 60
	'SQRT_X_DAG'   reduce using rule 60
	'SQRT_Y'       reduce using rule 60
	'SQRT_Y_DAG'   reduce using rule 60
	'SWAP'         reduce using rule 60
	'SWAP_THETA'   reduce using rule 60
	'S_DAG'        reduce using rule 60
	'T'            reduce using rule 60
	'T_DAG'        reduce using rule 60
	'U1'           reduce using rule 60
	'U2'           reduce using rule 60
	'U3'           reduce using rule 60
	'X'            reduce using rule 60
	'Y'            reduce using rule 60
	'Z'            reduce using rule 60
	']'            reduce using rule 60
	'else'         reduce using rule 60
	'of'           reduce using rule 60
	'then'         reduce using rule 60
	'}'            reduce using rule 60
	L_Var          reduce using rule 60


State 119

	Gate -> 'ROOT_SWAP' Integer .                       (rule 59)

	'$'            reduce using rule 59
	'('            reduce using rule 59
	'()'           reduce using rule 59
	')'            reduce using rule 59
	','            reduce using rule 59
	'->'           reduce using rule 59
	'.'            reduce using rule 59
	';'            reduce using rule 59
	'@+'           reduce using rule 59
	'@+i'          reduce using rule 59
	'@-'           reduce using rule 59
	'@-i'          reduce using rule 59
	'@0'           reduce using rule 59
	'@1'           reduce using rule 59
	'FSWAP'        reduce using rule 59
	'H'            reduce using rule 59
	'ID'           reduce using rule 59
	'ISWAP'        reduce using rule 59
	'ROOT_SWAP'    reduce using rule 59
	'ROOT_SWAP_DAG'reduce using rule 59
	'ROOT_X'       reduce using rule 59
	'ROOT_X_DAG'   reduce using rule 59
	'ROOT_Y'       reduce using rule 59
	'ROOT_Y_DAG'   reduce using rule 59
	'ROOT_Z'       reduce using rule 59
	'ROOT_Z_DAG'   reduce using rule 59
	'RX'           reduce using rule 59
	'RY'           reduce using rule 59
	'RZ'           reduce using rule 59
	'S'            reduce using rule 59
	'SQRT_SWAP'    reduce using rule 59
	'SQRT_SWAP_DAG'reduce using rule 59
	'SQRT_X'       reduce using rule 59
	'SQRT_X_DAG'   reduce using rule 59
	'SQRT_Y'       reduce using rule 59
	'SQRT_Y_DAG'   reduce using rule 59
	'SWAP'         reduce using rule 59
	'SWAP_THETA'   reduce using rule 59
	'S_DAG'        reduce using rule 59
	'T'            reduce using rule 59
	'T_DAG'        reduce using rule 59
	'U1'           reduce using rule 59
	'U2'           reduce using rule 59
	'U3'           reduce using rule 59
	'X'            reduce using rule 59
	'Y'            reduce using rule 59
	'Z'            reduce using rule 59
	']'            reduce using rule 59
	'else'         reduce using rule 59
	'of'           reduce using rule 59
	'then'         reduce using rule 59
	'}'            reduce using rule 59
	L_Var          reduce using rule 59


State 120

	Tuple -> '(' Term . ',' ListTerm ')'                (rule 65)
	Term3 -> '(' Term . ')'                             (rule 80)

	')'            shift, and enter state 134
	','            shift, and enter state 135


State 121

	Term3 -> Var .                                      (rule 77)

	'$'            reduce using rule 77
	'('            reduce using rule 77
	'()'           reduce using rule 77
	')'            reduce using rule 77
	','            reduce using rule 77
	'->'           reduce using rule 77
	'.'            reduce using rule 77
	';'            reduce using rule 77
	'@+'           reduce using rule 77
	'@+i'          reduce using rule 77
	'@-'           reduce using rule 77
	'@-i'          reduce using rule 77
	'@0'           reduce using rule 77
	'@1'           reduce using rule 77
	'FSWAP'        reduce using rule 77
	'H'            reduce using rule 77
	'ID'           reduce using rule 77
	'ISWAP'        reduce using rule 77
	'ROOT_SWAP'    reduce using rule 77
	'ROOT_SWAP_DAG'reduce using rule 77
	'ROOT_X'       reduce using rule 77
	'ROOT_X_DAG'   reduce using rule 77
	'ROOT_Y'       reduce using rule 77
	'ROOT_Y_DAG'   reduce using rule 77
	'ROOT_Z'       reduce using rule 77
	'ROOT_Z_DAG'   reduce using rule 77
	'RX'           reduce using rule 77
	'RY'           reduce using rule 77
	'RZ'           reduce using rule 77
	'S'            reduce using rule 77
	'SQRT_SWAP'    reduce using rule 77
	'SQRT_SWAP_DAG'reduce using rule 77
	'SQRT_X'       reduce using rule 77
	'SQRT_X_DAG'   reduce using rule 77
	'SQRT_Y'       reduce using rule 77
	'SQRT_Y_DAG'   reduce using rule 77
	'SWAP'         reduce using rule 77
	'SWAP_THETA'   reduce using rule 77
	'S_DAG'        reduce using rule 77
	'T'            reduce using rule 77
	'T_DAG'        reduce using rule 77
	'U1'           reduce using rule 77
	'U2'           reduce using rule 77
	'U3'           reduce using rule 77
	'X'            reduce using rule 77
	'Y'            reduce using rule 77
	'Z'            reduce using rule 77
	']'            reduce using rule 77
	'else'         reduce using rule 77
	'of'           reduce using rule 77
	'then'         reduce using rule 77
	'}'            reduce using rule 77
	L_Var          reduce using rule 77


State 122

	Term2 -> Term2 Term3 .                              (rule 90)

	'$'            reduce using rule 90
	'('            reduce using rule 90
	'()'           reduce using rule 90
	')'            reduce using rule 90
	','            reduce using rule 90
	'->'           reduce using rule 90
	'.'            reduce using rule 90
	';'            reduce using rule 90
	'@+'           reduce using rule 90
	'@+i'          reduce using rule 90
	'@-'           reduce using rule 90
	'@-i'          reduce using rule 90
	'@0'           reduce using rule 90
	'@1'           reduce using rule 90
	'FSWAP'        reduce using rule 90
	'H'            reduce using rule 90
	'ID'           reduce using rule 90
	'ISWAP'        reduce using rule 90
	'ROOT_SWAP'    reduce using rule 90
	'ROOT_SWAP_DAG'reduce using rule 90
	'ROOT_X'       reduce using rule 90
	'ROOT_X_DAG'   reduce using rule 90
	'ROOT_Y'       reduce using rule 90
	'ROOT_Y_DAG'   reduce using rule 90
	'ROOT_Z'       reduce using rule 90
	'ROOT_Z_DAG'   reduce using rule 90
	'RX'           reduce using rule 90
	'RY'           reduce using rule 90
	'RZ'           reduce using rule 90
	'S'            reduce using rule 90
	'SQRT_SWAP'    reduce using rule 90
	'SQRT_SWAP_DAG'reduce using rule 90
	'SQRT_X'       reduce using rule 90
	'SQRT_X_DAG'   reduce using rule 90
	'SQRT_Y'       reduce using rule 90
	'SQRT_Y_DAG'   reduce using rule 90
	'SWAP'         reduce using rule 90
	'SWAP_THETA'   reduce using rule 90
	'S_DAG'        reduce using rule 90
	'T'            reduce using rule 90
	'T_DAG'        reduce using rule 90
	'U1'           reduce using rule 90
	'U2'           reduce using rule 90
	'U3'           reduce using rule 90
	'X'            reduce using rule 90
	'Y'            reduce using rule 90
	'Z'            reduce using rule 90
	']'            reduce using rule 90
	'else'         reduce using rule 90
	'of'           reduce using rule 90
	'then'         reduce using rule 90
	'}'            reduce using rule 90
	L_Var          reduce using rule 90


State 123

	Term1 -> Term2 '$' . Term1                          (rule 88)

	'('            shift, and enter state 53
	'()'           shift, and enter state 54
	'@+'           shift, and enter state 55
	'@+i'          shift, and enter state 56
	'@-'           shift, and enter state 57
	'@-i'          shift, and enter state 58
	'@0'           shift, and enter state 59
	'@1'           shift, and enter state 60
	'FSWAP'        shift, and enter state 61
	'H'            shift, and enter state 62
	'ID'           shift, and enter state 63
	'ISWAP'        shift, and enter state 64
	'ROOT_SWAP'    shift, and enter state 65
	'ROOT_SWAP_DAG'shift, and enter state 66
	'ROOT_X'       shift, and enter state 67
	'ROOT_X_DAG'   shift, and enter state 68
	'ROOT_Y'       shift, and enter state 69
	'ROOT_Y_DAG'   shift, and enter state 70
	'ROOT_Z'       shift, and enter state 71
	'ROOT_Z_DAG'   shift, and enter state 72
	'RX'           shift, and enter state 73
	'RY'           shift, and enter state 74
	'RZ'           shift, and enter state 75
	'S'            shift, and enter state 76
	'SQRT_SWAP'    shift, and enter state 77
	'SQRT_SWAP_DAG'shift, and enter state 78
	'SQRT_X'       shift, and enter state 79
	'SQRT_X_DAG'   shift, and enter state 80
	'SQRT_Y'       shift, and enter state 81
	'SQRT_Y_DAG'   shift, and enter state 82
	'SWAP'         shift, and enter state 83
	'SWAP_THETA'   shift, and enter state 84
	'S_DAG'        shift, and enter state 85
	'T'            shift, and enter state 86
	'T_DAG'        shift, and enter state 87
	'U1'           shift, and enter state 88
	'U2'           shift, and enter state 89
	'U3'           shift, and enter state 90
	'X'            shift, and enter state 91
	'Y'            shift, and enter state 92
	'Z'            shift, and enter state 93
	'case'         shift, and enter state 94
	'if'           shift, and enter state 95
	'let'          shift, and enter state 96
	'with'         shift, and enter state 97
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 98

	Var            goto state 43
	Lambda         goto state 44
	BasisState     goto state 45
	Gate           goto state 46
	LetVariable    goto state 47
	Tuple          goto state 48
	Term3          goto state 49
	Term1          goto state 133
	Term2          goto state 51

State 124

	Term2 -> Term2 '.' . Term3                          (rule 91)

	'('            shift, and enter state 53
	'()'           shift, and enter state 54
	'@+'           shift, and enter state 55
	'@+i'          shift, and enter state 56
	'@-'           shift, and enter state 57
	'@-i'          shift, and enter state 58
	'@0'           shift, and enter state 59
	'@1'           shift, and enter state 60
	'FSWAP'        shift, and enter state 61
	'H'            shift, and enter state 62
	'ID'           shift, and enter state 63
	'ISWAP'        shift, and enter state 64
	'ROOT_SWAP'    shift, and enter state 65
	'ROOT_SWAP_DAG'shift, and enter state 66
	'ROOT_X'       shift, and enter state 67
	'ROOT_X_DAG'   shift, and enter state 68
	'ROOT_Y'       shift, and enter state 69
	'ROOT_Y_DAG'   shift, and enter state 70
	'ROOT_Z'       shift, and enter state 71
	'ROOT_Z_DAG'   shift, and enter state 72
	'RX'           shift, and enter state 73
	'RY'           shift, and enter state 74
	'RZ'           shift, and enter state 75
	'S'            shift, and enter state 76
	'SQRT_SWAP'    shift, and enter state 77
	'SQRT_SWAP_DAG'shift, and enter state 78
	'SQRT_X'       shift, and enter state 79
	'SQRT_X_DAG'   shift, and enter state 80
	'SQRT_Y'       shift, and enter state 81
	'SQRT_Y_DAG'   shift, and enter state 82
	'SWAP'         shift, and enter state 83
	'SWAP_THETA'   shift, and enter state 84
	'S_DAG'        shift, and enter state 85
	'T'            shift, and enter state 86
	'T_DAG'        shift, and enter state 87
	'U1'           shift, and enter state 88
	'U2'           shift, and enter state 89
	'U3'           shift, and enter state 90
	'X'            shift, and enter state 91
	'Y'            shift, and enter state 92
	'Z'            shift, and enter state 93
	L_Var          shift, and enter state 8

	Var            goto state 121
	BasisState     goto state 45
	Gate           goto state 46
	Tuple          goto state 48
	Term3          goto state 132

State 125

	Term1 -> LetVariable ',' . ListLetVariable '<-' Term ';' Term    (rule 83)

	'<-'           reduce using rule 62
	L_Var          shift, and enter state 8

	Var            goto state 129
	LetVariable    goto state 130
	ListLetVariablegoto state 131

State 126

	Term1 -> Lambda FunctionType . '.' Term             (rule 85)
	FunctionType -> FunctionType . ';'                  (rule 103)

	'.'            shift, and enter state 127
	';'            shift, and enter state 128


State 127

	Term1 -> Lambda FunctionType '.' . Term             (rule 85)

	'('            shift, and enter state 53
	'()'           shift, and enter state 54
	'@+'           shift, and enter state 55
	'@+i'          shift, and enter state 56
	'@-'           shift, and enter state 57
	'@-i'          shift, and enter state 58
	'@0'           shift, and enter state 59
	'@1'           shift, and enter state 60
	'FSWAP'        shift, and enter state 61
	'H'            shift, and enter state 62
	'ID'           shift, and enter state 63
	'ISWAP'        shift, and enter state 64
	'ROOT_SWAP'    shift, and enter state 65
	'ROOT_SWAP_DAG'shift, and enter state 66
	'ROOT_X'       shift, and enter state 67
	'ROOT_X_DAG'   shift, and enter state 68
	'ROOT_Y'       shift, and enter state 69
	'ROOT_Y_DAG'   shift, and enter state 70
	'ROOT_Z'       shift, and enter state 71
	'ROOT_Z_DAG'   shift, and enter state 72
	'RX'           shift, and enter state 73
	'RY'           shift, and enter state 74
	'RZ'           shift, and enter state 75
	'S'            shift, and enter state 76
	'SQRT_SWAP'    shift, and enter state 77
	'SQRT_SWAP_DAG'shift, and enter state 78
	'SQRT_X'       shift, and enter state 79
	'SQRT_X_DAG'   shift, and enter state 80
	'SQRT_Y'       shift, and enter state 81
	'SQRT_Y_DAG'   shift, and enter state 82
	'SWAP'         shift, and enter state 83
	'SWAP_THETA'   shift, and enter state 84
	'S_DAG'        shift, and enter state 85
	'T'            shift, and enter state 86
	'T_DAG'        shift, and enter state 87
	'U1'           shift, and enter state 88
	'U2'           shift, and enter state 89
	'U3'           shift, and enter state 90
	'X'            shift, and enter state 91
	'Y'            shift, and enter state 92
	'Z'            shift, and enter state 93
	'case'         shift, and enter state 94
	'if'           shift, and enter state 95
	'let'          shift, and enter state 96
	'with'         shift, and enter state 97
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 98

	Var            goto state 43
	Lambda         goto state 44
	BasisState     goto state 45
	Gate           goto state 46
	LetVariable    goto state 47
	Tuple          goto state 48
	Term3          goto state 49
	Term1          goto state 50
	Term2          goto state 51
	Term           goto state 157

State 128

	FunctionType -> FunctionType ';' .                  (rule 103)

	'.'            reduce using rule 103
	';'            reduce using rule 103


State 129

	LetVariable -> Var .                                (rule 61)

	')'            reduce using rule 61
	','            reduce using rule 61
	'<-'           reduce using rule 61


State 130

	ListLetVariable -> LetVariable .                    (rule 63)
	ListLetVariable -> LetVariable . ',' ListLetVariable    (rule 64)

	')'            reduce using rule 63
	','            shift, and enter state 156
	'<-'           reduce using rule 63


State 131

	Term1 -> LetVariable ',' ListLetVariable . '<-' Term ';' Term    (rule 83)

	'<-'           shift, and enter state 155


State 132

	Term2 -> Term2 '.' Term3 .                          (rule 91)

	'$'            reduce using rule 91
	'('            reduce using rule 91
	'()'           reduce using rule 91
	')'            reduce using rule 91
	','            reduce using rule 91
	'->'           reduce using rule 91
	'.'            reduce using rule 91
	';'            reduce using rule 91
	'@+'           reduce using rule 91
	'@+i'          reduce using rule 91
	'@-'           reduce using rule 91
	'@-i'          reduce using rule 91
	'@0'           reduce using rule 91
	'@1'           reduce using rule 91
	'FSWAP'        reduce using rule 91
	'H'            reduce using rule 91
	'ID'           reduce using rule 91
	'ISWAP'        reduce using rule 91
	'ROOT_SWAP'    reduce using rule 91
	'ROOT_SWAP_DAG'reduce using rule 91
	'ROOT_X'       reduce using rule 91
	'ROOT_X_DAG'   reduce using rule 91
	'ROOT_Y'       reduce using rule 91
	'ROOT_Y_DAG'   reduce using rule 91
	'ROOT_Z'       reduce using rule 91
	'ROOT_Z_DAG'   reduce using rule 91
	'RX'           reduce using rule 91
	'RY'           reduce using rule 91
	'RZ'           reduce using rule 91
	'S'            reduce using rule 91
	'SQRT_SWAP'    reduce using rule 91
	'SQRT_SWAP_DAG'reduce using rule 91
	'SQRT_X'       reduce using rule 91
	'SQRT_X_DAG'   reduce using rule 91
	'SQRT_Y'       reduce using rule 91
	'SQRT_Y_DAG'   reduce using rule 91
	'SWAP'         reduce using rule 91
	'SWAP_THETA'   reduce using rule 91
	'S_DAG'        reduce using rule 91
	'T'            reduce using rule 91
	'T_DAG'        reduce using rule 91
	'U1'           reduce using rule 91
	'U2'           reduce using rule 91
	'U3'           reduce using rule 91
	'X'            reduce using rule 91
	'Y'            reduce using rule 91
	'Z'            reduce using rule 91
	']'            reduce using rule 91
	'else'         reduce using rule 91
	'of'           reduce using rule 91
	'then'         reduce using rule 91
	'}'            reduce using rule 91
	L_Var          reduce using rule 91


State 133

	Term1 -> Term2 '$' Term1 .                          (rule 88)

	')'            reduce using rule 88
	','            reduce using rule 88
	'->'           reduce using rule 88
	';'            reduce using rule 88
	']'            reduce using rule 88
	'else'         reduce using rule 88
	'of'           reduce using rule 88
	'then'         reduce using rule 88
	'}'            reduce using rule 88


State 134

	Term3 -> '(' Term ')' .                             (rule 80)

	'$'            reduce using rule 80
	'('            reduce using rule 80
	'()'           reduce using rule 80
	')'            reduce using rule 80
	','            reduce using rule 80
	'->'           reduce using rule 80
	'.'            reduce using rule 80
	';'            reduce using rule 80
	'@+'           reduce using rule 80
	'@+i'          reduce using rule 80
	'@-'           reduce using rule 80
	'@-i'          reduce using rule 80
	'@0'           reduce using rule 80
	'@1'           reduce using rule 80
	'FSWAP'        reduce using rule 80
	'H'            reduce using rule 80
	'ID'           reduce using rule 80
	'ISWAP'        reduce using rule 80
	'ROOT_SWAP'    reduce using rule 80
	'ROOT_SWAP_DAG'reduce using rule 80
	'ROOT_X'       reduce using rule 80
	'ROOT_X_DAG'   reduce using rule 80
	'ROOT_Y'       reduce using rule 80
	'ROOT_Y_DAG'   reduce using rule 80
	'ROOT_Z'       reduce using rule 80
	'ROOT_Z_DAG'   reduce using rule 80
	'RX'           reduce using rule 80
	'RY'           reduce using rule 80
	'RZ'           reduce using rule 80
	'S'            reduce using rule 80
	'SQRT_SWAP'    reduce using rule 80
	'SQRT_SWAP_DAG'reduce using rule 80
	'SQRT_X'       reduce using rule 80
	'SQRT_X_DAG'   reduce using rule 80
	'SQRT_Y'       reduce using rule 80
	'SQRT_Y_DAG'   reduce using rule 80
	'SWAP'         reduce using rule 80
	'SWAP_THETA'   reduce using rule 80
	'S_DAG'        reduce using rule 80
	'T'            reduce using rule 80
	'T_DAG'        reduce using rule 80
	'U1'           reduce using rule 80
	'U2'           reduce using rule 80
	'U3'           reduce using rule 80
	'X'            reduce using rule 80
	'Y'            reduce using rule 80
	'Z'            reduce using rule 80
	']'            reduce using rule 80
	'else'         reduce using rule 80
	'of'           reduce using rule 80
	'then'         reduce using rule 80
	'}'            reduce using rule 80
	L_Var          reduce using rule 80


State 135

	Tuple -> '(' Term ',' . ListTerm ')'                (rule 65)

	'('            shift, and enter state 53
	'()'           shift, and enter state 54
	'@+'           shift, and enter state 55
	'@+i'          shift, and enter state 56
	'@-'           shift, and enter state 57
	'@-i'          shift, and enter state 58
	'@0'           shift, and enter state 59
	'@1'           shift, and enter state 60
	'FSWAP'        shift, and enter state 61
	'H'            shift, and enter state 62
	'ID'           shift, and enter state 63
	'ISWAP'        shift, and enter state 64
	'ROOT_SWAP'    shift, and enter state 65
	'ROOT_SWAP_DAG'shift, and enter state 66
	'ROOT_X'       shift, and enter state 67
	'ROOT_X_DAG'   shift, and enter state 68
	'ROOT_Y'       shift, and enter state 69
	'ROOT_Y_DAG'   shift, and enter state 70
	'ROOT_Z'       shift, and enter state 71
	'ROOT_Z_DAG'   shift, and enter state 72
	'RX'           shift, and enter state 73
	'RY'           shift, and enter state 74
	'RZ'           shift, and enter state 75
	'S'            shift, and enter state 76
	'SQRT_SWAP'    shift, and enter state 77
	'SQRT_SWAP_DAG'shift, and enter state 78
	'SQRT_X'       shift, and enter state 79
	'SQRT_X_DAG'   shift, and enter state 80
	'SQRT_Y'       shift, and enter state 81
	'SQRT_Y_DAG'   shift, and enter state 82
	'SWAP'         shift, and enter state 83
	'SWAP_THETA'   shift, and enter state 84
	'S_DAG'        shift, and enter state 85
	'T'            shift, and enter state 86
	'T_DAG'        shift, and enter state 87
	'U1'           shift, and enter state 88
	'U2'           shift, and enter state 89
	'U3'           shift, and enter state 90
	'X'            shift, and enter state 91
	'Y'            shift, and enter state 92
	'Z'            shift, and enter state 93
	'case'         shift, and enter state 94
	'if'           shift, and enter state 95
	'let'          shift, and enter state 96
	'with'         shift, and enter state 97
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 98

	Var            goto state 43
	Lambda         goto state 44
	BasisState     goto state 45
	Gate           goto state 46
	LetVariable    goto state 47
	Tuple          goto state 48
	ListTerm       goto state 153
	Term3          goto state 49
	Term1          goto state 50
	Term2          goto state 51
	Term           goto state 154

State 136

	Gate -> 'U2' '(' Angle . ',' Angle ')'              (rule 51)

	','            shift, and enter state 152


State 137

	Gate -> 'U3' '(' Angle . ',' Angle ',' Angle ')'    (rule 52)

	','            shift, and enter state 151


State 138

	Term1 -> 'case' Term 'of' . CaseExpression ListCaseExpression    (rule 84)

	'('            shift, and enter state 53
	'()'           shift, and enter state 54
	'@+'           shift, and enter state 55
	'@+i'          shift, and enter state 56
	'@-'           shift, and enter state 57
	'@-i'          shift, and enter state 58
	'@0'           shift, and enter state 59
	'@1'           shift, and enter state 60
	'FSWAP'        shift, and enter state 61
	'H'            shift, and enter state 62
	'ID'           shift, and enter state 63
	'ISWAP'        shift, and enter state 64
	'ROOT_SWAP'    shift, and enter state 65
	'ROOT_SWAP_DAG'shift, and enter state 66
	'ROOT_X'       shift, and enter state 67
	'ROOT_X_DAG'   shift, and enter state 68
	'ROOT_Y'       shift, and enter state 69
	'ROOT_Y_DAG'   shift, and enter state 70
	'ROOT_Z'       shift, and enter state 71
	'ROOT_Z_DAG'   shift, and enter state 72
	'RX'           shift, and enter state 73
	'RY'           shift, and enter state 74
	'RZ'           shift, and enter state 75
	'S'            shift, and enter state 76
	'SQRT_SWAP'    shift, and enter state 77
	'SQRT_SWAP_DAG'shift, and enter state 78
	'SQRT_X'       shift, and enter state 79
	'SQRT_X_DAG'   shift, and enter state 80
	'SQRT_Y'       shift, and enter state 81
	'SQRT_Y_DAG'   shift, and enter state 82
	'SWAP'         shift, and enter state 83
	'SWAP_THETA'   shift, and enter state 84
	'S_DAG'        shift, and enter state 85
	'T'            shift, and enter state 86
	'T_DAG'        shift, and enter state 87
	'U1'           shift, and enter state 88
	'U2'           shift, and enter state 89
	'U3'           shift, and enter state 90
	'X'            shift, and enter state 91
	'Y'            shift, and enter state 92
	'Z'            shift, and enter state 93
	'case'         shift, and enter state 94
	'if'           shift, and enter state 95
	'let'          shift, and enter state 96
	'with'         shift, and enter state 97
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 98

	Var            goto state 43
	Lambda         goto state 44
	BasisState     goto state 45
	Gate           goto state 46
	LetVariable    goto state 47
	Tuple          goto state 48
	Term3          goto state 49
	Term1          goto state 50
	Term2          goto state 51
	Term           goto state 149
	CaseExpression goto state 150

State 139

	Term1 -> 'if' Term 'then' . Term 'else' Term        (rule 81)

	'('            shift, and enter state 53
	'()'           shift, and enter state 54
	'@+'           shift, and enter state 55
	'@+i'          shift, and enter state 56
	'@-'           shift, and enter state 57
	'@-i'          shift, and enter state 58
	'@0'           shift, and enter state 59
	'@1'           shift, and enter state 60
	'FSWAP'        shift, and enter state 61
	'H'            shift, and enter state 62
	'ID'           shift, and enter state 63
	'ISWAP'        shift, and enter state 64
	'ROOT_SWAP'    shift, and enter state 65
	'ROOT_SWAP_DAG'shift, and enter state 66
	'ROOT_X'       shift, and enter state 67
	'ROOT_X_DAG'   shift, and enter state 68
	'ROOT_Y'       shift, and enter state 69
	'ROOT_Y_DAG'   shift, and enter state 70
	'ROOT_Z'       shift, and enter state 71
	'ROOT_Z_DAG'   shift, and enter state 72
	'RX'           shift, and enter state 73
	'RY'           shift, and enter state 74
	'RZ'           shift, and enter state 75
	'S'            shift, and enter state 76
	'SQRT_SWAP'    shift, and enter state 77
	'SQRT_SWAP_DAG'shift, and enter state 78
	'SQRT_X'       shift, and enter state 79
	'SQRT_X_DAG'   shift, and enter state 80
	'SQRT_Y'       shift, and enter state 81
	'SQRT_Y_DAG'   shift, and enter state 82
	'SWAP'         shift, and enter state 83
	'SWAP_THETA'   shift, and enter state 84
	'S_DAG'        shift, and enter state 85
	'T'            shift, and enter state 86
	'T_DAG'        shift, and enter state 87
	'U1'           shift, and enter state 88
	'U2'           shift, and enter state 89
	'U3'           shift, and enter state 90
	'X'            shift, and enter state 91
	'Y'            shift, and enter state 92
	'Z'            shift, and enter state 93
	'case'         shift, and enter state 94
	'if'           shift, and enter state 95
	'let'          shift, and enter state 96
	'with'         shift, and enter state 97
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 98

	Var            goto state 43
	Lambda         goto state 44
	BasisState     goto state 45
	Gate           goto state 46
	LetVariable    goto state 47
	Tuple          goto state 48
	Term3          goto state 49
	Term1          goto state 50
	Term2          goto state 51
	Term           goto state 148

State 140

	Term1 -> 'let' '{' '(' . LetVariable ',' ListLetVariable ')' '=' Term '}' 'in' Term    (rule 82)

	L_Var          shift, and enter state 8

	Var            goto state 129
	LetVariable    goto state 147

State 141

	Controls -> '[' Term . ',' ListTerm ']'             (rule 66)

	','            shift, and enter state 146


State 142

	Term1 -> 'with' Controls 'ctrl' . ControlBasisStates    (rule 86)
	Term1 -> 'with' Controls 'ctrl' . ControlBits       (rule 87)

	'['            shift, and enter state 145

	ControlBasisStatesgoto state 143
	ControlBits    goto state 144

State 143

	Term1 -> 'with' Controls 'ctrl' ControlBasisStates .    (rule 86)

	')'            reduce using rule 86
	','            reduce using rule 86
	'->'           reduce using rule 86
	';'            reduce using rule 86
	']'            reduce using rule 86
	'else'         reduce using rule 86
	'of'           reduce using rule 86
	'then'         reduce using rule 86
	'}'            reduce using rule 86


State 144

	Term1 -> 'with' Controls 'ctrl' ControlBits .       (rule 87)

	')'            reduce using rule 87
	','            reduce using rule 87
	'->'           reduce using rule 87
	';'            reduce using rule 87
	']'            reduce using rule 87
	'else'         reduce using rule 87
	'of'           reduce using rule 87
	'then'         reduce using rule 87
	'}'            reduce using rule 87


State 145

	ControlBasisStates -> '[' . BasisState ',' ListBasisState ']'    (rule 69)
	ControlBits -> '[' . Integer ',' ListInteger ']'    (rule 72)

	'@+'           shift, and enter state 55
	'@+i'          shift, and enter state 56
	'@-'           shift, and enter state 57
	'@-i'          shift, and enter state 58
	'@0'           shift, and enter state 59
	'@1'           shift, and enter state 60
	L_integ        shift, and enter state 36

	Integer        goto state 170
	BasisState     goto state 171

State 146

	Controls -> '[' Term ',' . ListTerm ']'             (rule 66)

	'('            shift, and enter state 53
	'()'           shift, and enter state 54
	'@+'           shift, and enter state 55
	'@+i'          shift, and enter state 56
	'@-'           shift, and enter state 57
	'@-i'          shift, and enter state 58
	'@0'           shift, and enter state 59
	'@1'           shift, and enter state 60
	'FSWAP'        shift, and enter state 61
	'H'            shift, and enter state 62
	'ID'           shift, and enter state 63
	'ISWAP'        shift, and enter state 64
	'ROOT_SWAP'    shift, and enter state 65
	'ROOT_SWAP_DAG'shift, and enter state 66
	'ROOT_X'       shift, and enter state 67
	'ROOT_X_DAG'   shift, and enter state 68
	'ROOT_Y'       shift, and enter state 69
	'ROOT_Y_DAG'   shift, and enter state 70
	'ROOT_Z'       shift, and enter state 71
	'ROOT_Z_DAG'   shift, and enter state 72
	'RX'           shift, and enter state 73
	'RY'           shift, and enter state 74
	'RZ'           shift, and enter state 75
	'S'            shift, and enter state 76
	'SQRT_SWAP'    shift, and enter state 77
	'SQRT_SWAP_DAG'shift, and enter state 78
	'SQRT_X'       shift, and enter state 79
	'SQRT_X_DAG'   shift, and enter state 80
	'SQRT_Y'       shift, and enter state 81
	'SQRT_Y_DAG'   shift, and enter state 82
	'SWAP'         shift, and enter state 83
	'SWAP_THETA'   shift, and enter state 84
	'S_DAG'        shift, and enter state 85
	'T'            shift, and enter state 86
	'T_DAG'        shift, and enter state 87
	'U1'           shift, and enter state 88
	'U2'           shift, and enter state 89
	'U3'           shift, and enter state 90
	'X'            shift, and enter state 91
	'Y'            shift, and enter state 92
	'Z'            shift, and enter state 93
	'case'         shift, and enter state 94
	'if'           shift, and enter state 95
	'let'          shift, and enter state 96
	'with'         shift, and enter state 97
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 98

	Var            goto state 43
	Lambda         goto state 44
	BasisState     goto state 45
	Gate           goto state 46
	LetVariable    goto state 47
	Tuple          goto state 48
	ListTerm       goto state 169
	Term3          goto state 49
	Term1          goto state 50
	Term2          goto state 51
	Term           goto state 154

State 147

	Term1 -> 'let' '{' '(' LetVariable . ',' ListLetVariable ')' '=' Term '}' 'in' Term    (rule 82)

	','            shift, and enter state 168


State 148

	Term1 -> 'if' Term 'then' Term . 'else' Term        (rule 81)

	'else'         shift, and enter state 167


State 149

	CaseExpression -> Term . '->' Var                   (rule 94)

	'->'           shift, and enter state 166


State 150

	Term1 -> 'case' Term 'of' CaseExpression . ListCaseExpression    (rule 84)

	'('            shift, and enter state 53
	'()'           shift, and enter state 54
	'@+'           shift, and enter state 55
	'@+i'          shift, and enter state 56
	'@-'           shift, and enter state 57
	'@-i'          shift, and enter state 58
	'@0'           shift, and enter state 59
	'@1'           shift, and enter state 60
	'FSWAP'        shift, and enter state 61
	'H'            shift, and enter state 62
	'ID'           shift, and enter state 63
	'ISWAP'        shift, and enter state 64
	'ROOT_SWAP'    shift, and enter state 65
	'ROOT_SWAP_DAG'shift, and enter state 66
	'ROOT_X'       shift, and enter state 67
	'ROOT_X_DAG'   shift, and enter state 68
	'ROOT_Y'       shift, and enter state 69
	'ROOT_Y_DAG'   shift, and enter state 70
	'ROOT_Z'       shift, and enter state 71
	'ROOT_Z_DAG'   shift, and enter state 72
	'RX'           shift, and enter state 73
	'RY'           shift, and enter state 74
	'RZ'           shift, and enter state 75
	'S'            shift, and enter state 76
	'SQRT_SWAP'    shift, and enter state 77
	'SQRT_SWAP_DAG'shift, and enter state 78
	'SQRT_X'       shift, and enter state 79
	'SQRT_X_DAG'   shift, and enter state 80
	'SQRT_Y'       shift, and enter state 81
	'SQRT_Y_DAG'   shift, and enter state 82
	'SWAP'         shift, and enter state 83
	'SWAP_THETA'   shift, and enter state 84
	'S_DAG'        shift, and enter state 85
	'T'            shift, and enter state 86
	'T_DAG'        shift, and enter state 87
	'U1'           shift, and enter state 88
	'U2'           shift, and enter state 89
	'U3'           shift, and enter state 90
	'X'            shift, and enter state 91
	'Y'            shift, and enter state 92
	'Z'            shift, and enter state 93
	'case'         shift, and enter state 94
	'if'           shift, and enter state 95
	'let'          shift, and enter state 96
	'with'         shift, and enter state 97
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 98

	Var            goto state 43
	Lambda         goto state 44
	BasisState     goto state 45
	Gate           goto state 46
	LetVariable    goto state 47
	Tuple          goto state 48
	Term3          goto state 49
	Term1          goto state 50
	Term2          goto state 51
	Term           goto state 149
	CaseExpression goto state 164
	ListCaseExpressiongoto state 165

State 151

	Gate -> 'U3' '(' Angle ',' . Angle ',' Angle ')'    (rule 52)

	L_doubl        shift, and enter state 2

	Double         goto state 106
	Angle          goto state 163

State 152

	Gate -> 'U2' '(' Angle ',' . Angle ')'              (rule 51)

	L_doubl        shift, and enter state 2

	Double         goto state 106
	Angle          goto state 162

State 153

	Tuple -> '(' Term ',' ListTerm . ')'                (rule 65)

	')'            shift, and enter state 161


State 154

	ListTerm -> Term .                                  (rule 67)
	ListTerm -> Term . ',' ListTerm                     (rule 68)

	')'            reduce using rule 67
	','            shift, and enter state 160
	']'            reduce using rule 67


State 155

	Term1 -> LetVariable ',' ListLetVariable '<-' . Term ';' Term    (rule 83)

	'('            shift, and enter state 53
	'()'           shift, and enter state 54
	'@+'           shift, and enter state 55
	'@+i'          shift, and enter state 56
	'@-'           shift, and enter state 57
	'@-i'          shift, and enter state 58
	'@0'           shift, and enter state 59
	'@1'           shift, and enter state 60
	'FSWAP'        shift, and enter state 61
	'H'            shift, and enter state 62
	'ID'           shift, and enter state 63
	'ISWAP'        shift, and enter state 64
	'ROOT_SWAP'    shift, and enter state 65
	'ROOT_SWAP_DAG'shift, and enter state 66
	'ROOT_X'       shift, and enter state 67
	'ROOT_X_DAG'   shift, and enter state 68
	'ROOT_Y'       shift, and enter state 69
	'ROOT_Y_DAG'   shift, and enter state 70
	'ROOT_Z'       shift, and enter state 71
	'ROOT_Z_DAG'   shift, and enter state 72
	'RX'           shift, and enter state 73
	'RY'           shift, and enter state 74
	'RZ'           shift, and enter state 75
	'S'            shift, and enter state 76
	'SQRT_SWAP'    shift, and enter state 77
	'SQRT_SWAP_DAG'shift, and enter state 78
	'SQRT_X'       shift, and enter state 79
	'SQRT_X_DAG'   shift, and enter state 80
	'SQRT_Y'       shift, and enter state 81
	'SQRT_Y_DAG'   shift, and enter state 82
	'SWAP'         shift, and enter state 83
	'SWAP_THETA'   shift, and enter state 84
	'S_DAG'        shift, and enter state 85
	'T'            shift, and enter state 86
	'T_DAG'        shift, and enter state 87
	'U1'           shift, and enter state 88
	'U2'           shift, and enter state 89
	'U3'           shift, and enter state 90
	'X'            shift, and enter state 91
	'Y'            shift, and enter state 92
	'Z'            shift, and enter state 93
	'case'         shift, and enter state 94
	'if'           shift, and enter state 95
	'let'          shift, and enter state 96
	'with'         shift, and enter state 97
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 98

	Var            goto state 43
	Lambda         goto state 44
	BasisState     goto state 45
	Gate           goto state 46
	LetVariable    goto state 47
	Tuple          goto state 48
	Term3          goto state 49
	Term1          goto state 50
	Term2          goto state 51
	Term           goto state 159

State 156

	ListLetVariable -> LetVariable ',' . ListLetVariable    (rule 64)

	')'            reduce using rule 62
	'<-'           reduce using rule 62
	L_Var          shift, and enter state 8

	Var            goto state 129
	LetVariable    goto state 130
	ListLetVariablegoto state 158

State 157

	Term1 -> Lambda FunctionType '.' Term .             (rule 85)

	')'            reduce using rule 85
	','            reduce using rule 85
	'->'           reduce using rule 85
	';'            reduce using rule 85
	']'            reduce using rule 85
	'else'         reduce using rule 85
	'of'           reduce using rule 85
	'then'         reduce using rule 85
	'}'            reduce using rule 85


State 158

	ListLetVariable -> LetVariable ',' ListLetVariable .    (rule 64)

	')'            reduce using rule 64
	'<-'           reduce using rule 64


State 159

	Term1 -> LetVariable ',' ListLetVariable '<-' Term . ';' Term    (rule 83)

	';'            shift, and enter state 182


State 160

	ListTerm -> Term ',' . ListTerm                     (rule 68)

	'('            shift, and enter state 53
	'()'           shift, and enter state 54
	'@+'           shift, and enter state 55
	'@+i'          shift, and enter state 56
	'@-'           shift, and enter state 57
	'@-i'          shift, and enter state 58
	'@0'           shift, and enter state 59
	'@1'           shift, and enter state 60
	'FSWAP'        shift, and enter state 61
	'H'            shift, and enter state 62
	'ID'           shift, and enter state 63
	'ISWAP'        shift, and enter state 64
	'ROOT_SWAP'    shift, and enter state 65
	'ROOT_SWAP_DAG'shift, and enter state 66
	'ROOT_X'       shift, and enter state 67
	'ROOT_X_DAG'   shift, and enter state 68
	'ROOT_Y'       shift, and enter state 69
	'ROOT_Y_DAG'   shift, and enter state 70
	'ROOT_Z'       shift, and enter state 71
	'ROOT_Z_DAG'   shift, and enter state 72
	'RX'           shift, and enter state 73
	'RY'           shift, and enter state 74
	'RZ'           shift, and enter state 75
	'S'            shift, and enter state 76
	'SQRT_SWAP'    shift, and enter state 77
	'SQRT_SWAP_DAG'shift, and enter state 78
	'SQRT_X'       shift, and enter state 79
	'SQRT_X_DAG'   shift, and enter state 80
	'SQRT_Y'       shift, and enter state 81
	'SQRT_Y_DAG'   shift, and enter state 82
	'SWAP'         shift, and enter state 83
	'SWAP_THETA'   shift, and enter state 84
	'S_DAG'        shift, and enter state 85
	'T'            shift, and enter state 86
	'T_DAG'        shift, and enter state 87
	'U1'           shift, and enter state 88
	'U2'           shift, and enter state 89
	'U3'           shift, and enter state 90
	'X'            shift, and enter state 91
	'Y'            shift, and enter state 92
	'Z'            shift, and enter state 93
	'case'         shift, and enter state 94
	'if'           shift, and enter state 95
	'let'          shift, and enter state 96
	'with'         shift, and enter state 97
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 98

	Var            goto state 43
	Lambda         goto state 44
	BasisState     goto state 45
	Gate           goto state 46
	LetVariable    goto state 47
	Tuple          goto state 48
	ListTerm       goto state 181
	Term3          goto state 49
	Term1          goto state 50
	Term2          goto state 51
	Term           goto state 154

State 161

	Tuple -> '(' Term ',' ListTerm ')' .                (rule 65)

	'$'            reduce using rule 65
	'('            reduce using rule 65
	'()'           reduce using rule 65
	')'            reduce using rule 65
	','            reduce using rule 65
	'->'           reduce using rule 65
	'.'            reduce using rule 65
	';'            reduce using rule 65
	'@+'           reduce using rule 65
	'@+i'          reduce using rule 65
	'@-'           reduce using rule 65
	'@-i'          reduce using rule 65
	'@0'           reduce using rule 65
	'@1'           reduce using rule 65
	'FSWAP'        reduce using rule 65
	'H'            reduce using rule 65
	'ID'           reduce using rule 65
	'ISWAP'        reduce using rule 65
	'ROOT_SWAP'    reduce using rule 65
	'ROOT_SWAP_DAG'reduce using rule 65
	'ROOT_X'       reduce using rule 65
	'ROOT_X_DAG'   reduce using rule 65
	'ROOT_Y'       reduce using rule 65
	'ROOT_Y_DAG'   reduce using rule 65
	'ROOT_Z'       reduce using rule 65
	'ROOT_Z_DAG'   reduce using rule 65
	'RX'           reduce using rule 65
	'RY'           reduce using rule 65
	'RZ'           reduce using rule 65
	'S'            reduce using rule 65
	'SQRT_SWAP'    reduce using rule 65
	'SQRT_SWAP_DAG'reduce using rule 65
	'SQRT_X'       reduce using rule 65
	'SQRT_X_DAG'   reduce using rule 65
	'SQRT_Y'       reduce using rule 65
	'SQRT_Y_DAG'   reduce using rule 65
	'SWAP'         reduce using rule 65
	'SWAP_THETA'   reduce using rule 65
	'S_DAG'        reduce using rule 65
	'T'            reduce using rule 65
	'T_DAG'        reduce using rule 65
	'U1'           reduce using rule 65
	'U2'           reduce using rule 65
	'U3'           reduce using rule 65
	'X'            reduce using rule 65
	'Y'            reduce using rule 65
	'Z'            reduce using rule 65
	']'            reduce using rule 65
	'else'         reduce using rule 65
	'of'           reduce using rule 65
	'then'         reduce using rule 65
	'}'            reduce using rule 65
	L_Var          reduce using rule 65


State 162

	Gate -> 'U2' '(' Angle ',' Angle . ')'              (rule 51)

	')'            shift, and enter state 180


State 163

	Gate -> 'U3' '(' Angle ',' Angle . ',' Angle ')'    (rule 52)

	','            shift, and enter state 179


State 164

	ListCaseExpression -> CaseExpression .              (rule 95)
	ListCaseExpression -> CaseExpression . ListCaseExpression    (rule 96)

	'('            shift, and enter state 53
	'()'           shift, and enter state 54
	')'            reduce using rule 95
	','            reduce using rule 95
	'->'           reduce using rule 95
	';'            reduce using rule 95
	'@+'           shift, and enter state 55
	'@+i'          shift, and enter state 56
	'@-'           shift, and enter state 57
	'@-i'          shift, and enter state 58
	'@0'           shift, and enter state 59
	'@1'           shift, and enter state 60
	'FSWAP'        shift, and enter state 61
	'H'            shift, and enter state 62
	'ID'           shift, and enter state 63
	'ISWAP'        shift, and enter state 64
	'ROOT_SWAP'    shift, and enter state 65
	'ROOT_SWAP_DAG'shift, and enter state 66
	'ROOT_X'       shift, and enter state 67
	'ROOT_X_DAG'   shift, and enter state 68
	'ROOT_Y'       shift, and enter state 69
	'ROOT_Y_DAG'   shift, and enter state 70
	'ROOT_Z'       shift, and enter state 71
	'ROOT_Z_DAG'   shift, and enter state 72
	'RX'           shift, and enter state 73
	'RY'           shift, and enter state 74
	'RZ'           shift, and enter state 75
	'S'            shift, and enter state 76
	'SQRT_SWAP'    shift, and enter state 77
	'SQRT_SWAP_DAG'shift, and enter state 78
	'SQRT_X'       shift, and enter state 79
	'SQRT_X_DAG'   shift, and enter state 80
	'SQRT_Y'       shift, and enter state 81
	'SQRT_Y_DAG'   shift, and enter state 82
	'SWAP'         shift, and enter state 83
	'SWAP_THETA'   shift, and enter state 84
	'S_DAG'        shift, and enter state 85
	'T'            shift, and enter state 86
	'T_DAG'        shift, and enter state 87
	'U1'           shift, and enter state 88
	'U2'           shift, and enter state 89
	'U3'           shift, and enter state 90
	'X'            shift, and enter state 91
	'Y'            shift, and enter state 92
	'Z'            shift, and enter state 93
	']'            reduce using rule 95
	'case'         shift, and enter state 94
	'else'         reduce using rule 95
	'if'           shift, and enter state 95
	'let'          shift, and enter state 96
	'of'           reduce using rule 95
	'then'         reduce using rule 95
	'with'         shift, and enter state 97
	'}'            reduce using rule 95
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 98

	Var            goto state 43
	Lambda         goto state 44
	BasisState     goto state 45
	Gate           goto state 46
	LetVariable    goto state 47
	Tuple          goto state 48
	Term3          goto state 49
	Term1          goto state 50
	Term2          goto state 51
	Term           goto state 149
	CaseExpression goto state 164
	ListCaseExpressiongoto state 178

State 165

	Term1 -> 'case' Term 'of' CaseExpression ListCaseExpression .    (rule 84)

	')'            reduce using rule 84
	','            reduce using rule 84
	'->'           reduce using rule 84
	';'            reduce using rule 84
	']'            reduce using rule 84
	'else'         reduce using rule 84
	'of'           reduce using rule 84
	'then'         reduce using rule 84
	'}'            reduce using rule 84


State 166

	CaseExpression -> Term '->' . Var                   (rule 94)

	L_Var          shift, and enter state 8

	Var            goto state 177

State 167

	Term1 -> 'if' Term 'then' Term 'else' . Term        (rule 81)

	'('            shift, and enter state 53
	'()'           shift, and enter state 54
	'@+'           shift, and enter state 55
	'@+i'          shift, and enter state 56
	'@-'           shift, and enter state 57
	'@-i'          shift, and enter state 58
	'@0'           shift, and enter state 59
	'@1'           shift, and enter state 60
	'FSWAP'        shift, and enter state 61
	'H'            shift, and enter state 62
	'ID'           shift, and enter state 63
	'ISWAP'        shift, and enter state 64
	'ROOT_SWAP'    shift, and enter state 65
	'ROOT_SWAP_DAG'shift, and enter state 66
	'ROOT_X'       shift, and enter state 67
	'ROOT_X_DAG'   shift, and enter state 68
	'ROOT_Y'       shift, and enter state 69
	'ROOT_Y_DAG'   shift, and enter state 70
	'ROOT_Z'       shift, and enter state 71
	'ROOT_Z_DAG'   shift, and enter state 72
	'RX'           shift, and enter state 73
	'RY'           shift, and enter state 74
	'RZ'           shift, and enter state 75
	'S'            shift, and enter state 76
	'SQRT_SWAP'    shift, and enter state 77
	'SQRT_SWAP_DAG'shift, and enter state 78
	'SQRT_X'       shift, and enter state 79
	'SQRT_X_DAG'   shift, and enter state 80
	'SQRT_Y'       shift, and enter state 81
	'SQRT_Y_DAG'   shift, and enter state 82
	'SWAP'         shift, and enter state 83
	'SWAP_THETA'   shift, and enter state 84
	'S_DAG'        shift, and enter state 85
	'T'            shift, and enter state 86
	'T_DAG'        shift, and enter state 87
	'U1'           shift, and enter state 88
	'U2'           shift, and enter state 89
	'U3'           shift, and enter state 90
	'X'            shift, and enter state 91
	'Y'            shift, and enter state 92
	'Z'            shift, and enter state 93
	'case'         shift, and enter state 94
	'if'           shift, and enter state 95
	'let'          shift, and enter state 96
	'with'         shift, and enter state 97
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 98

	Var            goto state 43
	Lambda         goto state 44
	BasisState     goto state 45
	Gate           goto state 46
	LetVariable    goto state 47
	Tuple          goto state 48
	Term3          goto state 49
	Term1          goto state 50
	Term2          goto state 51
	Term           goto state 176

State 168

	Term1 -> 'let' '{' '(' LetVariable ',' . ListLetVariable ')' '=' Term '}' 'in' Term    (rule 82)

	')'            reduce using rule 62
	L_Var          shift, and enter state 8

	Var            goto state 129
	LetVariable    goto state 130
	ListLetVariablegoto state 175

State 169

	Controls -> '[' Term ',' ListTerm . ']'             (rule 66)

	']'            shift, and enter state 174


State 170

	ControlBits -> '[' Integer . ',' ListInteger ']'    (rule 72)

	','            shift, and enter state 173


State 171

	ControlBasisStates -> '[' BasisState . ',' ListBasisState ']'    (rule 69)

	','            shift, and enter state 172


State 172

	ControlBasisStates -> '[' BasisState ',' . ListBasisState ']'    (rule 69)

	'@+'           shift, and enter state 55
	'@+i'          shift, and enter state 56
	'@-'           shift, and enter state 57
	'@-i'          shift, and enter state 58
	'@0'           shift, and enter state 59
	'@1'           shift, and enter state 60

	BasisState     goto state 188
	ListBasisState goto state 189

State 173

	ControlBits -> '[' Integer ',' . ListInteger ']'    (rule 72)

	L_integ        shift, and enter state 36

	Integer        goto state 186
	ListInteger    goto state 187

State 174

	Controls -> '[' Term ',' ListTerm ']' .             (rule 66)

	'ctrl'         reduce using rule 66


State 175

	Term1 -> 'let' '{' '(' LetVariable ',' ListLetVariable . ')' '=' Term '}' 'in' Term    (rule 82)

	')'            shift, and enter state 185


State 176

	Term1 -> 'if' Term 'then' Term 'else' Term .        (rule 81)

	')'            reduce using rule 81
	','            reduce using rule 81
	'->'           reduce using rule 81
	';'            reduce using rule 81
	']'            reduce using rule 81
	'else'         reduce using rule 81
	'of'           reduce using rule 81
	'then'         reduce using rule 81
	'}'            reduce using rule 81


State 177

	CaseExpression -> Term '->' Var .                   (rule 94)

	'('            reduce using rule 94
	'()'           reduce using rule 94
	')'            reduce using rule 94
	','            reduce using rule 94
	'->'           reduce using rule 94
	';'            reduce using rule 94
	'@+'           reduce using rule 94
	'@+i'          reduce using rule 94
	'@-'           reduce using rule 94
	'@-i'          reduce using rule 94
	'@0'           reduce using rule 94
	'@1'           reduce using rule 94
	'FSWAP'        reduce using rule 94
	'H'            reduce using rule 94
	'ID'           reduce using rule 94
	'ISWAP'        reduce using rule 94
	'ROOT_SWAP'    reduce using rule 94
	'ROOT_SWAP_DAG'reduce using rule 94
	'ROOT_X'       reduce using rule 94
	'ROOT_X_DAG'   reduce using rule 94
	'ROOT_Y'       reduce using rule 94
	'ROOT_Y_DAG'   reduce using rule 94
	'ROOT_Z'       reduce using rule 94
	'ROOT_Z_DAG'   reduce using rule 94
	'RX'           reduce using rule 94
	'RY'           reduce using rule 94
	'RZ'           reduce using rule 94
	'S'            reduce using rule 94
	'SQRT_SWAP'    reduce using rule 94
	'SQRT_SWAP_DAG'reduce using rule 94
	'SQRT_X'       reduce using rule 94
	'SQRT_X_DAG'   reduce using rule 94
	'SQRT_Y'       reduce using rule 94
	'SQRT_Y_DAG'   reduce using rule 94
	'SWAP'         reduce using rule 94
	'SWAP_THETA'   reduce using rule 94
	'S_DAG'        reduce using rule 94
	'T'            reduce using rule 94
	'T_DAG'        reduce using rule 94
	'U1'           reduce using rule 94
	'U2'           reduce using rule 94
	'U3'           reduce using rule 94
	'X'            reduce using rule 94
	'Y'            reduce using rule 94
	'Z'            reduce using rule 94
	']'            reduce using rule 94
	'case'         reduce using rule 94
	'else'         reduce using rule 94
	'if'           reduce using rule 94
	'let'          reduce using rule 94
	'of'           reduce using rule 94
	'then'         reduce using rule 94
	'with'         reduce using rule 94
	'}'            reduce using rule 94
	L_Var          reduce using rule 94
	L_Lambda       reduce using rule 94


State 178

	ListCaseExpression -> CaseExpression ListCaseExpression .    (rule 96)

	')'            reduce using rule 96
	','            reduce using rule 96
	'->'           reduce using rule 96
	';'            reduce using rule 96
	']'            reduce using rule 96
	'else'         reduce using rule 96
	'of'           reduce using rule 96
	'then'         reduce using rule 96
	'}'            reduce using rule 96


State 179

	Gate -> 'U3' '(' Angle ',' Angle ',' . Angle ')'    (rule 52)

	L_doubl        shift, and enter state 2

	Double         goto state 106
	Angle          goto state 184

State 180

	Gate -> 'U2' '(' Angle ',' Angle ')' .              (rule 51)

	'$'            reduce using rule 51
	'('            reduce using rule 51
	'()'           reduce using rule 51
	')'            reduce using rule 51
	','            reduce using rule 51
	'->'           reduce using rule 51
	'.'            reduce using rule 51
	';'            reduce using rule 51
	'@+'           reduce using rule 51
	'@+i'          reduce using rule 51
	'@-'           reduce using rule 51
	'@-i'          reduce using rule 51
	'@0'           reduce using rule 51
	'@1'           reduce using rule 51
	'FSWAP'        reduce using rule 51
	'H'            reduce using rule 51
	'ID'           reduce using rule 51
	'ISWAP'        reduce using rule 51
	'ROOT_SWAP'    reduce using rule 51
	'ROOT_SWAP_DAG'reduce using rule 51
	'ROOT_X'       reduce using rule 51
	'ROOT_X_DAG'   reduce using rule 51
	'ROOT_Y'       reduce using rule 51
	'ROOT_Y_DAG'   reduce using rule 51
	'ROOT_Z'       reduce using rule 51
	'ROOT_Z_DAG'   reduce using rule 51
	'RX'           reduce using rule 51
	'RY'           reduce using rule 51
	'RZ'           reduce using rule 51
	'S'            reduce using rule 51
	'SQRT_SWAP'    reduce using rule 51
	'SQRT_SWAP_DAG'reduce using rule 51
	'SQRT_X'       reduce using rule 51
	'SQRT_X_DAG'   reduce using rule 51
	'SQRT_Y'       reduce using rule 51
	'SQRT_Y_DAG'   reduce using rule 51
	'SWAP'         reduce using rule 51
	'SWAP_THETA'   reduce using rule 51
	'S_DAG'        reduce using rule 51
	'T'            reduce using rule 51
	'T_DAG'        reduce using rule 51
	'U1'           reduce using rule 51
	'U2'           reduce using rule 51
	'U3'           reduce using rule 51
	'X'            reduce using rule 51
	'Y'            reduce using rule 51
	'Z'            reduce using rule 51
	']'            reduce using rule 51
	'else'         reduce using rule 51
	'of'           reduce using rule 51
	'then'         reduce using rule 51
	'}'            reduce using rule 51
	L_Var          reduce using rule 51


State 181

	ListTerm -> Term ',' ListTerm .                     (rule 68)

	')'            reduce using rule 68
	']'            reduce using rule 68


State 182

	Term1 -> LetVariable ',' ListLetVariable '<-' Term ';' . Term    (rule 83)

	'('            shift, and enter state 53
	'()'           shift, and enter state 54
	'@+'           shift, and enter state 55
	'@+i'          shift, and enter state 56
	'@-'           shift, and enter state 57
	'@-i'          shift, and enter state 58
	'@0'           shift, and enter state 59
	'@1'           shift, and enter state 60
	'FSWAP'        shift, and enter state 61
	'H'            shift, and enter state 62
	'ID'           shift, and enter state 63
	'ISWAP'        shift, and enter state 64
	'ROOT_SWAP'    shift, and enter state 65
	'ROOT_SWAP_DAG'shift, and enter state 66
	'ROOT_X'       shift, and enter state 67
	'ROOT_X_DAG'   shift, and enter state 68
	'ROOT_Y'       shift, and enter state 69
	'ROOT_Y_DAG'   shift, and enter state 70
	'ROOT_Z'       shift, and enter state 71
	'ROOT_Z_DAG'   shift, and enter state 72
	'RX'           shift, and enter state 73
	'RY'           shift, and enter state 74
	'RZ'           shift, and enter state 75
	'S'            shift, and enter state 76
	'SQRT_SWAP'    shift, and enter state 77
	'SQRT_SWAP_DAG'shift, and enter state 78
	'SQRT_X'       shift, and enter state 79
	'SQRT_X_DAG'   shift, and enter state 80
	'SQRT_Y'       shift, and enter state 81
	'SQRT_Y_DAG'   shift, and enter state 82
	'SWAP'         shift, and enter state 83
	'SWAP_THETA'   shift, and enter state 84
	'S_DAG'        shift, and enter state 85
	'T'            shift, and enter state 86
	'T_DAG'        shift, and enter state 87
	'U1'           shift, and enter state 88
	'U2'           shift, and enter state 89
	'U3'           shift, and enter state 90
	'X'            shift, and enter state 91
	'Y'            shift, and enter state 92
	'Z'            shift, and enter state 93
	'case'         shift, and enter state 94
	'if'           shift, and enter state 95
	'let'          shift, and enter state 96
	'with'         shift, and enter state 97
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 98

	Var            goto state 43
	Lambda         goto state 44
	BasisState     goto state 45
	Gate           goto state 46
	LetVariable    goto state 47
	Tuple          goto state 48
	Term3          goto state 49
	Term1          goto state 50
	Term2          goto state 51
	Term           goto state 183

State 183

	Term1 -> LetVariable ',' ListLetVariable '<-' Term ';' Term .    (rule 83)

	')'            reduce using rule 83
	','            reduce using rule 83
	'->'           reduce using rule 83
	';'            reduce using rule 83
	']'            reduce using rule 83
	'else'         reduce using rule 83
	'of'           reduce using rule 83
	'then'         reduce using rule 83
	'}'            reduce using rule 83


State 184

	Gate -> 'U3' '(' Angle ',' Angle ',' Angle . ')'    (rule 52)

	')'            shift, and enter state 195


State 185

	Term1 -> 'let' '{' '(' LetVariable ',' ListLetVariable ')' . '=' Term '}' 'in' Term    (rule 82)

	'='            shift, and enter state 194


State 186

	ListInteger -> Integer .                            (rule 73)
	ListInteger -> Integer . ',' ListInteger            (rule 74)

	','            shift, and enter state 193
	']'            reduce using rule 73


State 187

	ControlBits -> '[' Integer ',' ListInteger . ']'    (rule 72)

	']'            shift, and enter state 192


State 188

	ListBasisState -> BasisState .                      (rule 70)
	ListBasisState -> BasisState . ',' ListBasisState    (rule 71)

	','            shift, and enter state 191
	']'            reduce using rule 70


State 189

	ControlBasisStates -> '[' BasisState ',' ListBasisState . ']'    (rule 69)

	']'            shift, and enter state 190


State 190

	ControlBasisStates -> '[' BasisState ',' ListBasisState ']' .    (rule 69)

	')'            reduce using rule 69
	','            reduce using rule 69
	'->'           reduce using rule 69
	';'            reduce using rule 69
	']'            reduce using rule 69
	'else'         reduce using rule 69
	'of'           reduce using rule 69
	'then'         reduce using rule 69
	'}'            reduce using rule 69


State 191

	ListBasisState -> BasisState ',' . ListBasisState    (rule 71)

	'@+'           shift, and enter state 55
	'@+i'          shift, and enter state 56
	'@-'           shift, and enter state 57
	'@-i'          shift, and enter state 58
	'@0'           shift, and enter state 59
	'@1'           shift, and enter state 60

	BasisState     goto state 188
	ListBasisState goto state 198

State 192

	ControlBits -> '[' Integer ',' ListInteger ']' .    (rule 72)

	')'            reduce using rule 72
	','            reduce using rule 72
	'->'           reduce using rule 72
	';'            reduce using rule 72
	']'            reduce using rule 72
	'else'         reduce using rule 72
	'of'           reduce using rule 72
	'then'         reduce using rule 72
	'}'            reduce using rule 72


State 193

	ListInteger -> Integer ',' . ListInteger            (rule 74)

	L_integ        shift, and enter state 36

	Integer        goto state 186
	ListInteger    goto state 197

State 194

	Term1 -> 'let' '{' '(' LetVariable ',' ListLetVariable ')' '=' . Term '}' 'in' Term    (rule 82)

	'('            shift, and enter state 53
	'()'           shift, and enter state 54
	'@+'           shift, and enter state 55
	'@+i'          shift, and enter state 56
	'@-'           shift, and enter state 57
	'@-i'          shift, and enter state 58
	'@0'           shift, and enter state 59
	'@1'           shift, and enter state 60
	'FSWAP'        shift, and enter state 61
	'H'            shift, and enter state 62
	'ID'           shift, and enter state 63
	'ISWAP'        shift, and enter state 64
	'ROOT_SWAP'    shift, and enter state 65
	'ROOT_SWAP_DAG'shift, and enter state 66
	'ROOT_X'       shift, and enter state 67
	'ROOT_X_DAG'   shift, and enter state 68
	'ROOT_Y'       shift, and enter state 69
	'ROOT_Y_DAG'   shift, and enter state 70
	'ROOT_Z'       shift, and enter state 71
	'ROOT_Z_DAG'   shift, and enter state 72
	'RX'           shift, and enter state 73
	'RY'           shift, and enter state 74
	'RZ'           shift, and enter state 75
	'S'            shift, and enter state 76
	'SQRT_SWAP'    shift, and enter state 77
	'SQRT_SWAP_DAG'shift, and enter state 78
	'SQRT_X'       shift, and enter state 79
	'SQRT_X_DAG'   shift, and enter state 80
	'SQRT_Y'       shift, and enter state 81
	'SQRT_Y_DAG'   shift, and enter state 82
	'SWAP'         shift, and enter state 83
	'SWAP_THETA'   shift, and enter state 84
	'S_DAG'        shift, and enter state 85
	'T'            shift, and enter state 86
	'T_DAG'        shift, and enter state 87
	'U1'           shift, and enter state 88
	'U2'           shift, and enter state 89
	'U3'           shift, and enter state 90
	'X'            shift, and enter state 91
	'Y'            shift, and enter state 92
	'Z'            shift, and enter state 93
	'case'         shift, and enter state 94
	'if'           shift, and enter state 95
	'let'          shift, and enter state 96
	'with'         shift, and enter state 97
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 98

	Var            goto state 43
	Lambda         goto state 44
	BasisState     goto state 45
	Gate           goto state 46
	LetVariable    goto state 47
	Tuple          goto state 48
	Term3          goto state 49
	Term1          goto state 50
	Term2          goto state 51
	Term           goto state 196

State 195

	Gate -> 'U3' '(' Angle ',' Angle ',' Angle ')' .    (rule 52)

	'$'            reduce using rule 52
	'('            reduce using rule 52
	'()'           reduce using rule 52
	')'            reduce using rule 52
	','            reduce using rule 52
	'->'           reduce using rule 52
	'.'            reduce using rule 52
	';'            reduce using rule 52
	'@+'           reduce using rule 52
	'@+i'          reduce using rule 52
	'@-'           reduce using rule 52
	'@-i'          reduce using rule 52
	'@0'           reduce using rule 52
	'@1'           reduce using rule 52
	'FSWAP'        reduce using rule 52
	'H'            reduce using rule 52
	'ID'           reduce using rule 52
	'ISWAP'        reduce using rule 52
	'ROOT_SWAP'    reduce using rule 52
	'ROOT_SWAP_DAG'reduce using rule 52
	'ROOT_X'       reduce using rule 52
	'ROOT_X_DAG'   reduce using rule 52
	'ROOT_Y'       reduce using rule 52
	'ROOT_Y_DAG'   reduce using rule 52
	'ROOT_Z'       reduce using rule 52
	'ROOT_Z_DAG'   reduce using rule 52
	'RX'           reduce using rule 52
	'RY'           reduce using rule 52
	'RZ'           reduce using rule 52
	'S'            reduce using rule 52
	'SQRT_SWAP'    reduce using rule 52
	'SQRT_SWAP_DAG'reduce using rule 52
	'SQRT_X'       reduce using rule 52
	'SQRT_X_DAG'   reduce using rule 52
	'SQRT_Y'       reduce using rule 52
	'SQRT_Y_DAG'   reduce using rule 52
	'SWAP'         reduce using rule 52
	'SWAP_THETA'   reduce using rule 52
	'S_DAG'        reduce using rule 52
	'T'            reduce using rule 52
	'T_DAG'        reduce using rule 52
	'U1'           reduce using rule 52
	'U2'           reduce using rule 52
	'U3'           reduce using rule 52
	'X'            reduce using rule 52
	'Y'            reduce using rule 52
	'Z'            reduce using rule 52
	']'            reduce using rule 52
	'else'         reduce using rule 52
	'of'           reduce using rule 52
	'then'         reduce using rule 52
	'}'            reduce using rule 52
	L_Var          reduce using rule 52


State 196

	Term1 -> 'let' '{' '(' LetVariable ',' ListLetVariable ')' '=' Term . '}' 'in' Term    (rule 82)

	'}'            shift, and enter state 199


State 197

	ListInteger -> Integer ',' ListInteger .            (rule 74)

	']'            reduce using rule 74


State 198

	ListBasisState -> BasisState ',' ListBasisState .    (rule 71)

	']'            reduce using rule 71


State 199

	Term1 -> 'let' '{' '(' LetVariable ',' ListLetVariable ')' '=' Term '}' . 'in' Term    (rule 82)

	'in'           shift, and enter state 200


State 200

	Term1 -> 'let' '{' '(' LetVariable ',' ListLetVariable ')' '=' Term '}' 'in' . Term    (rule 82)

	'('            shift, and enter state 53
	'()'           shift, and enter state 54
	'@+'           shift, and enter state 55
	'@+i'          shift, and enter state 56
	'@-'           shift, and enter state 57
	'@-i'          shift, and enter state 58
	'@0'           shift, and enter state 59
	'@1'           shift, and enter state 60
	'FSWAP'        shift, and enter state 61
	'H'            shift, and enter state 62
	'ID'           shift, and enter state 63
	'ISWAP'        shift, and enter state 64
	'ROOT_SWAP'    shift, and enter state 65
	'ROOT_SWAP_DAG'shift, and enter state 66
	'ROOT_X'       shift, and enter state 67
	'ROOT_X_DAG'   shift, and enter state 68
	'ROOT_Y'       shift, and enter state 69
	'ROOT_Y_DAG'   shift, and enter state 70
	'ROOT_Z'       shift, and enter state 71
	'ROOT_Z_DAG'   shift, and enter state 72
	'RX'           shift, and enter state 73
	'RY'           shift, and enter state 74
	'RZ'           shift, and enter state 75
	'S'            shift, and enter state 76
	'SQRT_SWAP'    shift, and enter state 77
	'SQRT_SWAP_DAG'shift, and enter state 78
	'SQRT_X'       shift, and enter state 79
	'SQRT_X_DAG'   shift, and enter state 80
	'SQRT_Y'       shift, and enter state 81
	'SQRT_Y_DAG'   shift, and enter state 82
	'SWAP'         shift, and enter state 83
	'SWAP_THETA'   shift, and enter state 84
	'S_DAG'        shift, and enter state 85
	'T'            shift, and enter state 86
	'T_DAG'        shift, and enter state 87
	'U1'           shift, and enter state 88
	'U2'           shift, and enter state 89
	'U3'           shift, and enter state 90
	'X'            shift, and enter state 91
	'Y'            shift, and enter state 92
	'Z'            shift, and enter state 93
	'case'         shift, and enter state 94
	'if'           shift, and enter state 95
	'let'          shift, and enter state 96
	'with'         shift, and enter state 97
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 98

	Var            goto state 43
	Lambda         goto state 44
	BasisState     goto state 45
	Gate           goto state 46
	LetVariable    goto state 47
	Tuple          goto state 48
	Term3          goto state 49
	Term1          goto state 50
	Term2          goto state 51
	Term           goto state 201

State 201

	Term1 -> 'let' '{' '(' LetVariable ',' ListLetVariable ')' '=' Term '}' 'in' Term .    (rule 82)

	')'            reduce using rule 82
	','            reduce using rule 82
	'->'           reduce using rule 82
	';'            reduce using rule 82
	']'            reduce using rule 82
	'else'         reduce using rule 82
	'of'           reduce using rule 82
	'then'         reduce using rule 82
	'}'            reduce using rule 82


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 107
Number of terminals: 75
Number of non-terminals: 35
Number of states: 202
