-----------------------------------------------------------------------------
Info file generated by Happy Version 1.20.0 from Frontend/LambdaQ/Par.y
-----------------------------------------------------------------------------

state 47 contains 1 shift/reduce conflicts.
state 49 contains 2 shift/reduce conflicts.
state 60 contains 17 shift/reduce conflicts.
state 61 contains 1 shift/reduce conflicts.
state 94 contains 2 shift/reduce conflicts.
state 137 contains 1 shift/reduce conflicts.
state 138 contains 1 shift/reduce conflicts.
state 139 contains 1 shift/reduce conflicts.
state 141 contains 1 shift/reduce conflicts.
state 167 contains 1 shift/reduce conflicts.
state 225 contains 1 shift/reduce conflicts.
state 250 contains 1 shift/reduce conflicts.
state 274 contains 1 shift/reduce conflicts.

rule 109 is unused

-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_pProgram -> Program                         (0)
	Double -> L_doubl                                  (1)
	Integer -> L_integ                                 (2)
	GateVar -> L_GateVar                               (3)
	Var -> L_Var                                       (4)
	Lambda -> L_Lambda                                 (5)
	Program -> ListFunctionDeclaration                 (6)
	IntegerExpression1 -> '-' IntegerExpression        (7)
	IntegerExpression1 -> IntegerExpression1 '+' IntegerExpression2   (8)
	IntegerExpression1 -> IntegerExpression1 '-' IntegerExpression2   (9)
	IntegerExpression1 -> IntegerExpression2           (10)
	IntegerExpression2 -> IntegerExpression2 '*' IntegerExpression3   (11)
	IntegerExpression2 -> IntegerExpression2 '/' IntegerExpression3   (12)
	IntegerExpression2 -> IntegerExpression3           (13)
	IntegerExpression3 -> Integer                      (14)
	IntegerExpression3 -> '(' IntegerExpression ')'    (15)
	IntegerExpression -> IntegerExpression1            (16)
	BoolValue -> 'True'                                (17)
	BoolValue -> 'False'                               (18)
	BoolExpression -> BoolExpression '&&' BoolExpression1   (19)
	BoolExpression -> BoolExpression '||' BoolExpression1   (20)
	BoolExpression -> 'not' BoolExpression1            (21)
	BoolExpression -> BoolExpression1                  (22)
	BoolExpression1 -> BoolExpression1 '==' BoolExpression2   (23)
	BoolExpression1 -> BoolExpression1 '/=' BoolExpression2   (24)
	BoolExpression1 -> BoolExpression2                 (25)
	BoolExpression2 -> IntegerExpression2 '==' IntegerExpression2   (26)
	BoolExpression2 -> IntegerExpression2 '/=' IntegerExpression2   (27)
	BoolExpression2 -> IntegerExpression2 '>' IntegerExpression2   (28)
	BoolExpression2 -> IntegerExpression2 '>=' IntegerExpression2   (29)
	BoolExpression2 -> IntegerExpression2 '<' IntegerExpression2   (30)
	BoolExpression2 -> IntegerExpression2 '<=' IntegerExpression2   (31)
	BoolExpression2 -> BoolValue                       (32)
	BoolExpression2 -> '(' BoolExpression ')'          (33)
	Type -> Type '->' Type1                            (34)
	Type -> Type1                                      (35)
	Type2 -> Type2 '*' Type3                           (36)
	Type2 -> Type3                                     (37)
	Type3 -> Type4 '**' Integer                        (38)
	Type3 -> '!' Type4                                 (39)
	Type3 -> Type4                                     (40)
	Type5 -> 'Bool'                                    (41)
	Type5 -> 'Bit'                                     (42)
	Type5 -> 'Int'                                     (43)
	Type5 -> 'Qbit'                                    (44)
	Type5 -> '()'                                      (45)
	Type5 -> '[' Type ']'                              (46)
	Type5 -> '(' Type ')'                              (47)
	Type1 -> Type2                                     (48)
	Type4 -> Type5                                     (49)
	Angle -> Double                                    (50)
	BasisState -> '@0'                                 (51)
	BasisState -> '@1'                                 (52)
	BasisState -> '@+'                                 (53)
	BasisState -> '@-'                                 (54)
	BasisState -> '@+i'                                (55)
	BasisState -> '@-i'                                (56)
	Gate -> 'H'                                        (57)
	Gate -> 'X'                                        (58)
	Gate -> 'Y'                                        (59)
	Gate -> 'Z'                                        (60)
	Gate -> 'ID'                                       (61)
	Gate -> 'ROOT_X' Integer                           (62)
	Gate -> 'ROOT_X_DAG' Integer                       (63)
	Gate -> 'ROOT_Y' Integer                           (64)
	Gate -> 'ROOT_Y_DAG' Integer                       (65)
	Gate -> 'ROOT_Z' Integer                           (66)
	Gate -> 'ROOT_Z_DAG' Integer                       (67)
	Gate -> 'S'                                        (68)
	Gate -> 'S_DAG'                                    (69)
	Gate -> 'T'                                        (70)
	Gate -> 'T_DAG'                                    (71)
	Gate -> 'SQRT_X'                                   (72)
	Gate -> 'SQRT_X_DAG'                               (73)
	Gate -> 'SQRT_Y'                                   (74)
	Gate -> 'SQRT_Y_DAG'                               (75)
	Gate -> 'RX' Angle                                 (76)
	Gate -> 'RY' Angle                                 (77)
	Gate -> 'RZ' Angle                                 (78)
	Gate -> 'U1' Angle                                 (79)
	Gate -> 'U2' '(' Angle ',' Angle ')'               (80)
	Gate -> 'U3' '(' Angle ',' Angle ',' Angle ')'     (81)
	Gate -> 'SWAP'                                     (82)
	Gate -> 'SQRT_SWAP'                                (83)
	Gate -> 'SQRT_SWAP_DAG'                            (84)
	Gate -> 'ISWAP'                                    (85)
	Gate -> 'FSWAP'                                    (86)
	Gate -> 'SWAP_THETA' Angle                         (87)
	Gate -> 'ROOT_SWAP' Integer                        (88)
	Gate -> 'ROOT_SWAP_DAG' Integer                    (89)
	Gate -> 'QFT' Integer                              (90)
	Gate -> 'QFT_DAG' Integer                          (91)
	Gate -> GateVar '(' Angle ',' Angle ',' Angle ')'   (92)
	Gate -> GateVar '(' Angle ',' Angle ')'            (93)
	Gate -> GateVar Angle                              (94)
	Gate -> GateVar Integer                            (95)
	Gate -> GateVar                                    (96)
	ListVar -> Var                                     (97)
	ListVar -> Var ',' ListVar                         (98)
	ControlBasisState -> '[' BasisState ']'            (99)
	ControlBasisStates -> '[' BasisState ',' ListBasisState ']'   (100)
	ListBasisState -> BasisState                       (101)
	ListBasisState -> BasisState ',' ListBasisState    (102)
	ControlBit -> '[' Integer ']'                      (103)
	ControlBits -> '[' Integer ',' ListInteger ']'     (104)
	ListInteger -> Integer                             (105)
	ListInteger -> Integer ',' ListInteger             (106)
	ControlTerm -> '[' Term ']'                        (107)
	ControlTerms -> '[' Term ',' ListTerm ']'          (108)
	ControlVar -> '[' Var ']'                          (109)
	ControlVars -> '[' Var ',' ListVar ']'             (110)
	ListTerm -> Term                                   (111)
	ListTerm -> Term ',' ListTerm                      (112)
	Term4 -> List '!!' Integer                         (113)
	Term4 -> List                                      (114)
	Term4 -> '(' Term ')'                              (115)
	Term3 -> '()'                                      (116)
	Term3 -> BasisState                                (117)
	Term3 -> BoolExpression                            (118)
	Term3 -> IntegerExpression                         (119)
	Term3 -> 'gate' Gate                               (120)
	Term3 -> Var                                       (121)
	Term3 -> '(' Term ',' ListTerm ')'                 (122)
	Term3 -> '(' Var ',' ListVar ')'                   (123)
	Term3 -> Term4                                     (124)
	Term2 -> 'with' ControlTerm 'ctrl' ControlBasisState   (125)
	Term2 -> 'with' ControlTerms 'ctrl' ControlBasisStates   (126)
	Term2 -> 'with' ControlVars 'ctrl' ControlBasisStates   (127)
	Term2 -> 'with' ControlTerm 'ctrl' ControlBit      (128)
	Term2 -> 'with' ControlTerms 'ctrl' ControlBits    (129)
	Term2 -> 'with' ControlVars 'ctrl' ControlBits     (130)
	Term2 -> Var ',' ListVar                           (131)
	Term2 -> Term2 Term3                               (132)
	Term2 -> Term2 '.' Term3                           (133)
	Term2 -> Term3                                     (134)
	Term1 -> 'if' Term 'then' Term 'else' Term         (135)
	Term1 -> 'let' '{' Var '=' Term '}' 'in' Term      (136)
	Term1 -> 'let' '{' '(' Var ',' ListVar ')' '=' Term '}' 'in' Term   (137)
	Term1 -> Var '<-' Term ';' Term                    (138)
	Term1 -> Var ',' ListVar '<-' Term ';' Term        (139)
	Term1 -> 'case' Term 'of' '{' ListCaseExpression '}'   (140)
	Term1 -> Lambda Var Type '.' Term                  (141)
	Term1 -> Term2                                     (142)
	Term -> Term1 '$' Term                             (143)
	Term -> Term1                                      (144)
	List1 -> '[]'                                      (145)
	List1 -> '[' Term ']'                              (146)
	List1 -> '[' Term ',' ListTerm ']'                 (147)
	List1 -> '(' List ')'                              (148)
	List -> List '++' List1                            (149)
	List -> Term3 ':' List1                            (150)
	List -> List1                                      (151)
	CaseExpression -> Term '->' Term                   (152)
	CaseExpression -> CaseExpression ';'               (153)
	ListCaseExpression -> CaseExpression               (154)
	ListCaseExpression -> CaseExpression ListCaseExpression   (155)
	Arg -> Var                                         (156)
	ListArg ->                                         (157)
	ListArg -> Arg ListArg                             (158)
	FunctionDefinition -> Var ListArg '=' Term         (159)
	FunctionDefinition -> FunctionDefinition ';'       (160)
	FunctionType -> Var '::' Type                      (161)
	FunctionType -> FunctionType ';'                   (162)
	FunctionDeclaration -> FunctionType ';' FunctionDefinition ';'   (163)
	ListFunctionDeclaration ->                         (164)
	ListFunctionDeclaration -> FunctionDeclaration ListFunctionDeclaration   (165)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	'!'            { PT _ (TS _ 1) }
	'!!'           { PT _ (TS _ 2) }
	'$'            { PT _ (TS _ 3) }
	'&&'           { PT _ (TS _ 4) }
	'('            { PT _ (TS _ 5) }
	'()'           { PT _ (TS _ 6) }
	')'            { PT _ (TS _ 7) }
	'*'            { PT _ (TS _ 8) }
	'**'           { PT _ (TS _ 9) }
	'+'            { PT _ (TS _ 10) }
	'++'           { PT _ (TS _ 11) }
	','            { PT _ (TS _ 12) }
	'-'            { PT _ (TS _ 13) }
	'->'           { PT _ (TS _ 14) }
	'.'            { PT _ (TS _ 15) }
	'/'            { PT _ (TS _ 16) }
	'/='           { PT _ (TS _ 17) }
	':'            { PT _ (TS _ 18) }
	'::'           { PT _ (TS _ 19) }
	';'            { PT _ (TS _ 20) }
	'<'            { PT _ (TS _ 21) }
	'<-'           { PT _ (TS _ 22) }
	'<='           { PT _ (TS _ 23) }
	'='            { PT _ (TS _ 24) }
	'=='           { PT _ (TS _ 25) }
	'>'            { PT _ (TS _ 26) }
	'>='           { PT _ (TS _ 27) }
	'@+'           { PT _ (TS _ 28) }
	'@+i'          { PT _ (TS _ 29) }
	'@-'           { PT _ (TS _ 30) }
	'@-i'          { PT _ (TS _ 31) }
	'@0'           { PT _ (TS _ 32) }
	'@1'           { PT _ (TS _ 33) }
	'Bit'          { PT _ (TS _ 34) }
	'Bool'         { PT _ (TS _ 35) }
	'FSWAP'        { PT _ (TS _ 36) }
	'False'        { PT _ (TS _ 37) }
	'H'            { PT _ (TS _ 38) }
	'ID'           { PT _ (TS _ 39) }
	'ISWAP'        { PT _ (TS _ 40) }
	'Int'          { PT _ (TS _ 41) }
	'QFT'          { PT _ (TS _ 42) }
	'QFT_DAG'      { PT _ (TS _ 43) }
	'Qbit'         { PT _ (TS _ 44) }
	'ROOT_SWAP'    { PT _ (TS _ 45) }
	'ROOT_SWAP_DAG'{ PT _ (TS _ 46) }
	'ROOT_X'       { PT _ (TS _ 47) }
	'ROOT_X_DAG'   { PT _ (TS _ 48) }
	'ROOT_Y'       { PT _ (TS _ 49) }
	'ROOT_Y_DAG'   { PT _ (TS _ 50) }
	'ROOT_Z'       { PT _ (TS _ 51) }
	'ROOT_Z_DAG'   { PT _ (TS _ 52) }
	'RX'           { PT _ (TS _ 53) }
	'RY'           { PT _ (TS _ 54) }
	'RZ'           { PT _ (TS _ 55) }
	'S'            { PT _ (TS _ 56) }
	'SQRT_SWAP'    { PT _ (TS _ 57) }
	'SQRT_SWAP_DAG'{ PT _ (TS _ 58) }
	'SQRT_X'       { PT _ (TS _ 59) }
	'SQRT_X_DAG'   { PT _ (TS _ 60) }
	'SQRT_Y'       { PT _ (TS _ 61) }
	'SQRT_Y_DAG'   { PT _ (TS _ 62) }
	'SWAP'         { PT _ (TS _ 63) }
	'SWAP_THETA'   { PT _ (TS _ 64) }
	'S_DAG'        { PT _ (TS _ 65) }
	'T'            { PT _ (TS _ 66) }
	'T_DAG'        { PT _ (TS _ 67) }
	'True'         { PT _ (TS _ 68) }
	'U1'           { PT _ (TS _ 69) }
	'U2'           { PT _ (TS _ 70) }
	'U3'           { PT _ (TS _ 71) }
	'X'            { PT _ (TS _ 72) }
	'Y'            { PT _ (TS _ 73) }
	'Z'            { PT _ (TS _ 74) }
	'['            { PT _ (TS _ 75) }
	'[]'           { PT _ (TS _ 76) }
	']'            { PT _ (TS _ 77) }
	'case'         { PT _ (TS _ 78) }
	'ctrl'         { PT _ (TS _ 79) }
	'else'         { PT _ (TS _ 80) }
	'gate'         { PT _ (TS _ 81) }
	'if'           { PT _ (TS _ 82) }
	'in'           { PT _ (TS _ 83) }
	'let'          { PT _ (TS _ 84) }
	'not'          { PT _ (TS _ 85) }
	'of'           { PT _ (TS _ 86) }
	'then'         { PT _ (TS _ 87) }
	'with'         { PT _ (TS _ 88) }
	'{'            { PT _ (TS _ 89) }
	'||'           { PT _ (TS _ 90) }
	'}'            { PT _ (TS _ 91) }
	L_doubl        { PT _ (TD $$) }
	L_integ        { PT _ (TI $$) }
	L_GateVar      { PT _ (T_GateVar _) }
	L_Var          { PT _ (T_Var _) }
	L_Lambda       { PT _ (T_Lambda $$) }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_pProgram rule  0
	Double          rule  1
	Integer         rule  2
	GateVar         rule  3
	Var             rule  4
	Lambda          rule  5
	Program         rule  6
	IntegerExpression1 rules 7, 8, 9, 10
	IntegerExpression2 rules 11, 12, 13
	IntegerExpression3 rules 14, 15
	IntegerExpression rule  16
	BoolValue       rules 17, 18
	BoolExpression  rules 19, 20, 21, 22
	BoolExpression1 rules 23, 24, 25
	BoolExpression2 rules 26, 27, 28, 29, 30, 31, 32, 33
	Type            rules 34, 35
	Type2           rules 36, 37
	Type3           rules 38, 39, 40
	Type5           rules 41, 42, 43, 44, 45, 46, 47
	Type1           rule  48
	Type4           rule  49
	Angle           rule  50
	BasisState      rules 51, 52, 53, 54, 55, 56
	Gate            rules 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96
	ListVar         rules 97, 98
	ControlBasisState rule  99
	ControlBasisStates rule  100
	ListBasisState  rules 101, 102
	ControlBit      rule  103
	ControlBits     rule  104
	ListInteger     rules 105, 106
	ControlTerm     rule  107
	ControlTerms    rule  108
	ControlVar      rule  109
	ControlVars     rule  110
	ListTerm        rules 111, 112
	Term4           rules 113, 114, 115
	Term3           rules 116, 117, 118, 119, 120, 121, 122, 123, 124
	Term2           rules 125, 126, 127, 128, 129, 130, 131, 132, 133, 134
	Term1           rules 135, 136, 137, 138, 139, 140, 141, 142
	Term            rules 143, 144
	List1           rules 145, 146, 147, 148
	List            rules 149, 150, 151
	CaseExpression  rules 152, 153
	ListCaseExpression rules 154, 155
	Arg             rule  156
	ListArg         rules 157, 158
	FunctionDefinition rules 159, 160
	FunctionType    rules 161, 162
	FunctionDeclaration rule  163
	ListFunctionDeclaration rules 164, 165

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0

	%start_pProgram -> . Program                        (rule 0)

	L_Var          shift, and enter state 8
	%eof           reduce using rule 164

	Var            goto state 3
	Program        goto state 4
	FunctionType   goto state 5
	FunctionDeclarationgoto state 6
	ListFunctionDeclarationgoto state 7

State 1

	Double -> . L_doubl                                 (rule 1)

	L_doubl        shift, and enter state 2


State 2

	Double -> L_doubl .                                 (rule 1)

	'$'            reduce using rule 1
	'('            reduce using rule 1
	'()'           reduce using rule 1
	')'            reduce using rule 1
	','            reduce using rule 1
	'-'            reduce using rule 1
	'->'           reduce using rule 1
	'.'            reduce using rule 1
	':'            reduce using rule 1
	';'            reduce using rule 1
	'@+'           reduce using rule 1
	'@+i'          reduce using rule 1
	'@-'           reduce using rule 1
	'@-i'          reduce using rule 1
	'@0'           reduce using rule 1
	'@1'           reduce using rule 1
	'False'        reduce using rule 1
	'True'         reduce using rule 1
	'['            reduce using rule 1
	'[]'           reduce using rule 1
	']'            reduce using rule 1
	'case'         reduce using rule 1
	'else'         reduce using rule 1
	'gate'         reduce using rule 1
	'if'           reduce using rule 1
	'let'          reduce using rule 1
	'not'          reduce using rule 1
	'of'           reduce using rule 1
	'then'         reduce using rule 1
	'with'         reduce using rule 1
	'}'            reduce using rule 1
	L_integ        reduce using rule 1
	L_Var          reduce using rule 1
	L_Lambda       reduce using rule 1


State 3

	FunctionType -> Var . '::' Type                     (rule 161)

	'::'           shift, and enter state 11


State 4

	%start_pProgram -> Program .                        (rule 0)

	%eof           accept


State 5

	FunctionType -> FunctionType . ';'                  (rule 162)
	FunctionDeclaration -> FunctionType . ';' FunctionDefinition ';'    (rule 163)

	';'            shift, and enter state 10


State 6

	ListFunctionDeclaration -> FunctionDeclaration . ListFunctionDeclaration    (rule 165)

	L_Var          shift, and enter state 8
	%eof           reduce using rule 164

	Var            goto state 3
	FunctionType   goto state 5
	FunctionDeclarationgoto state 6
	ListFunctionDeclarationgoto state 9

State 7

	Program -> ListFunctionDeclaration .                (rule 6)

	%eof           reduce using rule 6


State 8

	Var -> L_Var .                                      (rule 4)

	'!'            reduce using rule 4
	'$'            reduce using rule 4
	'('            reduce using rule 4
	'()'           reduce using rule 4
	')'            reduce using rule 4
	','            reduce using rule 4
	'-'            reduce using rule 4
	'->'           reduce using rule 4
	'.'            reduce using rule 4
	':'            reduce using rule 4
	'::'           reduce using rule 4
	';'            reduce using rule 4
	'<-'           reduce using rule 4
	'='            reduce using rule 4
	'@+'           reduce using rule 4
	'@+i'          reduce using rule 4
	'@-'           reduce using rule 4
	'@-i'          reduce using rule 4
	'@0'           reduce using rule 4
	'@1'           reduce using rule 4
	'Bit'          reduce using rule 4
	'Bool'         reduce using rule 4
	'False'        reduce using rule 4
	'Int'          reduce using rule 4
	'Qbit'         reduce using rule 4
	'True'         reduce using rule 4
	'['            reduce using rule 4
	'[]'           reduce using rule 4
	']'            reduce using rule 4
	'case'         reduce using rule 4
	'else'         reduce using rule 4
	'gate'         reduce using rule 4
	'if'           reduce using rule 4
	'let'          reduce using rule 4
	'not'          reduce using rule 4
	'of'           reduce using rule 4
	'then'         reduce using rule 4
	'with'         reduce using rule 4
	'}'            reduce using rule 4
	L_integ        reduce using rule 4
	L_Var          reduce using rule 4
	L_Lambda       reduce using rule 4


State 9

	ListFunctionDeclaration -> FunctionDeclaration ListFunctionDeclaration .    (rule 165)

	%eof           reduce using rule 165


State 10

	FunctionType -> FunctionType ';' .                  (rule 162)
	FunctionDeclaration -> FunctionType ';' . FunctionDefinition ';'    (rule 163)

	';'            reduce using rule 162
	L_Var          shift, and enter state 8

	Var            goto state 26
	FunctionDefinitiongoto state 27

State 11

	FunctionType -> Var '::' . Type                     (rule 161)

	'!'            shift, and enter state 18
	'('            shift, and enter state 19
	'()'           shift, and enter state 20
	'Bit'          shift, and enter state 21
	'Bool'         shift, and enter state 22
	'Int'          shift, and enter state 23
	'Qbit'         shift, and enter state 24
	'['            shift, and enter state 25

	Type           goto state 12
	Type2          goto state 13
	Type3          goto state 14
	Type5          goto state 15
	Type1          goto state 16
	Type4          goto state 17

State 12

	Type -> Type . '->' Type1                           (rule 34)
	FunctionType -> Var '::' Type .                     (rule 161)

	'->'           shift, and enter state 37
	';'            reduce using rule 161


State 13

	Type2 -> Type2 . '*' Type3                          (rule 36)
	Type1 -> Type2 .                                    (rule 48)

	')'            reduce using rule 48
	'*'            shift, and enter state 36
	'->'           reduce using rule 48
	'.'            reduce using rule 48
	';'            reduce using rule 48
	']'            reduce using rule 48


State 14

	Type2 -> Type3 .                                    (rule 37)

	')'            reduce using rule 37
	'*'            reduce using rule 37
	'->'           reduce using rule 37
	'.'            reduce using rule 37
	';'            reduce using rule 37
	']'            reduce using rule 37


State 15

	Type4 -> Type5 .                                    (rule 49)

	')'            reduce using rule 49
	'*'            reduce using rule 49
	'**'           reduce using rule 49
	'->'           reduce using rule 49
	'.'            reduce using rule 49
	';'            reduce using rule 49
	']'            reduce using rule 49


State 16

	Type -> Type1 .                                     (rule 35)

	')'            reduce using rule 35
	'->'           reduce using rule 35
	'.'            reduce using rule 35
	';'            reduce using rule 35
	']'            reduce using rule 35


State 17

	Type3 -> Type4 . '**' Integer                       (rule 38)
	Type3 -> Type4 .                                    (rule 40)

	')'            reduce using rule 40
	'*'            reduce using rule 40
	'**'           shift, and enter state 35
	'->'           reduce using rule 40
	'.'            reduce using rule 40
	';'            reduce using rule 40
	']'            reduce using rule 40


State 18

	Type3 -> '!' . Type4                                (rule 39)

	'('            shift, and enter state 19
	'()'           shift, and enter state 20
	'Bit'          shift, and enter state 21
	'Bool'         shift, and enter state 22
	'Int'          shift, and enter state 23
	'Qbit'         shift, and enter state 24
	'['            shift, and enter state 25

	Type5          goto state 15
	Type4          goto state 34

State 19

	Type5 -> '(' . Type ')'                             (rule 47)

	'!'            shift, and enter state 18
	'('            shift, and enter state 19
	'()'           shift, and enter state 20
	'Bit'          shift, and enter state 21
	'Bool'         shift, and enter state 22
	'Int'          shift, and enter state 23
	'Qbit'         shift, and enter state 24
	'['            shift, and enter state 25

	Type           goto state 33
	Type2          goto state 13
	Type3          goto state 14
	Type5          goto state 15
	Type1          goto state 16
	Type4          goto state 17

State 20

	Type5 -> '()' .                                     (rule 45)

	')'            reduce using rule 45
	'*'            reduce using rule 45
	'**'           reduce using rule 45
	'->'           reduce using rule 45
	'.'            reduce using rule 45
	';'            reduce using rule 45
	']'            reduce using rule 45


State 21

	Type5 -> 'Bit' .                                    (rule 42)

	')'            reduce using rule 42
	'*'            reduce using rule 42
	'**'           reduce using rule 42
	'->'           reduce using rule 42
	'.'            reduce using rule 42
	';'            reduce using rule 42
	']'            reduce using rule 42


State 22

	Type5 -> 'Bool' .                                   (rule 41)

	')'            reduce using rule 41
	'*'            reduce using rule 41
	'**'           reduce using rule 41
	'->'           reduce using rule 41
	'.'            reduce using rule 41
	';'            reduce using rule 41
	']'            reduce using rule 41


State 23

	Type5 -> 'Int' .                                    (rule 43)

	')'            reduce using rule 43
	'*'            reduce using rule 43
	'**'           reduce using rule 43
	'->'           reduce using rule 43
	'.'            reduce using rule 43
	';'            reduce using rule 43
	']'            reduce using rule 43


State 24

	Type5 -> 'Qbit' .                                   (rule 44)

	')'            reduce using rule 44
	'*'            reduce using rule 44
	'**'           reduce using rule 44
	'->'           reduce using rule 44
	'.'            reduce using rule 44
	';'            reduce using rule 44
	']'            reduce using rule 44


State 25

	Type5 -> '[' . Type ']'                             (rule 46)

	'!'            shift, and enter state 18
	'('            shift, and enter state 19
	'()'           shift, and enter state 20
	'Bit'          shift, and enter state 21
	'Bool'         shift, and enter state 22
	'Int'          shift, and enter state 23
	'Qbit'         shift, and enter state 24
	'['            shift, and enter state 25

	Type           goto state 32
	Type2          goto state 13
	Type3          goto state 14
	Type5          goto state 15
	Type1          goto state 16
	Type4          goto state 17

State 26

	FunctionDefinition -> Var . ListArg '=' Term        (rule 159)

	'='            reduce using rule 157
	L_Var          shift, and enter state 8

	Var            goto state 29
	Arg            goto state 30
	ListArg        goto state 31

State 27

	FunctionDefinition -> FunctionDefinition . ';'      (rule 160)
	FunctionDeclaration -> FunctionType ';' FunctionDefinition . ';'    (rule 163)

	';'            shift, and enter state 28


State 28

	FunctionDefinition -> FunctionDefinition ';' .      (rule 160)
	FunctionDeclaration -> FunctionType ';' FunctionDefinition ';' .    (rule 163)

	';'            reduce using rule 160
	L_Var          reduce using rule 163
	%eof           reduce using rule 163


State 29

	Arg -> Var .                                        (rule 156)

	'='            reduce using rule 156
	L_Var          reduce using rule 156


State 30

	ListArg -> Arg . ListArg                            (rule 158)

	'='            reduce using rule 157
	L_Var          shift, and enter state 8

	Var            goto state 29
	Arg            goto state 30
	ListArg        goto state 45

State 31

	FunctionDefinition -> Var ListArg . '=' Term        (rule 159)

	'='            shift, and enter state 44


State 32

	Type -> Type . '->' Type1                           (rule 34)
	Type5 -> '[' Type . ']'                             (rule 46)

	'->'           shift, and enter state 37
	']'            shift, and enter state 43


State 33

	Type -> Type . '->' Type1                           (rule 34)
	Type5 -> '(' Type . ')'                             (rule 47)

	')'            shift, and enter state 42
	'->'           shift, and enter state 37


State 34

	Type3 -> '!' Type4 .                                (rule 39)

	')'            reduce using rule 39
	'*'            reduce using rule 39
	'->'           reduce using rule 39
	'.'            reduce using rule 39
	';'            reduce using rule 39
	']'            reduce using rule 39


State 35

	Type3 -> Type4 '**' . Integer                       (rule 38)

	L_integ        shift, and enter state 41

	Integer        goto state 40

State 36

	Type2 -> Type2 '*' . Type3                          (rule 36)

	'!'            shift, and enter state 18
	'('            shift, and enter state 19
	'()'           shift, and enter state 20
	'Bit'          shift, and enter state 21
	'Bool'         shift, and enter state 22
	'Int'          shift, and enter state 23
	'Qbit'         shift, and enter state 24
	'['            shift, and enter state 25

	Type3          goto state 39
	Type5          goto state 15
	Type4          goto state 17

State 37

	Type -> Type '->' . Type1                           (rule 34)

	'!'            shift, and enter state 18
	'('            shift, and enter state 19
	'()'           shift, and enter state 20
	'Bit'          shift, and enter state 21
	'Bool'         shift, and enter state 22
	'Int'          shift, and enter state 23
	'Qbit'         shift, and enter state 24
	'['            shift, and enter state 25

	Type2          goto state 13
	Type3          goto state 14
	Type5          goto state 15
	Type1          goto state 38
	Type4          goto state 17

State 38

	Type -> Type '->' Type1 .                           (rule 34)

	')'            reduce using rule 34
	'->'           reduce using rule 34
	'.'            reduce using rule 34
	';'            reduce using rule 34
	']'            reduce using rule 34


State 39

	Type2 -> Type2 '*' Type3 .                          (rule 36)

	')'            reduce using rule 36
	'*'            reduce using rule 36
	'->'           reduce using rule 36
	'.'            reduce using rule 36
	';'            reduce using rule 36
	']'            reduce using rule 36


State 40

	Type3 -> Type4 '**' Integer .                       (rule 38)

	')'            reduce using rule 38
	'*'            reduce using rule 38
	'->'           reduce using rule 38
	'.'            reduce using rule 38
	';'            reduce using rule 38
	']'            reduce using rule 38


State 41

	Integer -> L_integ .                                (rule 2)

	'$'            reduce using rule 2
	'&&'           reduce using rule 2
	'('            reduce using rule 2
	'()'           reduce using rule 2
	')'            reduce using rule 2
	'*'            reduce using rule 2
	'+'            reduce using rule 2
	','            reduce using rule 2
	'-'            reduce using rule 2
	'->'           reduce using rule 2
	'.'            reduce using rule 2
	'/'            reduce using rule 2
	'/='           reduce using rule 2
	':'            reduce using rule 2
	';'            reduce using rule 2
	'<'            reduce using rule 2
	'<='           reduce using rule 2
	'=='           reduce using rule 2
	'>'            reduce using rule 2
	'>='           reduce using rule 2
	'@+'           reduce using rule 2
	'@+i'          reduce using rule 2
	'@-'           reduce using rule 2
	'@-i'          reduce using rule 2
	'@0'           reduce using rule 2
	'@1'           reduce using rule 2
	'False'        reduce using rule 2
	'True'         reduce using rule 2
	'['            reduce using rule 2
	'[]'           reduce using rule 2
	']'            reduce using rule 2
	'case'         reduce using rule 2
	'else'         reduce using rule 2
	'gate'         reduce using rule 2
	'if'           reduce using rule 2
	'let'          reduce using rule 2
	'not'          reduce using rule 2
	'of'           reduce using rule 2
	'then'         reduce using rule 2
	'with'         reduce using rule 2
	'||'           reduce using rule 2
	'}'            reduce using rule 2
	L_integ        reduce using rule 2
	L_Var          reduce using rule 2
	L_Lambda       reduce using rule 2


State 42

	Type5 -> '(' Type ')' .                             (rule 47)

	')'            reduce using rule 47
	'*'            reduce using rule 47
	'**'           reduce using rule 47
	'->'           reduce using rule 47
	'.'            reduce using rule 47
	';'            reduce using rule 47
	']'            reduce using rule 47


State 43

	Type5 -> '[' Type ']' .                             (rule 46)

	')'            reduce using rule 46
	'*'            reduce using rule 46
	'**'           reduce using rule 46
	'->'           reduce using rule 46
	'.'            reduce using rule 46
	';'            reduce using rule 46
	']'            reduce using rule 46


State 44

	FunctionDefinition -> Var ListArg '=' . Term        (rule 159)

	'('            shift, and enter state 65
	'()'           shift, and enter state 66
	'-'            shift, and enter state 67
	'@+'           shift, and enter state 68
	'@+i'          shift, and enter state 69
	'@-'           shift, and enter state 70
	'@-i'          shift, and enter state 71
	'@0'           shift, and enter state 72
	'@1'           shift, and enter state 73
	'False'        shift, and enter state 74
	'True'         shift, and enter state 75
	'['            shift, and enter state 76
	'[]'           shift, and enter state 77
	'case'         shift, and enter state 78
	'gate'         shift, and enter state 79
	'if'           shift, and enter state 80
	'let'          shift, and enter state 81
	'not'          shift, and enter state 82
	'with'         shift, and enter state 83
	L_integ        shift, and enter state 41
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 84

	Integer        goto state 46
	Var            goto state 47
	Lambda         goto state 48
	IntegerExpression1goto state 49
	IntegerExpression2goto state 50
	IntegerExpression3goto state 51
	IntegerExpressiongoto state 52
	BoolValue      goto state 53
	BoolExpression goto state 54
	BoolExpression1goto state 55
	BoolExpression2goto state 56
	BasisState     goto state 57
	Term4          goto state 58
	Term3          goto state 59
	Term2          goto state 60
	Term1          goto state 61
	Term           goto state 62
	List1          goto state 63
	List           goto state 64

State 45

	ListArg -> Arg ListArg .                            (rule 158)

	'='            reduce using rule 158


State 46

	IntegerExpression3 -> Integer .                     (rule 14)

	'$'            reduce using rule 14
	'&&'           reduce using rule 14
	'('            reduce using rule 14
	'()'           reduce using rule 14
	')'            reduce using rule 14
	'*'            reduce using rule 14
	'+'            reduce using rule 14
	','            reduce using rule 14
	'-'            reduce using rule 14
	'->'           reduce using rule 14
	'.'            reduce using rule 14
	'/'            reduce using rule 14
	'/='           reduce using rule 14
	':'            reduce using rule 14
	';'            reduce using rule 14
	'<'            reduce using rule 14
	'<='           reduce using rule 14
	'=='           reduce using rule 14
	'>'            reduce using rule 14
	'>='           reduce using rule 14
	'@+'           reduce using rule 14
	'@+i'          reduce using rule 14
	'@-'           reduce using rule 14
	'@-i'          reduce using rule 14
	'@0'           reduce using rule 14
	'@1'           reduce using rule 14
	'False'        reduce using rule 14
	'True'         reduce using rule 14
	'['            reduce using rule 14
	'[]'           reduce using rule 14
	']'            reduce using rule 14
	'case'         reduce using rule 14
	'else'         reduce using rule 14
	'gate'         reduce using rule 14
	'if'           reduce using rule 14
	'let'          reduce using rule 14
	'not'          reduce using rule 14
	'of'           reduce using rule 14
	'then'         reduce using rule 14
	'with'         reduce using rule 14
	'||'           reduce using rule 14
	'}'            reduce using rule 14
	L_integ        reduce using rule 14
	L_Var          reduce using rule 14
	L_Lambda       reduce using rule 14


State 47

	Term3 -> Var .                                      (rule 121)
	Term2 -> Var . ',' ListVar                          (rule 131)
	Term1 -> Var . '<-' Term ';' Term                   (rule 138)
	Term1 -> Var . ',' ListVar '<-' Term ';' Term       (rule 139)

	'$'            reduce using rule 121
	'('            reduce using rule 121
	'()'           reduce using rule 121
	')'            reduce using rule 121
	','            shift, and enter state 164
			(reduce using rule 121)

	'-'            reduce using rule 121
	'->'           reduce using rule 121
	'.'            reduce using rule 121
	':'            reduce using rule 121
	';'            reduce using rule 121
	'<-'           shift, and enter state 165
	'@+'           reduce using rule 121
	'@+i'          reduce using rule 121
	'@-'           reduce using rule 121
	'@-i'          reduce using rule 121
	'@0'           reduce using rule 121
	'@1'           reduce using rule 121
	'False'        reduce using rule 121
	'True'         reduce using rule 121
	'['            reduce using rule 121
	'[]'           reduce using rule 121
	']'            reduce using rule 121
	'case'         reduce using rule 121
	'else'         reduce using rule 121
	'gate'         reduce using rule 121
	'if'           reduce using rule 121
	'let'          reduce using rule 121
	'not'          reduce using rule 121
	'of'           reduce using rule 121
	'then'         reduce using rule 121
	'with'         reduce using rule 121
	'}'            reduce using rule 121
	L_integ        reduce using rule 121
	L_Var          reduce using rule 121
	L_Lambda       reduce using rule 121


State 48

	Term1 -> Lambda . Var Type '.' Term                 (rule 141)

	L_Var          shift, and enter state 8

	Var            goto state 163

State 49

	IntegerExpression1 -> IntegerExpression1 . '+' IntegerExpression2    (rule 8)
	IntegerExpression1 -> IntegerExpression1 . '-' IntegerExpression2    (rule 9)
	IntegerExpression -> IntegerExpression1 .           (rule 16)

	'$'            reduce using rule 16
	'('            reduce using rule 16
	'()'           reduce using rule 16
	')'            reduce using rule 16
	'+'            shift, and enter state 161
			(reduce using rule 16)

	','            reduce using rule 16
	'-'            shift, and enter state 162
			(reduce using rule 16)

	'->'           reduce using rule 16
	'.'            reduce using rule 16
	':'            reduce using rule 16
	';'            reduce using rule 16
	'@+'           reduce using rule 16
	'@+i'          reduce using rule 16
	'@-'           reduce using rule 16
	'@-i'          reduce using rule 16
	'@0'           reduce using rule 16
	'@1'           reduce using rule 16
	'False'        reduce using rule 16
	'True'         reduce using rule 16
	'['            reduce using rule 16
	'[]'           reduce using rule 16
	']'            reduce using rule 16
	'case'         reduce using rule 16
	'else'         reduce using rule 16
	'gate'         reduce using rule 16
	'if'           reduce using rule 16
	'let'          reduce using rule 16
	'not'          reduce using rule 16
	'of'           reduce using rule 16
	'then'         reduce using rule 16
	'with'         reduce using rule 16
	'}'            reduce using rule 16
	L_integ        reduce using rule 16
	L_Var          reduce using rule 16
	L_Lambda       reduce using rule 16


State 50

	IntegerExpression1 -> IntegerExpression2 .          (rule 10)
	IntegerExpression2 -> IntegerExpression2 . '*' IntegerExpression3    (rule 11)
	IntegerExpression2 -> IntegerExpression2 . '/' IntegerExpression3    (rule 12)
	BoolExpression2 -> IntegerExpression2 . '==' IntegerExpression2    (rule 26)
	BoolExpression2 -> IntegerExpression2 . '/=' IntegerExpression2    (rule 27)
	BoolExpression2 -> IntegerExpression2 . '>' IntegerExpression2    (rule 28)
	BoolExpression2 -> IntegerExpression2 . '>=' IntegerExpression2    (rule 29)
	BoolExpression2 -> IntegerExpression2 . '<' IntegerExpression2    (rule 30)
	BoolExpression2 -> IntegerExpression2 . '<=' IntegerExpression2    (rule 31)

	'$'            reduce using rule 10
	'('            reduce using rule 10
	'()'           reduce using rule 10
	')'            reduce using rule 10
	'*'            shift, and enter state 153
	'+'            reduce using rule 10
	','            reduce using rule 10
	'-'            reduce using rule 10
	'->'           reduce using rule 10
	'.'            reduce using rule 10
	'/'            shift, and enter state 154
	'/='           shift, and enter state 155
	':'            reduce using rule 10
	';'            reduce using rule 10
	'<'            shift, and enter state 156
	'<='           shift, and enter state 157
	'=='           shift, and enter state 158
	'>'            shift, and enter state 159
	'>='           shift, and enter state 160
	'@+'           reduce using rule 10
	'@+i'          reduce using rule 10
	'@-'           reduce using rule 10
	'@-i'          reduce using rule 10
	'@0'           reduce using rule 10
	'@1'           reduce using rule 10
	'False'        reduce using rule 10
	'True'         reduce using rule 10
	'['            reduce using rule 10
	'[]'           reduce using rule 10
	']'            reduce using rule 10
	'case'         reduce using rule 10
	'else'         reduce using rule 10
	'gate'         reduce using rule 10
	'if'           reduce using rule 10
	'let'          reduce using rule 10
	'not'          reduce using rule 10
	'of'           reduce using rule 10
	'then'         reduce using rule 10
	'with'         reduce using rule 10
	'}'            reduce using rule 10
	L_integ        reduce using rule 10
	L_Var          reduce using rule 10
	L_Lambda       reduce using rule 10


State 51

	IntegerExpression2 -> IntegerExpression3 .          (rule 13)

	'$'            reduce using rule 13
	'&&'           reduce using rule 13
	'('            reduce using rule 13
	'()'           reduce using rule 13
	')'            reduce using rule 13
	'*'            reduce using rule 13
	'+'            reduce using rule 13
	','            reduce using rule 13
	'-'            reduce using rule 13
	'->'           reduce using rule 13
	'.'            reduce using rule 13
	'/'            reduce using rule 13
	'/='           reduce using rule 13
	':'            reduce using rule 13
	';'            reduce using rule 13
	'<'            reduce using rule 13
	'<='           reduce using rule 13
	'=='           reduce using rule 13
	'>'            reduce using rule 13
	'>='           reduce using rule 13
	'@+'           reduce using rule 13
	'@+i'          reduce using rule 13
	'@-'           reduce using rule 13
	'@-i'          reduce using rule 13
	'@0'           reduce using rule 13
	'@1'           reduce using rule 13
	'False'        reduce using rule 13
	'True'         reduce using rule 13
	'['            reduce using rule 13
	'[]'           reduce using rule 13
	']'            reduce using rule 13
	'case'         reduce using rule 13
	'else'         reduce using rule 13
	'gate'         reduce using rule 13
	'if'           reduce using rule 13
	'let'          reduce using rule 13
	'not'          reduce using rule 13
	'of'           reduce using rule 13
	'then'         reduce using rule 13
	'with'         reduce using rule 13
	'||'           reduce using rule 13
	'}'            reduce using rule 13
	L_integ        reduce using rule 13
	L_Var          reduce using rule 13
	L_Lambda       reduce using rule 13


State 52

	Term3 -> IntegerExpression .                        (rule 119)

	'$'            reduce using rule 119
	'('            reduce using rule 119
	'()'           reduce using rule 119
	')'            reduce using rule 119
	','            reduce using rule 119
	'-'            reduce using rule 119
	'->'           reduce using rule 119
	'.'            reduce using rule 119
	':'            reduce using rule 119
	';'            reduce using rule 119
	'@+'           reduce using rule 119
	'@+i'          reduce using rule 119
	'@-'           reduce using rule 119
	'@-i'          reduce using rule 119
	'@0'           reduce using rule 119
	'@1'           reduce using rule 119
	'False'        reduce using rule 119
	'True'         reduce using rule 119
	'['            reduce using rule 119
	'[]'           reduce using rule 119
	']'            reduce using rule 119
	'case'         reduce using rule 119
	'else'         reduce using rule 119
	'gate'         reduce using rule 119
	'if'           reduce using rule 119
	'let'          reduce using rule 119
	'not'          reduce using rule 119
	'of'           reduce using rule 119
	'then'         reduce using rule 119
	'with'         reduce using rule 119
	'}'            reduce using rule 119
	L_integ        reduce using rule 119
	L_Var          reduce using rule 119
	L_Lambda       reduce using rule 119


State 53

	BoolExpression2 -> BoolValue .                      (rule 32)

	'$'            reduce using rule 32
	'&&'           reduce using rule 32
	'('            reduce using rule 32
	'()'           reduce using rule 32
	')'            reduce using rule 32
	','            reduce using rule 32
	'-'            reduce using rule 32
	'->'           reduce using rule 32
	'.'            reduce using rule 32
	'/='           reduce using rule 32
	':'            reduce using rule 32
	';'            reduce using rule 32
	'=='           reduce using rule 32
	'@+'           reduce using rule 32
	'@+i'          reduce using rule 32
	'@-'           reduce using rule 32
	'@-i'          reduce using rule 32
	'@0'           reduce using rule 32
	'@1'           reduce using rule 32
	'False'        reduce using rule 32
	'True'         reduce using rule 32
	'['            reduce using rule 32
	'[]'           reduce using rule 32
	']'            reduce using rule 32
	'case'         reduce using rule 32
	'else'         reduce using rule 32
	'gate'         reduce using rule 32
	'if'           reduce using rule 32
	'let'          reduce using rule 32
	'not'          reduce using rule 32
	'of'           reduce using rule 32
	'then'         reduce using rule 32
	'with'         reduce using rule 32
	'||'           reduce using rule 32
	'}'            reduce using rule 32
	L_integ        reduce using rule 32
	L_Var          reduce using rule 32
	L_Lambda       reduce using rule 32


State 54

	BoolExpression -> BoolExpression . '&&' BoolExpression1    (rule 19)
	BoolExpression -> BoolExpression . '||' BoolExpression1    (rule 20)
	Term3 -> BoolExpression .                           (rule 118)

	'$'            reduce using rule 118
	'&&'           shift, and enter state 151
	'('            reduce using rule 118
	'()'           reduce using rule 118
	')'            reduce using rule 118
	','            reduce using rule 118
	'-'            reduce using rule 118
	'->'           reduce using rule 118
	'.'            reduce using rule 118
	':'            reduce using rule 118
	';'            reduce using rule 118
	'@+'           reduce using rule 118
	'@+i'          reduce using rule 118
	'@-'           reduce using rule 118
	'@-i'          reduce using rule 118
	'@0'           reduce using rule 118
	'@1'           reduce using rule 118
	'False'        reduce using rule 118
	'True'         reduce using rule 118
	'['            reduce using rule 118
	'[]'           reduce using rule 118
	']'            reduce using rule 118
	'case'         reduce using rule 118
	'else'         reduce using rule 118
	'gate'         reduce using rule 118
	'if'           reduce using rule 118
	'let'          reduce using rule 118
	'not'          reduce using rule 118
	'of'           reduce using rule 118
	'then'         reduce using rule 118
	'with'         reduce using rule 118
	'||'           shift, and enter state 152
	'}'            reduce using rule 118
	L_integ        reduce using rule 118
	L_Var          reduce using rule 118
	L_Lambda       reduce using rule 118


State 55

	BoolExpression -> BoolExpression1 .                 (rule 22)
	BoolExpression1 -> BoolExpression1 . '==' BoolExpression2    (rule 23)
	BoolExpression1 -> BoolExpression1 . '/=' BoolExpression2    (rule 24)

	'$'            reduce using rule 22
	'&&'           reduce using rule 22
	'('            reduce using rule 22
	'()'           reduce using rule 22
	')'            reduce using rule 22
	','            reduce using rule 22
	'-'            reduce using rule 22
	'->'           reduce using rule 22
	'.'            reduce using rule 22
	'/='           shift, and enter state 149
	':'            reduce using rule 22
	';'            reduce using rule 22
	'=='           shift, and enter state 150
	'@+'           reduce using rule 22
	'@+i'          reduce using rule 22
	'@-'           reduce using rule 22
	'@-i'          reduce using rule 22
	'@0'           reduce using rule 22
	'@1'           reduce using rule 22
	'False'        reduce using rule 22
	'True'         reduce using rule 22
	'['            reduce using rule 22
	'[]'           reduce using rule 22
	']'            reduce using rule 22
	'case'         reduce using rule 22
	'else'         reduce using rule 22
	'gate'         reduce using rule 22
	'if'           reduce using rule 22
	'let'          reduce using rule 22
	'not'          reduce using rule 22
	'of'           reduce using rule 22
	'then'         reduce using rule 22
	'with'         reduce using rule 22
	'||'           reduce using rule 22
	'}'            reduce using rule 22
	L_integ        reduce using rule 22
	L_Var          reduce using rule 22
	L_Lambda       reduce using rule 22


State 56

	BoolExpression1 -> BoolExpression2 .                (rule 25)

	'$'            reduce using rule 25
	'&&'           reduce using rule 25
	'('            reduce using rule 25
	'()'           reduce using rule 25
	')'            reduce using rule 25
	','            reduce using rule 25
	'-'            reduce using rule 25
	'->'           reduce using rule 25
	'.'            reduce using rule 25
	'/='           reduce using rule 25
	':'            reduce using rule 25
	';'            reduce using rule 25
	'=='           reduce using rule 25
	'@+'           reduce using rule 25
	'@+i'          reduce using rule 25
	'@-'           reduce using rule 25
	'@-i'          reduce using rule 25
	'@0'           reduce using rule 25
	'@1'           reduce using rule 25
	'False'        reduce using rule 25
	'True'         reduce using rule 25
	'['            reduce using rule 25
	'[]'           reduce using rule 25
	']'            reduce using rule 25
	'case'         reduce using rule 25
	'else'         reduce using rule 25
	'gate'         reduce using rule 25
	'if'           reduce using rule 25
	'let'          reduce using rule 25
	'not'          reduce using rule 25
	'of'           reduce using rule 25
	'then'         reduce using rule 25
	'with'         reduce using rule 25
	'||'           reduce using rule 25
	'}'            reduce using rule 25
	L_integ        reduce using rule 25
	L_Var          reduce using rule 25
	L_Lambda       reduce using rule 25


State 57

	Term3 -> BasisState .                               (rule 117)

	'$'            reduce using rule 117
	'('            reduce using rule 117
	'()'           reduce using rule 117
	')'            reduce using rule 117
	','            reduce using rule 117
	'-'            reduce using rule 117
	'->'           reduce using rule 117
	'.'            reduce using rule 117
	':'            reduce using rule 117
	';'            reduce using rule 117
	'@+'           reduce using rule 117
	'@+i'          reduce using rule 117
	'@-'           reduce using rule 117
	'@-i'          reduce using rule 117
	'@0'           reduce using rule 117
	'@1'           reduce using rule 117
	'False'        reduce using rule 117
	'True'         reduce using rule 117
	'['            reduce using rule 117
	'[]'           reduce using rule 117
	']'            reduce using rule 117
	'case'         reduce using rule 117
	'else'         reduce using rule 117
	'gate'         reduce using rule 117
	'if'           reduce using rule 117
	'let'          reduce using rule 117
	'not'          reduce using rule 117
	'of'           reduce using rule 117
	'then'         reduce using rule 117
	'with'         reduce using rule 117
	'}'            reduce using rule 117
	L_integ        reduce using rule 117
	L_Var          reduce using rule 117
	L_Lambda       reduce using rule 117


State 58

	Term3 -> Term4 .                                    (rule 124)

	'$'            reduce using rule 124
	'('            reduce using rule 124
	'()'           reduce using rule 124
	')'            reduce using rule 124
	','            reduce using rule 124
	'-'            reduce using rule 124
	'->'           reduce using rule 124
	'.'            reduce using rule 124
	':'            reduce using rule 124
	';'            reduce using rule 124
	'@+'           reduce using rule 124
	'@+i'          reduce using rule 124
	'@-'           reduce using rule 124
	'@-i'          reduce using rule 124
	'@0'           reduce using rule 124
	'@1'           reduce using rule 124
	'False'        reduce using rule 124
	'True'         reduce using rule 124
	'['            reduce using rule 124
	'[]'           reduce using rule 124
	']'            reduce using rule 124
	'case'         reduce using rule 124
	'else'         reduce using rule 124
	'gate'         reduce using rule 124
	'if'           reduce using rule 124
	'let'          reduce using rule 124
	'not'          reduce using rule 124
	'of'           reduce using rule 124
	'then'         reduce using rule 124
	'with'         reduce using rule 124
	'}'            reduce using rule 124
	L_integ        reduce using rule 124
	L_Var          reduce using rule 124
	L_Lambda       reduce using rule 124


State 59

	Term2 -> Term3 .                                    (rule 134)
	List -> Term3 . ':' List1                           (rule 150)

	'$'            reduce using rule 134
	'('            reduce using rule 134
	'()'           reduce using rule 134
	')'            reduce using rule 134
	','            reduce using rule 134
	'-'            reduce using rule 134
	'->'           reduce using rule 134
	'.'            reduce using rule 134
	':'            shift, and enter state 148
	';'            reduce using rule 134
	'@+'           reduce using rule 134
	'@+i'          reduce using rule 134
	'@-'           reduce using rule 134
	'@-i'          reduce using rule 134
	'@0'           reduce using rule 134
	'@1'           reduce using rule 134
	'False'        reduce using rule 134
	'True'         reduce using rule 134
	'['            reduce using rule 134
	'[]'           reduce using rule 134
	']'            reduce using rule 134
	'case'         reduce using rule 134
	'else'         reduce using rule 134
	'gate'         reduce using rule 134
	'if'           reduce using rule 134
	'let'          reduce using rule 134
	'not'          reduce using rule 134
	'of'           reduce using rule 134
	'then'         reduce using rule 134
	'with'         reduce using rule 134
	'}'            reduce using rule 134
	L_integ        reduce using rule 134
	L_Var          reduce using rule 134
	L_Lambda       reduce using rule 134


State 60

	Term2 -> Term2 . Term3                              (rule 132)
	Term2 -> Term2 . '.' Term3                          (rule 133)
	Term1 -> Term2 .                                    (rule 142)

	'$'            reduce using rule 142
	'('            shift, and enter state 65
			(reduce using rule 142)

	'()'           shift, and enter state 66
			(reduce using rule 142)

	')'            reduce using rule 142
	','            reduce using rule 142
	'-'            shift, and enter state 67
			(reduce using rule 142)

	'->'           reduce using rule 142
	'.'            shift, and enter state 147
	';'            reduce using rule 142
	'@+'           shift, and enter state 68
			(reduce using rule 142)

	'@+i'          shift, and enter state 69
			(reduce using rule 142)

	'@-'           shift, and enter state 70
			(reduce using rule 142)

	'@-i'          shift, and enter state 71
			(reduce using rule 142)

	'@0'           shift, and enter state 72
			(reduce using rule 142)

	'@1'           shift, and enter state 73
			(reduce using rule 142)

	'False'        shift, and enter state 74
			(reduce using rule 142)

	'True'         shift, and enter state 75
			(reduce using rule 142)

	'['            shift, and enter state 76
			(reduce using rule 142)

	'[]'           shift, and enter state 77
			(reduce using rule 142)

	']'            reduce using rule 142
	'case'         reduce using rule 142
	'else'         reduce using rule 142
	'gate'         shift, and enter state 79
			(reduce using rule 142)

	'if'           reduce using rule 142
	'let'          reduce using rule 142
	'not'          shift, and enter state 82
			(reduce using rule 142)

	'of'           reduce using rule 142
	'then'         reduce using rule 142
	'with'         reduce using rule 142
	'}'            reduce using rule 142
	L_integ        shift, and enter state 41
			(reduce using rule 142)

	L_Var          shift, and enter state 8
			(reduce using rule 142)

	L_Lambda       reduce using rule 142

	Integer        goto state 46
	Var            goto state 145
	IntegerExpression1goto state 49
	IntegerExpression2goto state 50
	IntegerExpression3goto state 51
	IntegerExpressiongoto state 52
	BoolValue      goto state 53
	BoolExpression goto state 54
	BoolExpression1goto state 55
	BoolExpression2goto state 56
	BasisState     goto state 57
	Term4          goto state 58
	Term3          goto state 146
	List1          goto state 63
	List           goto state 64

State 61

	Term -> Term1 . '$' Term                            (rule 143)
	Term -> Term1 .                                     (rule 144)

	'$'            shift, and enter state 144
			(reduce using rule 144)

	'('            reduce using rule 144
	'()'           reduce using rule 144
	')'            reduce using rule 144
	','            reduce using rule 144
	'-'            reduce using rule 144
	'->'           reduce using rule 144
	';'            reduce using rule 144
	'@+'           reduce using rule 144
	'@+i'          reduce using rule 144
	'@-'           reduce using rule 144
	'@-i'          reduce using rule 144
	'@0'           reduce using rule 144
	'@1'           reduce using rule 144
	'False'        reduce using rule 144
	'True'         reduce using rule 144
	'['            reduce using rule 144
	'[]'           reduce using rule 144
	']'            reduce using rule 144
	'case'         reduce using rule 144
	'else'         reduce using rule 144
	'gate'         reduce using rule 144
	'if'           reduce using rule 144
	'let'          reduce using rule 144
	'not'          reduce using rule 144
	'of'           reduce using rule 144
	'then'         reduce using rule 144
	'with'         reduce using rule 144
	'}'            reduce using rule 144
	L_integ        reduce using rule 144
	L_Var          reduce using rule 144
	L_Lambda       reduce using rule 144


State 62

	FunctionDefinition -> Var ListArg '=' Term .        (rule 159)

	';'            reduce using rule 159


State 63

	List -> List1 .                                     (rule 151)

	'!!'           reduce using rule 151
	'$'            reduce using rule 151
	'('            reduce using rule 151
	'()'           reduce using rule 151
	')'            reduce using rule 151
	'++'           reduce using rule 151
	','            reduce using rule 151
	'-'            reduce using rule 151
	'->'           reduce using rule 151
	'.'            reduce using rule 151
	':'            reduce using rule 151
	';'            reduce using rule 151
	'@+'           reduce using rule 151
	'@+i'          reduce using rule 151
	'@-'           reduce using rule 151
	'@-i'          reduce using rule 151
	'@0'           reduce using rule 151
	'@1'           reduce using rule 151
	'False'        reduce using rule 151
	'True'         reduce using rule 151
	'['            reduce using rule 151
	'[]'           reduce using rule 151
	']'            reduce using rule 151
	'case'         reduce using rule 151
	'else'         reduce using rule 151
	'gate'         reduce using rule 151
	'if'           reduce using rule 151
	'let'          reduce using rule 151
	'not'          reduce using rule 151
	'of'           reduce using rule 151
	'then'         reduce using rule 151
	'with'         reduce using rule 151
	'}'            reduce using rule 151
	L_integ        reduce using rule 151
	L_Var          reduce using rule 151
	L_Lambda       reduce using rule 151


State 64

	Term4 -> List . '!!' Integer                        (rule 113)
	Term4 -> List .                                     (rule 114)
	List -> List . '++' List1                           (rule 149)

	'!!'           shift, and enter state 142
	'$'            reduce using rule 114
	'('            reduce using rule 114
	'()'           reduce using rule 114
	')'            reduce using rule 114
	'++'           shift, and enter state 143
	','            reduce using rule 114
	'-'            reduce using rule 114
	'->'           reduce using rule 114
	'.'            reduce using rule 114
	':'            reduce using rule 114
	';'            reduce using rule 114
	'@+'           reduce using rule 114
	'@+i'          reduce using rule 114
	'@-'           reduce using rule 114
	'@-i'          reduce using rule 114
	'@0'           reduce using rule 114
	'@1'           reduce using rule 114
	'False'        reduce using rule 114
	'True'         reduce using rule 114
	'['            reduce using rule 114
	'[]'           reduce using rule 114
	']'            reduce using rule 114
	'case'         reduce using rule 114
	'else'         reduce using rule 114
	'gate'         reduce using rule 114
	'if'           reduce using rule 114
	'let'          reduce using rule 114
	'not'          reduce using rule 114
	'of'           reduce using rule 114
	'then'         reduce using rule 114
	'with'         reduce using rule 114
	'}'            reduce using rule 114
	L_integ        reduce using rule 114
	L_Var          reduce using rule 114
	L_Lambda       reduce using rule 114


State 65

	IntegerExpression3 -> '(' . IntegerExpression ')'    (rule 15)
	BoolExpression2 -> '(' . BoolExpression ')'         (rule 33)
	Term4 -> '(' . Term ')'                             (rule 115)
	Term3 -> '(' . Term ',' ListTerm ')'                (rule 122)
	Term3 -> '(' . Var ',' ListVar ')'                  (rule 123)
	List1 -> '(' . List ')'                             (rule 148)

	'('            shift, and enter state 65
	'()'           shift, and enter state 66
	'-'            shift, and enter state 67
	'@+'           shift, and enter state 68
	'@+i'          shift, and enter state 69
	'@-'           shift, and enter state 70
	'@-i'          shift, and enter state 71
	'@0'           shift, and enter state 72
	'@1'           shift, and enter state 73
	'False'        shift, and enter state 74
	'True'         shift, and enter state 75
	'['            shift, and enter state 76
	'[]'           shift, and enter state 77
	'case'         shift, and enter state 78
	'gate'         shift, and enter state 79
	'if'           shift, and enter state 80
	'let'          shift, and enter state 81
	'not'          shift, and enter state 82
	'with'         shift, and enter state 83
	L_integ        shift, and enter state 41
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 84

	Integer        goto state 46
	Var            goto state 137
	Lambda         goto state 48
	IntegerExpression1goto state 49
	IntegerExpression2goto state 50
	IntegerExpression3goto state 51
	IntegerExpressiongoto state 138
	BoolValue      goto state 53
	BoolExpression goto state 139
	BoolExpression1goto state 55
	BoolExpression2goto state 56
	BasisState     goto state 57
	Term4          goto state 58
	Term3          goto state 59
	Term2          goto state 60
	Term1          goto state 61
	Term           goto state 140
	List1          goto state 63
	List           goto state 141

State 66

	Term3 -> '()' .                                     (rule 116)

	'$'            reduce using rule 116
	'('            reduce using rule 116
	'()'           reduce using rule 116
	')'            reduce using rule 116
	','            reduce using rule 116
	'-'            reduce using rule 116
	'->'           reduce using rule 116
	'.'            reduce using rule 116
	':'            reduce using rule 116
	';'            reduce using rule 116
	'@+'           reduce using rule 116
	'@+i'          reduce using rule 116
	'@-'           reduce using rule 116
	'@-i'          reduce using rule 116
	'@0'           reduce using rule 116
	'@1'           reduce using rule 116
	'False'        reduce using rule 116
	'True'         reduce using rule 116
	'['            reduce using rule 116
	'[]'           reduce using rule 116
	']'            reduce using rule 116
	'case'         reduce using rule 116
	'else'         reduce using rule 116
	'gate'         reduce using rule 116
	'if'           reduce using rule 116
	'let'          reduce using rule 116
	'not'          reduce using rule 116
	'of'           reduce using rule 116
	'then'         reduce using rule 116
	'with'         reduce using rule 116
	'}'            reduce using rule 116
	L_integ        reduce using rule 116
	L_Var          reduce using rule 116
	L_Lambda       reduce using rule 116


State 67

	IntegerExpression1 -> '-' . IntegerExpression       (rule 7)

	'('            shift, and enter state 136
	'-'            shift, and enter state 67
	L_integ        shift, and enter state 41

	Integer        goto state 46
	IntegerExpression1goto state 49
	IntegerExpression2goto state 134
	IntegerExpression3goto state 51
	IntegerExpressiongoto state 135

State 68

	BasisState -> '@+' .                                (rule 53)

	'$'            reduce using rule 53
	'('            reduce using rule 53
	'()'           reduce using rule 53
	')'            reduce using rule 53
	','            reduce using rule 53
	'-'            reduce using rule 53
	'->'           reduce using rule 53
	'.'            reduce using rule 53
	':'            reduce using rule 53
	';'            reduce using rule 53
	'@+'           reduce using rule 53
	'@+i'          reduce using rule 53
	'@-'           reduce using rule 53
	'@-i'          reduce using rule 53
	'@0'           reduce using rule 53
	'@1'           reduce using rule 53
	'False'        reduce using rule 53
	'True'         reduce using rule 53
	'['            reduce using rule 53
	'[]'           reduce using rule 53
	']'            reduce using rule 53
	'case'         reduce using rule 53
	'else'         reduce using rule 53
	'gate'         reduce using rule 53
	'if'           reduce using rule 53
	'let'          reduce using rule 53
	'not'          reduce using rule 53
	'of'           reduce using rule 53
	'then'         reduce using rule 53
	'with'         reduce using rule 53
	'}'            reduce using rule 53
	L_integ        reduce using rule 53
	L_Var          reduce using rule 53
	L_Lambda       reduce using rule 53


State 69

	BasisState -> '@+i' .                               (rule 55)

	'$'            reduce using rule 55
	'('            reduce using rule 55
	'()'           reduce using rule 55
	')'            reduce using rule 55
	','            reduce using rule 55
	'-'            reduce using rule 55
	'->'           reduce using rule 55
	'.'            reduce using rule 55
	':'            reduce using rule 55
	';'            reduce using rule 55
	'@+'           reduce using rule 55
	'@+i'          reduce using rule 55
	'@-'           reduce using rule 55
	'@-i'          reduce using rule 55
	'@0'           reduce using rule 55
	'@1'           reduce using rule 55
	'False'        reduce using rule 55
	'True'         reduce using rule 55
	'['            reduce using rule 55
	'[]'           reduce using rule 55
	']'            reduce using rule 55
	'case'         reduce using rule 55
	'else'         reduce using rule 55
	'gate'         reduce using rule 55
	'if'           reduce using rule 55
	'let'          reduce using rule 55
	'not'          reduce using rule 55
	'of'           reduce using rule 55
	'then'         reduce using rule 55
	'with'         reduce using rule 55
	'}'            reduce using rule 55
	L_integ        reduce using rule 55
	L_Var          reduce using rule 55
	L_Lambda       reduce using rule 55


State 70

	BasisState -> '@-' .                                (rule 54)

	'$'            reduce using rule 54
	'('            reduce using rule 54
	'()'           reduce using rule 54
	')'            reduce using rule 54
	','            reduce using rule 54
	'-'            reduce using rule 54
	'->'           reduce using rule 54
	'.'            reduce using rule 54
	':'            reduce using rule 54
	';'            reduce using rule 54
	'@+'           reduce using rule 54
	'@+i'          reduce using rule 54
	'@-'           reduce using rule 54
	'@-i'          reduce using rule 54
	'@0'           reduce using rule 54
	'@1'           reduce using rule 54
	'False'        reduce using rule 54
	'True'         reduce using rule 54
	'['            reduce using rule 54
	'[]'           reduce using rule 54
	']'            reduce using rule 54
	'case'         reduce using rule 54
	'else'         reduce using rule 54
	'gate'         reduce using rule 54
	'if'           reduce using rule 54
	'let'          reduce using rule 54
	'not'          reduce using rule 54
	'of'           reduce using rule 54
	'then'         reduce using rule 54
	'with'         reduce using rule 54
	'}'            reduce using rule 54
	L_integ        reduce using rule 54
	L_Var          reduce using rule 54
	L_Lambda       reduce using rule 54


State 71

	BasisState -> '@-i' .                               (rule 56)

	'$'            reduce using rule 56
	'('            reduce using rule 56
	'()'           reduce using rule 56
	')'            reduce using rule 56
	','            reduce using rule 56
	'-'            reduce using rule 56
	'->'           reduce using rule 56
	'.'            reduce using rule 56
	':'            reduce using rule 56
	';'            reduce using rule 56
	'@+'           reduce using rule 56
	'@+i'          reduce using rule 56
	'@-'           reduce using rule 56
	'@-i'          reduce using rule 56
	'@0'           reduce using rule 56
	'@1'           reduce using rule 56
	'False'        reduce using rule 56
	'True'         reduce using rule 56
	'['            reduce using rule 56
	'[]'           reduce using rule 56
	']'            reduce using rule 56
	'case'         reduce using rule 56
	'else'         reduce using rule 56
	'gate'         reduce using rule 56
	'if'           reduce using rule 56
	'let'          reduce using rule 56
	'not'          reduce using rule 56
	'of'           reduce using rule 56
	'then'         reduce using rule 56
	'with'         reduce using rule 56
	'}'            reduce using rule 56
	L_integ        reduce using rule 56
	L_Var          reduce using rule 56
	L_Lambda       reduce using rule 56


State 72

	BasisState -> '@0' .                                (rule 51)

	'$'            reduce using rule 51
	'('            reduce using rule 51
	'()'           reduce using rule 51
	')'            reduce using rule 51
	','            reduce using rule 51
	'-'            reduce using rule 51
	'->'           reduce using rule 51
	'.'            reduce using rule 51
	':'            reduce using rule 51
	';'            reduce using rule 51
	'@+'           reduce using rule 51
	'@+i'          reduce using rule 51
	'@-'           reduce using rule 51
	'@-i'          reduce using rule 51
	'@0'           reduce using rule 51
	'@1'           reduce using rule 51
	'False'        reduce using rule 51
	'True'         reduce using rule 51
	'['            reduce using rule 51
	'[]'           reduce using rule 51
	']'            reduce using rule 51
	'case'         reduce using rule 51
	'else'         reduce using rule 51
	'gate'         reduce using rule 51
	'if'           reduce using rule 51
	'let'          reduce using rule 51
	'not'          reduce using rule 51
	'of'           reduce using rule 51
	'then'         reduce using rule 51
	'with'         reduce using rule 51
	'}'            reduce using rule 51
	L_integ        reduce using rule 51
	L_Var          reduce using rule 51
	L_Lambda       reduce using rule 51


State 73

	BasisState -> '@1' .                                (rule 52)

	'$'            reduce using rule 52
	'('            reduce using rule 52
	'()'           reduce using rule 52
	')'            reduce using rule 52
	','            reduce using rule 52
	'-'            reduce using rule 52
	'->'           reduce using rule 52
	'.'            reduce using rule 52
	':'            reduce using rule 52
	';'            reduce using rule 52
	'@+'           reduce using rule 52
	'@+i'          reduce using rule 52
	'@-'           reduce using rule 52
	'@-i'          reduce using rule 52
	'@0'           reduce using rule 52
	'@1'           reduce using rule 52
	'False'        reduce using rule 52
	'True'         reduce using rule 52
	'['            reduce using rule 52
	'[]'           reduce using rule 52
	']'            reduce using rule 52
	'case'         reduce using rule 52
	'else'         reduce using rule 52
	'gate'         reduce using rule 52
	'if'           reduce using rule 52
	'let'          reduce using rule 52
	'not'          reduce using rule 52
	'of'           reduce using rule 52
	'then'         reduce using rule 52
	'with'         reduce using rule 52
	'}'            reduce using rule 52
	L_integ        reduce using rule 52
	L_Var          reduce using rule 52
	L_Lambda       reduce using rule 52


State 74

	BoolValue -> 'False' .                              (rule 18)

	'$'            reduce using rule 18
	'&&'           reduce using rule 18
	'('            reduce using rule 18
	'()'           reduce using rule 18
	')'            reduce using rule 18
	','            reduce using rule 18
	'-'            reduce using rule 18
	'->'           reduce using rule 18
	'.'            reduce using rule 18
	'/='           reduce using rule 18
	':'            reduce using rule 18
	';'            reduce using rule 18
	'=='           reduce using rule 18
	'@+'           reduce using rule 18
	'@+i'          reduce using rule 18
	'@-'           reduce using rule 18
	'@-i'          reduce using rule 18
	'@0'           reduce using rule 18
	'@1'           reduce using rule 18
	'False'        reduce using rule 18
	'True'         reduce using rule 18
	'['            reduce using rule 18
	'[]'           reduce using rule 18
	']'            reduce using rule 18
	'case'         reduce using rule 18
	'else'         reduce using rule 18
	'gate'         reduce using rule 18
	'if'           reduce using rule 18
	'let'          reduce using rule 18
	'not'          reduce using rule 18
	'of'           reduce using rule 18
	'then'         reduce using rule 18
	'with'         reduce using rule 18
	'||'           reduce using rule 18
	'}'            reduce using rule 18
	L_integ        reduce using rule 18
	L_Var          reduce using rule 18
	L_Lambda       reduce using rule 18


State 75

	BoolValue -> 'True' .                               (rule 17)

	'$'            reduce using rule 17
	'&&'           reduce using rule 17
	'('            reduce using rule 17
	'()'           reduce using rule 17
	')'            reduce using rule 17
	','            reduce using rule 17
	'-'            reduce using rule 17
	'->'           reduce using rule 17
	'.'            reduce using rule 17
	'/='           reduce using rule 17
	':'            reduce using rule 17
	';'            reduce using rule 17
	'=='           reduce using rule 17
	'@+'           reduce using rule 17
	'@+i'          reduce using rule 17
	'@-'           reduce using rule 17
	'@-i'          reduce using rule 17
	'@0'           reduce using rule 17
	'@1'           reduce using rule 17
	'False'        reduce using rule 17
	'True'         reduce using rule 17
	'['            reduce using rule 17
	'[]'           reduce using rule 17
	']'            reduce using rule 17
	'case'         reduce using rule 17
	'else'         reduce using rule 17
	'gate'         reduce using rule 17
	'if'           reduce using rule 17
	'let'          reduce using rule 17
	'not'          reduce using rule 17
	'of'           reduce using rule 17
	'then'         reduce using rule 17
	'with'         reduce using rule 17
	'||'           reduce using rule 17
	'}'            reduce using rule 17
	L_integ        reduce using rule 17
	L_Var          reduce using rule 17
	L_Lambda       reduce using rule 17


State 76

	List1 -> '[' . Term ']'                             (rule 146)
	List1 -> '[' . Term ',' ListTerm ']'                (rule 147)

	'('            shift, and enter state 65
	'()'           shift, and enter state 66
	'-'            shift, and enter state 67
	'@+'           shift, and enter state 68
	'@+i'          shift, and enter state 69
	'@-'           shift, and enter state 70
	'@-i'          shift, and enter state 71
	'@0'           shift, and enter state 72
	'@1'           shift, and enter state 73
	'False'        shift, and enter state 74
	'True'         shift, and enter state 75
	'['            shift, and enter state 76
	'[]'           shift, and enter state 77
	'case'         shift, and enter state 78
	'gate'         shift, and enter state 79
	'if'           shift, and enter state 80
	'let'          shift, and enter state 81
	'not'          shift, and enter state 82
	'with'         shift, and enter state 83
	L_integ        shift, and enter state 41
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 84

	Integer        goto state 46
	Var            goto state 47
	Lambda         goto state 48
	IntegerExpression1goto state 49
	IntegerExpression2goto state 50
	IntegerExpression3goto state 51
	IntegerExpressiongoto state 52
	BoolValue      goto state 53
	BoolExpression goto state 54
	BoolExpression1goto state 55
	BoolExpression2goto state 56
	BasisState     goto state 57
	Term4          goto state 58
	Term3          goto state 59
	Term2          goto state 60
	Term1          goto state 61
	Term           goto state 133
	List1          goto state 63
	List           goto state 64

State 77

	List1 -> '[]' .                                     (rule 145)

	'!!'           reduce using rule 145
	'$'            reduce using rule 145
	'('            reduce using rule 145
	'()'           reduce using rule 145
	')'            reduce using rule 145
	'++'           reduce using rule 145
	','            reduce using rule 145
	'-'            reduce using rule 145
	'->'           reduce using rule 145
	'.'            reduce using rule 145
	':'            reduce using rule 145
	';'            reduce using rule 145
	'@+'           reduce using rule 145
	'@+i'          reduce using rule 145
	'@-'           reduce using rule 145
	'@-i'          reduce using rule 145
	'@0'           reduce using rule 145
	'@1'           reduce using rule 145
	'False'        reduce using rule 145
	'True'         reduce using rule 145
	'['            reduce using rule 145
	'[]'           reduce using rule 145
	']'            reduce using rule 145
	'case'         reduce using rule 145
	'else'         reduce using rule 145
	'gate'         reduce using rule 145
	'if'           reduce using rule 145
	'let'          reduce using rule 145
	'not'          reduce using rule 145
	'of'           reduce using rule 145
	'then'         reduce using rule 145
	'with'         reduce using rule 145
	'}'            reduce using rule 145
	L_integ        reduce using rule 145
	L_Var          reduce using rule 145
	L_Lambda       reduce using rule 145


State 78

	Term1 -> 'case' . Term 'of' '{' ListCaseExpression '}'    (rule 140)

	'('            shift, and enter state 65
	'()'           shift, and enter state 66
	'-'            shift, and enter state 67
	'@+'           shift, and enter state 68
	'@+i'          shift, and enter state 69
	'@-'           shift, and enter state 70
	'@-i'          shift, and enter state 71
	'@0'           shift, and enter state 72
	'@1'           shift, and enter state 73
	'False'        shift, and enter state 74
	'True'         shift, and enter state 75
	'['            shift, and enter state 76
	'[]'           shift, and enter state 77
	'case'         shift, and enter state 78
	'gate'         shift, and enter state 79
	'if'           shift, and enter state 80
	'let'          shift, and enter state 81
	'not'          shift, and enter state 82
	'with'         shift, and enter state 83
	L_integ        shift, and enter state 41
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 84

	Integer        goto state 46
	Var            goto state 47
	Lambda         goto state 48
	IntegerExpression1goto state 49
	IntegerExpression2goto state 50
	IntegerExpression3goto state 51
	IntegerExpressiongoto state 52
	BoolValue      goto state 53
	BoolExpression goto state 54
	BoolExpression1goto state 55
	BoolExpression2goto state 56
	BasisState     goto state 57
	Term4          goto state 58
	Term3          goto state 59
	Term2          goto state 60
	Term1          goto state 61
	Term           goto state 132
	List1          goto state 63
	List           goto state 64

State 79

	Term3 -> 'gate' . Gate                              (rule 120)

	'FSWAP'        shift, and enter state 96
	'H'            shift, and enter state 97
	'ID'           shift, and enter state 98
	'ISWAP'        shift, and enter state 99
	'QFT'          shift, and enter state 100
	'QFT_DAG'      shift, and enter state 101
	'ROOT_SWAP'    shift, and enter state 102
	'ROOT_SWAP_DAG'shift, and enter state 103
	'ROOT_X'       shift, and enter state 104
	'ROOT_X_DAG'   shift, and enter state 105
	'ROOT_Y'       shift, and enter state 106
	'ROOT_Y_DAG'   shift, and enter state 107
	'ROOT_Z'       shift, and enter state 108
	'ROOT_Z_DAG'   shift, and enter state 109
	'RX'           shift, and enter state 110
	'RY'           shift, and enter state 111
	'RZ'           shift, and enter state 112
	'S'            shift, and enter state 113
	'SQRT_SWAP'    shift, and enter state 114
	'SQRT_SWAP_DAG'shift, and enter state 115
	'SQRT_X'       shift, and enter state 116
	'SQRT_X_DAG'   shift, and enter state 117
	'SQRT_Y'       shift, and enter state 118
	'SQRT_Y_DAG'   shift, and enter state 119
	'SWAP'         shift, and enter state 120
	'SWAP_THETA'   shift, and enter state 121
	'S_DAG'        shift, and enter state 122
	'T'            shift, and enter state 123
	'T_DAG'        shift, and enter state 124
	'U1'           shift, and enter state 125
	'U2'           shift, and enter state 126
	'U3'           shift, and enter state 127
	'X'            shift, and enter state 128
	'Y'            shift, and enter state 129
	'Z'            shift, and enter state 130
	L_GateVar      shift, and enter state 131

	GateVar        goto state 94
	Gate           goto state 95

State 80

	Term1 -> 'if' . Term 'then' Term 'else' Term        (rule 135)

	'('            shift, and enter state 65
	'()'           shift, and enter state 66
	'-'            shift, and enter state 67
	'@+'           shift, and enter state 68
	'@+i'          shift, and enter state 69
	'@-'           shift, and enter state 70
	'@-i'          shift, and enter state 71
	'@0'           shift, and enter state 72
	'@1'           shift, and enter state 73
	'False'        shift, and enter state 74
	'True'         shift, and enter state 75
	'['            shift, and enter state 76
	'[]'           shift, and enter state 77
	'case'         shift, and enter state 78
	'gate'         shift, and enter state 79
	'if'           shift, and enter state 80
	'let'          shift, and enter state 81
	'not'          shift, and enter state 82
	'with'         shift, and enter state 83
	L_integ        shift, and enter state 41
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 84

	Integer        goto state 46
	Var            goto state 47
	Lambda         goto state 48
	IntegerExpression1goto state 49
	IntegerExpression2goto state 50
	IntegerExpression3goto state 51
	IntegerExpressiongoto state 52
	BoolValue      goto state 53
	BoolExpression goto state 54
	BoolExpression1goto state 55
	BoolExpression2goto state 56
	BasisState     goto state 57
	Term4          goto state 58
	Term3          goto state 59
	Term2          goto state 60
	Term1          goto state 61
	Term           goto state 93
	List1          goto state 63
	List           goto state 64

State 81

	Term1 -> 'let' . '{' Var '=' Term '}' 'in' Term     (rule 136)
	Term1 -> 'let' . '{' '(' Var ',' ListVar ')' '=' Term '}' 'in' Term    (rule 137)

	'{'            shift, and enter state 92


State 82

	BoolExpression -> 'not' . BoolExpression1           (rule 21)

	'('            shift, and enter state 91
	'False'        shift, and enter state 74
	'True'         shift, and enter state 75
	L_integ        shift, and enter state 41

	Integer        goto state 46
	IntegerExpression2goto state 89
	IntegerExpression3goto state 51
	BoolValue      goto state 53
	BoolExpression1goto state 90
	BoolExpression2goto state 56

State 83

	Term2 -> 'with' . ControlTerm 'ctrl' ControlBasisState    (rule 125)
	Term2 -> 'with' . ControlTerms 'ctrl' ControlBasisStates    (rule 126)
	Term2 -> 'with' . ControlVars 'ctrl' ControlBasisStates    (rule 127)
	Term2 -> 'with' . ControlTerm 'ctrl' ControlBit     (rule 128)
	Term2 -> 'with' . ControlTerms 'ctrl' ControlBits    (rule 129)
	Term2 -> 'with' . ControlVars 'ctrl' ControlBits    (rule 130)

	'['            shift, and enter state 88

	ControlTerm    goto state 85
	ControlTerms   goto state 86
	ControlVars    goto state 87

State 84

	Lambda -> L_Lambda .                                (rule 5)

	L_Var          reduce using rule 5


State 85

	Term2 -> 'with' ControlTerm . 'ctrl' ControlBasisState    (rule 125)
	Term2 -> 'with' ControlTerm . 'ctrl' ControlBit     (rule 128)

	'ctrl'         shift, and enter state 229


State 86

	Term2 -> 'with' ControlTerms . 'ctrl' ControlBasisStates    (rule 126)
	Term2 -> 'with' ControlTerms . 'ctrl' ControlBits    (rule 129)

	'ctrl'         shift, and enter state 228


State 87

	Term2 -> 'with' ControlVars . 'ctrl' ControlBasisStates    (rule 127)
	Term2 -> 'with' ControlVars . 'ctrl' ControlBits    (rule 130)

	'ctrl'         shift, and enter state 227


State 88

	ControlTerm -> '[' . Term ']'                       (rule 107)
	ControlTerms -> '[' . Term ',' ListTerm ']'         (rule 108)
	ControlVars -> '[' . Var ',' ListVar ']'            (rule 110)

	'('            shift, and enter state 65
	'()'           shift, and enter state 66
	'-'            shift, and enter state 67
	'@+'           shift, and enter state 68
	'@+i'          shift, and enter state 69
	'@-'           shift, and enter state 70
	'@-i'          shift, and enter state 71
	'@0'           shift, and enter state 72
	'@1'           shift, and enter state 73
	'False'        shift, and enter state 74
	'True'         shift, and enter state 75
	'['            shift, and enter state 76
	'[]'           shift, and enter state 77
	'case'         shift, and enter state 78
	'gate'         shift, and enter state 79
	'if'           shift, and enter state 80
	'let'          shift, and enter state 81
	'not'          shift, and enter state 82
	'with'         shift, and enter state 83
	L_integ        shift, and enter state 41
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 84

	Integer        goto state 46
	Var            goto state 225
	Lambda         goto state 48
	IntegerExpression1goto state 49
	IntegerExpression2goto state 50
	IntegerExpression3goto state 51
	IntegerExpressiongoto state 52
	BoolValue      goto state 53
	BoolExpression goto state 54
	BoolExpression1goto state 55
	BoolExpression2goto state 56
	BasisState     goto state 57
	Term4          goto state 58
	Term3          goto state 59
	Term2          goto state 60
	Term1          goto state 61
	Term           goto state 226
	List1          goto state 63
	List           goto state 64

State 89

	IntegerExpression2 -> IntegerExpression2 . '*' IntegerExpression3    (rule 11)
	IntegerExpression2 -> IntegerExpression2 . '/' IntegerExpression3    (rule 12)
	BoolExpression2 -> IntegerExpression2 . '==' IntegerExpression2    (rule 26)
	BoolExpression2 -> IntegerExpression2 . '/=' IntegerExpression2    (rule 27)
	BoolExpression2 -> IntegerExpression2 . '>' IntegerExpression2    (rule 28)
	BoolExpression2 -> IntegerExpression2 . '>=' IntegerExpression2    (rule 29)
	BoolExpression2 -> IntegerExpression2 . '<' IntegerExpression2    (rule 30)
	BoolExpression2 -> IntegerExpression2 . '<=' IntegerExpression2    (rule 31)

	'*'            shift, and enter state 153
	'/'            shift, and enter state 154
	'/='           shift, and enter state 155
	'<'            shift, and enter state 156
	'<='           shift, and enter state 157
	'=='           shift, and enter state 158
	'>'            shift, and enter state 159
	'>='           shift, and enter state 160


State 90

	BoolExpression -> 'not' BoolExpression1 .           (rule 21)
	BoolExpression1 -> BoolExpression1 . '==' BoolExpression2    (rule 23)
	BoolExpression1 -> BoolExpression1 . '/=' BoolExpression2    (rule 24)

	'$'            reduce using rule 21
	'&&'           reduce using rule 21
	'('            reduce using rule 21
	'()'           reduce using rule 21
	')'            reduce using rule 21
	','            reduce using rule 21
	'-'            reduce using rule 21
	'->'           reduce using rule 21
	'.'            reduce using rule 21
	'/='           shift, and enter state 149
	':'            reduce using rule 21
	';'            reduce using rule 21
	'=='           shift, and enter state 150
	'@+'           reduce using rule 21
	'@+i'          reduce using rule 21
	'@-'           reduce using rule 21
	'@-i'          reduce using rule 21
	'@0'           reduce using rule 21
	'@1'           reduce using rule 21
	'False'        reduce using rule 21
	'True'         reduce using rule 21
	'['            reduce using rule 21
	'[]'           reduce using rule 21
	']'            reduce using rule 21
	'case'         reduce using rule 21
	'else'         reduce using rule 21
	'gate'         reduce using rule 21
	'if'           reduce using rule 21
	'let'          reduce using rule 21
	'not'          reduce using rule 21
	'of'           reduce using rule 21
	'then'         reduce using rule 21
	'with'         reduce using rule 21
	'||'           reduce using rule 21
	'}'            reduce using rule 21
	L_integ        reduce using rule 21
	L_Var          reduce using rule 21
	L_Lambda       reduce using rule 21


State 91

	IntegerExpression3 -> '(' . IntegerExpression ')'    (rule 15)
	BoolExpression2 -> '(' . BoolExpression ')'         (rule 33)

	'('            shift, and enter state 91
	'-'            shift, and enter state 67
	'False'        shift, and enter state 74
	'True'         shift, and enter state 75
	'not'          shift, and enter state 82
	L_integ        shift, and enter state 41

	Integer        goto state 46
	IntegerExpression1goto state 49
	IntegerExpression2goto state 50
	IntegerExpression3goto state 51
	IntegerExpressiongoto state 196
	BoolValue      goto state 53
	BoolExpression goto state 224
	BoolExpression1goto state 55
	BoolExpression2goto state 56

State 92

	Term1 -> 'let' '{' . Var '=' Term '}' 'in' Term     (rule 136)
	Term1 -> 'let' '{' . '(' Var ',' ListVar ')' '=' Term '}' 'in' Term    (rule 137)

	'('            shift, and enter state 223
	L_Var          shift, and enter state 8

	Var            goto state 222

State 93

	Term1 -> 'if' Term . 'then' Term 'else' Term        (rule 135)

	'then'         shift, and enter state 221


State 94

	Gate -> GateVar . '(' Angle ',' Angle ',' Angle ')'    (rule 92)
	Gate -> GateVar . '(' Angle ',' Angle ')'           (rule 93)
	Gate -> GateVar . Angle                             (rule 94)
	Gate -> GateVar . Integer                           (rule 95)
	Gate -> GateVar .                                   (rule 96)

	'$'            reduce using rule 96
	'('            shift, and enter state 220
			(reduce using rule 96)

	'()'           reduce using rule 96
	')'            reduce using rule 96
	','            reduce using rule 96
	'-'            reduce using rule 96
	'->'           reduce using rule 96
	'.'            reduce using rule 96
	':'            reduce using rule 96
	';'            reduce using rule 96
	'@+'           reduce using rule 96
	'@+i'          reduce using rule 96
	'@-'           reduce using rule 96
	'@-i'          reduce using rule 96
	'@0'           reduce using rule 96
	'@1'           reduce using rule 96
	'False'        reduce using rule 96
	'True'         reduce using rule 96
	'['            reduce using rule 96
	'[]'           reduce using rule 96
	']'            reduce using rule 96
	'case'         reduce using rule 96
	'else'         reduce using rule 96
	'gate'         reduce using rule 96
	'if'           reduce using rule 96
	'let'          reduce using rule 96
	'not'          reduce using rule 96
	'of'           reduce using rule 96
	'then'         reduce using rule 96
	'with'         reduce using rule 96
	'}'            reduce using rule 96
	L_doubl        shift, and enter state 2
	L_integ        shift, and enter state 41
			(reduce using rule 96)

	L_Var          reduce using rule 96
	L_Lambda       reduce using rule 96

	Double         goto state 202
	Integer        goto state 218
	Angle          goto state 219

State 95

	Term3 -> 'gate' Gate .                              (rule 120)

	'$'            reduce using rule 120
	'('            reduce using rule 120
	'()'           reduce using rule 120
	')'            reduce using rule 120
	','            reduce using rule 120
	'-'            reduce using rule 120
	'->'           reduce using rule 120
	'.'            reduce using rule 120
	':'            reduce using rule 120
	';'            reduce using rule 120
	'@+'           reduce using rule 120
	'@+i'          reduce using rule 120
	'@-'           reduce using rule 120
	'@-i'          reduce using rule 120
	'@0'           reduce using rule 120
	'@1'           reduce using rule 120
	'False'        reduce using rule 120
	'True'         reduce using rule 120
	'['            reduce using rule 120
	'[]'           reduce using rule 120
	']'            reduce using rule 120
	'case'         reduce using rule 120
	'else'         reduce using rule 120
	'gate'         reduce using rule 120
	'if'           reduce using rule 120
	'let'          reduce using rule 120
	'not'          reduce using rule 120
	'of'           reduce using rule 120
	'then'         reduce using rule 120
	'with'         reduce using rule 120
	'}'            reduce using rule 120
	L_integ        reduce using rule 120
	L_Var          reduce using rule 120
	L_Lambda       reduce using rule 120


State 96

	Gate -> 'FSWAP' .                                   (rule 86)

	'$'            reduce using rule 86
	'('            reduce using rule 86
	'()'           reduce using rule 86
	')'            reduce using rule 86
	','            reduce using rule 86
	'-'            reduce using rule 86
	'->'           reduce using rule 86
	'.'            reduce using rule 86
	':'            reduce using rule 86
	';'            reduce using rule 86
	'@+'           reduce using rule 86
	'@+i'          reduce using rule 86
	'@-'           reduce using rule 86
	'@-i'          reduce using rule 86
	'@0'           reduce using rule 86
	'@1'           reduce using rule 86
	'False'        reduce using rule 86
	'True'         reduce using rule 86
	'['            reduce using rule 86
	'[]'           reduce using rule 86
	']'            reduce using rule 86
	'case'         reduce using rule 86
	'else'         reduce using rule 86
	'gate'         reduce using rule 86
	'if'           reduce using rule 86
	'let'          reduce using rule 86
	'not'          reduce using rule 86
	'of'           reduce using rule 86
	'then'         reduce using rule 86
	'with'         reduce using rule 86
	'}'            reduce using rule 86
	L_integ        reduce using rule 86
	L_Var          reduce using rule 86
	L_Lambda       reduce using rule 86


State 97

	Gate -> 'H' .                                       (rule 57)

	'$'            reduce using rule 57
	'('            reduce using rule 57
	'()'           reduce using rule 57
	')'            reduce using rule 57
	','            reduce using rule 57
	'-'            reduce using rule 57
	'->'           reduce using rule 57
	'.'            reduce using rule 57
	':'            reduce using rule 57
	';'            reduce using rule 57
	'@+'           reduce using rule 57
	'@+i'          reduce using rule 57
	'@-'           reduce using rule 57
	'@-i'          reduce using rule 57
	'@0'           reduce using rule 57
	'@1'           reduce using rule 57
	'False'        reduce using rule 57
	'True'         reduce using rule 57
	'['            reduce using rule 57
	'[]'           reduce using rule 57
	']'            reduce using rule 57
	'case'         reduce using rule 57
	'else'         reduce using rule 57
	'gate'         reduce using rule 57
	'if'           reduce using rule 57
	'let'          reduce using rule 57
	'not'          reduce using rule 57
	'of'           reduce using rule 57
	'then'         reduce using rule 57
	'with'         reduce using rule 57
	'}'            reduce using rule 57
	L_integ        reduce using rule 57
	L_Var          reduce using rule 57
	L_Lambda       reduce using rule 57


State 98

	Gate -> 'ID' .                                      (rule 61)

	'$'            reduce using rule 61
	'('            reduce using rule 61
	'()'           reduce using rule 61
	')'            reduce using rule 61
	','            reduce using rule 61
	'-'            reduce using rule 61
	'->'           reduce using rule 61
	'.'            reduce using rule 61
	':'            reduce using rule 61
	';'            reduce using rule 61
	'@+'           reduce using rule 61
	'@+i'          reduce using rule 61
	'@-'           reduce using rule 61
	'@-i'          reduce using rule 61
	'@0'           reduce using rule 61
	'@1'           reduce using rule 61
	'False'        reduce using rule 61
	'True'         reduce using rule 61
	'['            reduce using rule 61
	'[]'           reduce using rule 61
	']'            reduce using rule 61
	'case'         reduce using rule 61
	'else'         reduce using rule 61
	'gate'         reduce using rule 61
	'if'           reduce using rule 61
	'let'          reduce using rule 61
	'not'          reduce using rule 61
	'of'           reduce using rule 61
	'then'         reduce using rule 61
	'with'         reduce using rule 61
	'}'            reduce using rule 61
	L_integ        reduce using rule 61
	L_Var          reduce using rule 61
	L_Lambda       reduce using rule 61


State 99

	Gate -> 'ISWAP' .                                   (rule 85)

	'$'            reduce using rule 85
	'('            reduce using rule 85
	'()'           reduce using rule 85
	')'            reduce using rule 85
	','            reduce using rule 85
	'-'            reduce using rule 85
	'->'           reduce using rule 85
	'.'            reduce using rule 85
	':'            reduce using rule 85
	';'            reduce using rule 85
	'@+'           reduce using rule 85
	'@+i'          reduce using rule 85
	'@-'           reduce using rule 85
	'@-i'          reduce using rule 85
	'@0'           reduce using rule 85
	'@1'           reduce using rule 85
	'False'        reduce using rule 85
	'True'         reduce using rule 85
	'['            reduce using rule 85
	'[]'           reduce using rule 85
	']'            reduce using rule 85
	'case'         reduce using rule 85
	'else'         reduce using rule 85
	'gate'         reduce using rule 85
	'if'           reduce using rule 85
	'let'          reduce using rule 85
	'not'          reduce using rule 85
	'of'           reduce using rule 85
	'then'         reduce using rule 85
	'with'         reduce using rule 85
	'}'            reduce using rule 85
	L_integ        reduce using rule 85
	L_Var          reduce using rule 85
	L_Lambda       reduce using rule 85


State 100

	Gate -> 'QFT' . Integer                             (rule 90)

	L_integ        shift, and enter state 41

	Integer        goto state 217

State 101

	Gate -> 'QFT_DAG' . Integer                         (rule 91)

	L_integ        shift, and enter state 41

	Integer        goto state 216

State 102

	Gate -> 'ROOT_SWAP' . Integer                       (rule 88)

	L_integ        shift, and enter state 41

	Integer        goto state 215

State 103

	Gate -> 'ROOT_SWAP_DAG' . Integer                   (rule 89)

	L_integ        shift, and enter state 41

	Integer        goto state 214

State 104

	Gate -> 'ROOT_X' . Integer                          (rule 62)

	L_integ        shift, and enter state 41

	Integer        goto state 213

State 105

	Gate -> 'ROOT_X_DAG' . Integer                      (rule 63)

	L_integ        shift, and enter state 41

	Integer        goto state 212

State 106

	Gate -> 'ROOT_Y' . Integer                          (rule 64)

	L_integ        shift, and enter state 41

	Integer        goto state 211

State 107

	Gate -> 'ROOT_Y_DAG' . Integer                      (rule 65)

	L_integ        shift, and enter state 41

	Integer        goto state 210

State 108

	Gate -> 'ROOT_Z' . Integer                          (rule 66)

	L_integ        shift, and enter state 41

	Integer        goto state 209

State 109

	Gate -> 'ROOT_Z_DAG' . Integer                      (rule 67)

	L_integ        shift, and enter state 41

	Integer        goto state 208

State 110

	Gate -> 'RX' . Angle                                (rule 76)

	L_doubl        shift, and enter state 2

	Double         goto state 202
	Angle          goto state 207

State 111

	Gate -> 'RY' . Angle                                (rule 77)

	L_doubl        shift, and enter state 2

	Double         goto state 202
	Angle          goto state 206

State 112

	Gate -> 'RZ' . Angle                                (rule 78)

	L_doubl        shift, and enter state 2

	Double         goto state 202
	Angle          goto state 205

State 113

	Gate -> 'S' .                                       (rule 68)

	'$'            reduce using rule 68
	'('            reduce using rule 68
	'()'           reduce using rule 68
	')'            reduce using rule 68
	','            reduce using rule 68
	'-'            reduce using rule 68
	'->'           reduce using rule 68
	'.'            reduce using rule 68
	':'            reduce using rule 68
	';'            reduce using rule 68
	'@+'           reduce using rule 68
	'@+i'          reduce using rule 68
	'@-'           reduce using rule 68
	'@-i'          reduce using rule 68
	'@0'           reduce using rule 68
	'@1'           reduce using rule 68
	'False'        reduce using rule 68
	'True'         reduce using rule 68
	'['            reduce using rule 68
	'[]'           reduce using rule 68
	']'            reduce using rule 68
	'case'         reduce using rule 68
	'else'         reduce using rule 68
	'gate'         reduce using rule 68
	'if'           reduce using rule 68
	'let'          reduce using rule 68
	'not'          reduce using rule 68
	'of'           reduce using rule 68
	'then'         reduce using rule 68
	'with'         reduce using rule 68
	'}'            reduce using rule 68
	L_integ        reduce using rule 68
	L_Var          reduce using rule 68
	L_Lambda       reduce using rule 68


State 114

	Gate -> 'SQRT_SWAP' .                               (rule 83)

	'$'            reduce using rule 83
	'('            reduce using rule 83
	'()'           reduce using rule 83
	')'            reduce using rule 83
	','            reduce using rule 83
	'-'            reduce using rule 83
	'->'           reduce using rule 83
	'.'            reduce using rule 83
	':'            reduce using rule 83
	';'            reduce using rule 83
	'@+'           reduce using rule 83
	'@+i'          reduce using rule 83
	'@-'           reduce using rule 83
	'@-i'          reduce using rule 83
	'@0'           reduce using rule 83
	'@1'           reduce using rule 83
	'False'        reduce using rule 83
	'True'         reduce using rule 83
	'['            reduce using rule 83
	'[]'           reduce using rule 83
	']'            reduce using rule 83
	'case'         reduce using rule 83
	'else'         reduce using rule 83
	'gate'         reduce using rule 83
	'if'           reduce using rule 83
	'let'          reduce using rule 83
	'not'          reduce using rule 83
	'of'           reduce using rule 83
	'then'         reduce using rule 83
	'with'         reduce using rule 83
	'}'            reduce using rule 83
	L_integ        reduce using rule 83
	L_Var          reduce using rule 83
	L_Lambda       reduce using rule 83


State 115

	Gate -> 'SQRT_SWAP_DAG' .                           (rule 84)

	'$'            reduce using rule 84
	'('            reduce using rule 84
	'()'           reduce using rule 84
	')'            reduce using rule 84
	','            reduce using rule 84
	'-'            reduce using rule 84
	'->'           reduce using rule 84
	'.'            reduce using rule 84
	':'            reduce using rule 84
	';'            reduce using rule 84
	'@+'           reduce using rule 84
	'@+i'          reduce using rule 84
	'@-'           reduce using rule 84
	'@-i'          reduce using rule 84
	'@0'           reduce using rule 84
	'@1'           reduce using rule 84
	'False'        reduce using rule 84
	'True'         reduce using rule 84
	'['            reduce using rule 84
	'[]'           reduce using rule 84
	']'            reduce using rule 84
	'case'         reduce using rule 84
	'else'         reduce using rule 84
	'gate'         reduce using rule 84
	'if'           reduce using rule 84
	'let'          reduce using rule 84
	'not'          reduce using rule 84
	'of'           reduce using rule 84
	'then'         reduce using rule 84
	'with'         reduce using rule 84
	'}'            reduce using rule 84
	L_integ        reduce using rule 84
	L_Var          reduce using rule 84
	L_Lambda       reduce using rule 84


State 116

	Gate -> 'SQRT_X' .                                  (rule 72)

	'$'            reduce using rule 72
	'('            reduce using rule 72
	'()'           reduce using rule 72
	')'            reduce using rule 72
	','            reduce using rule 72
	'-'            reduce using rule 72
	'->'           reduce using rule 72
	'.'            reduce using rule 72
	':'            reduce using rule 72
	';'            reduce using rule 72
	'@+'           reduce using rule 72
	'@+i'          reduce using rule 72
	'@-'           reduce using rule 72
	'@-i'          reduce using rule 72
	'@0'           reduce using rule 72
	'@1'           reduce using rule 72
	'False'        reduce using rule 72
	'True'         reduce using rule 72
	'['            reduce using rule 72
	'[]'           reduce using rule 72
	']'            reduce using rule 72
	'case'         reduce using rule 72
	'else'         reduce using rule 72
	'gate'         reduce using rule 72
	'if'           reduce using rule 72
	'let'          reduce using rule 72
	'not'          reduce using rule 72
	'of'           reduce using rule 72
	'then'         reduce using rule 72
	'with'         reduce using rule 72
	'}'            reduce using rule 72
	L_integ        reduce using rule 72
	L_Var          reduce using rule 72
	L_Lambda       reduce using rule 72


State 117

	Gate -> 'SQRT_X_DAG' .                              (rule 73)

	'$'            reduce using rule 73
	'('            reduce using rule 73
	'()'           reduce using rule 73
	')'            reduce using rule 73
	','            reduce using rule 73
	'-'            reduce using rule 73
	'->'           reduce using rule 73
	'.'            reduce using rule 73
	':'            reduce using rule 73
	';'            reduce using rule 73
	'@+'           reduce using rule 73
	'@+i'          reduce using rule 73
	'@-'           reduce using rule 73
	'@-i'          reduce using rule 73
	'@0'           reduce using rule 73
	'@1'           reduce using rule 73
	'False'        reduce using rule 73
	'True'         reduce using rule 73
	'['            reduce using rule 73
	'[]'           reduce using rule 73
	']'            reduce using rule 73
	'case'         reduce using rule 73
	'else'         reduce using rule 73
	'gate'         reduce using rule 73
	'if'           reduce using rule 73
	'let'          reduce using rule 73
	'not'          reduce using rule 73
	'of'           reduce using rule 73
	'then'         reduce using rule 73
	'with'         reduce using rule 73
	'}'            reduce using rule 73
	L_integ        reduce using rule 73
	L_Var          reduce using rule 73
	L_Lambda       reduce using rule 73


State 118

	Gate -> 'SQRT_Y' .                                  (rule 74)

	'$'            reduce using rule 74
	'('            reduce using rule 74
	'()'           reduce using rule 74
	')'            reduce using rule 74
	','            reduce using rule 74
	'-'            reduce using rule 74
	'->'           reduce using rule 74
	'.'            reduce using rule 74
	':'            reduce using rule 74
	';'            reduce using rule 74
	'@+'           reduce using rule 74
	'@+i'          reduce using rule 74
	'@-'           reduce using rule 74
	'@-i'          reduce using rule 74
	'@0'           reduce using rule 74
	'@1'           reduce using rule 74
	'False'        reduce using rule 74
	'True'         reduce using rule 74
	'['            reduce using rule 74
	'[]'           reduce using rule 74
	']'            reduce using rule 74
	'case'         reduce using rule 74
	'else'         reduce using rule 74
	'gate'         reduce using rule 74
	'if'           reduce using rule 74
	'let'          reduce using rule 74
	'not'          reduce using rule 74
	'of'           reduce using rule 74
	'then'         reduce using rule 74
	'with'         reduce using rule 74
	'}'            reduce using rule 74
	L_integ        reduce using rule 74
	L_Var          reduce using rule 74
	L_Lambda       reduce using rule 74


State 119

	Gate -> 'SQRT_Y_DAG' .                              (rule 75)

	'$'            reduce using rule 75
	'('            reduce using rule 75
	'()'           reduce using rule 75
	')'            reduce using rule 75
	','            reduce using rule 75
	'-'            reduce using rule 75
	'->'           reduce using rule 75
	'.'            reduce using rule 75
	':'            reduce using rule 75
	';'            reduce using rule 75
	'@+'           reduce using rule 75
	'@+i'          reduce using rule 75
	'@-'           reduce using rule 75
	'@-i'          reduce using rule 75
	'@0'           reduce using rule 75
	'@1'           reduce using rule 75
	'False'        reduce using rule 75
	'True'         reduce using rule 75
	'['            reduce using rule 75
	'[]'           reduce using rule 75
	']'            reduce using rule 75
	'case'         reduce using rule 75
	'else'         reduce using rule 75
	'gate'         reduce using rule 75
	'if'           reduce using rule 75
	'let'          reduce using rule 75
	'not'          reduce using rule 75
	'of'           reduce using rule 75
	'then'         reduce using rule 75
	'with'         reduce using rule 75
	'}'            reduce using rule 75
	L_integ        reduce using rule 75
	L_Var          reduce using rule 75
	L_Lambda       reduce using rule 75


State 120

	Gate -> 'SWAP' .                                    (rule 82)

	'$'            reduce using rule 82
	'('            reduce using rule 82
	'()'           reduce using rule 82
	')'            reduce using rule 82
	','            reduce using rule 82
	'-'            reduce using rule 82
	'->'           reduce using rule 82
	'.'            reduce using rule 82
	':'            reduce using rule 82
	';'            reduce using rule 82
	'@+'           reduce using rule 82
	'@+i'          reduce using rule 82
	'@-'           reduce using rule 82
	'@-i'          reduce using rule 82
	'@0'           reduce using rule 82
	'@1'           reduce using rule 82
	'False'        reduce using rule 82
	'True'         reduce using rule 82
	'['            reduce using rule 82
	'[]'           reduce using rule 82
	']'            reduce using rule 82
	'case'         reduce using rule 82
	'else'         reduce using rule 82
	'gate'         reduce using rule 82
	'if'           reduce using rule 82
	'let'          reduce using rule 82
	'not'          reduce using rule 82
	'of'           reduce using rule 82
	'then'         reduce using rule 82
	'with'         reduce using rule 82
	'}'            reduce using rule 82
	L_integ        reduce using rule 82
	L_Var          reduce using rule 82
	L_Lambda       reduce using rule 82


State 121

	Gate -> 'SWAP_THETA' . Angle                        (rule 87)

	L_doubl        shift, and enter state 2

	Double         goto state 202
	Angle          goto state 204

State 122

	Gate -> 'S_DAG' .                                   (rule 69)

	'$'            reduce using rule 69
	'('            reduce using rule 69
	'()'           reduce using rule 69
	')'            reduce using rule 69
	','            reduce using rule 69
	'-'            reduce using rule 69
	'->'           reduce using rule 69
	'.'            reduce using rule 69
	':'            reduce using rule 69
	';'            reduce using rule 69
	'@+'           reduce using rule 69
	'@+i'          reduce using rule 69
	'@-'           reduce using rule 69
	'@-i'          reduce using rule 69
	'@0'           reduce using rule 69
	'@1'           reduce using rule 69
	'False'        reduce using rule 69
	'True'         reduce using rule 69
	'['            reduce using rule 69
	'[]'           reduce using rule 69
	']'            reduce using rule 69
	'case'         reduce using rule 69
	'else'         reduce using rule 69
	'gate'         reduce using rule 69
	'if'           reduce using rule 69
	'let'          reduce using rule 69
	'not'          reduce using rule 69
	'of'           reduce using rule 69
	'then'         reduce using rule 69
	'with'         reduce using rule 69
	'}'            reduce using rule 69
	L_integ        reduce using rule 69
	L_Var          reduce using rule 69
	L_Lambda       reduce using rule 69


State 123

	Gate -> 'T' .                                       (rule 70)

	'$'            reduce using rule 70
	'('            reduce using rule 70
	'()'           reduce using rule 70
	')'            reduce using rule 70
	','            reduce using rule 70
	'-'            reduce using rule 70
	'->'           reduce using rule 70
	'.'            reduce using rule 70
	':'            reduce using rule 70
	';'            reduce using rule 70
	'@+'           reduce using rule 70
	'@+i'          reduce using rule 70
	'@-'           reduce using rule 70
	'@-i'          reduce using rule 70
	'@0'           reduce using rule 70
	'@1'           reduce using rule 70
	'False'        reduce using rule 70
	'True'         reduce using rule 70
	'['            reduce using rule 70
	'[]'           reduce using rule 70
	']'            reduce using rule 70
	'case'         reduce using rule 70
	'else'         reduce using rule 70
	'gate'         reduce using rule 70
	'if'           reduce using rule 70
	'let'          reduce using rule 70
	'not'          reduce using rule 70
	'of'           reduce using rule 70
	'then'         reduce using rule 70
	'with'         reduce using rule 70
	'}'            reduce using rule 70
	L_integ        reduce using rule 70
	L_Var          reduce using rule 70
	L_Lambda       reduce using rule 70


State 124

	Gate -> 'T_DAG' .                                   (rule 71)

	'$'            reduce using rule 71
	'('            reduce using rule 71
	'()'           reduce using rule 71
	')'            reduce using rule 71
	','            reduce using rule 71
	'-'            reduce using rule 71
	'->'           reduce using rule 71
	'.'            reduce using rule 71
	':'            reduce using rule 71
	';'            reduce using rule 71
	'@+'           reduce using rule 71
	'@+i'          reduce using rule 71
	'@-'           reduce using rule 71
	'@-i'          reduce using rule 71
	'@0'           reduce using rule 71
	'@1'           reduce using rule 71
	'False'        reduce using rule 71
	'True'         reduce using rule 71
	'['            reduce using rule 71
	'[]'           reduce using rule 71
	']'            reduce using rule 71
	'case'         reduce using rule 71
	'else'         reduce using rule 71
	'gate'         reduce using rule 71
	'if'           reduce using rule 71
	'let'          reduce using rule 71
	'not'          reduce using rule 71
	'of'           reduce using rule 71
	'then'         reduce using rule 71
	'with'         reduce using rule 71
	'}'            reduce using rule 71
	L_integ        reduce using rule 71
	L_Var          reduce using rule 71
	L_Lambda       reduce using rule 71


State 125

	Gate -> 'U1' . Angle                                (rule 79)

	L_doubl        shift, and enter state 2

	Double         goto state 202
	Angle          goto state 203

State 126

	Gate -> 'U2' . '(' Angle ',' Angle ')'              (rule 80)

	'('            shift, and enter state 201


State 127

	Gate -> 'U3' . '(' Angle ',' Angle ',' Angle ')'    (rule 81)

	'('            shift, and enter state 200


State 128

	Gate -> 'X' .                                       (rule 58)

	'$'            reduce using rule 58
	'('            reduce using rule 58
	'()'           reduce using rule 58
	')'            reduce using rule 58
	','            reduce using rule 58
	'-'            reduce using rule 58
	'->'           reduce using rule 58
	'.'            reduce using rule 58
	':'            reduce using rule 58
	';'            reduce using rule 58
	'@+'           reduce using rule 58
	'@+i'          reduce using rule 58
	'@-'           reduce using rule 58
	'@-i'          reduce using rule 58
	'@0'           reduce using rule 58
	'@1'           reduce using rule 58
	'False'        reduce using rule 58
	'True'         reduce using rule 58
	'['            reduce using rule 58
	'[]'           reduce using rule 58
	']'            reduce using rule 58
	'case'         reduce using rule 58
	'else'         reduce using rule 58
	'gate'         reduce using rule 58
	'if'           reduce using rule 58
	'let'          reduce using rule 58
	'not'          reduce using rule 58
	'of'           reduce using rule 58
	'then'         reduce using rule 58
	'with'         reduce using rule 58
	'}'            reduce using rule 58
	L_integ        reduce using rule 58
	L_Var          reduce using rule 58
	L_Lambda       reduce using rule 58


State 129

	Gate -> 'Y' .                                       (rule 59)

	'$'            reduce using rule 59
	'('            reduce using rule 59
	'()'           reduce using rule 59
	')'            reduce using rule 59
	','            reduce using rule 59
	'-'            reduce using rule 59
	'->'           reduce using rule 59
	'.'            reduce using rule 59
	':'            reduce using rule 59
	';'            reduce using rule 59
	'@+'           reduce using rule 59
	'@+i'          reduce using rule 59
	'@-'           reduce using rule 59
	'@-i'          reduce using rule 59
	'@0'           reduce using rule 59
	'@1'           reduce using rule 59
	'False'        reduce using rule 59
	'True'         reduce using rule 59
	'['            reduce using rule 59
	'[]'           reduce using rule 59
	']'            reduce using rule 59
	'case'         reduce using rule 59
	'else'         reduce using rule 59
	'gate'         reduce using rule 59
	'if'           reduce using rule 59
	'let'          reduce using rule 59
	'not'          reduce using rule 59
	'of'           reduce using rule 59
	'then'         reduce using rule 59
	'with'         reduce using rule 59
	'}'            reduce using rule 59
	L_integ        reduce using rule 59
	L_Var          reduce using rule 59
	L_Lambda       reduce using rule 59


State 130

	Gate -> 'Z' .                                       (rule 60)

	'$'            reduce using rule 60
	'('            reduce using rule 60
	'()'           reduce using rule 60
	')'            reduce using rule 60
	','            reduce using rule 60
	'-'            reduce using rule 60
	'->'           reduce using rule 60
	'.'            reduce using rule 60
	':'            reduce using rule 60
	';'            reduce using rule 60
	'@+'           reduce using rule 60
	'@+i'          reduce using rule 60
	'@-'           reduce using rule 60
	'@-i'          reduce using rule 60
	'@0'           reduce using rule 60
	'@1'           reduce using rule 60
	'False'        reduce using rule 60
	'True'         reduce using rule 60
	'['            reduce using rule 60
	'[]'           reduce using rule 60
	']'            reduce using rule 60
	'case'         reduce using rule 60
	'else'         reduce using rule 60
	'gate'         reduce using rule 60
	'if'           reduce using rule 60
	'let'          reduce using rule 60
	'not'          reduce using rule 60
	'of'           reduce using rule 60
	'then'         reduce using rule 60
	'with'         reduce using rule 60
	'}'            reduce using rule 60
	L_integ        reduce using rule 60
	L_Var          reduce using rule 60
	L_Lambda       reduce using rule 60


State 131

	GateVar -> L_GateVar .                              (rule 3)

	'$'            reduce using rule 3
	'('            reduce using rule 3
	'()'           reduce using rule 3
	')'            reduce using rule 3
	','            reduce using rule 3
	'-'            reduce using rule 3
	'->'           reduce using rule 3
	'.'            reduce using rule 3
	':'            reduce using rule 3
	';'            reduce using rule 3
	'@+'           reduce using rule 3
	'@+i'          reduce using rule 3
	'@-'           reduce using rule 3
	'@-i'          reduce using rule 3
	'@0'           reduce using rule 3
	'@1'           reduce using rule 3
	'False'        reduce using rule 3
	'True'         reduce using rule 3
	'['            reduce using rule 3
	'[]'           reduce using rule 3
	']'            reduce using rule 3
	'case'         reduce using rule 3
	'else'         reduce using rule 3
	'gate'         reduce using rule 3
	'if'           reduce using rule 3
	'let'          reduce using rule 3
	'not'          reduce using rule 3
	'of'           reduce using rule 3
	'then'         reduce using rule 3
	'with'         reduce using rule 3
	'}'            reduce using rule 3
	L_doubl        reduce using rule 3
	L_integ        reduce using rule 3
	L_Var          reduce using rule 3
	L_Lambda       reduce using rule 3


State 132

	Term1 -> 'case' Term . 'of' '{' ListCaseExpression '}'    (rule 140)

	'of'           shift, and enter state 199


State 133

	List1 -> '[' Term . ']'                             (rule 146)
	List1 -> '[' Term . ',' ListTerm ']'                (rule 147)

	','            shift, and enter state 197
	']'            shift, and enter state 198


State 134

	IntegerExpression1 -> IntegerExpression2 .          (rule 10)
	IntegerExpression2 -> IntegerExpression2 . '*' IntegerExpression3    (rule 11)
	IntegerExpression2 -> IntegerExpression2 . '/' IntegerExpression3    (rule 12)

	'$'            reduce using rule 10
	'('            reduce using rule 10
	'()'           reduce using rule 10
	')'            reduce using rule 10
	'*'            shift, and enter state 153
	'+'            reduce using rule 10
	','            reduce using rule 10
	'-'            reduce using rule 10
	'->'           reduce using rule 10
	'.'            reduce using rule 10
	'/'            shift, and enter state 154
	':'            reduce using rule 10
	';'            reduce using rule 10
	'@+'           reduce using rule 10
	'@+i'          reduce using rule 10
	'@-'           reduce using rule 10
	'@-i'          reduce using rule 10
	'@0'           reduce using rule 10
	'@1'           reduce using rule 10
	'False'        reduce using rule 10
	'True'         reduce using rule 10
	'['            reduce using rule 10
	'[]'           reduce using rule 10
	']'            reduce using rule 10
	'case'         reduce using rule 10
	'else'         reduce using rule 10
	'gate'         reduce using rule 10
	'if'           reduce using rule 10
	'let'          reduce using rule 10
	'not'          reduce using rule 10
	'of'           reduce using rule 10
	'then'         reduce using rule 10
	'with'         reduce using rule 10
	'}'            reduce using rule 10
	L_integ        reduce using rule 10
	L_Var          reduce using rule 10
	L_Lambda       reduce using rule 10


State 135

	IntegerExpression1 -> '-' IntegerExpression .       (rule 7)

	'$'            reduce using rule 7
	'('            reduce using rule 7
	'()'           reduce using rule 7
	')'            reduce using rule 7
	'+'            reduce using rule 7
	','            reduce using rule 7
	'-'            reduce using rule 7
	'->'           reduce using rule 7
	'.'            reduce using rule 7
	':'            reduce using rule 7
	';'            reduce using rule 7
	'@+'           reduce using rule 7
	'@+i'          reduce using rule 7
	'@-'           reduce using rule 7
	'@-i'          reduce using rule 7
	'@0'           reduce using rule 7
	'@1'           reduce using rule 7
	'False'        reduce using rule 7
	'True'         reduce using rule 7
	'['            reduce using rule 7
	'[]'           reduce using rule 7
	']'            reduce using rule 7
	'case'         reduce using rule 7
	'else'         reduce using rule 7
	'gate'         reduce using rule 7
	'if'           reduce using rule 7
	'let'          reduce using rule 7
	'not'          reduce using rule 7
	'of'           reduce using rule 7
	'then'         reduce using rule 7
	'with'         reduce using rule 7
	'}'            reduce using rule 7
	L_integ        reduce using rule 7
	L_Var          reduce using rule 7
	L_Lambda       reduce using rule 7


State 136

	IntegerExpression3 -> '(' . IntegerExpression ')'    (rule 15)

	'('            shift, and enter state 136
	'-'            shift, and enter state 67
	L_integ        shift, and enter state 41

	Integer        goto state 46
	IntegerExpression1goto state 49
	IntegerExpression2goto state 134
	IntegerExpression3goto state 51
	IntegerExpressiongoto state 196

State 137

	Term3 -> Var .                                      (rule 121)
	Term3 -> '(' Var . ',' ListVar ')'                  (rule 123)
	Term2 -> Var . ',' ListVar                          (rule 131)
	Term1 -> Var . '<-' Term ';' Term                   (rule 138)
	Term1 -> Var . ',' ListVar '<-' Term ';' Term       (rule 139)

	'$'            reduce using rule 121
	'('            reduce using rule 121
	'()'           reduce using rule 121
	')'            reduce using rule 121
	','            shift, and enter state 195
			(reduce using rule 121)

	'-'            reduce using rule 121
	'.'            reduce using rule 121
	':'            reduce using rule 121
	'<-'           shift, and enter state 165
	'@+'           reduce using rule 121
	'@+i'          reduce using rule 121
	'@-'           reduce using rule 121
	'@-i'          reduce using rule 121
	'@0'           reduce using rule 121
	'@1'           reduce using rule 121
	'False'        reduce using rule 121
	'True'         reduce using rule 121
	'['            reduce using rule 121
	'[]'           reduce using rule 121
	'gate'         reduce using rule 121
	'not'          reduce using rule 121
	L_integ        reduce using rule 121
	L_Var          reduce using rule 121


State 138

	IntegerExpression3 -> '(' IntegerExpression . ')'    (rule 15)
	Term3 -> IntegerExpression .                        (rule 119)

	'$'            reduce using rule 119
	'('            reduce using rule 119
	'()'           reduce using rule 119
	')'            shift, and enter state 194
			(reduce using rule 119)

	','            reduce using rule 119
	'-'            reduce using rule 119
	'.'            reduce using rule 119
	':'            reduce using rule 119
	'@+'           reduce using rule 119
	'@+i'          reduce using rule 119
	'@-'           reduce using rule 119
	'@-i'          reduce using rule 119
	'@0'           reduce using rule 119
	'@1'           reduce using rule 119
	'False'        reduce using rule 119
	'True'         reduce using rule 119
	'['            reduce using rule 119
	'[]'           reduce using rule 119
	'gate'         reduce using rule 119
	'not'          reduce using rule 119
	L_integ        reduce using rule 119
	L_Var          reduce using rule 119


State 139

	BoolExpression -> BoolExpression . '&&' BoolExpression1    (rule 19)
	BoolExpression -> BoolExpression . '||' BoolExpression1    (rule 20)
	BoolExpression2 -> '(' BoolExpression . ')'         (rule 33)
	Term3 -> BoolExpression .                           (rule 118)

	'$'            reduce using rule 118
	'&&'           shift, and enter state 151
	'('            reduce using rule 118
	'()'           reduce using rule 118
	')'            shift, and enter state 193
			(reduce using rule 118)

	','            reduce using rule 118
	'-'            reduce using rule 118
	'.'            reduce using rule 118
	':'            reduce using rule 118
	'@+'           reduce using rule 118
	'@+i'          reduce using rule 118
	'@-'           reduce using rule 118
	'@-i'          reduce using rule 118
	'@0'           reduce using rule 118
	'@1'           reduce using rule 118
	'False'        reduce using rule 118
	'True'         reduce using rule 118
	'['            reduce using rule 118
	'[]'           reduce using rule 118
	'gate'         reduce using rule 118
	'not'          reduce using rule 118
	'||'           shift, and enter state 152
	L_integ        reduce using rule 118
	L_Var          reduce using rule 118


State 140

	Term4 -> '(' Term . ')'                             (rule 115)
	Term3 -> '(' Term . ',' ListTerm ')'                (rule 122)

	')'            shift, and enter state 191
	','            shift, and enter state 192


State 141

	Term4 -> List . '!!' Integer                        (rule 113)
	Term4 -> List .                                     (rule 114)
	List1 -> '(' List . ')'                             (rule 148)
	List -> List . '++' List1                           (rule 149)

	'!!'           shift, and enter state 142
	'$'            reduce using rule 114
	'('            reduce using rule 114
	'()'           reduce using rule 114
	')'            shift, and enter state 190
			(reduce using rule 114)

	'++'           shift, and enter state 143
	','            reduce using rule 114
	'-'            reduce using rule 114
	'.'            reduce using rule 114
	':'            reduce using rule 114
	'@+'           reduce using rule 114
	'@+i'          reduce using rule 114
	'@-'           reduce using rule 114
	'@-i'          reduce using rule 114
	'@0'           reduce using rule 114
	'@1'           reduce using rule 114
	'False'        reduce using rule 114
	'True'         reduce using rule 114
	'['            reduce using rule 114
	'[]'           reduce using rule 114
	'gate'         reduce using rule 114
	'not'          reduce using rule 114
	L_integ        reduce using rule 114
	L_Var          reduce using rule 114


State 142

	Term4 -> List '!!' . Integer                        (rule 113)

	L_integ        shift, and enter state 41

	Integer        goto state 189

State 143

	List -> List '++' . List1                           (rule 149)

	'('            shift, and enter state 185
	'['            shift, and enter state 76
	'[]'           shift, and enter state 77

	List1          goto state 188

State 144

	Term -> Term1 '$' . Term                            (rule 143)

	'('            shift, and enter state 65
	'()'           shift, and enter state 66
	'-'            shift, and enter state 67
	'@+'           shift, and enter state 68
	'@+i'          shift, and enter state 69
	'@-'           shift, and enter state 70
	'@-i'          shift, and enter state 71
	'@0'           shift, and enter state 72
	'@1'           shift, and enter state 73
	'False'        shift, and enter state 74
	'True'         shift, and enter state 75
	'['            shift, and enter state 76
	'[]'           shift, and enter state 77
	'case'         shift, and enter state 78
	'gate'         shift, and enter state 79
	'if'           shift, and enter state 80
	'let'          shift, and enter state 81
	'not'          shift, and enter state 82
	'with'         shift, and enter state 83
	L_integ        shift, and enter state 41
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 84

	Integer        goto state 46
	Var            goto state 47
	Lambda         goto state 48
	IntegerExpression1goto state 49
	IntegerExpression2goto state 50
	IntegerExpression3goto state 51
	IntegerExpressiongoto state 52
	BoolValue      goto state 53
	BoolExpression goto state 54
	BoolExpression1goto state 55
	BoolExpression2goto state 56
	BasisState     goto state 57
	Term4          goto state 58
	Term3          goto state 59
	Term2          goto state 60
	Term1          goto state 61
	Term           goto state 187
	List1          goto state 63
	List           goto state 64

State 145

	Term3 -> Var .                                      (rule 121)

	'$'            reduce using rule 121
	'('            reduce using rule 121
	'()'           reduce using rule 121
	')'            reduce using rule 121
	','            reduce using rule 121
	'-'            reduce using rule 121
	'->'           reduce using rule 121
	'.'            reduce using rule 121
	':'            reduce using rule 121
	';'            reduce using rule 121
	'@+'           reduce using rule 121
	'@+i'          reduce using rule 121
	'@-'           reduce using rule 121
	'@-i'          reduce using rule 121
	'@0'           reduce using rule 121
	'@1'           reduce using rule 121
	'False'        reduce using rule 121
	'True'         reduce using rule 121
	'['            reduce using rule 121
	'[]'           reduce using rule 121
	']'            reduce using rule 121
	'case'         reduce using rule 121
	'else'         reduce using rule 121
	'gate'         reduce using rule 121
	'if'           reduce using rule 121
	'let'          reduce using rule 121
	'not'          reduce using rule 121
	'of'           reduce using rule 121
	'then'         reduce using rule 121
	'with'         reduce using rule 121
	'}'            reduce using rule 121
	L_integ        reduce using rule 121
	L_Var          reduce using rule 121
	L_Lambda       reduce using rule 121


State 146

	Term2 -> Term2 Term3 .                              (rule 132)
	List -> Term3 . ':' List1                           (rule 150)

	'$'            reduce using rule 132
	'('            reduce using rule 132
	'()'           reduce using rule 132
	')'            reduce using rule 132
	','            reduce using rule 132
	'-'            reduce using rule 132
	'->'           reduce using rule 132
	'.'            reduce using rule 132
	':'            shift, and enter state 148
	';'            reduce using rule 132
	'@+'           reduce using rule 132
	'@+i'          reduce using rule 132
	'@-'           reduce using rule 132
	'@-i'          reduce using rule 132
	'@0'           reduce using rule 132
	'@1'           reduce using rule 132
	'False'        reduce using rule 132
	'True'         reduce using rule 132
	'['            reduce using rule 132
	'[]'           reduce using rule 132
	']'            reduce using rule 132
	'case'         reduce using rule 132
	'else'         reduce using rule 132
	'gate'         reduce using rule 132
	'if'           reduce using rule 132
	'let'          reduce using rule 132
	'not'          reduce using rule 132
	'of'           reduce using rule 132
	'then'         reduce using rule 132
	'with'         reduce using rule 132
	'}'            reduce using rule 132
	L_integ        reduce using rule 132
	L_Var          reduce using rule 132
	L_Lambda       reduce using rule 132


State 147

	Term2 -> Term2 '.' . Term3                          (rule 133)

	'('            shift, and enter state 65
	'()'           shift, and enter state 66
	'-'            shift, and enter state 67
	'@+'           shift, and enter state 68
	'@+i'          shift, and enter state 69
	'@-'           shift, and enter state 70
	'@-i'          shift, and enter state 71
	'@0'           shift, and enter state 72
	'@1'           shift, and enter state 73
	'False'        shift, and enter state 74
	'True'         shift, and enter state 75
	'['            shift, and enter state 76
	'[]'           shift, and enter state 77
	'gate'         shift, and enter state 79
	'not'          shift, and enter state 82
	L_integ        shift, and enter state 41
	L_Var          shift, and enter state 8

	Integer        goto state 46
	Var            goto state 145
	IntegerExpression1goto state 49
	IntegerExpression2goto state 50
	IntegerExpression3goto state 51
	IntegerExpressiongoto state 52
	BoolValue      goto state 53
	BoolExpression goto state 54
	BoolExpression1goto state 55
	BoolExpression2goto state 56
	BasisState     goto state 57
	Term4          goto state 58
	Term3          goto state 186
	List1          goto state 63
	List           goto state 64

State 148

	List -> Term3 ':' . List1                           (rule 150)

	'('            shift, and enter state 185
	'['            shift, and enter state 76
	'[]'           shift, and enter state 77

	List1          goto state 184

State 149

	BoolExpression1 -> BoolExpression1 '/=' . BoolExpression2    (rule 24)

	'('            shift, and enter state 91
	'False'        shift, and enter state 74
	'True'         shift, and enter state 75
	L_integ        shift, and enter state 41

	Integer        goto state 46
	IntegerExpression2goto state 89
	IntegerExpression3goto state 51
	BoolValue      goto state 53
	BoolExpression2goto state 183

State 150

	BoolExpression1 -> BoolExpression1 '==' . BoolExpression2    (rule 23)

	'('            shift, and enter state 91
	'False'        shift, and enter state 74
	'True'         shift, and enter state 75
	L_integ        shift, and enter state 41

	Integer        goto state 46
	IntegerExpression2goto state 89
	IntegerExpression3goto state 51
	BoolValue      goto state 53
	BoolExpression2goto state 182

State 151

	BoolExpression -> BoolExpression '&&' . BoolExpression1    (rule 19)

	'('            shift, and enter state 91
	'False'        shift, and enter state 74
	'True'         shift, and enter state 75
	L_integ        shift, and enter state 41

	Integer        goto state 46
	IntegerExpression2goto state 89
	IntegerExpression3goto state 51
	BoolValue      goto state 53
	BoolExpression1goto state 181
	BoolExpression2goto state 56

State 152

	BoolExpression -> BoolExpression '||' . BoolExpression1    (rule 20)

	'('            shift, and enter state 91
	'False'        shift, and enter state 74
	'True'         shift, and enter state 75
	L_integ        shift, and enter state 41

	Integer        goto state 46
	IntegerExpression2goto state 89
	IntegerExpression3goto state 51
	BoolValue      goto state 53
	BoolExpression1goto state 180
	BoolExpression2goto state 56

State 153

	IntegerExpression2 -> IntegerExpression2 '*' . IntegerExpression3    (rule 11)

	'('            shift, and enter state 136
	L_integ        shift, and enter state 41

	Integer        goto state 46
	IntegerExpression3goto state 179

State 154

	IntegerExpression2 -> IntegerExpression2 '/' . IntegerExpression3    (rule 12)

	'('            shift, and enter state 136
	L_integ        shift, and enter state 41

	Integer        goto state 46
	IntegerExpression3goto state 178

State 155

	BoolExpression2 -> IntegerExpression2 '/=' . IntegerExpression2    (rule 27)

	'('            shift, and enter state 136
	L_integ        shift, and enter state 41

	Integer        goto state 46
	IntegerExpression2goto state 177
	IntegerExpression3goto state 51

State 156

	BoolExpression2 -> IntegerExpression2 '<' . IntegerExpression2    (rule 30)

	'('            shift, and enter state 136
	L_integ        shift, and enter state 41

	Integer        goto state 46
	IntegerExpression2goto state 176
	IntegerExpression3goto state 51

State 157

	BoolExpression2 -> IntegerExpression2 '<=' . IntegerExpression2    (rule 31)

	'('            shift, and enter state 136
	L_integ        shift, and enter state 41

	Integer        goto state 46
	IntegerExpression2goto state 175
	IntegerExpression3goto state 51

State 158

	BoolExpression2 -> IntegerExpression2 '==' . IntegerExpression2    (rule 26)

	'('            shift, and enter state 136
	L_integ        shift, and enter state 41

	Integer        goto state 46
	IntegerExpression2goto state 174
	IntegerExpression3goto state 51

State 159

	BoolExpression2 -> IntegerExpression2 '>' . IntegerExpression2    (rule 28)

	'('            shift, and enter state 136
	L_integ        shift, and enter state 41

	Integer        goto state 46
	IntegerExpression2goto state 173
	IntegerExpression3goto state 51

State 160

	BoolExpression2 -> IntegerExpression2 '>=' . IntegerExpression2    (rule 29)

	'('            shift, and enter state 136
	L_integ        shift, and enter state 41

	Integer        goto state 46
	IntegerExpression2goto state 172
	IntegerExpression3goto state 51

State 161

	IntegerExpression1 -> IntegerExpression1 '+' . IntegerExpression2    (rule 8)

	'('            shift, and enter state 136
	L_integ        shift, and enter state 41

	Integer        goto state 46
	IntegerExpression2goto state 171
	IntegerExpression3goto state 51

State 162

	IntegerExpression1 -> IntegerExpression1 '-' . IntegerExpression2    (rule 9)

	'('            shift, and enter state 136
	L_integ        shift, and enter state 41

	Integer        goto state 46
	IntegerExpression2goto state 170
	IntegerExpression3goto state 51

State 163

	Term1 -> Lambda Var . Type '.' Term                 (rule 141)

	'!'            shift, and enter state 18
	'('            shift, and enter state 19
	'()'           shift, and enter state 20
	'Bit'          shift, and enter state 21
	'Bool'         shift, and enter state 22
	'Int'          shift, and enter state 23
	'Qbit'         shift, and enter state 24
	'['            shift, and enter state 25

	Type           goto state 169
	Type2          goto state 13
	Type3          goto state 14
	Type5          goto state 15
	Type1          goto state 16
	Type4          goto state 17

State 164

	Term2 -> Var ',' . ListVar                          (rule 131)
	Term1 -> Var ',' . ListVar '<-' Term ';' Term       (rule 139)

	L_Var          shift, and enter state 8

	Var            goto state 167
	ListVar        goto state 168

State 165

	Term1 -> Var '<-' . Term ';' Term                   (rule 138)

	'('            shift, and enter state 65
	'()'           shift, and enter state 66
	'-'            shift, and enter state 67
	'@+'           shift, and enter state 68
	'@+i'          shift, and enter state 69
	'@-'           shift, and enter state 70
	'@-i'          shift, and enter state 71
	'@0'           shift, and enter state 72
	'@1'           shift, and enter state 73
	'False'        shift, and enter state 74
	'True'         shift, and enter state 75
	'['            shift, and enter state 76
	'[]'           shift, and enter state 77
	'case'         shift, and enter state 78
	'gate'         shift, and enter state 79
	'if'           shift, and enter state 80
	'let'          shift, and enter state 81
	'not'          shift, and enter state 82
	'with'         shift, and enter state 83
	L_integ        shift, and enter state 41
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 84

	Integer        goto state 46
	Var            goto state 47
	Lambda         goto state 48
	IntegerExpression1goto state 49
	IntegerExpression2goto state 50
	IntegerExpression3goto state 51
	IntegerExpressiongoto state 52
	BoolValue      goto state 53
	BoolExpression goto state 54
	BoolExpression1goto state 55
	BoolExpression2goto state 56
	BasisState     goto state 57
	Term4          goto state 58
	Term3          goto state 59
	Term2          goto state 60
	Term1          goto state 61
	Term           goto state 166
	List1          goto state 63
	List           goto state 64

State 166

	Term1 -> Var '<-' Term . ';' Term                   (rule 138)

	';'            shift, and enter state 256


State 167

	ListVar -> Var .                                    (rule 97)
	ListVar -> Var . ',' ListVar                        (rule 98)

	'$'            reduce using rule 97
	'('            reduce using rule 97
	'()'           reduce using rule 97
	')'            reduce using rule 97
	','            shift, and enter state 255
			(reduce using rule 97)

	'-'            reduce using rule 97
	'->'           reduce using rule 97
	'.'            reduce using rule 97
	';'            reduce using rule 97
	'<-'           reduce using rule 97
	'@+'           reduce using rule 97
	'@+i'          reduce using rule 97
	'@-'           reduce using rule 97
	'@-i'          reduce using rule 97
	'@0'           reduce using rule 97
	'@1'           reduce using rule 97
	'False'        reduce using rule 97
	'True'         reduce using rule 97
	'['            reduce using rule 97
	'[]'           reduce using rule 97
	']'            reduce using rule 97
	'case'         reduce using rule 97
	'else'         reduce using rule 97
	'gate'         reduce using rule 97
	'if'           reduce using rule 97
	'let'          reduce using rule 97
	'not'          reduce using rule 97
	'of'           reduce using rule 97
	'then'         reduce using rule 97
	'with'         reduce using rule 97
	'}'            reduce using rule 97
	L_integ        reduce using rule 97
	L_Var          reduce using rule 97
	L_Lambda       reduce using rule 97


State 168

	Term2 -> Var ',' ListVar .                          (rule 131)
	Term1 -> Var ',' ListVar . '<-' Term ';' Term       (rule 139)

	'$'            reduce using rule 131
	'('            reduce using rule 131
	'()'           reduce using rule 131
	')'            reduce using rule 131
	','            reduce using rule 131
	'-'            reduce using rule 131
	'->'           reduce using rule 131
	'.'            reduce using rule 131
	';'            reduce using rule 131
	'<-'           shift, and enter state 254
	'@+'           reduce using rule 131
	'@+i'          reduce using rule 131
	'@-'           reduce using rule 131
	'@-i'          reduce using rule 131
	'@0'           reduce using rule 131
	'@1'           reduce using rule 131
	'False'        reduce using rule 131
	'True'         reduce using rule 131
	'['            reduce using rule 131
	'[]'           reduce using rule 131
	']'            reduce using rule 131
	'case'         reduce using rule 131
	'else'         reduce using rule 131
	'gate'         reduce using rule 131
	'if'           reduce using rule 131
	'let'          reduce using rule 131
	'not'          reduce using rule 131
	'of'           reduce using rule 131
	'then'         reduce using rule 131
	'with'         reduce using rule 131
	'}'            reduce using rule 131
	L_integ        reduce using rule 131
	L_Var          reduce using rule 131
	L_Lambda       reduce using rule 131


State 169

	Type -> Type . '->' Type1                           (rule 34)
	Term1 -> Lambda Var Type . '.' Term                 (rule 141)

	'->'           shift, and enter state 37
	'.'            shift, and enter state 253


State 170

	IntegerExpression1 -> IntegerExpression1 '-' IntegerExpression2 .    (rule 9)
	IntegerExpression2 -> IntegerExpression2 . '*' IntegerExpression3    (rule 11)
	IntegerExpression2 -> IntegerExpression2 . '/' IntegerExpression3    (rule 12)

	'$'            reduce using rule 9
	'('            reduce using rule 9
	'()'           reduce using rule 9
	')'            reduce using rule 9
	'*'            shift, and enter state 153
	'+'            reduce using rule 9
	','            reduce using rule 9
	'-'            reduce using rule 9
	'->'           reduce using rule 9
	'.'            reduce using rule 9
	'/'            shift, and enter state 154
	':'            reduce using rule 9
	';'            reduce using rule 9
	'@+'           reduce using rule 9
	'@+i'          reduce using rule 9
	'@-'           reduce using rule 9
	'@-i'          reduce using rule 9
	'@0'           reduce using rule 9
	'@1'           reduce using rule 9
	'False'        reduce using rule 9
	'True'         reduce using rule 9
	'['            reduce using rule 9
	'[]'           reduce using rule 9
	']'            reduce using rule 9
	'case'         reduce using rule 9
	'else'         reduce using rule 9
	'gate'         reduce using rule 9
	'if'           reduce using rule 9
	'let'          reduce using rule 9
	'not'          reduce using rule 9
	'of'           reduce using rule 9
	'then'         reduce using rule 9
	'with'         reduce using rule 9
	'}'            reduce using rule 9
	L_integ        reduce using rule 9
	L_Var          reduce using rule 9
	L_Lambda       reduce using rule 9


State 171

	IntegerExpression1 -> IntegerExpression1 '+' IntegerExpression2 .    (rule 8)
	IntegerExpression2 -> IntegerExpression2 . '*' IntegerExpression3    (rule 11)
	IntegerExpression2 -> IntegerExpression2 . '/' IntegerExpression3    (rule 12)

	'$'            reduce using rule 8
	'('            reduce using rule 8
	'()'           reduce using rule 8
	')'            reduce using rule 8
	'*'            shift, and enter state 153
	'+'            reduce using rule 8
	','            reduce using rule 8
	'-'            reduce using rule 8
	'->'           reduce using rule 8
	'.'            reduce using rule 8
	'/'            shift, and enter state 154
	':'            reduce using rule 8
	';'            reduce using rule 8
	'@+'           reduce using rule 8
	'@+i'          reduce using rule 8
	'@-'           reduce using rule 8
	'@-i'          reduce using rule 8
	'@0'           reduce using rule 8
	'@1'           reduce using rule 8
	'False'        reduce using rule 8
	'True'         reduce using rule 8
	'['            reduce using rule 8
	'[]'           reduce using rule 8
	']'            reduce using rule 8
	'case'         reduce using rule 8
	'else'         reduce using rule 8
	'gate'         reduce using rule 8
	'if'           reduce using rule 8
	'let'          reduce using rule 8
	'not'          reduce using rule 8
	'of'           reduce using rule 8
	'then'         reduce using rule 8
	'with'         reduce using rule 8
	'}'            reduce using rule 8
	L_integ        reduce using rule 8
	L_Var          reduce using rule 8
	L_Lambda       reduce using rule 8


State 172

	IntegerExpression2 -> IntegerExpression2 . '*' IntegerExpression3    (rule 11)
	IntegerExpression2 -> IntegerExpression2 . '/' IntegerExpression3    (rule 12)
	BoolExpression2 -> IntegerExpression2 '>=' IntegerExpression2 .    (rule 29)

	'$'            reduce using rule 29
	'&&'           reduce using rule 29
	'('            reduce using rule 29
	'()'           reduce using rule 29
	')'            reduce using rule 29
	'*'            shift, and enter state 153
	','            reduce using rule 29
	'-'            reduce using rule 29
	'->'           reduce using rule 29
	'.'            reduce using rule 29
	'/'            shift, and enter state 154
	'/='           reduce using rule 29
	':'            reduce using rule 29
	';'            reduce using rule 29
	'=='           reduce using rule 29
	'@+'           reduce using rule 29
	'@+i'          reduce using rule 29
	'@-'           reduce using rule 29
	'@-i'          reduce using rule 29
	'@0'           reduce using rule 29
	'@1'           reduce using rule 29
	'False'        reduce using rule 29
	'True'         reduce using rule 29
	'['            reduce using rule 29
	'[]'           reduce using rule 29
	']'            reduce using rule 29
	'case'         reduce using rule 29
	'else'         reduce using rule 29
	'gate'         reduce using rule 29
	'if'           reduce using rule 29
	'let'          reduce using rule 29
	'not'          reduce using rule 29
	'of'           reduce using rule 29
	'then'         reduce using rule 29
	'with'         reduce using rule 29
	'||'           reduce using rule 29
	'}'            reduce using rule 29
	L_integ        reduce using rule 29
	L_Var          reduce using rule 29
	L_Lambda       reduce using rule 29


State 173

	IntegerExpression2 -> IntegerExpression2 . '*' IntegerExpression3    (rule 11)
	IntegerExpression2 -> IntegerExpression2 . '/' IntegerExpression3    (rule 12)
	BoolExpression2 -> IntegerExpression2 '>' IntegerExpression2 .    (rule 28)

	'$'            reduce using rule 28
	'&&'           reduce using rule 28
	'('            reduce using rule 28
	'()'           reduce using rule 28
	')'            reduce using rule 28
	'*'            shift, and enter state 153
	','            reduce using rule 28
	'-'            reduce using rule 28
	'->'           reduce using rule 28
	'.'            reduce using rule 28
	'/'            shift, and enter state 154
	'/='           reduce using rule 28
	':'            reduce using rule 28
	';'            reduce using rule 28
	'=='           reduce using rule 28
	'@+'           reduce using rule 28
	'@+i'          reduce using rule 28
	'@-'           reduce using rule 28
	'@-i'          reduce using rule 28
	'@0'           reduce using rule 28
	'@1'           reduce using rule 28
	'False'        reduce using rule 28
	'True'         reduce using rule 28
	'['            reduce using rule 28
	'[]'           reduce using rule 28
	']'            reduce using rule 28
	'case'         reduce using rule 28
	'else'         reduce using rule 28
	'gate'         reduce using rule 28
	'if'           reduce using rule 28
	'let'          reduce using rule 28
	'not'          reduce using rule 28
	'of'           reduce using rule 28
	'then'         reduce using rule 28
	'with'         reduce using rule 28
	'||'           reduce using rule 28
	'}'            reduce using rule 28
	L_integ        reduce using rule 28
	L_Var          reduce using rule 28
	L_Lambda       reduce using rule 28


State 174

	IntegerExpression2 -> IntegerExpression2 . '*' IntegerExpression3    (rule 11)
	IntegerExpression2 -> IntegerExpression2 . '/' IntegerExpression3    (rule 12)
	BoolExpression2 -> IntegerExpression2 '==' IntegerExpression2 .    (rule 26)

	'$'            reduce using rule 26
	'&&'           reduce using rule 26
	'('            reduce using rule 26
	'()'           reduce using rule 26
	')'            reduce using rule 26
	'*'            shift, and enter state 153
	','            reduce using rule 26
	'-'            reduce using rule 26
	'->'           reduce using rule 26
	'.'            reduce using rule 26
	'/'            shift, and enter state 154
	'/='           reduce using rule 26
	':'            reduce using rule 26
	';'            reduce using rule 26
	'=='           reduce using rule 26
	'@+'           reduce using rule 26
	'@+i'          reduce using rule 26
	'@-'           reduce using rule 26
	'@-i'          reduce using rule 26
	'@0'           reduce using rule 26
	'@1'           reduce using rule 26
	'False'        reduce using rule 26
	'True'         reduce using rule 26
	'['            reduce using rule 26
	'[]'           reduce using rule 26
	']'            reduce using rule 26
	'case'         reduce using rule 26
	'else'         reduce using rule 26
	'gate'         reduce using rule 26
	'if'           reduce using rule 26
	'let'          reduce using rule 26
	'not'          reduce using rule 26
	'of'           reduce using rule 26
	'then'         reduce using rule 26
	'with'         reduce using rule 26
	'||'           reduce using rule 26
	'}'            reduce using rule 26
	L_integ        reduce using rule 26
	L_Var          reduce using rule 26
	L_Lambda       reduce using rule 26


State 175

	IntegerExpression2 -> IntegerExpression2 . '*' IntegerExpression3    (rule 11)
	IntegerExpression2 -> IntegerExpression2 . '/' IntegerExpression3    (rule 12)
	BoolExpression2 -> IntegerExpression2 '<=' IntegerExpression2 .    (rule 31)

	'$'            reduce using rule 31
	'&&'           reduce using rule 31
	'('            reduce using rule 31
	'()'           reduce using rule 31
	')'            reduce using rule 31
	'*'            shift, and enter state 153
	','            reduce using rule 31
	'-'            reduce using rule 31
	'->'           reduce using rule 31
	'.'            reduce using rule 31
	'/'            shift, and enter state 154
	'/='           reduce using rule 31
	':'            reduce using rule 31
	';'            reduce using rule 31
	'=='           reduce using rule 31
	'@+'           reduce using rule 31
	'@+i'          reduce using rule 31
	'@-'           reduce using rule 31
	'@-i'          reduce using rule 31
	'@0'           reduce using rule 31
	'@1'           reduce using rule 31
	'False'        reduce using rule 31
	'True'         reduce using rule 31
	'['            reduce using rule 31
	'[]'           reduce using rule 31
	']'            reduce using rule 31
	'case'         reduce using rule 31
	'else'         reduce using rule 31
	'gate'         reduce using rule 31
	'if'           reduce using rule 31
	'let'          reduce using rule 31
	'not'          reduce using rule 31
	'of'           reduce using rule 31
	'then'         reduce using rule 31
	'with'         reduce using rule 31
	'||'           reduce using rule 31
	'}'            reduce using rule 31
	L_integ        reduce using rule 31
	L_Var          reduce using rule 31
	L_Lambda       reduce using rule 31


State 176

	IntegerExpression2 -> IntegerExpression2 . '*' IntegerExpression3    (rule 11)
	IntegerExpression2 -> IntegerExpression2 . '/' IntegerExpression3    (rule 12)
	BoolExpression2 -> IntegerExpression2 '<' IntegerExpression2 .    (rule 30)

	'$'            reduce using rule 30
	'&&'           reduce using rule 30
	'('            reduce using rule 30
	'()'           reduce using rule 30
	')'            reduce using rule 30
	'*'            shift, and enter state 153
	','            reduce using rule 30
	'-'            reduce using rule 30
	'->'           reduce using rule 30
	'.'            reduce using rule 30
	'/'            shift, and enter state 154
	'/='           reduce using rule 30
	':'            reduce using rule 30
	';'            reduce using rule 30
	'=='           reduce using rule 30
	'@+'           reduce using rule 30
	'@+i'          reduce using rule 30
	'@-'           reduce using rule 30
	'@-i'          reduce using rule 30
	'@0'           reduce using rule 30
	'@1'           reduce using rule 30
	'False'        reduce using rule 30
	'True'         reduce using rule 30
	'['            reduce using rule 30
	'[]'           reduce using rule 30
	']'            reduce using rule 30
	'case'         reduce using rule 30
	'else'         reduce using rule 30
	'gate'         reduce using rule 30
	'if'           reduce using rule 30
	'let'          reduce using rule 30
	'not'          reduce using rule 30
	'of'           reduce using rule 30
	'then'         reduce using rule 30
	'with'         reduce using rule 30
	'||'           reduce using rule 30
	'}'            reduce using rule 30
	L_integ        reduce using rule 30
	L_Var          reduce using rule 30
	L_Lambda       reduce using rule 30


State 177

	IntegerExpression2 -> IntegerExpression2 . '*' IntegerExpression3    (rule 11)
	IntegerExpression2 -> IntegerExpression2 . '/' IntegerExpression3    (rule 12)
	BoolExpression2 -> IntegerExpression2 '/=' IntegerExpression2 .    (rule 27)

	'$'            reduce using rule 27
	'&&'           reduce using rule 27
	'('            reduce using rule 27
	'()'           reduce using rule 27
	')'            reduce using rule 27
	'*'            shift, and enter state 153
	','            reduce using rule 27
	'-'            reduce using rule 27
	'->'           reduce using rule 27
	'.'            reduce using rule 27
	'/'            shift, and enter state 154
	'/='           reduce using rule 27
	':'            reduce using rule 27
	';'            reduce using rule 27
	'=='           reduce using rule 27
	'@+'           reduce using rule 27
	'@+i'          reduce using rule 27
	'@-'           reduce using rule 27
	'@-i'          reduce using rule 27
	'@0'           reduce using rule 27
	'@1'           reduce using rule 27
	'False'        reduce using rule 27
	'True'         reduce using rule 27
	'['            reduce using rule 27
	'[]'           reduce using rule 27
	']'            reduce using rule 27
	'case'         reduce using rule 27
	'else'         reduce using rule 27
	'gate'         reduce using rule 27
	'if'           reduce using rule 27
	'let'          reduce using rule 27
	'not'          reduce using rule 27
	'of'           reduce using rule 27
	'then'         reduce using rule 27
	'with'         reduce using rule 27
	'||'           reduce using rule 27
	'}'            reduce using rule 27
	L_integ        reduce using rule 27
	L_Var          reduce using rule 27
	L_Lambda       reduce using rule 27


State 178

	IntegerExpression2 -> IntegerExpression2 '/' IntegerExpression3 .    (rule 12)

	'$'            reduce using rule 12
	'&&'           reduce using rule 12
	'('            reduce using rule 12
	'()'           reduce using rule 12
	')'            reduce using rule 12
	'*'            reduce using rule 12
	'+'            reduce using rule 12
	','            reduce using rule 12
	'-'            reduce using rule 12
	'->'           reduce using rule 12
	'.'            reduce using rule 12
	'/'            reduce using rule 12
	'/='           reduce using rule 12
	':'            reduce using rule 12
	';'            reduce using rule 12
	'<'            reduce using rule 12
	'<='           reduce using rule 12
	'=='           reduce using rule 12
	'>'            reduce using rule 12
	'>='           reduce using rule 12
	'@+'           reduce using rule 12
	'@+i'          reduce using rule 12
	'@-'           reduce using rule 12
	'@-i'          reduce using rule 12
	'@0'           reduce using rule 12
	'@1'           reduce using rule 12
	'False'        reduce using rule 12
	'True'         reduce using rule 12
	'['            reduce using rule 12
	'[]'           reduce using rule 12
	']'            reduce using rule 12
	'case'         reduce using rule 12
	'else'         reduce using rule 12
	'gate'         reduce using rule 12
	'if'           reduce using rule 12
	'let'          reduce using rule 12
	'not'          reduce using rule 12
	'of'           reduce using rule 12
	'then'         reduce using rule 12
	'with'         reduce using rule 12
	'||'           reduce using rule 12
	'}'            reduce using rule 12
	L_integ        reduce using rule 12
	L_Var          reduce using rule 12
	L_Lambda       reduce using rule 12


State 179

	IntegerExpression2 -> IntegerExpression2 '*' IntegerExpression3 .    (rule 11)

	'$'            reduce using rule 11
	'&&'           reduce using rule 11
	'('            reduce using rule 11
	'()'           reduce using rule 11
	')'            reduce using rule 11
	'*'            reduce using rule 11
	'+'            reduce using rule 11
	','            reduce using rule 11
	'-'            reduce using rule 11
	'->'           reduce using rule 11
	'.'            reduce using rule 11
	'/'            reduce using rule 11
	'/='           reduce using rule 11
	':'            reduce using rule 11
	';'            reduce using rule 11
	'<'            reduce using rule 11
	'<='           reduce using rule 11
	'=='           reduce using rule 11
	'>'            reduce using rule 11
	'>='           reduce using rule 11
	'@+'           reduce using rule 11
	'@+i'          reduce using rule 11
	'@-'           reduce using rule 11
	'@-i'          reduce using rule 11
	'@0'           reduce using rule 11
	'@1'           reduce using rule 11
	'False'        reduce using rule 11
	'True'         reduce using rule 11
	'['            reduce using rule 11
	'[]'           reduce using rule 11
	']'            reduce using rule 11
	'case'         reduce using rule 11
	'else'         reduce using rule 11
	'gate'         reduce using rule 11
	'if'           reduce using rule 11
	'let'          reduce using rule 11
	'not'          reduce using rule 11
	'of'           reduce using rule 11
	'then'         reduce using rule 11
	'with'         reduce using rule 11
	'||'           reduce using rule 11
	'}'            reduce using rule 11
	L_integ        reduce using rule 11
	L_Var          reduce using rule 11
	L_Lambda       reduce using rule 11


State 180

	BoolExpression -> BoolExpression '||' BoolExpression1 .    (rule 20)
	BoolExpression1 -> BoolExpression1 . '==' BoolExpression2    (rule 23)
	BoolExpression1 -> BoolExpression1 . '/=' BoolExpression2    (rule 24)

	'$'            reduce using rule 20
	'&&'           reduce using rule 20
	'('            reduce using rule 20
	'()'           reduce using rule 20
	')'            reduce using rule 20
	','            reduce using rule 20
	'-'            reduce using rule 20
	'->'           reduce using rule 20
	'.'            reduce using rule 20
	'/='           shift, and enter state 149
	':'            reduce using rule 20
	';'            reduce using rule 20
	'=='           shift, and enter state 150
	'@+'           reduce using rule 20
	'@+i'          reduce using rule 20
	'@-'           reduce using rule 20
	'@-i'          reduce using rule 20
	'@0'           reduce using rule 20
	'@1'           reduce using rule 20
	'False'        reduce using rule 20
	'True'         reduce using rule 20
	'['            reduce using rule 20
	'[]'           reduce using rule 20
	']'            reduce using rule 20
	'case'         reduce using rule 20
	'else'         reduce using rule 20
	'gate'         reduce using rule 20
	'if'           reduce using rule 20
	'let'          reduce using rule 20
	'not'          reduce using rule 20
	'of'           reduce using rule 20
	'then'         reduce using rule 20
	'with'         reduce using rule 20
	'||'           reduce using rule 20
	'}'            reduce using rule 20
	L_integ        reduce using rule 20
	L_Var          reduce using rule 20
	L_Lambda       reduce using rule 20


State 181

	BoolExpression -> BoolExpression '&&' BoolExpression1 .    (rule 19)
	BoolExpression1 -> BoolExpression1 . '==' BoolExpression2    (rule 23)
	BoolExpression1 -> BoolExpression1 . '/=' BoolExpression2    (rule 24)

	'$'            reduce using rule 19
	'&&'           reduce using rule 19
	'('            reduce using rule 19
	'()'           reduce using rule 19
	')'            reduce using rule 19
	','            reduce using rule 19
	'-'            reduce using rule 19
	'->'           reduce using rule 19
	'.'            reduce using rule 19
	'/='           shift, and enter state 149
	':'            reduce using rule 19
	';'            reduce using rule 19
	'=='           shift, and enter state 150
	'@+'           reduce using rule 19
	'@+i'          reduce using rule 19
	'@-'           reduce using rule 19
	'@-i'          reduce using rule 19
	'@0'           reduce using rule 19
	'@1'           reduce using rule 19
	'False'        reduce using rule 19
	'True'         reduce using rule 19
	'['            reduce using rule 19
	'[]'           reduce using rule 19
	']'            reduce using rule 19
	'case'         reduce using rule 19
	'else'         reduce using rule 19
	'gate'         reduce using rule 19
	'if'           reduce using rule 19
	'let'          reduce using rule 19
	'not'          reduce using rule 19
	'of'           reduce using rule 19
	'then'         reduce using rule 19
	'with'         reduce using rule 19
	'||'           reduce using rule 19
	'}'            reduce using rule 19
	L_integ        reduce using rule 19
	L_Var          reduce using rule 19
	L_Lambda       reduce using rule 19


State 182

	BoolExpression1 -> BoolExpression1 '==' BoolExpression2 .    (rule 23)

	'$'            reduce using rule 23
	'&&'           reduce using rule 23
	'('            reduce using rule 23
	'()'           reduce using rule 23
	')'            reduce using rule 23
	','            reduce using rule 23
	'-'            reduce using rule 23
	'->'           reduce using rule 23
	'.'            reduce using rule 23
	'/='           reduce using rule 23
	':'            reduce using rule 23
	';'            reduce using rule 23
	'=='           reduce using rule 23
	'@+'           reduce using rule 23
	'@+i'          reduce using rule 23
	'@-'           reduce using rule 23
	'@-i'          reduce using rule 23
	'@0'           reduce using rule 23
	'@1'           reduce using rule 23
	'False'        reduce using rule 23
	'True'         reduce using rule 23
	'['            reduce using rule 23
	'[]'           reduce using rule 23
	']'            reduce using rule 23
	'case'         reduce using rule 23
	'else'         reduce using rule 23
	'gate'         reduce using rule 23
	'if'           reduce using rule 23
	'let'          reduce using rule 23
	'not'          reduce using rule 23
	'of'           reduce using rule 23
	'then'         reduce using rule 23
	'with'         reduce using rule 23
	'||'           reduce using rule 23
	'}'            reduce using rule 23
	L_integ        reduce using rule 23
	L_Var          reduce using rule 23
	L_Lambda       reduce using rule 23


State 183

	BoolExpression1 -> BoolExpression1 '/=' BoolExpression2 .    (rule 24)

	'$'            reduce using rule 24
	'&&'           reduce using rule 24
	'('            reduce using rule 24
	'()'           reduce using rule 24
	')'            reduce using rule 24
	','            reduce using rule 24
	'-'            reduce using rule 24
	'->'           reduce using rule 24
	'.'            reduce using rule 24
	'/='           reduce using rule 24
	':'            reduce using rule 24
	';'            reduce using rule 24
	'=='           reduce using rule 24
	'@+'           reduce using rule 24
	'@+i'          reduce using rule 24
	'@-'           reduce using rule 24
	'@-i'          reduce using rule 24
	'@0'           reduce using rule 24
	'@1'           reduce using rule 24
	'False'        reduce using rule 24
	'True'         reduce using rule 24
	'['            reduce using rule 24
	'[]'           reduce using rule 24
	']'            reduce using rule 24
	'case'         reduce using rule 24
	'else'         reduce using rule 24
	'gate'         reduce using rule 24
	'if'           reduce using rule 24
	'let'          reduce using rule 24
	'not'          reduce using rule 24
	'of'           reduce using rule 24
	'then'         reduce using rule 24
	'with'         reduce using rule 24
	'||'           reduce using rule 24
	'}'            reduce using rule 24
	L_integ        reduce using rule 24
	L_Var          reduce using rule 24
	L_Lambda       reduce using rule 24


State 184

	List -> Term3 ':' List1 .                           (rule 150)

	'!!'           reduce using rule 150
	'$'            reduce using rule 150
	'('            reduce using rule 150
	'()'           reduce using rule 150
	')'            reduce using rule 150
	'++'           reduce using rule 150
	','            reduce using rule 150
	'-'            reduce using rule 150
	'->'           reduce using rule 150
	'.'            reduce using rule 150
	':'            reduce using rule 150
	';'            reduce using rule 150
	'@+'           reduce using rule 150
	'@+i'          reduce using rule 150
	'@-'           reduce using rule 150
	'@-i'          reduce using rule 150
	'@0'           reduce using rule 150
	'@1'           reduce using rule 150
	'False'        reduce using rule 150
	'True'         reduce using rule 150
	'['            reduce using rule 150
	'[]'           reduce using rule 150
	']'            reduce using rule 150
	'case'         reduce using rule 150
	'else'         reduce using rule 150
	'gate'         reduce using rule 150
	'if'           reduce using rule 150
	'let'          reduce using rule 150
	'not'          reduce using rule 150
	'of'           reduce using rule 150
	'then'         reduce using rule 150
	'with'         reduce using rule 150
	'}'            reduce using rule 150
	L_integ        reduce using rule 150
	L_Var          reduce using rule 150
	L_Lambda       reduce using rule 150


State 185

	List1 -> '(' . List ')'                             (rule 148)

	'('            shift, and enter state 65
	'()'           shift, and enter state 66
	'-'            shift, and enter state 67
	'@+'           shift, and enter state 68
	'@+i'          shift, and enter state 69
	'@-'           shift, and enter state 70
	'@-i'          shift, and enter state 71
	'@0'           shift, and enter state 72
	'@1'           shift, and enter state 73
	'False'        shift, and enter state 74
	'True'         shift, and enter state 75
	'['            shift, and enter state 76
	'[]'           shift, and enter state 77
	'gate'         shift, and enter state 79
	'not'          shift, and enter state 82
	L_integ        shift, and enter state 41
	L_Var          shift, and enter state 8

	Integer        goto state 46
	Var            goto state 145
	IntegerExpression1goto state 49
	IntegerExpression2goto state 50
	IntegerExpression3goto state 51
	IntegerExpressiongoto state 52
	BoolValue      goto state 53
	BoolExpression goto state 54
	BoolExpression1goto state 55
	BoolExpression2goto state 56
	BasisState     goto state 57
	Term4          goto state 58
	Term3          goto state 252
	List1          goto state 63
	List           goto state 141

State 186

	Term2 -> Term2 '.' Term3 .                          (rule 133)
	List -> Term3 . ':' List1                           (rule 150)

	'$'            reduce using rule 133
	'('            reduce using rule 133
	'()'           reduce using rule 133
	')'            reduce using rule 133
	','            reduce using rule 133
	'-'            reduce using rule 133
	'->'           reduce using rule 133
	'.'            reduce using rule 133
	':'            shift, and enter state 148
	';'            reduce using rule 133
	'@+'           reduce using rule 133
	'@+i'          reduce using rule 133
	'@-'           reduce using rule 133
	'@-i'          reduce using rule 133
	'@0'           reduce using rule 133
	'@1'           reduce using rule 133
	'False'        reduce using rule 133
	'True'         reduce using rule 133
	'['            reduce using rule 133
	'[]'           reduce using rule 133
	']'            reduce using rule 133
	'case'         reduce using rule 133
	'else'         reduce using rule 133
	'gate'         reduce using rule 133
	'if'           reduce using rule 133
	'let'          reduce using rule 133
	'not'          reduce using rule 133
	'of'           reduce using rule 133
	'then'         reduce using rule 133
	'with'         reduce using rule 133
	'}'            reduce using rule 133
	L_integ        reduce using rule 133
	L_Var          reduce using rule 133
	L_Lambda       reduce using rule 133


State 187

	Term -> Term1 '$' Term .                            (rule 143)

	'$'            reduce using rule 143
	'('            reduce using rule 143
	'()'           reduce using rule 143
	')'            reduce using rule 143
	','            reduce using rule 143
	'-'            reduce using rule 143
	'->'           reduce using rule 143
	';'            reduce using rule 143
	'@+'           reduce using rule 143
	'@+i'          reduce using rule 143
	'@-'           reduce using rule 143
	'@-i'          reduce using rule 143
	'@0'           reduce using rule 143
	'@1'           reduce using rule 143
	'False'        reduce using rule 143
	'True'         reduce using rule 143
	'['            reduce using rule 143
	'[]'           reduce using rule 143
	']'            reduce using rule 143
	'case'         reduce using rule 143
	'else'         reduce using rule 143
	'gate'         reduce using rule 143
	'if'           reduce using rule 143
	'let'          reduce using rule 143
	'not'          reduce using rule 143
	'of'           reduce using rule 143
	'then'         reduce using rule 143
	'with'         reduce using rule 143
	'}'            reduce using rule 143
	L_integ        reduce using rule 143
	L_Var          reduce using rule 143
	L_Lambda       reduce using rule 143


State 188

	List -> List '++' List1 .                           (rule 149)

	'!!'           reduce using rule 149
	'$'            reduce using rule 149
	'('            reduce using rule 149
	'()'           reduce using rule 149
	')'            reduce using rule 149
	'++'           reduce using rule 149
	','            reduce using rule 149
	'-'            reduce using rule 149
	'->'           reduce using rule 149
	'.'            reduce using rule 149
	':'            reduce using rule 149
	';'            reduce using rule 149
	'@+'           reduce using rule 149
	'@+i'          reduce using rule 149
	'@-'           reduce using rule 149
	'@-i'          reduce using rule 149
	'@0'           reduce using rule 149
	'@1'           reduce using rule 149
	'False'        reduce using rule 149
	'True'         reduce using rule 149
	'['            reduce using rule 149
	'[]'           reduce using rule 149
	']'            reduce using rule 149
	'case'         reduce using rule 149
	'else'         reduce using rule 149
	'gate'         reduce using rule 149
	'if'           reduce using rule 149
	'let'          reduce using rule 149
	'not'          reduce using rule 149
	'of'           reduce using rule 149
	'then'         reduce using rule 149
	'with'         reduce using rule 149
	'}'            reduce using rule 149
	L_integ        reduce using rule 149
	L_Var          reduce using rule 149
	L_Lambda       reduce using rule 149


State 189

	Term4 -> List '!!' Integer .                        (rule 113)

	'$'            reduce using rule 113
	'('            reduce using rule 113
	'()'           reduce using rule 113
	')'            reduce using rule 113
	','            reduce using rule 113
	'-'            reduce using rule 113
	'->'           reduce using rule 113
	'.'            reduce using rule 113
	':'            reduce using rule 113
	';'            reduce using rule 113
	'@+'           reduce using rule 113
	'@+i'          reduce using rule 113
	'@-'           reduce using rule 113
	'@-i'          reduce using rule 113
	'@0'           reduce using rule 113
	'@1'           reduce using rule 113
	'False'        reduce using rule 113
	'True'         reduce using rule 113
	'['            reduce using rule 113
	'[]'           reduce using rule 113
	']'            reduce using rule 113
	'case'         reduce using rule 113
	'else'         reduce using rule 113
	'gate'         reduce using rule 113
	'if'           reduce using rule 113
	'let'          reduce using rule 113
	'not'          reduce using rule 113
	'of'           reduce using rule 113
	'then'         reduce using rule 113
	'with'         reduce using rule 113
	'}'            reduce using rule 113
	L_integ        reduce using rule 113
	L_Var          reduce using rule 113
	L_Lambda       reduce using rule 113


State 190

	List1 -> '(' List ')' .                             (rule 148)

	'!!'           reduce using rule 148
	'$'            reduce using rule 148
	'('            reduce using rule 148
	'()'           reduce using rule 148
	')'            reduce using rule 148
	'++'           reduce using rule 148
	','            reduce using rule 148
	'-'            reduce using rule 148
	'->'           reduce using rule 148
	'.'            reduce using rule 148
	':'            reduce using rule 148
	';'            reduce using rule 148
	'@+'           reduce using rule 148
	'@+i'          reduce using rule 148
	'@-'           reduce using rule 148
	'@-i'          reduce using rule 148
	'@0'           reduce using rule 148
	'@1'           reduce using rule 148
	'False'        reduce using rule 148
	'True'         reduce using rule 148
	'['            reduce using rule 148
	'[]'           reduce using rule 148
	']'            reduce using rule 148
	'case'         reduce using rule 148
	'else'         reduce using rule 148
	'gate'         reduce using rule 148
	'if'           reduce using rule 148
	'let'          reduce using rule 148
	'not'          reduce using rule 148
	'of'           reduce using rule 148
	'then'         reduce using rule 148
	'with'         reduce using rule 148
	'}'            reduce using rule 148
	L_integ        reduce using rule 148
	L_Var          reduce using rule 148
	L_Lambda       reduce using rule 148


State 191

	Term4 -> '(' Term ')' .                             (rule 115)

	'$'            reduce using rule 115
	'('            reduce using rule 115
	'()'           reduce using rule 115
	')'            reduce using rule 115
	','            reduce using rule 115
	'-'            reduce using rule 115
	'->'           reduce using rule 115
	'.'            reduce using rule 115
	':'            reduce using rule 115
	';'            reduce using rule 115
	'@+'           reduce using rule 115
	'@+i'          reduce using rule 115
	'@-'           reduce using rule 115
	'@-i'          reduce using rule 115
	'@0'           reduce using rule 115
	'@1'           reduce using rule 115
	'False'        reduce using rule 115
	'True'         reduce using rule 115
	'['            reduce using rule 115
	'[]'           reduce using rule 115
	']'            reduce using rule 115
	'case'         reduce using rule 115
	'else'         reduce using rule 115
	'gate'         reduce using rule 115
	'if'           reduce using rule 115
	'let'          reduce using rule 115
	'not'          reduce using rule 115
	'of'           reduce using rule 115
	'then'         reduce using rule 115
	'with'         reduce using rule 115
	'}'            reduce using rule 115
	L_integ        reduce using rule 115
	L_Var          reduce using rule 115
	L_Lambda       reduce using rule 115


State 192

	Term3 -> '(' Term ',' . ListTerm ')'                (rule 122)

	'('            shift, and enter state 65
	'()'           shift, and enter state 66
	'-'            shift, and enter state 67
	'@+'           shift, and enter state 68
	'@+i'          shift, and enter state 69
	'@-'           shift, and enter state 70
	'@-i'          shift, and enter state 71
	'@0'           shift, and enter state 72
	'@1'           shift, and enter state 73
	'False'        shift, and enter state 74
	'True'         shift, and enter state 75
	'['            shift, and enter state 76
	'[]'           shift, and enter state 77
	'case'         shift, and enter state 78
	'gate'         shift, and enter state 79
	'if'           shift, and enter state 80
	'let'          shift, and enter state 81
	'not'          shift, and enter state 82
	'with'         shift, and enter state 83
	L_integ        shift, and enter state 41
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 84

	Integer        goto state 46
	Var            goto state 47
	Lambda         goto state 48
	IntegerExpression1goto state 49
	IntegerExpression2goto state 50
	IntegerExpression3goto state 51
	IntegerExpressiongoto state 52
	BoolValue      goto state 53
	BoolExpression goto state 54
	BoolExpression1goto state 55
	BoolExpression2goto state 56
	BasisState     goto state 57
	ListTerm       goto state 251
	Term4          goto state 58
	Term3          goto state 59
	Term2          goto state 60
	Term1          goto state 61
	Term           goto state 249
	List1          goto state 63
	List           goto state 64

State 193

	BoolExpression2 -> '(' BoolExpression ')' .         (rule 33)

	'$'            reduce using rule 33
	'&&'           reduce using rule 33
	'('            reduce using rule 33
	'()'           reduce using rule 33
	')'            reduce using rule 33
	','            reduce using rule 33
	'-'            reduce using rule 33
	'->'           reduce using rule 33
	'.'            reduce using rule 33
	'/='           reduce using rule 33
	':'            reduce using rule 33
	';'            reduce using rule 33
	'=='           reduce using rule 33
	'@+'           reduce using rule 33
	'@+i'          reduce using rule 33
	'@-'           reduce using rule 33
	'@-i'          reduce using rule 33
	'@0'           reduce using rule 33
	'@1'           reduce using rule 33
	'False'        reduce using rule 33
	'True'         reduce using rule 33
	'['            reduce using rule 33
	'[]'           reduce using rule 33
	']'            reduce using rule 33
	'case'         reduce using rule 33
	'else'         reduce using rule 33
	'gate'         reduce using rule 33
	'if'           reduce using rule 33
	'let'          reduce using rule 33
	'not'          reduce using rule 33
	'of'           reduce using rule 33
	'then'         reduce using rule 33
	'with'         reduce using rule 33
	'||'           reduce using rule 33
	'}'            reduce using rule 33
	L_integ        reduce using rule 33
	L_Var          reduce using rule 33
	L_Lambda       reduce using rule 33


State 194

	IntegerExpression3 -> '(' IntegerExpression ')' .    (rule 15)

	'$'            reduce using rule 15
	'&&'           reduce using rule 15
	'('            reduce using rule 15
	'()'           reduce using rule 15
	')'            reduce using rule 15
	'*'            reduce using rule 15
	'+'            reduce using rule 15
	','            reduce using rule 15
	'-'            reduce using rule 15
	'->'           reduce using rule 15
	'.'            reduce using rule 15
	'/'            reduce using rule 15
	'/='           reduce using rule 15
	':'            reduce using rule 15
	';'            reduce using rule 15
	'<'            reduce using rule 15
	'<='           reduce using rule 15
	'=='           reduce using rule 15
	'>'            reduce using rule 15
	'>='           reduce using rule 15
	'@+'           reduce using rule 15
	'@+i'          reduce using rule 15
	'@-'           reduce using rule 15
	'@-i'          reduce using rule 15
	'@0'           reduce using rule 15
	'@1'           reduce using rule 15
	'False'        reduce using rule 15
	'True'         reduce using rule 15
	'['            reduce using rule 15
	'[]'           reduce using rule 15
	']'            reduce using rule 15
	'case'         reduce using rule 15
	'else'         reduce using rule 15
	'gate'         reduce using rule 15
	'if'           reduce using rule 15
	'let'          reduce using rule 15
	'not'          reduce using rule 15
	'of'           reduce using rule 15
	'then'         reduce using rule 15
	'with'         reduce using rule 15
	'||'           reduce using rule 15
	'}'            reduce using rule 15
	L_integ        reduce using rule 15
	L_Var          reduce using rule 15
	L_Lambda       reduce using rule 15


State 195

	Term3 -> '(' Var ',' . ListVar ')'                  (rule 123)
	Term2 -> Var ',' . ListVar                          (rule 131)
	Term1 -> Var ',' . ListVar '<-' Term ';' Term       (rule 139)

	L_Var          shift, and enter state 8

	Var            goto state 167
	ListVar        goto state 250

State 196

	IntegerExpression3 -> '(' IntegerExpression . ')'    (rule 15)

	')'            shift, and enter state 194


State 197

	List1 -> '[' Term ',' . ListTerm ']'                (rule 147)

	'('            shift, and enter state 65
	'()'           shift, and enter state 66
	'-'            shift, and enter state 67
	'@+'           shift, and enter state 68
	'@+i'          shift, and enter state 69
	'@-'           shift, and enter state 70
	'@-i'          shift, and enter state 71
	'@0'           shift, and enter state 72
	'@1'           shift, and enter state 73
	'False'        shift, and enter state 74
	'True'         shift, and enter state 75
	'['            shift, and enter state 76
	'[]'           shift, and enter state 77
	'case'         shift, and enter state 78
	'gate'         shift, and enter state 79
	'if'           shift, and enter state 80
	'let'          shift, and enter state 81
	'not'          shift, and enter state 82
	'with'         shift, and enter state 83
	L_integ        shift, and enter state 41
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 84

	Integer        goto state 46
	Var            goto state 47
	Lambda         goto state 48
	IntegerExpression1goto state 49
	IntegerExpression2goto state 50
	IntegerExpression3goto state 51
	IntegerExpressiongoto state 52
	BoolValue      goto state 53
	BoolExpression goto state 54
	BoolExpression1goto state 55
	BoolExpression2goto state 56
	BasisState     goto state 57
	ListTerm       goto state 248
	Term4          goto state 58
	Term3          goto state 59
	Term2          goto state 60
	Term1          goto state 61
	Term           goto state 249
	List1          goto state 63
	List           goto state 64

State 198

	List1 -> '[' Term ']' .                             (rule 146)

	'!!'           reduce using rule 146
	'$'            reduce using rule 146
	'('            reduce using rule 146
	'()'           reduce using rule 146
	')'            reduce using rule 146
	'++'           reduce using rule 146
	','            reduce using rule 146
	'-'            reduce using rule 146
	'->'           reduce using rule 146
	'.'            reduce using rule 146
	':'            reduce using rule 146
	';'            reduce using rule 146
	'@+'           reduce using rule 146
	'@+i'          reduce using rule 146
	'@-'           reduce using rule 146
	'@-i'          reduce using rule 146
	'@0'           reduce using rule 146
	'@1'           reduce using rule 146
	'False'        reduce using rule 146
	'True'         reduce using rule 146
	'['            reduce using rule 146
	'[]'           reduce using rule 146
	']'            reduce using rule 146
	'case'         reduce using rule 146
	'else'         reduce using rule 146
	'gate'         reduce using rule 146
	'if'           reduce using rule 146
	'let'          reduce using rule 146
	'not'          reduce using rule 146
	'of'           reduce using rule 146
	'then'         reduce using rule 146
	'with'         reduce using rule 146
	'}'            reduce using rule 146
	L_integ        reduce using rule 146
	L_Var          reduce using rule 146
	L_Lambda       reduce using rule 146


State 199

	Term1 -> 'case' Term 'of' . '{' ListCaseExpression '}'    (rule 140)

	'{'            shift, and enter state 247


State 200

	Gate -> 'U3' '(' . Angle ',' Angle ',' Angle ')'    (rule 81)

	L_doubl        shift, and enter state 2

	Double         goto state 202
	Angle          goto state 246

State 201

	Gate -> 'U2' '(' . Angle ',' Angle ')'              (rule 80)

	L_doubl        shift, and enter state 2

	Double         goto state 202
	Angle          goto state 245

State 202

	Angle -> Double .                                   (rule 50)

	'$'            reduce using rule 50
	'('            reduce using rule 50
	'()'           reduce using rule 50
	')'            reduce using rule 50
	','            reduce using rule 50
	'-'            reduce using rule 50
	'->'           reduce using rule 50
	'.'            reduce using rule 50
	':'            reduce using rule 50
	';'            reduce using rule 50
	'@+'           reduce using rule 50
	'@+i'          reduce using rule 50
	'@-'           reduce using rule 50
	'@-i'          reduce using rule 50
	'@0'           reduce using rule 50
	'@1'           reduce using rule 50
	'False'        reduce using rule 50
	'True'         reduce using rule 50
	'['            reduce using rule 50
	'[]'           reduce using rule 50
	']'            reduce using rule 50
	'case'         reduce using rule 50
	'else'         reduce using rule 50
	'gate'         reduce using rule 50
	'if'           reduce using rule 50
	'let'          reduce using rule 50
	'not'          reduce using rule 50
	'of'           reduce using rule 50
	'then'         reduce using rule 50
	'with'         reduce using rule 50
	'}'            reduce using rule 50
	L_integ        reduce using rule 50
	L_Var          reduce using rule 50
	L_Lambda       reduce using rule 50


State 203

	Gate -> 'U1' Angle .                                (rule 79)

	'$'            reduce using rule 79
	'('            reduce using rule 79
	'()'           reduce using rule 79
	')'            reduce using rule 79
	','            reduce using rule 79
	'-'            reduce using rule 79
	'->'           reduce using rule 79
	'.'            reduce using rule 79
	':'            reduce using rule 79
	';'            reduce using rule 79
	'@+'           reduce using rule 79
	'@+i'          reduce using rule 79
	'@-'           reduce using rule 79
	'@-i'          reduce using rule 79
	'@0'           reduce using rule 79
	'@1'           reduce using rule 79
	'False'        reduce using rule 79
	'True'         reduce using rule 79
	'['            reduce using rule 79
	'[]'           reduce using rule 79
	']'            reduce using rule 79
	'case'         reduce using rule 79
	'else'         reduce using rule 79
	'gate'         reduce using rule 79
	'if'           reduce using rule 79
	'let'          reduce using rule 79
	'not'          reduce using rule 79
	'of'           reduce using rule 79
	'then'         reduce using rule 79
	'with'         reduce using rule 79
	'}'            reduce using rule 79
	L_integ        reduce using rule 79
	L_Var          reduce using rule 79
	L_Lambda       reduce using rule 79


State 204

	Gate -> 'SWAP_THETA' Angle .                        (rule 87)

	'$'            reduce using rule 87
	'('            reduce using rule 87
	'()'           reduce using rule 87
	')'            reduce using rule 87
	','            reduce using rule 87
	'-'            reduce using rule 87
	'->'           reduce using rule 87
	'.'            reduce using rule 87
	':'            reduce using rule 87
	';'            reduce using rule 87
	'@+'           reduce using rule 87
	'@+i'          reduce using rule 87
	'@-'           reduce using rule 87
	'@-i'          reduce using rule 87
	'@0'           reduce using rule 87
	'@1'           reduce using rule 87
	'False'        reduce using rule 87
	'True'         reduce using rule 87
	'['            reduce using rule 87
	'[]'           reduce using rule 87
	']'            reduce using rule 87
	'case'         reduce using rule 87
	'else'         reduce using rule 87
	'gate'         reduce using rule 87
	'if'           reduce using rule 87
	'let'          reduce using rule 87
	'not'          reduce using rule 87
	'of'           reduce using rule 87
	'then'         reduce using rule 87
	'with'         reduce using rule 87
	'}'            reduce using rule 87
	L_integ        reduce using rule 87
	L_Var          reduce using rule 87
	L_Lambda       reduce using rule 87


State 205

	Gate -> 'RZ' Angle .                                (rule 78)

	'$'            reduce using rule 78
	'('            reduce using rule 78
	'()'           reduce using rule 78
	')'            reduce using rule 78
	','            reduce using rule 78
	'-'            reduce using rule 78
	'->'           reduce using rule 78
	'.'            reduce using rule 78
	':'            reduce using rule 78
	';'            reduce using rule 78
	'@+'           reduce using rule 78
	'@+i'          reduce using rule 78
	'@-'           reduce using rule 78
	'@-i'          reduce using rule 78
	'@0'           reduce using rule 78
	'@1'           reduce using rule 78
	'False'        reduce using rule 78
	'True'         reduce using rule 78
	'['            reduce using rule 78
	'[]'           reduce using rule 78
	']'            reduce using rule 78
	'case'         reduce using rule 78
	'else'         reduce using rule 78
	'gate'         reduce using rule 78
	'if'           reduce using rule 78
	'let'          reduce using rule 78
	'not'          reduce using rule 78
	'of'           reduce using rule 78
	'then'         reduce using rule 78
	'with'         reduce using rule 78
	'}'            reduce using rule 78
	L_integ        reduce using rule 78
	L_Var          reduce using rule 78
	L_Lambda       reduce using rule 78


State 206

	Gate -> 'RY' Angle .                                (rule 77)

	'$'            reduce using rule 77
	'('            reduce using rule 77
	'()'           reduce using rule 77
	')'            reduce using rule 77
	','            reduce using rule 77
	'-'            reduce using rule 77
	'->'           reduce using rule 77
	'.'            reduce using rule 77
	':'            reduce using rule 77
	';'            reduce using rule 77
	'@+'           reduce using rule 77
	'@+i'          reduce using rule 77
	'@-'           reduce using rule 77
	'@-i'          reduce using rule 77
	'@0'           reduce using rule 77
	'@1'           reduce using rule 77
	'False'        reduce using rule 77
	'True'         reduce using rule 77
	'['            reduce using rule 77
	'[]'           reduce using rule 77
	']'            reduce using rule 77
	'case'         reduce using rule 77
	'else'         reduce using rule 77
	'gate'         reduce using rule 77
	'if'           reduce using rule 77
	'let'          reduce using rule 77
	'not'          reduce using rule 77
	'of'           reduce using rule 77
	'then'         reduce using rule 77
	'with'         reduce using rule 77
	'}'            reduce using rule 77
	L_integ        reduce using rule 77
	L_Var          reduce using rule 77
	L_Lambda       reduce using rule 77


State 207

	Gate -> 'RX' Angle .                                (rule 76)

	'$'            reduce using rule 76
	'('            reduce using rule 76
	'()'           reduce using rule 76
	')'            reduce using rule 76
	','            reduce using rule 76
	'-'            reduce using rule 76
	'->'           reduce using rule 76
	'.'            reduce using rule 76
	':'            reduce using rule 76
	';'            reduce using rule 76
	'@+'           reduce using rule 76
	'@+i'          reduce using rule 76
	'@-'           reduce using rule 76
	'@-i'          reduce using rule 76
	'@0'           reduce using rule 76
	'@1'           reduce using rule 76
	'False'        reduce using rule 76
	'True'         reduce using rule 76
	'['            reduce using rule 76
	'[]'           reduce using rule 76
	']'            reduce using rule 76
	'case'         reduce using rule 76
	'else'         reduce using rule 76
	'gate'         reduce using rule 76
	'if'           reduce using rule 76
	'let'          reduce using rule 76
	'not'          reduce using rule 76
	'of'           reduce using rule 76
	'then'         reduce using rule 76
	'with'         reduce using rule 76
	'}'            reduce using rule 76
	L_integ        reduce using rule 76
	L_Var          reduce using rule 76
	L_Lambda       reduce using rule 76


State 208

	Gate -> 'ROOT_Z_DAG' Integer .                      (rule 67)

	'$'            reduce using rule 67
	'('            reduce using rule 67
	'()'           reduce using rule 67
	')'            reduce using rule 67
	','            reduce using rule 67
	'-'            reduce using rule 67
	'->'           reduce using rule 67
	'.'            reduce using rule 67
	':'            reduce using rule 67
	';'            reduce using rule 67
	'@+'           reduce using rule 67
	'@+i'          reduce using rule 67
	'@-'           reduce using rule 67
	'@-i'          reduce using rule 67
	'@0'           reduce using rule 67
	'@1'           reduce using rule 67
	'False'        reduce using rule 67
	'True'         reduce using rule 67
	'['            reduce using rule 67
	'[]'           reduce using rule 67
	']'            reduce using rule 67
	'case'         reduce using rule 67
	'else'         reduce using rule 67
	'gate'         reduce using rule 67
	'if'           reduce using rule 67
	'let'          reduce using rule 67
	'not'          reduce using rule 67
	'of'           reduce using rule 67
	'then'         reduce using rule 67
	'with'         reduce using rule 67
	'}'            reduce using rule 67
	L_integ        reduce using rule 67
	L_Var          reduce using rule 67
	L_Lambda       reduce using rule 67


State 209

	Gate -> 'ROOT_Z' Integer .                          (rule 66)

	'$'            reduce using rule 66
	'('            reduce using rule 66
	'()'           reduce using rule 66
	')'            reduce using rule 66
	','            reduce using rule 66
	'-'            reduce using rule 66
	'->'           reduce using rule 66
	'.'            reduce using rule 66
	':'            reduce using rule 66
	';'            reduce using rule 66
	'@+'           reduce using rule 66
	'@+i'          reduce using rule 66
	'@-'           reduce using rule 66
	'@-i'          reduce using rule 66
	'@0'           reduce using rule 66
	'@1'           reduce using rule 66
	'False'        reduce using rule 66
	'True'         reduce using rule 66
	'['            reduce using rule 66
	'[]'           reduce using rule 66
	']'            reduce using rule 66
	'case'         reduce using rule 66
	'else'         reduce using rule 66
	'gate'         reduce using rule 66
	'if'           reduce using rule 66
	'let'          reduce using rule 66
	'not'          reduce using rule 66
	'of'           reduce using rule 66
	'then'         reduce using rule 66
	'with'         reduce using rule 66
	'}'            reduce using rule 66
	L_integ        reduce using rule 66
	L_Var          reduce using rule 66
	L_Lambda       reduce using rule 66


State 210

	Gate -> 'ROOT_Y_DAG' Integer .                      (rule 65)

	'$'            reduce using rule 65
	'('            reduce using rule 65
	'()'           reduce using rule 65
	')'            reduce using rule 65
	','            reduce using rule 65
	'-'            reduce using rule 65
	'->'           reduce using rule 65
	'.'            reduce using rule 65
	':'            reduce using rule 65
	';'            reduce using rule 65
	'@+'           reduce using rule 65
	'@+i'          reduce using rule 65
	'@-'           reduce using rule 65
	'@-i'          reduce using rule 65
	'@0'           reduce using rule 65
	'@1'           reduce using rule 65
	'False'        reduce using rule 65
	'True'         reduce using rule 65
	'['            reduce using rule 65
	'[]'           reduce using rule 65
	']'            reduce using rule 65
	'case'         reduce using rule 65
	'else'         reduce using rule 65
	'gate'         reduce using rule 65
	'if'           reduce using rule 65
	'let'          reduce using rule 65
	'not'          reduce using rule 65
	'of'           reduce using rule 65
	'then'         reduce using rule 65
	'with'         reduce using rule 65
	'}'            reduce using rule 65
	L_integ        reduce using rule 65
	L_Var          reduce using rule 65
	L_Lambda       reduce using rule 65


State 211

	Gate -> 'ROOT_Y' Integer .                          (rule 64)

	'$'            reduce using rule 64
	'('            reduce using rule 64
	'()'           reduce using rule 64
	')'            reduce using rule 64
	','            reduce using rule 64
	'-'            reduce using rule 64
	'->'           reduce using rule 64
	'.'            reduce using rule 64
	':'            reduce using rule 64
	';'            reduce using rule 64
	'@+'           reduce using rule 64
	'@+i'          reduce using rule 64
	'@-'           reduce using rule 64
	'@-i'          reduce using rule 64
	'@0'           reduce using rule 64
	'@1'           reduce using rule 64
	'False'        reduce using rule 64
	'True'         reduce using rule 64
	'['            reduce using rule 64
	'[]'           reduce using rule 64
	']'            reduce using rule 64
	'case'         reduce using rule 64
	'else'         reduce using rule 64
	'gate'         reduce using rule 64
	'if'           reduce using rule 64
	'let'          reduce using rule 64
	'not'          reduce using rule 64
	'of'           reduce using rule 64
	'then'         reduce using rule 64
	'with'         reduce using rule 64
	'}'            reduce using rule 64
	L_integ        reduce using rule 64
	L_Var          reduce using rule 64
	L_Lambda       reduce using rule 64


State 212

	Gate -> 'ROOT_X_DAG' Integer .                      (rule 63)

	'$'            reduce using rule 63
	'('            reduce using rule 63
	'()'           reduce using rule 63
	')'            reduce using rule 63
	','            reduce using rule 63
	'-'            reduce using rule 63
	'->'           reduce using rule 63
	'.'            reduce using rule 63
	':'            reduce using rule 63
	';'            reduce using rule 63
	'@+'           reduce using rule 63
	'@+i'          reduce using rule 63
	'@-'           reduce using rule 63
	'@-i'          reduce using rule 63
	'@0'           reduce using rule 63
	'@1'           reduce using rule 63
	'False'        reduce using rule 63
	'True'         reduce using rule 63
	'['            reduce using rule 63
	'[]'           reduce using rule 63
	']'            reduce using rule 63
	'case'         reduce using rule 63
	'else'         reduce using rule 63
	'gate'         reduce using rule 63
	'if'           reduce using rule 63
	'let'          reduce using rule 63
	'not'          reduce using rule 63
	'of'           reduce using rule 63
	'then'         reduce using rule 63
	'with'         reduce using rule 63
	'}'            reduce using rule 63
	L_integ        reduce using rule 63
	L_Var          reduce using rule 63
	L_Lambda       reduce using rule 63


State 213

	Gate -> 'ROOT_X' Integer .                          (rule 62)

	'$'            reduce using rule 62
	'('            reduce using rule 62
	'()'           reduce using rule 62
	')'            reduce using rule 62
	','            reduce using rule 62
	'-'            reduce using rule 62
	'->'           reduce using rule 62
	'.'            reduce using rule 62
	':'            reduce using rule 62
	';'            reduce using rule 62
	'@+'           reduce using rule 62
	'@+i'          reduce using rule 62
	'@-'           reduce using rule 62
	'@-i'          reduce using rule 62
	'@0'           reduce using rule 62
	'@1'           reduce using rule 62
	'False'        reduce using rule 62
	'True'         reduce using rule 62
	'['            reduce using rule 62
	'[]'           reduce using rule 62
	']'            reduce using rule 62
	'case'         reduce using rule 62
	'else'         reduce using rule 62
	'gate'         reduce using rule 62
	'if'           reduce using rule 62
	'let'          reduce using rule 62
	'not'          reduce using rule 62
	'of'           reduce using rule 62
	'then'         reduce using rule 62
	'with'         reduce using rule 62
	'}'            reduce using rule 62
	L_integ        reduce using rule 62
	L_Var          reduce using rule 62
	L_Lambda       reduce using rule 62


State 214

	Gate -> 'ROOT_SWAP_DAG' Integer .                   (rule 89)

	'$'            reduce using rule 89
	'('            reduce using rule 89
	'()'           reduce using rule 89
	')'            reduce using rule 89
	','            reduce using rule 89
	'-'            reduce using rule 89
	'->'           reduce using rule 89
	'.'            reduce using rule 89
	':'            reduce using rule 89
	';'            reduce using rule 89
	'@+'           reduce using rule 89
	'@+i'          reduce using rule 89
	'@-'           reduce using rule 89
	'@-i'          reduce using rule 89
	'@0'           reduce using rule 89
	'@1'           reduce using rule 89
	'False'        reduce using rule 89
	'True'         reduce using rule 89
	'['            reduce using rule 89
	'[]'           reduce using rule 89
	']'            reduce using rule 89
	'case'         reduce using rule 89
	'else'         reduce using rule 89
	'gate'         reduce using rule 89
	'if'           reduce using rule 89
	'let'          reduce using rule 89
	'not'          reduce using rule 89
	'of'           reduce using rule 89
	'then'         reduce using rule 89
	'with'         reduce using rule 89
	'}'            reduce using rule 89
	L_integ        reduce using rule 89
	L_Var          reduce using rule 89
	L_Lambda       reduce using rule 89


State 215

	Gate -> 'ROOT_SWAP' Integer .                       (rule 88)

	'$'            reduce using rule 88
	'('            reduce using rule 88
	'()'           reduce using rule 88
	')'            reduce using rule 88
	','            reduce using rule 88
	'-'            reduce using rule 88
	'->'           reduce using rule 88
	'.'            reduce using rule 88
	':'            reduce using rule 88
	';'            reduce using rule 88
	'@+'           reduce using rule 88
	'@+i'          reduce using rule 88
	'@-'           reduce using rule 88
	'@-i'          reduce using rule 88
	'@0'           reduce using rule 88
	'@1'           reduce using rule 88
	'False'        reduce using rule 88
	'True'         reduce using rule 88
	'['            reduce using rule 88
	'[]'           reduce using rule 88
	']'            reduce using rule 88
	'case'         reduce using rule 88
	'else'         reduce using rule 88
	'gate'         reduce using rule 88
	'if'           reduce using rule 88
	'let'          reduce using rule 88
	'not'          reduce using rule 88
	'of'           reduce using rule 88
	'then'         reduce using rule 88
	'with'         reduce using rule 88
	'}'            reduce using rule 88
	L_integ        reduce using rule 88
	L_Var          reduce using rule 88
	L_Lambda       reduce using rule 88


State 216

	Gate -> 'QFT_DAG' Integer .                         (rule 91)

	'$'            reduce using rule 91
	'('            reduce using rule 91
	'()'           reduce using rule 91
	')'            reduce using rule 91
	','            reduce using rule 91
	'-'            reduce using rule 91
	'->'           reduce using rule 91
	'.'            reduce using rule 91
	':'            reduce using rule 91
	';'            reduce using rule 91
	'@+'           reduce using rule 91
	'@+i'          reduce using rule 91
	'@-'           reduce using rule 91
	'@-i'          reduce using rule 91
	'@0'           reduce using rule 91
	'@1'           reduce using rule 91
	'False'        reduce using rule 91
	'True'         reduce using rule 91
	'['            reduce using rule 91
	'[]'           reduce using rule 91
	']'            reduce using rule 91
	'case'         reduce using rule 91
	'else'         reduce using rule 91
	'gate'         reduce using rule 91
	'if'           reduce using rule 91
	'let'          reduce using rule 91
	'not'          reduce using rule 91
	'of'           reduce using rule 91
	'then'         reduce using rule 91
	'with'         reduce using rule 91
	'}'            reduce using rule 91
	L_integ        reduce using rule 91
	L_Var          reduce using rule 91
	L_Lambda       reduce using rule 91


State 217

	Gate -> 'QFT' Integer .                             (rule 90)

	'$'            reduce using rule 90
	'('            reduce using rule 90
	'()'           reduce using rule 90
	')'            reduce using rule 90
	','            reduce using rule 90
	'-'            reduce using rule 90
	'->'           reduce using rule 90
	'.'            reduce using rule 90
	':'            reduce using rule 90
	';'            reduce using rule 90
	'@+'           reduce using rule 90
	'@+i'          reduce using rule 90
	'@-'           reduce using rule 90
	'@-i'          reduce using rule 90
	'@0'           reduce using rule 90
	'@1'           reduce using rule 90
	'False'        reduce using rule 90
	'True'         reduce using rule 90
	'['            reduce using rule 90
	'[]'           reduce using rule 90
	']'            reduce using rule 90
	'case'         reduce using rule 90
	'else'         reduce using rule 90
	'gate'         reduce using rule 90
	'if'           reduce using rule 90
	'let'          reduce using rule 90
	'not'          reduce using rule 90
	'of'           reduce using rule 90
	'then'         reduce using rule 90
	'with'         reduce using rule 90
	'}'            reduce using rule 90
	L_integ        reduce using rule 90
	L_Var          reduce using rule 90
	L_Lambda       reduce using rule 90


State 218

	Gate -> GateVar Integer .                           (rule 95)

	'$'            reduce using rule 95
	'('            reduce using rule 95
	'()'           reduce using rule 95
	')'            reduce using rule 95
	','            reduce using rule 95
	'-'            reduce using rule 95
	'->'           reduce using rule 95
	'.'            reduce using rule 95
	':'            reduce using rule 95
	';'            reduce using rule 95
	'@+'           reduce using rule 95
	'@+i'          reduce using rule 95
	'@-'           reduce using rule 95
	'@-i'          reduce using rule 95
	'@0'           reduce using rule 95
	'@1'           reduce using rule 95
	'False'        reduce using rule 95
	'True'         reduce using rule 95
	'['            reduce using rule 95
	'[]'           reduce using rule 95
	']'            reduce using rule 95
	'case'         reduce using rule 95
	'else'         reduce using rule 95
	'gate'         reduce using rule 95
	'if'           reduce using rule 95
	'let'          reduce using rule 95
	'not'          reduce using rule 95
	'of'           reduce using rule 95
	'then'         reduce using rule 95
	'with'         reduce using rule 95
	'}'            reduce using rule 95
	L_integ        reduce using rule 95
	L_Var          reduce using rule 95
	L_Lambda       reduce using rule 95


State 219

	Gate -> GateVar Angle .                             (rule 94)

	'$'            reduce using rule 94
	'('            reduce using rule 94
	'()'           reduce using rule 94
	')'            reduce using rule 94
	','            reduce using rule 94
	'-'            reduce using rule 94
	'->'           reduce using rule 94
	'.'            reduce using rule 94
	':'            reduce using rule 94
	';'            reduce using rule 94
	'@+'           reduce using rule 94
	'@+i'          reduce using rule 94
	'@-'           reduce using rule 94
	'@-i'          reduce using rule 94
	'@0'           reduce using rule 94
	'@1'           reduce using rule 94
	'False'        reduce using rule 94
	'True'         reduce using rule 94
	'['            reduce using rule 94
	'[]'           reduce using rule 94
	']'            reduce using rule 94
	'case'         reduce using rule 94
	'else'         reduce using rule 94
	'gate'         reduce using rule 94
	'if'           reduce using rule 94
	'let'          reduce using rule 94
	'not'          reduce using rule 94
	'of'           reduce using rule 94
	'then'         reduce using rule 94
	'with'         reduce using rule 94
	'}'            reduce using rule 94
	L_integ        reduce using rule 94
	L_Var          reduce using rule 94
	L_Lambda       reduce using rule 94


State 220

	Gate -> GateVar '(' . Angle ',' Angle ',' Angle ')'    (rule 92)
	Gate -> GateVar '(' . Angle ',' Angle ')'           (rule 93)

	L_doubl        shift, and enter state 2

	Double         goto state 202
	Angle          goto state 244

State 221

	Term1 -> 'if' Term 'then' . Term 'else' Term        (rule 135)

	'('            shift, and enter state 65
	'()'           shift, and enter state 66
	'-'            shift, and enter state 67
	'@+'           shift, and enter state 68
	'@+i'          shift, and enter state 69
	'@-'           shift, and enter state 70
	'@-i'          shift, and enter state 71
	'@0'           shift, and enter state 72
	'@1'           shift, and enter state 73
	'False'        shift, and enter state 74
	'True'         shift, and enter state 75
	'['            shift, and enter state 76
	'[]'           shift, and enter state 77
	'case'         shift, and enter state 78
	'gate'         shift, and enter state 79
	'if'           shift, and enter state 80
	'let'          shift, and enter state 81
	'not'          shift, and enter state 82
	'with'         shift, and enter state 83
	L_integ        shift, and enter state 41
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 84

	Integer        goto state 46
	Var            goto state 47
	Lambda         goto state 48
	IntegerExpression1goto state 49
	IntegerExpression2goto state 50
	IntegerExpression3goto state 51
	IntegerExpressiongoto state 52
	BoolValue      goto state 53
	BoolExpression goto state 54
	BoolExpression1goto state 55
	BoolExpression2goto state 56
	BasisState     goto state 57
	Term4          goto state 58
	Term3          goto state 59
	Term2          goto state 60
	Term1          goto state 61
	Term           goto state 243
	List1          goto state 63
	List           goto state 64

State 222

	Term1 -> 'let' '{' Var . '=' Term '}' 'in' Term     (rule 136)

	'='            shift, and enter state 242


State 223

	Term1 -> 'let' '{' '(' . Var ',' ListVar ')' '=' Term '}' 'in' Term    (rule 137)

	L_Var          shift, and enter state 8

	Var            goto state 241

State 224

	BoolExpression -> BoolExpression . '&&' BoolExpression1    (rule 19)
	BoolExpression -> BoolExpression . '||' BoolExpression1    (rule 20)
	BoolExpression2 -> '(' BoolExpression . ')'         (rule 33)

	'&&'           shift, and enter state 151
	')'            shift, and enter state 193
	'||'           shift, and enter state 152


State 225

	ControlVars -> '[' Var . ',' ListVar ']'            (rule 110)
	Term3 -> Var .                                      (rule 121)
	Term2 -> Var . ',' ListVar                          (rule 131)
	Term1 -> Var . '<-' Term ';' Term                   (rule 138)
	Term1 -> Var . ',' ListVar '<-' Term ';' Term       (rule 139)

	'$'            reduce using rule 121
	'('            reduce using rule 121
	'()'           reduce using rule 121
	','            shift, and enter state 240
			(reduce using rule 121)

	'-'            reduce using rule 121
	'.'            reduce using rule 121
	':'            reduce using rule 121
	'<-'           shift, and enter state 165
	'@+'           reduce using rule 121
	'@+i'          reduce using rule 121
	'@-'           reduce using rule 121
	'@-i'          reduce using rule 121
	'@0'           reduce using rule 121
	'@1'           reduce using rule 121
	'False'        reduce using rule 121
	'True'         reduce using rule 121
	'['            reduce using rule 121
	'[]'           reduce using rule 121
	']'            reduce using rule 121
	'gate'         reduce using rule 121
	'not'          reduce using rule 121
	L_integ        reduce using rule 121
	L_Var          reduce using rule 121


State 226

	ControlTerm -> '[' Term . ']'                       (rule 107)
	ControlTerms -> '[' Term . ',' ListTerm ']'         (rule 108)

	','            shift, and enter state 238
	']'            shift, and enter state 239


State 227

	Term2 -> 'with' ControlVars 'ctrl' . ControlBasisStates    (rule 127)
	Term2 -> 'with' ControlVars 'ctrl' . ControlBits    (rule 130)

	'['            shift, and enter state 235

	ControlBasisStatesgoto state 236
	ControlBits    goto state 237

State 228

	Term2 -> 'with' ControlTerms 'ctrl' . ControlBasisStates    (rule 126)
	Term2 -> 'with' ControlTerms 'ctrl' . ControlBits    (rule 129)

	'['            shift, and enter state 235

	ControlBasisStatesgoto state 233
	ControlBits    goto state 234

State 229

	Term2 -> 'with' ControlTerm 'ctrl' . ControlBasisState    (rule 125)
	Term2 -> 'with' ControlTerm 'ctrl' . ControlBit     (rule 128)

	'['            shift, and enter state 232

	ControlBasisStategoto state 230
	ControlBit     goto state 231

State 230

	Term2 -> 'with' ControlTerm 'ctrl' ControlBasisState .    (rule 125)

	'$'            reduce using rule 125
	'('            reduce using rule 125
	'()'           reduce using rule 125
	')'            reduce using rule 125
	','            reduce using rule 125
	'-'            reduce using rule 125
	'->'           reduce using rule 125
	'.'            reduce using rule 125
	';'            reduce using rule 125
	'@+'           reduce using rule 125
	'@+i'          reduce using rule 125
	'@-'           reduce using rule 125
	'@-i'          reduce using rule 125
	'@0'           reduce using rule 125
	'@1'           reduce using rule 125
	'False'        reduce using rule 125
	'True'         reduce using rule 125
	'['            reduce using rule 125
	'[]'           reduce using rule 125
	']'            reduce using rule 125
	'case'         reduce using rule 125
	'else'         reduce using rule 125
	'gate'         reduce using rule 125
	'if'           reduce using rule 125
	'let'          reduce using rule 125
	'not'          reduce using rule 125
	'of'           reduce using rule 125
	'then'         reduce using rule 125
	'with'         reduce using rule 125
	'}'            reduce using rule 125
	L_integ        reduce using rule 125
	L_Var          reduce using rule 125
	L_Lambda       reduce using rule 125


State 231

	Term2 -> 'with' ControlTerm 'ctrl' ControlBit .     (rule 128)

	'$'            reduce using rule 128
	'('            reduce using rule 128
	'()'           reduce using rule 128
	')'            reduce using rule 128
	','            reduce using rule 128
	'-'            reduce using rule 128
	'->'           reduce using rule 128
	'.'            reduce using rule 128
	';'            reduce using rule 128
	'@+'           reduce using rule 128
	'@+i'          reduce using rule 128
	'@-'           reduce using rule 128
	'@-i'          reduce using rule 128
	'@0'           reduce using rule 128
	'@1'           reduce using rule 128
	'False'        reduce using rule 128
	'True'         reduce using rule 128
	'['            reduce using rule 128
	'[]'           reduce using rule 128
	']'            reduce using rule 128
	'case'         reduce using rule 128
	'else'         reduce using rule 128
	'gate'         reduce using rule 128
	'if'           reduce using rule 128
	'let'          reduce using rule 128
	'not'          reduce using rule 128
	'of'           reduce using rule 128
	'then'         reduce using rule 128
	'with'         reduce using rule 128
	'}'            reduce using rule 128
	L_integ        reduce using rule 128
	L_Var          reduce using rule 128
	L_Lambda       reduce using rule 128


State 232

	ControlBasisState -> '[' . BasisState ']'           (rule 99)
	ControlBit -> '[' . Integer ']'                     (rule 103)

	'@+'           shift, and enter state 68
	'@+i'          shift, and enter state 69
	'@-'           shift, and enter state 70
	'@-i'          shift, and enter state 71
	'@0'           shift, and enter state 72
	'@1'           shift, and enter state 73
	L_integ        shift, and enter state 41

	Integer        goto state 278
	BasisState     goto state 279

State 233

	Term2 -> 'with' ControlTerms 'ctrl' ControlBasisStates .    (rule 126)

	'$'            reduce using rule 126
	'('            reduce using rule 126
	'()'           reduce using rule 126
	')'            reduce using rule 126
	','            reduce using rule 126
	'-'            reduce using rule 126
	'->'           reduce using rule 126
	'.'            reduce using rule 126
	';'            reduce using rule 126
	'@+'           reduce using rule 126
	'@+i'          reduce using rule 126
	'@-'           reduce using rule 126
	'@-i'          reduce using rule 126
	'@0'           reduce using rule 126
	'@1'           reduce using rule 126
	'False'        reduce using rule 126
	'True'         reduce using rule 126
	'['            reduce using rule 126
	'[]'           reduce using rule 126
	']'            reduce using rule 126
	'case'         reduce using rule 126
	'else'         reduce using rule 126
	'gate'         reduce using rule 126
	'if'           reduce using rule 126
	'let'          reduce using rule 126
	'not'          reduce using rule 126
	'of'           reduce using rule 126
	'then'         reduce using rule 126
	'with'         reduce using rule 126
	'}'            reduce using rule 126
	L_integ        reduce using rule 126
	L_Var          reduce using rule 126
	L_Lambda       reduce using rule 126


State 234

	Term2 -> 'with' ControlTerms 'ctrl' ControlBits .    (rule 129)

	'$'            reduce using rule 129
	'('            reduce using rule 129
	'()'           reduce using rule 129
	')'            reduce using rule 129
	','            reduce using rule 129
	'-'            reduce using rule 129
	'->'           reduce using rule 129
	'.'            reduce using rule 129
	';'            reduce using rule 129
	'@+'           reduce using rule 129
	'@+i'          reduce using rule 129
	'@-'           reduce using rule 129
	'@-i'          reduce using rule 129
	'@0'           reduce using rule 129
	'@1'           reduce using rule 129
	'False'        reduce using rule 129
	'True'         reduce using rule 129
	'['            reduce using rule 129
	'[]'           reduce using rule 129
	']'            reduce using rule 129
	'case'         reduce using rule 129
	'else'         reduce using rule 129
	'gate'         reduce using rule 129
	'if'           reduce using rule 129
	'let'          reduce using rule 129
	'not'          reduce using rule 129
	'of'           reduce using rule 129
	'then'         reduce using rule 129
	'with'         reduce using rule 129
	'}'            reduce using rule 129
	L_integ        reduce using rule 129
	L_Var          reduce using rule 129
	L_Lambda       reduce using rule 129


State 235

	ControlBasisStates -> '[' . BasisState ',' ListBasisState ']'    (rule 100)
	ControlBits -> '[' . Integer ',' ListInteger ']'    (rule 104)

	'@+'           shift, and enter state 68
	'@+i'          shift, and enter state 69
	'@-'           shift, and enter state 70
	'@-i'          shift, and enter state 71
	'@0'           shift, and enter state 72
	'@1'           shift, and enter state 73
	L_integ        shift, and enter state 41

	Integer        goto state 276
	BasisState     goto state 277

State 236

	Term2 -> 'with' ControlVars 'ctrl' ControlBasisStates .    (rule 127)

	'$'            reduce using rule 127
	'('            reduce using rule 127
	'()'           reduce using rule 127
	')'            reduce using rule 127
	','            reduce using rule 127
	'-'            reduce using rule 127
	'->'           reduce using rule 127
	'.'            reduce using rule 127
	';'            reduce using rule 127
	'@+'           reduce using rule 127
	'@+i'          reduce using rule 127
	'@-'           reduce using rule 127
	'@-i'          reduce using rule 127
	'@0'           reduce using rule 127
	'@1'           reduce using rule 127
	'False'        reduce using rule 127
	'True'         reduce using rule 127
	'['            reduce using rule 127
	'[]'           reduce using rule 127
	']'            reduce using rule 127
	'case'         reduce using rule 127
	'else'         reduce using rule 127
	'gate'         reduce using rule 127
	'if'           reduce using rule 127
	'let'          reduce using rule 127
	'not'          reduce using rule 127
	'of'           reduce using rule 127
	'then'         reduce using rule 127
	'with'         reduce using rule 127
	'}'            reduce using rule 127
	L_integ        reduce using rule 127
	L_Var          reduce using rule 127
	L_Lambda       reduce using rule 127


State 237

	Term2 -> 'with' ControlVars 'ctrl' ControlBits .    (rule 130)

	'$'            reduce using rule 130
	'('            reduce using rule 130
	'()'           reduce using rule 130
	')'            reduce using rule 130
	','            reduce using rule 130
	'-'            reduce using rule 130
	'->'           reduce using rule 130
	'.'            reduce using rule 130
	';'            reduce using rule 130
	'@+'           reduce using rule 130
	'@+i'          reduce using rule 130
	'@-'           reduce using rule 130
	'@-i'          reduce using rule 130
	'@0'           reduce using rule 130
	'@1'           reduce using rule 130
	'False'        reduce using rule 130
	'True'         reduce using rule 130
	'['            reduce using rule 130
	'[]'           reduce using rule 130
	']'            reduce using rule 130
	'case'         reduce using rule 130
	'else'         reduce using rule 130
	'gate'         reduce using rule 130
	'if'           reduce using rule 130
	'let'          reduce using rule 130
	'not'          reduce using rule 130
	'of'           reduce using rule 130
	'then'         reduce using rule 130
	'with'         reduce using rule 130
	'}'            reduce using rule 130
	L_integ        reduce using rule 130
	L_Var          reduce using rule 130
	L_Lambda       reduce using rule 130


State 238

	ControlTerms -> '[' Term ',' . ListTerm ']'         (rule 108)

	'('            shift, and enter state 65
	'()'           shift, and enter state 66
	'-'            shift, and enter state 67
	'@+'           shift, and enter state 68
	'@+i'          shift, and enter state 69
	'@-'           shift, and enter state 70
	'@-i'          shift, and enter state 71
	'@0'           shift, and enter state 72
	'@1'           shift, and enter state 73
	'False'        shift, and enter state 74
	'True'         shift, and enter state 75
	'['            shift, and enter state 76
	'[]'           shift, and enter state 77
	'case'         shift, and enter state 78
	'gate'         shift, and enter state 79
	'if'           shift, and enter state 80
	'let'          shift, and enter state 81
	'not'          shift, and enter state 82
	'with'         shift, and enter state 83
	L_integ        shift, and enter state 41
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 84

	Integer        goto state 46
	Var            goto state 47
	Lambda         goto state 48
	IntegerExpression1goto state 49
	IntegerExpression2goto state 50
	IntegerExpression3goto state 51
	IntegerExpressiongoto state 52
	BoolValue      goto state 53
	BoolExpression goto state 54
	BoolExpression1goto state 55
	BoolExpression2goto state 56
	BasisState     goto state 57
	ListTerm       goto state 275
	Term4          goto state 58
	Term3          goto state 59
	Term2          goto state 60
	Term1          goto state 61
	Term           goto state 249
	List1          goto state 63
	List           goto state 64

State 239

	ControlTerm -> '[' Term ']' .                       (rule 107)

	'ctrl'         reduce using rule 107


State 240

	ControlVars -> '[' Var ',' . ListVar ']'            (rule 110)
	Term2 -> Var ',' . ListVar                          (rule 131)
	Term1 -> Var ',' . ListVar '<-' Term ';' Term       (rule 139)

	L_Var          shift, and enter state 8

	Var            goto state 167
	ListVar        goto state 274

State 241

	Term1 -> 'let' '{' '(' Var . ',' ListVar ')' '=' Term '}' 'in' Term    (rule 137)

	','            shift, and enter state 273


State 242

	Term1 -> 'let' '{' Var '=' . Term '}' 'in' Term     (rule 136)

	'('            shift, and enter state 65
	'()'           shift, and enter state 66
	'-'            shift, and enter state 67
	'@+'           shift, and enter state 68
	'@+i'          shift, and enter state 69
	'@-'           shift, and enter state 70
	'@-i'          shift, and enter state 71
	'@0'           shift, and enter state 72
	'@1'           shift, and enter state 73
	'False'        shift, and enter state 74
	'True'         shift, and enter state 75
	'['            shift, and enter state 76
	'[]'           shift, and enter state 77
	'case'         shift, and enter state 78
	'gate'         shift, and enter state 79
	'if'           shift, and enter state 80
	'let'          shift, and enter state 81
	'not'          shift, and enter state 82
	'with'         shift, and enter state 83
	L_integ        shift, and enter state 41
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 84

	Integer        goto state 46
	Var            goto state 47
	Lambda         goto state 48
	IntegerExpression1goto state 49
	IntegerExpression2goto state 50
	IntegerExpression3goto state 51
	IntegerExpressiongoto state 52
	BoolValue      goto state 53
	BoolExpression goto state 54
	BoolExpression1goto state 55
	BoolExpression2goto state 56
	BasisState     goto state 57
	Term4          goto state 58
	Term3          goto state 59
	Term2          goto state 60
	Term1          goto state 61
	Term           goto state 272
	List1          goto state 63
	List           goto state 64

State 243

	Term1 -> 'if' Term 'then' Term . 'else' Term        (rule 135)

	'else'         shift, and enter state 271


State 244

	Gate -> GateVar '(' Angle . ',' Angle ',' Angle ')'    (rule 92)
	Gate -> GateVar '(' Angle . ',' Angle ')'           (rule 93)

	','            shift, and enter state 270


State 245

	Gate -> 'U2' '(' Angle . ',' Angle ')'              (rule 80)

	','            shift, and enter state 269


State 246

	Gate -> 'U3' '(' Angle . ',' Angle ',' Angle ')'    (rule 81)

	','            shift, and enter state 268


State 247

	Term1 -> 'case' Term 'of' '{' . ListCaseExpression '}'    (rule 140)

	'('            shift, and enter state 65
	'()'           shift, and enter state 66
	'-'            shift, and enter state 67
	'@+'           shift, and enter state 68
	'@+i'          shift, and enter state 69
	'@-'           shift, and enter state 70
	'@-i'          shift, and enter state 71
	'@0'           shift, and enter state 72
	'@1'           shift, and enter state 73
	'False'        shift, and enter state 74
	'True'         shift, and enter state 75
	'['            shift, and enter state 76
	'[]'           shift, and enter state 77
	'case'         shift, and enter state 78
	'gate'         shift, and enter state 79
	'if'           shift, and enter state 80
	'let'          shift, and enter state 81
	'not'          shift, and enter state 82
	'with'         shift, and enter state 83
	L_integ        shift, and enter state 41
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 84

	Integer        goto state 46
	Var            goto state 47
	Lambda         goto state 48
	IntegerExpression1goto state 49
	IntegerExpression2goto state 50
	IntegerExpression3goto state 51
	IntegerExpressiongoto state 52
	BoolValue      goto state 53
	BoolExpression goto state 54
	BoolExpression1goto state 55
	BoolExpression2goto state 56
	BasisState     goto state 57
	Term4          goto state 58
	Term3          goto state 59
	Term2          goto state 60
	Term1          goto state 61
	Term           goto state 265
	List1          goto state 63
	List           goto state 64
	CaseExpression goto state 266
	ListCaseExpressiongoto state 267

State 248

	List1 -> '[' Term ',' ListTerm . ']'                (rule 147)

	']'            shift, and enter state 264


State 249

	ListTerm -> Term .                                  (rule 111)
	ListTerm -> Term . ',' ListTerm                     (rule 112)

	')'            reduce using rule 111
	','            shift, and enter state 263
	']'            reduce using rule 111


State 250

	Term3 -> '(' Var ',' ListVar . ')'                  (rule 123)
	Term2 -> Var ',' ListVar .                          (rule 131)
	Term1 -> Var ',' ListVar . '<-' Term ';' Term       (rule 139)

	'$'            reduce using rule 131
	'('            reduce using rule 131
	'()'           reduce using rule 131
	')'            shift, and enter state 262
			(reduce using rule 131)

	','            reduce using rule 131
	'-'            reduce using rule 131
	'.'            reduce using rule 131
	'<-'           shift, and enter state 254
	'@+'           reduce using rule 131
	'@+i'          reduce using rule 131
	'@-'           reduce using rule 131
	'@-i'          reduce using rule 131
	'@0'           reduce using rule 131
	'@1'           reduce using rule 131
	'False'        reduce using rule 131
	'True'         reduce using rule 131
	'['            reduce using rule 131
	'[]'           reduce using rule 131
	'gate'         reduce using rule 131
	'not'          reduce using rule 131
	L_integ        reduce using rule 131
	L_Var          reduce using rule 131


State 251

	Term3 -> '(' Term ',' ListTerm . ')'                (rule 122)

	')'            shift, and enter state 261


State 252

	List -> Term3 . ':' List1                           (rule 150)

	':'            shift, and enter state 148


State 253

	Term1 -> Lambda Var Type '.' . Term                 (rule 141)

	'('            shift, and enter state 65
	'()'           shift, and enter state 66
	'-'            shift, and enter state 67
	'@+'           shift, and enter state 68
	'@+i'          shift, and enter state 69
	'@-'           shift, and enter state 70
	'@-i'          shift, and enter state 71
	'@0'           shift, and enter state 72
	'@1'           shift, and enter state 73
	'False'        shift, and enter state 74
	'True'         shift, and enter state 75
	'['            shift, and enter state 76
	'[]'           shift, and enter state 77
	'case'         shift, and enter state 78
	'gate'         shift, and enter state 79
	'if'           shift, and enter state 80
	'let'          shift, and enter state 81
	'not'          shift, and enter state 82
	'with'         shift, and enter state 83
	L_integ        shift, and enter state 41
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 84

	Integer        goto state 46
	Var            goto state 47
	Lambda         goto state 48
	IntegerExpression1goto state 49
	IntegerExpression2goto state 50
	IntegerExpression3goto state 51
	IntegerExpressiongoto state 52
	BoolValue      goto state 53
	BoolExpression goto state 54
	BoolExpression1goto state 55
	BoolExpression2goto state 56
	BasisState     goto state 57
	Term4          goto state 58
	Term3          goto state 59
	Term2          goto state 60
	Term1          goto state 61
	Term           goto state 260
	List1          goto state 63
	List           goto state 64

State 254

	Term1 -> Var ',' ListVar '<-' . Term ';' Term       (rule 139)

	'('            shift, and enter state 65
	'()'           shift, and enter state 66
	'-'            shift, and enter state 67
	'@+'           shift, and enter state 68
	'@+i'          shift, and enter state 69
	'@-'           shift, and enter state 70
	'@-i'          shift, and enter state 71
	'@0'           shift, and enter state 72
	'@1'           shift, and enter state 73
	'False'        shift, and enter state 74
	'True'         shift, and enter state 75
	'['            shift, and enter state 76
	'[]'           shift, and enter state 77
	'case'         shift, and enter state 78
	'gate'         shift, and enter state 79
	'if'           shift, and enter state 80
	'let'          shift, and enter state 81
	'not'          shift, and enter state 82
	'with'         shift, and enter state 83
	L_integ        shift, and enter state 41
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 84

	Integer        goto state 46
	Var            goto state 47
	Lambda         goto state 48
	IntegerExpression1goto state 49
	IntegerExpression2goto state 50
	IntegerExpression3goto state 51
	IntegerExpressiongoto state 52
	BoolValue      goto state 53
	BoolExpression goto state 54
	BoolExpression1goto state 55
	BoolExpression2goto state 56
	BasisState     goto state 57
	Term4          goto state 58
	Term3          goto state 59
	Term2          goto state 60
	Term1          goto state 61
	Term           goto state 259
	List1          goto state 63
	List           goto state 64

State 255

	ListVar -> Var ',' . ListVar                        (rule 98)

	L_Var          shift, and enter state 8

	Var            goto state 167
	ListVar        goto state 258

State 256

	Term1 -> Var '<-' Term ';' . Term                   (rule 138)

	'('            shift, and enter state 65
	'()'           shift, and enter state 66
	'-'            shift, and enter state 67
	'@+'           shift, and enter state 68
	'@+i'          shift, and enter state 69
	'@-'           shift, and enter state 70
	'@-i'          shift, and enter state 71
	'@0'           shift, and enter state 72
	'@1'           shift, and enter state 73
	'False'        shift, and enter state 74
	'True'         shift, and enter state 75
	'['            shift, and enter state 76
	'[]'           shift, and enter state 77
	'case'         shift, and enter state 78
	'gate'         shift, and enter state 79
	'if'           shift, and enter state 80
	'let'          shift, and enter state 81
	'not'          shift, and enter state 82
	'with'         shift, and enter state 83
	L_integ        shift, and enter state 41
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 84

	Integer        goto state 46
	Var            goto state 47
	Lambda         goto state 48
	IntegerExpression1goto state 49
	IntegerExpression2goto state 50
	IntegerExpression3goto state 51
	IntegerExpressiongoto state 52
	BoolValue      goto state 53
	BoolExpression goto state 54
	BoolExpression1goto state 55
	BoolExpression2goto state 56
	BasisState     goto state 57
	Term4          goto state 58
	Term3          goto state 59
	Term2          goto state 60
	Term1          goto state 61
	Term           goto state 257
	List1          goto state 63
	List           goto state 64

State 257

	Term1 -> Var '<-' Term ';' Term .                   (rule 138)

	'$'            reduce using rule 138
	'('            reduce using rule 138
	'()'           reduce using rule 138
	')'            reduce using rule 138
	','            reduce using rule 138
	'-'            reduce using rule 138
	'->'           reduce using rule 138
	';'            reduce using rule 138
	'@+'           reduce using rule 138
	'@+i'          reduce using rule 138
	'@-'           reduce using rule 138
	'@-i'          reduce using rule 138
	'@0'           reduce using rule 138
	'@1'           reduce using rule 138
	'False'        reduce using rule 138
	'True'         reduce using rule 138
	'['            reduce using rule 138
	'[]'           reduce using rule 138
	']'            reduce using rule 138
	'case'         reduce using rule 138
	'else'         reduce using rule 138
	'gate'         reduce using rule 138
	'if'           reduce using rule 138
	'let'          reduce using rule 138
	'not'          reduce using rule 138
	'of'           reduce using rule 138
	'then'         reduce using rule 138
	'with'         reduce using rule 138
	'}'            reduce using rule 138
	L_integ        reduce using rule 138
	L_Var          reduce using rule 138
	L_Lambda       reduce using rule 138


State 258

	ListVar -> Var ',' ListVar .                        (rule 98)

	'$'            reduce using rule 98
	'('            reduce using rule 98
	'()'           reduce using rule 98
	')'            reduce using rule 98
	','            reduce using rule 98
	'-'            reduce using rule 98
	'->'           reduce using rule 98
	'.'            reduce using rule 98
	';'            reduce using rule 98
	'<-'           reduce using rule 98
	'@+'           reduce using rule 98
	'@+i'          reduce using rule 98
	'@-'           reduce using rule 98
	'@-i'          reduce using rule 98
	'@0'           reduce using rule 98
	'@1'           reduce using rule 98
	'False'        reduce using rule 98
	'True'         reduce using rule 98
	'['            reduce using rule 98
	'[]'           reduce using rule 98
	']'            reduce using rule 98
	'case'         reduce using rule 98
	'else'         reduce using rule 98
	'gate'         reduce using rule 98
	'if'           reduce using rule 98
	'let'          reduce using rule 98
	'not'          reduce using rule 98
	'of'           reduce using rule 98
	'then'         reduce using rule 98
	'with'         reduce using rule 98
	'}'            reduce using rule 98
	L_integ        reduce using rule 98
	L_Var          reduce using rule 98
	L_Lambda       reduce using rule 98


State 259

	Term1 -> Var ',' ListVar '<-' Term . ';' Term       (rule 139)

	';'            shift, and enter state 297


State 260

	Term1 -> Lambda Var Type '.' Term .                 (rule 141)

	'$'            reduce using rule 141
	'('            reduce using rule 141
	'()'           reduce using rule 141
	')'            reduce using rule 141
	','            reduce using rule 141
	'-'            reduce using rule 141
	'->'           reduce using rule 141
	';'            reduce using rule 141
	'@+'           reduce using rule 141
	'@+i'          reduce using rule 141
	'@-'           reduce using rule 141
	'@-i'          reduce using rule 141
	'@0'           reduce using rule 141
	'@1'           reduce using rule 141
	'False'        reduce using rule 141
	'True'         reduce using rule 141
	'['            reduce using rule 141
	'[]'           reduce using rule 141
	']'            reduce using rule 141
	'case'         reduce using rule 141
	'else'         reduce using rule 141
	'gate'         reduce using rule 141
	'if'           reduce using rule 141
	'let'          reduce using rule 141
	'not'          reduce using rule 141
	'of'           reduce using rule 141
	'then'         reduce using rule 141
	'with'         reduce using rule 141
	'}'            reduce using rule 141
	L_integ        reduce using rule 141
	L_Var          reduce using rule 141
	L_Lambda       reduce using rule 141


State 261

	Term3 -> '(' Term ',' ListTerm ')' .                (rule 122)

	'$'            reduce using rule 122
	'('            reduce using rule 122
	'()'           reduce using rule 122
	')'            reduce using rule 122
	','            reduce using rule 122
	'-'            reduce using rule 122
	'->'           reduce using rule 122
	'.'            reduce using rule 122
	':'            reduce using rule 122
	';'            reduce using rule 122
	'@+'           reduce using rule 122
	'@+i'          reduce using rule 122
	'@-'           reduce using rule 122
	'@-i'          reduce using rule 122
	'@0'           reduce using rule 122
	'@1'           reduce using rule 122
	'False'        reduce using rule 122
	'True'         reduce using rule 122
	'['            reduce using rule 122
	'[]'           reduce using rule 122
	']'            reduce using rule 122
	'case'         reduce using rule 122
	'else'         reduce using rule 122
	'gate'         reduce using rule 122
	'if'           reduce using rule 122
	'let'          reduce using rule 122
	'not'          reduce using rule 122
	'of'           reduce using rule 122
	'then'         reduce using rule 122
	'with'         reduce using rule 122
	'}'            reduce using rule 122
	L_integ        reduce using rule 122
	L_Var          reduce using rule 122
	L_Lambda       reduce using rule 122


State 262

	Term3 -> '(' Var ',' ListVar ')' .                  (rule 123)

	'$'            reduce using rule 123
	'('            reduce using rule 123
	'()'           reduce using rule 123
	')'            reduce using rule 123
	','            reduce using rule 123
	'-'            reduce using rule 123
	'->'           reduce using rule 123
	'.'            reduce using rule 123
	':'            reduce using rule 123
	';'            reduce using rule 123
	'@+'           reduce using rule 123
	'@+i'          reduce using rule 123
	'@-'           reduce using rule 123
	'@-i'          reduce using rule 123
	'@0'           reduce using rule 123
	'@1'           reduce using rule 123
	'False'        reduce using rule 123
	'True'         reduce using rule 123
	'['            reduce using rule 123
	'[]'           reduce using rule 123
	']'            reduce using rule 123
	'case'         reduce using rule 123
	'else'         reduce using rule 123
	'gate'         reduce using rule 123
	'if'           reduce using rule 123
	'let'          reduce using rule 123
	'not'          reduce using rule 123
	'of'           reduce using rule 123
	'then'         reduce using rule 123
	'with'         reduce using rule 123
	'}'            reduce using rule 123
	L_integ        reduce using rule 123
	L_Var          reduce using rule 123
	L_Lambda       reduce using rule 123


State 263

	ListTerm -> Term ',' . ListTerm                     (rule 112)

	'('            shift, and enter state 65
	'()'           shift, and enter state 66
	'-'            shift, and enter state 67
	'@+'           shift, and enter state 68
	'@+i'          shift, and enter state 69
	'@-'           shift, and enter state 70
	'@-i'          shift, and enter state 71
	'@0'           shift, and enter state 72
	'@1'           shift, and enter state 73
	'False'        shift, and enter state 74
	'True'         shift, and enter state 75
	'['            shift, and enter state 76
	'[]'           shift, and enter state 77
	'case'         shift, and enter state 78
	'gate'         shift, and enter state 79
	'if'           shift, and enter state 80
	'let'          shift, and enter state 81
	'not'          shift, and enter state 82
	'with'         shift, and enter state 83
	L_integ        shift, and enter state 41
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 84

	Integer        goto state 46
	Var            goto state 47
	Lambda         goto state 48
	IntegerExpression1goto state 49
	IntegerExpression2goto state 50
	IntegerExpression3goto state 51
	IntegerExpressiongoto state 52
	BoolValue      goto state 53
	BoolExpression goto state 54
	BoolExpression1goto state 55
	BoolExpression2goto state 56
	BasisState     goto state 57
	ListTerm       goto state 296
	Term4          goto state 58
	Term3          goto state 59
	Term2          goto state 60
	Term1          goto state 61
	Term           goto state 249
	List1          goto state 63
	List           goto state 64

State 264

	List1 -> '[' Term ',' ListTerm ']' .                (rule 147)

	'!!'           reduce using rule 147
	'$'            reduce using rule 147
	'('            reduce using rule 147
	'()'           reduce using rule 147
	')'            reduce using rule 147
	'++'           reduce using rule 147
	','            reduce using rule 147
	'-'            reduce using rule 147
	'->'           reduce using rule 147
	'.'            reduce using rule 147
	':'            reduce using rule 147
	';'            reduce using rule 147
	'@+'           reduce using rule 147
	'@+i'          reduce using rule 147
	'@-'           reduce using rule 147
	'@-i'          reduce using rule 147
	'@0'           reduce using rule 147
	'@1'           reduce using rule 147
	'False'        reduce using rule 147
	'True'         reduce using rule 147
	'['            reduce using rule 147
	'[]'           reduce using rule 147
	']'            reduce using rule 147
	'case'         reduce using rule 147
	'else'         reduce using rule 147
	'gate'         reduce using rule 147
	'if'           reduce using rule 147
	'let'          reduce using rule 147
	'not'          reduce using rule 147
	'of'           reduce using rule 147
	'then'         reduce using rule 147
	'with'         reduce using rule 147
	'}'            reduce using rule 147
	L_integ        reduce using rule 147
	L_Var          reduce using rule 147
	L_Lambda       reduce using rule 147


State 265

	CaseExpression -> Term . '->' Term                  (rule 152)

	'->'           shift, and enter state 295


State 266

	CaseExpression -> CaseExpression . ';'              (rule 153)
	ListCaseExpression -> CaseExpression .              (rule 154)
	ListCaseExpression -> CaseExpression . ListCaseExpression    (rule 155)

	'('            shift, and enter state 65
	'()'           shift, and enter state 66
	'-'            shift, and enter state 67
	';'            shift, and enter state 294
	'@+'           shift, and enter state 68
	'@+i'          shift, and enter state 69
	'@-'           shift, and enter state 70
	'@-i'          shift, and enter state 71
	'@0'           shift, and enter state 72
	'@1'           shift, and enter state 73
	'False'        shift, and enter state 74
	'True'         shift, and enter state 75
	'['            shift, and enter state 76
	'[]'           shift, and enter state 77
	'case'         shift, and enter state 78
	'gate'         shift, and enter state 79
	'if'           shift, and enter state 80
	'let'          shift, and enter state 81
	'not'          shift, and enter state 82
	'with'         shift, and enter state 83
	'}'            reduce using rule 154
	L_integ        shift, and enter state 41
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 84

	Integer        goto state 46
	Var            goto state 47
	Lambda         goto state 48
	IntegerExpression1goto state 49
	IntegerExpression2goto state 50
	IntegerExpression3goto state 51
	IntegerExpressiongoto state 52
	BoolValue      goto state 53
	BoolExpression goto state 54
	BoolExpression1goto state 55
	BoolExpression2goto state 56
	BasisState     goto state 57
	Term4          goto state 58
	Term3          goto state 59
	Term2          goto state 60
	Term1          goto state 61
	Term           goto state 265
	List1          goto state 63
	List           goto state 64
	CaseExpression goto state 266
	ListCaseExpressiongoto state 293

State 267

	Term1 -> 'case' Term 'of' '{' ListCaseExpression . '}'    (rule 140)

	'}'            shift, and enter state 292


State 268

	Gate -> 'U3' '(' Angle ',' . Angle ',' Angle ')'    (rule 81)

	L_doubl        shift, and enter state 2

	Double         goto state 202
	Angle          goto state 291

State 269

	Gate -> 'U2' '(' Angle ',' . Angle ')'              (rule 80)

	L_doubl        shift, and enter state 2

	Double         goto state 202
	Angle          goto state 290

State 270

	Gate -> GateVar '(' Angle ',' . Angle ',' Angle ')'    (rule 92)
	Gate -> GateVar '(' Angle ',' . Angle ')'           (rule 93)

	L_doubl        shift, and enter state 2

	Double         goto state 202
	Angle          goto state 289

State 271

	Term1 -> 'if' Term 'then' Term 'else' . Term        (rule 135)

	'('            shift, and enter state 65
	'()'           shift, and enter state 66
	'-'            shift, and enter state 67
	'@+'           shift, and enter state 68
	'@+i'          shift, and enter state 69
	'@-'           shift, and enter state 70
	'@-i'          shift, and enter state 71
	'@0'           shift, and enter state 72
	'@1'           shift, and enter state 73
	'False'        shift, and enter state 74
	'True'         shift, and enter state 75
	'['            shift, and enter state 76
	'[]'           shift, and enter state 77
	'case'         shift, and enter state 78
	'gate'         shift, and enter state 79
	'if'           shift, and enter state 80
	'let'          shift, and enter state 81
	'not'          shift, and enter state 82
	'with'         shift, and enter state 83
	L_integ        shift, and enter state 41
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 84

	Integer        goto state 46
	Var            goto state 47
	Lambda         goto state 48
	IntegerExpression1goto state 49
	IntegerExpression2goto state 50
	IntegerExpression3goto state 51
	IntegerExpressiongoto state 52
	BoolValue      goto state 53
	BoolExpression goto state 54
	BoolExpression1goto state 55
	BoolExpression2goto state 56
	BasisState     goto state 57
	Term4          goto state 58
	Term3          goto state 59
	Term2          goto state 60
	Term1          goto state 61
	Term           goto state 288
	List1          goto state 63
	List           goto state 64

State 272

	Term1 -> 'let' '{' Var '=' Term . '}' 'in' Term     (rule 136)

	'}'            shift, and enter state 287


State 273

	Term1 -> 'let' '{' '(' Var ',' . ListVar ')' '=' Term '}' 'in' Term    (rule 137)

	L_Var          shift, and enter state 8

	Var            goto state 167
	ListVar        goto state 286

State 274

	ControlVars -> '[' Var ',' ListVar . ']'            (rule 110)
	Term2 -> Var ',' ListVar .                          (rule 131)
	Term1 -> Var ',' ListVar . '<-' Term ';' Term       (rule 139)

	'$'            reduce using rule 131
	'('            reduce using rule 131
	'()'           reduce using rule 131
	','            reduce using rule 131
	'-'            reduce using rule 131
	'.'            reduce using rule 131
	'<-'           shift, and enter state 254
	'@+'           reduce using rule 131
	'@+i'          reduce using rule 131
	'@-'           reduce using rule 131
	'@-i'          reduce using rule 131
	'@0'           reduce using rule 131
	'@1'           reduce using rule 131
	'False'        reduce using rule 131
	'True'         reduce using rule 131
	'['            reduce using rule 131
	'[]'           reduce using rule 131
	']'            shift, and enter state 285
			(reduce using rule 131)

	'gate'         reduce using rule 131
	'not'          reduce using rule 131
	L_integ        reduce using rule 131
	L_Var          reduce using rule 131


State 275

	ControlTerms -> '[' Term ',' ListTerm . ']'         (rule 108)

	']'            shift, and enter state 284


State 276

	ControlBits -> '[' Integer . ',' ListInteger ']'    (rule 104)

	','            shift, and enter state 283


State 277

	ControlBasisStates -> '[' BasisState . ',' ListBasisState ']'    (rule 100)

	','            shift, and enter state 282


State 278

	ControlBit -> '[' Integer . ']'                     (rule 103)

	']'            shift, and enter state 281


State 279

	ControlBasisState -> '[' BasisState . ']'           (rule 99)

	']'            shift, and enter state 280


State 280

	ControlBasisState -> '[' BasisState ']' .           (rule 99)

	'$'            reduce using rule 99
	'('            reduce using rule 99
	'()'           reduce using rule 99
	')'            reduce using rule 99
	','            reduce using rule 99
	'-'            reduce using rule 99
	'->'           reduce using rule 99
	'.'            reduce using rule 99
	';'            reduce using rule 99
	'@+'           reduce using rule 99
	'@+i'          reduce using rule 99
	'@-'           reduce using rule 99
	'@-i'          reduce using rule 99
	'@0'           reduce using rule 99
	'@1'           reduce using rule 99
	'False'        reduce using rule 99
	'True'         reduce using rule 99
	'['            reduce using rule 99
	'[]'           reduce using rule 99
	']'            reduce using rule 99
	'case'         reduce using rule 99
	'else'         reduce using rule 99
	'gate'         reduce using rule 99
	'if'           reduce using rule 99
	'let'          reduce using rule 99
	'not'          reduce using rule 99
	'of'           reduce using rule 99
	'then'         reduce using rule 99
	'with'         reduce using rule 99
	'}'            reduce using rule 99
	L_integ        reduce using rule 99
	L_Var          reduce using rule 99
	L_Lambda       reduce using rule 99


State 281

	ControlBit -> '[' Integer ']' .                     (rule 103)

	'$'            reduce using rule 103
	'('            reduce using rule 103
	'()'           reduce using rule 103
	')'            reduce using rule 103
	','            reduce using rule 103
	'-'            reduce using rule 103
	'->'           reduce using rule 103
	'.'            reduce using rule 103
	';'            reduce using rule 103
	'@+'           reduce using rule 103
	'@+i'          reduce using rule 103
	'@-'           reduce using rule 103
	'@-i'          reduce using rule 103
	'@0'           reduce using rule 103
	'@1'           reduce using rule 103
	'False'        reduce using rule 103
	'True'         reduce using rule 103
	'['            reduce using rule 103
	'[]'           reduce using rule 103
	']'            reduce using rule 103
	'case'         reduce using rule 103
	'else'         reduce using rule 103
	'gate'         reduce using rule 103
	'if'           reduce using rule 103
	'let'          reduce using rule 103
	'not'          reduce using rule 103
	'of'           reduce using rule 103
	'then'         reduce using rule 103
	'with'         reduce using rule 103
	'}'            reduce using rule 103
	L_integ        reduce using rule 103
	L_Var          reduce using rule 103
	L_Lambda       reduce using rule 103


State 282

	ControlBasisStates -> '[' BasisState ',' . ListBasisState ']'    (rule 100)

	'@+'           shift, and enter state 68
	'@+i'          shift, and enter state 69
	'@-'           shift, and enter state 70
	'@-i'          shift, and enter state 71
	'@0'           shift, and enter state 72
	'@1'           shift, and enter state 73

	BasisState     goto state 308
	ListBasisState goto state 309

State 283

	ControlBits -> '[' Integer ',' . ListInteger ']'    (rule 104)

	L_integ        shift, and enter state 41

	Integer        goto state 306
	ListInteger    goto state 307

State 284

	ControlTerms -> '[' Term ',' ListTerm ']' .         (rule 108)

	'ctrl'         reduce using rule 108


State 285

	ControlVars -> '[' Var ',' ListVar ']' .            (rule 110)

	'ctrl'         reduce using rule 110


State 286

	Term1 -> 'let' '{' '(' Var ',' ListVar . ')' '=' Term '}' 'in' Term    (rule 137)

	')'            shift, and enter state 305


State 287

	Term1 -> 'let' '{' Var '=' Term '}' . 'in' Term     (rule 136)

	'in'           shift, and enter state 304


State 288

	Term1 -> 'if' Term 'then' Term 'else' Term .        (rule 135)

	'$'            reduce using rule 135
	'('            reduce using rule 135
	'()'           reduce using rule 135
	')'            reduce using rule 135
	','            reduce using rule 135
	'-'            reduce using rule 135
	'->'           reduce using rule 135
	';'            reduce using rule 135
	'@+'           reduce using rule 135
	'@+i'          reduce using rule 135
	'@-'           reduce using rule 135
	'@-i'          reduce using rule 135
	'@0'           reduce using rule 135
	'@1'           reduce using rule 135
	'False'        reduce using rule 135
	'True'         reduce using rule 135
	'['            reduce using rule 135
	'[]'           reduce using rule 135
	']'            reduce using rule 135
	'case'         reduce using rule 135
	'else'         reduce using rule 135
	'gate'         reduce using rule 135
	'if'           reduce using rule 135
	'let'          reduce using rule 135
	'not'          reduce using rule 135
	'of'           reduce using rule 135
	'then'         reduce using rule 135
	'with'         reduce using rule 135
	'}'            reduce using rule 135
	L_integ        reduce using rule 135
	L_Var          reduce using rule 135
	L_Lambda       reduce using rule 135


State 289

	Gate -> GateVar '(' Angle ',' Angle . ',' Angle ')'    (rule 92)
	Gate -> GateVar '(' Angle ',' Angle . ')'           (rule 93)

	')'            shift, and enter state 302
	','            shift, and enter state 303


State 290

	Gate -> 'U2' '(' Angle ',' Angle . ')'              (rule 80)

	')'            shift, and enter state 301


State 291

	Gate -> 'U3' '(' Angle ',' Angle . ',' Angle ')'    (rule 81)

	','            shift, and enter state 300


State 292

	Term1 -> 'case' Term 'of' '{' ListCaseExpression '}' .    (rule 140)

	'$'            reduce using rule 140
	'('            reduce using rule 140
	'()'           reduce using rule 140
	')'            reduce using rule 140
	','            reduce using rule 140
	'-'            reduce using rule 140
	'->'           reduce using rule 140
	';'            reduce using rule 140
	'@+'           reduce using rule 140
	'@+i'          reduce using rule 140
	'@-'           reduce using rule 140
	'@-i'          reduce using rule 140
	'@0'           reduce using rule 140
	'@1'           reduce using rule 140
	'False'        reduce using rule 140
	'True'         reduce using rule 140
	'['            reduce using rule 140
	'[]'           reduce using rule 140
	']'            reduce using rule 140
	'case'         reduce using rule 140
	'else'         reduce using rule 140
	'gate'         reduce using rule 140
	'if'           reduce using rule 140
	'let'          reduce using rule 140
	'not'          reduce using rule 140
	'of'           reduce using rule 140
	'then'         reduce using rule 140
	'with'         reduce using rule 140
	'}'            reduce using rule 140
	L_integ        reduce using rule 140
	L_Var          reduce using rule 140
	L_Lambda       reduce using rule 140


State 293

	ListCaseExpression -> CaseExpression ListCaseExpression .    (rule 155)

	'}'            reduce using rule 155


State 294

	CaseExpression -> CaseExpression ';' .              (rule 153)

	'('            reduce using rule 153
	'()'           reduce using rule 153
	'-'            reduce using rule 153
	';'            reduce using rule 153
	'@+'           reduce using rule 153
	'@+i'          reduce using rule 153
	'@-'           reduce using rule 153
	'@-i'          reduce using rule 153
	'@0'           reduce using rule 153
	'@1'           reduce using rule 153
	'False'        reduce using rule 153
	'True'         reduce using rule 153
	'['            reduce using rule 153
	'[]'           reduce using rule 153
	'case'         reduce using rule 153
	'gate'         reduce using rule 153
	'if'           reduce using rule 153
	'let'          reduce using rule 153
	'not'          reduce using rule 153
	'with'         reduce using rule 153
	'}'            reduce using rule 153
	L_integ        reduce using rule 153
	L_Var          reduce using rule 153
	L_Lambda       reduce using rule 153


State 295

	CaseExpression -> Term '->' . Term                  (rule 152)

	'('            shift, and enter state 65
	'()'           shift, and enter state 66
	'-'            shift, and enter state 67
	'@+'           shift, and enter state 68
	'@+i'          shift, and enter state 69
	'@-'           shift, and enter state 70
	'@-i'          shift, and enter state 71
	'@0'           shift, and enter state 72
	'@1'           shift, and enter state 73
	'False'        shift, and enter state 74
	'True'         shift, and enter state 75
	'['            shift, and enter state 76
	'[]'           shift, and enter state 77
	'case'         shift, and enter state 78
	'gate'         shift, and enter state 79
	'if'           shift, and enter state 80
	'let'          shift, and enter state 81
	'not'          shift, and enter state 82
	'with'         shift, and enter state 83
	L_integ        shift, and enter state 41
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 84

	Integer        goto state 46
	Var            goto state 47
	Lambda         goto state 48
	IntegerExpression1goto state 49
	IntegerExpression2goto state 50
	IntegerExpression3goto state 51
	IntegerExpressiongoto state 52
	BoolValue      goto state 53
	BoolExpression goto state 54
	BoolExpression1goto state 55
	BoolExpression2goto state 56
	BasisState     goto state 57
	Term4          goto state 58
	Term3          goto state 59
	Term2          goto state 60
	Term1          goto state 61
	Term           goto state 299
	List1          goto state 63
	List           goto state 64

State 296

	ListTerm -> Term ',' ListTerm .                     (rule 112)

	')'            reduce using rule 112
	']'            reduce using rule 112


State 297

	Term1 -> Var ',' ListVar '<-' Term ';' . Term       (rule 139)

	'('            shift, and enter state 65
	'()'           shift, and enter state 66
	'-'            shift, and enter state 67
	'@+'           shift, and enter state 68
	'@+i'          shift, and enter state 69
	'@-'           shift, and enter state 70
	'@-i'          shift, and enter state 71
	'@0'           shift, and enter state 72
	'@1'           shift, and enter state 73
	'False'        shift, and enter state 74
	'True'         shift, and enter state 75
	'['            shift, and enter state 76
	'[]'           shift, and enter state 77
	'case'         shift, and enter state 78
	'gate'         shift, and enter state 79
	'if'           shift, and enter state 80
	'let'          shift, and enter state 81
	'not'          shift, and enter state 82
	'with'         shift, and enter state 83
	L_integ        shift, and enter state 41
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 84

	Integer        goto state 46
	Var            goto state 47
	Lambda         goto state 48
	IntegerExpression1goto state 49
	IntegerExpression2goto state 50
	IntegerExpression3goto state 51
	IntegerExpressiongoto state 52
	BoolValue      goto state 53
	BoolExpression goto state 54
	BoolExpression1goto state 55
	BoolExpression2goto state 56
	BasisState     goto state 57
	Term4          goto state 58
	Term3          goto state 59
	Term2          goto state 60
	Term1          goto state 61
	Term           goto state 298
	List1          goto state 63
	List           goto state 64

State 298

	Term1 -> Var ',' ListVar '<-' Term ';' Term .       (rule 139)

	'$'            reduce using rule 139
	'('            reduce using rule 139
	'()'           reduce using rule 139
	')'            reduce using rule 139
	','            reduce using rule 139
	'-'            reduce using rule 139
	'->'           reduce using rule 139
	';'            reduce using rule 139
	'@+'           reduce using rule 139
	'@+i'          reduce using rule 139
	'@-'           reduce using rule 139
	'@-i'          reduce using rule 139
	'@0'           reduce using rule 139
	'@1'           reduce using rule 139
	'False'        reduce using rule 139
	'True'         reduce using rule 139
	'['            reduce using rule 139
	'[]'           reduce using rule 139
	']'            reduce using rule 139
	'case'         reduce using rule 139
	'else'         reduce using rule 139
	'gate'         reduce using rule 139
	'if'           reduce using rule 139
	'let'          reduce using rule 139
	'not'          reduce using rule 139
	'of'           reduce using rule 139
	'then'         reduce using rule 139
	'with'         reduce using rule 139
	'}'            reduce using rule 139
	L_integ        reduce using rule 139
	L_Var          reduce using rule 139
	L_Lambda       reduce using rule 139


State 299

	CaseExpression -> Term '->' Term .                  (rule 152)

	'('            reduce using rule 152
	'()'           reduce using rule 152
	'-'            reduce using rule 152
	';'            reduce using rule 152
	'@+'           reduce using rule 152
	'@+i'          reduce using rule 152
	'@-'           reduce using rule 152
	'@-i'          reduce using rule 152
	'@0'           reduce using rule 152
	'@1'           reduce using rule 152
	'False'        reduce using rule 152
	'True'         reduce using rule 152
	'['            reduce using rule 152
	'[]'           reduce using rule 152
	'case'         reduce using rule 152
	'gate'         reduce using rule 152
	'if'           reduce using rule 152
	'let'          reduce using rule 152
	'not'          reduce using rule 152
	'with'         reduce using rule 152
	'}'            reduce using rule 152
	L_integ        reduce using rule 152
	L_Var          reduce using rule 152
	L_Lambda       reduce using rule 152


State 300

	Gate -> 'U3' '(' Angle ',' Angle ',' . Angle ')'    (rule 81)

	L_doubl        shift, and enter state 2

	Double         goto state 202
	Angle          goto state 317

State 301

	Gate -> 'U2' '(' Angle ',' Angle ')' .              (rule 80)

	'$'            reduce using rule 80
	'('            reduce using rule 80
	'()'           reduce using rule 80
	')'            reduce using rule 80
	','            reduce using rule 80
	'-'            reduce using rule 80
	'->'           reduce using rule 80
	'.'            reduce using rule 80
	':'            reduce using rule 80
	';'            reduce using rule 80
	'@+'           reduce using rule 80
	'@+i'          reduce using rule 80
	'@-'           reduce using rule 80
	'@-i'          reduce using rule 80
	'@0'           reduce using rule 80
	'@1'           reduce using rule 80
	'False'        reduce using rule 80
	'True'         reduce using rule 80
	'['            reduce using rule 80
	'[]'           reduce using rule 80
	']'            reduce using rule 80
	'case'         reduce using rule 80
	'else'         reduce using rule 80
	'gate'         reduce using rule 80
	'if'           reduce using rule 80
	'let'          reduce using rule 80
	'not'          reduce using rule 80
	'of'           reduce using rule 80
	'then'         reduce using rule 80
	'with'         reduce using rule 80
	'}'            reduce using rule 80
	L_integ        reduce using rule 80
	L_Var          reduce using rule 80
	L_Lambda       reduce using rule 80


State 302

	Gate -> GateVar '(' Angle ',' Angle ')' .           (rule 93)

	'$'            reduce using rule 93
	'('            reduce using rule 93
	'()'           reduce using rule 93
	')'            reduce using rule 93
	','            reduce using rule 93
	'-'            reduce using rule 93
	'->'           reduce using rule 93
	'.'            reduce using rule 93
	':'            reduce using rule 93
	';'            reduce using rule 93
	'@+'           reduce using rule 93
	'@+i'          reduce using rule 93
	'@-'           reduce using rule 93
	'@-i'          reduce using rule 93
	'@0'           reduce using rule 93
	'@1'           reduce using rule 93
	'False'        reduce using rule 93
	'True'         reduce using rule 93
	'['            reduce using rule 93
	'[]'           reduce using rule 93
	']'            reduce using rule 93
	'case'         reduce using rule 93
	'else'         reduce using rule 93
	'gate'         reduce using rule 93
	'if'           reduce using rule 93
	'let'          reduce using rule 93
	'not'          reduce using rule 93
	'of'           reduce using rule 93
	'then'         reduce using rule 93
	'with'         reduce using rule 93
	'}'            reduce using rule 93
	L_integ        reduce using rule 93
	L_Var          reduce using rule 93
	L_Lambda       reduce using rule 93


State 303

	Gate -> GateVar '(' Angle ',' Angle ',' . Angle ')'    (rule 92)

	L_doubl        shift, and enter state 2

	Double         goto state 202
	Angle          goto state 316

State 304

	Term1 -> 'let' '{' Var '=' Term '}' 'in' . Term     (rule 136)

	'('            shift, and enter state 65
	'()'           shift, and enter state 66
	'-'            shift, and enter state 67
	'@+'           shift, and enter state 68
	'@+i'          shift, and enter state 69
	'@-'           shift, and enter state 70
	'@-i'          shift, and enter state 71
	'@0'           shift, and enter state 72
	'@1'           shift, and enter state 73
	'False'        shift, and enter state 74
	'True'         shift, and enter state 75
	'['            shift, and enter state 76
	'[]'           shift, and enter state 77
	'case'         shift, and enter state 78
	'gate'         shift, and enter state 79
	'if'           shift, and enter state 80
	'let'          shift, and enter state 81
	'not'          shift, and enter state 82
	'with'         shift, and enter state 83
	L_integ        shift, and enter state 41
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 84

	Integer        goto state 46
	Var            goto state 47
	Lambda         goto state 48
	IntegerExpression1goto state 49
	IntegerExpression2goto state 50
	IntegerExpression3goto state 51
	IntegerExpressiongoto state 52
	BoolValue      goto state 53
	BoolExpression goto state 54
	BoolExpression1goto state 55
	BoolExpression2goto state 56
	BasisState     goto state 57
	Term4          goto state 58
	Term3          goto state 59
	Term2          goto state 60
	Term1          goto state 61
	Term           goto state 315
	List1          goto state 63
	List           goto state 64

State 305

	Term1 -> 'let' '{' '(' Var ',' ListVar ')' . '=' Term '}' 'in' Term    (rule 137)

	'='            shift, and enter state 314


State 306

	ListInteger -> Integer .                            (rule 105)
	ListInteger -> Integer . ',' ListInteger            (rule 106)

	','            shift, and enter state 313
	']'            reduce using rule 105


State 307

	ControlBits -> '[' Integer ',' ListInteger . ']'    (rule 104)

	']'            shift, and enter state 312


State 308

	ListBasisState -> BasisState .                      (rule 101)
	ListBasisState -> BasisState . ',' ListBasisState    (rule 102)

	','            shift, and enter state 311
	']'            reduce using rule 101


State 309

	ControlBasisStates -> '[' BasisState ',' ListBasisState . ']'    (rule 100)

	']'            shift, and enter state 310


State 310

	ControlBasisStates -> '[' BasisState ',' ListBasisState ']' .    (rule 100)

	'$'            reduce using rule 100
	'('            reduce using rule 100
	'()'           reduce using rule 100
	')'            reduce using rule 100
	','            reduce using rule 100
	'-'            reduce using rule 100
	'->'           reduce using rule 100
	'.'            reduce using rule 100
	';'            reduce using rule 100
	'@+'           reduce using rule 100
	'@+i'          reduce using rule 100
	'@-'           reduce using rule 100
	'@-i'          reduce using rule 100
	'@0'           reduce using rule 100
	'@1'           reduce using rule 100
	'False'        reduce using rule 100
	'True'         reduce using rule 100
	'['            reduce using rule 100
	'[]'           reduce using rule 100
	']'            reduce using rule 100
	'case'         reduce using rule 100
	'else'         reduce using rule 100
	'gate'         reduce using rule 100
	'if'           reduce using rule 100
	'let'          reduce using rule 100
	'not'          reduce using rule 100
	'of'           reduce using rule 100
	'then'         reduce using rule 100
	'with'         reduce using rule 100
	'}'            reduce using rule 100
	L_integ        reduce using rule 100
	L_Var          reduce using rule 100
	L_Lambda       reduce using rule 100


State 311

	ListBasisState -> BasisState ',' . ListBasisState    (rule 102)

	'@+'           shift, and enter state 68
	'@+i'          shift, and enter state 69
	'@-'           shift, and enter state 70
	'@-i'          shift, and enter state 71
	'@0'           shift, and enter state 72
	'@1'           shift, and enter state 73

	BasisState     goto state 308
	ListBasisState goto state 322

State 312

	ControlBits -> '[' Integer ',' ListInteger ']' .    (rule 104)

	'$'            reduce using rule 104
	'('            reduce using rule 104
	'()'           reduce using rule 104
	')'            reduce using rule 104
	','            reduce using rule 104
	'-'            reduce using rule 104
	'->'           reduce using rule 104
	'.'            reduce using rule 104
	';'            reduce using rule 104
	'@+'           reduce using rule 104
	'@+i'          reduce using rule 104
	'@-'           reduce using rule 104
	'@-i'          reduce using rule 104
	'@0'           reduce using rule 104
	'@1'           reduce using rule 104
	'False'        reduce using rule 104
	'True'         reduce using rule 104
	'['            reduce using rule 104
	'[]'           reduce using rule 104
	']'            reduce using rule 104
	'case'         reduce using rule 104
	'else'         reduce using rule 104
	'gate'         reduce using rule 104
	'if'           reduce using rule 104
	'let'          reduce using rule 104
	'not'          reduce using rule 104
	'of'           reduce using rule 104
	'then'         reduce using rule 104
	'with'         reduce using rule 104
	'}'            reduce using rule 104
	L_integ        reduce using rule 104
	L_Var          reduce using rule 104
	L_Lambda       reduce using rule 104


State 313

	ListInteger -> Integer ',' . ListInteger            (rule 106)

	L_integ        shift, and enter state 41

	Integer        goto state 306
	ListInteger    goto state 321

State 314

	Term1 -> 'let' '{' '(' Var ',' ListVar ')' '=' . Term '}' 'in' Term    (rule 137)

	'('            shift, and enter state 65
	'()'           shift, and enter state 66
	'-'            shift, and enter state 67
	'@+'           shift, and enter state 68
	'@+i'          shift, and enter state 69
	'@-'           shift, and enter state 70
	'@-i'          shift, and enter state 71
	'@0'           shift, and enter state 72
	'@1'           shift, and enter state 73
	'False'        shift, and enter state 74
	'True'         shift, and enter state 75
	'['            shift, and enter state 76
	'[]'           shift, and enter state 77
	'case'         shift, and enter state 78
	'gate'         shift, and enter state 79
	'if'           shift, and enter state 80
	'let'          shift, and enter state 81
	'not'          shift, and enter state 82
	'with'         shift, and enter state 83
	L_integ        shift, and enter state 41
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 84

	Integer        goto state 46
	Var            goto state 47
	Lambda         goto state 48
	IntegerExpression1goto state 49
	IntegerExpression2goto state 50
	IntegerExpression3goto state 51
	IntegerExpressiongoto state 52
	BoolValue      goto state 53
	BoolExpression goto state 54
	BoolExpression1goto state 55
	BoolExpression2goto state 56
	BasisState     goto state 57
	Term4          goto state 58
	Term3          goto state 59
	Term2          goto state 60
	Term1          goto state 61
	Term           goto state 320
	List1          goto state 63
	List           goto state 64

State 315

	Term1 -> 'let' '{' Var '=' Term '}' 'in' Term .     (rule 136)

	'$'            reduce using rule 136
	'('            reduce using rule 136
	'()'           reduce using rule 136
	')'            reduce using rule 136
	','            reduce using rule 136
	'-'            reduce using rule 136
	'->'           reduce using rule 136
	';'            reduce using rule 136
	'@+'           reduce using rule 136
	'@+i'          reduce using rule 136
	'@-'           reduce using rule 136
	'@-i'          reduce using rule 136
	'@0'           reduce using rule 136
	'@1'           reduce using rule 136
	'False'        reduce using rule 136
	'True'         reduce using rule 136
	'['            reduce using rule 136
	'[]'           reduce using rule 136
	']'            reduce using rule 136
	'case'         reduce using rule 136
	'else'         reduce using rule 136
	'gate'         reduce using rule 136
	'if'           reduce using rule 136
	'let'          reduce using rule 136
	'not'          reduce using rule 136
	'of'           reduce using rule 136
	'then'         reduce using rule 136
	'with'         reduce using rule 136
	'}'            reduce using rule 136
	L_integ        reduce using rule 136
	L_Var          reduce using rule 136
	L_Lambda       reduce using rule 136


State 316

	Gate -> GateVar '(' Angle ',' Angle ',' Angle . ')'    (rule 92)

	')'            shift, and enter state 319


State 317

	Gate -> 'U3' '(' Angle ',' Angle ',' Angle . ')'    (rule 81)

	')'            shift, and enter state 318


State 318

	Gate -> 'U3' '(' Angle ',' Angle ',' Angle ')' .    (rule 81)

	'$'            reduce using rule 81
	'('            reduce using rule 81
	'()'           reduce using rule 81
	')'            reduce using rule 81
	','            reduce using rule 81
	'-'            reduce using rule 81
	'->'           reduce using rule 81
	'.'            reduce using rule 81
	':'            reduce using rule 81
	';'            reduce using rule 81
	'@+'           reduce using rule 81
	'@+i'          reduce using rule 81
	'@-'           reduce using rule 81
	'@-i'          reduce using rule 81
	'@0'           reduce using rule 81
	'@1'           reduce using rule 81
	'False'        reduce using rule 81
	'True'         reduce using rule 81
	'['            reduce using rule 81
	'[]'           reduce using rule 81
	']'            reduce using rule 81
	'case'         reduce using rule 81
	'else'         reduce using rule 81
	'gate'         reduce using rule 81
	'if'           reduce using rule 81
	'let'          reduce using rule 81
	'not'          reduce using rule 81
	'of'           reduce using rule 81
	'then'         reduce using rule 81
	'with'         reduce using rule 81
	'}'            reduce using rule 81
	L_integ        reduce using rule 81
	L_Var          reduce using rule 81
	L_Lambda       reduce using rule 81


State 319

	Gate -> GateVar '(' Angle ',' Angle ',' Angle ')' .    (rule 92)

	'$'            reduce using rule 92
	'('            reduce using rule 92
	'()'           reduce using rule 92
	')'            reduce using rule 92
	','            reduce using rule 92
	'-'            reduce using rule 92
	'->'           reduce using rule 92
	'.'            reduce using rule 92
	':'            reduce using rule 92
	';'            reduce using rule 92
	'@+'           reduce using rule 92
	'@+i'          reduce using rule 92
	'@-'           reduce using rule 92
	'@-i'          reduce using rule 92
	'@0'           reduce using rule 92
	'@1'           reduce using rule 92
	'False'        reduce using rule 92
	'True'         reduce using rule 92
	'['            reduce using rule 92
	'[]'           reduce using rule 92
	']'            reduce using rule 92
	'case'         reduce using rule 92
	'else'         reduce using rule 92
	'gate'         reduce using rule 92
	'if'           reduce using rule 92
	'let'          reduce using rule 92
	'not'          reduce using rule 92
	'of'           reduce using rule 92
	'then'         reduce using rule 92
	'with'         reduce using rule 92
	'}'            reduce using rule 92
	L_integ        reduce using rule 92
	L_Var          reduce using rule 92
	L_Lambda       reduce using rule 92


State 320

	Term1 -> 'let' '{' '(' Var ',' ListVar ')' '=' Term . '}' 'in' Term    (rule 137)

	'}'            shift, and enter state 323


State 321

	ListInteger -> Integer ',' ListInteger .            (rule 106)

	']'            reduce using rule 106


State 322

	ListBasisState -> BasisState ',' ListBasisState .    (rule 102)

	']'            reduce using rule 102


State 323

	Term1 -> 'let' '{' '(' Var ',' ListVar ')' '=' Term '}' . 'in' Term    (rule 137)

	'in'           shift, and enter state 324


State 324

	Term1 -> 'let' '{' '(' Var ',' ListVar ')' '=' Term '}' 'in' . Term    (rule 137)

	'('            shift, and enter state 65
	'()'           shift, and enter state 66
	'-'            shift, and enter state 67
	'@+'           shift, and enter state 68
	'@+i'          shift, and enter state 69
	'@-'           shift, and enter state 70
	'@-i'          shift, and enter state 71
	'@0'           shift, and enter state 72
	'@1'           shift, and enter state 73
	'False'        shift, and enter state 74
	'True'         shift, and enter state 75
	'['            shift, and enter state 76
	'[]'           shift, and enter state 77
	'case'         shift, and enter state 78
	'gate'         shift, and enter state 79
	'if'           shift, and enter state 80
	'let'          shift, and enter state 81
	'not'          shift, and enter state 82
	'with'         shift, and enter state 83
	L_integ        shift, and enter state 41
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 84

	Integer        goto state 46
	Var            goto state 47
	Lambda         goto state 48
	IntegerExpression1goto state 49
	IntegerExpression2goto state 50
	IntegerExpression3goto state 51
	IntegerExpressiongoto state 52
	BoolValue      goto state 53
	BoolExpression goto state 54
	BoolExpression1goto state 55
	BoolExpression2goto state 56
	BasisState     goto state 57
	Term4          goto state 58
	Term3          goto state 59
	Term2          goto state 60
	Term1          goto state 61
	Term           goto state 325
	List1          goto state 63
	List           goto state 64

State 325

	Term1 -> 'let' '{' '(' Var ',' ListVar ')' '=' Term '}' 'in' Term .    (rule 137)

	'$'            reduce using rule 137
	'('            reduce using rule 137
	'()'           reduce using rule 137
	')'            reduce using rule 137
	','            reduce using rule 137
	'-'            reduce using rule 137
	'->'           reduce using rule 137
	';'            reduce using rule 137
	'@+'           reduce using rule 137
	'@+i'          reduce using rule 137
	'@-'           reduce using rule 137
	'@-i'          reduce using rule 137
	'@0'           reduce using rule 137
	'@1'           reduce using rule 137
	'False'        reduce using rule 137
	'True'         reduce using rule 137
	'['            reduce using rule 137
	'[]'           reduce using rule 137
	']'            reduce using rule 137
	'case'         reduce using rule 137
	'else'         reduce using rule 137
	'gate'         reduce using rule 137
	'if'           reduce using rule 137
	'let'          reduce using rule 137
	'not'          reduce using rule 137
	'of'           reduce using rule 137
	'then'         reduce using rule 137
	'with'         reduce using rule 137
	'}'            reduce using rule 137
	L_integ        reduce using rule 137
	L_Var          reduce using rule 137
	L_Lambda       reduce using rule 137


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 166
Number of terminals: 96
Number of non-terminals: 51
Number of states: 326
