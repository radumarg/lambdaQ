-----------------------------------------------------------------------------
Info file generated by Happy Version 1.20.0 from Frontend/LambdaQ/Par.y
-----------------------------------------------------------------------------

state 46 contains 1 reduce/reduce conflicts.

rule 103 is unused
rule 104 is unused
rule 105 is unused

-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_pProgram -> Program                         (0)
	Double -> L_doubl                                  (1)
	Integer -> L_integ                                 (2)
	Var -> L_Var                                       (3)
	Lambda -> L_Lambda                                 (4)
	Program -> ListFunctionDeclaration                 (5)
	Type5 -> 'Bit'                                     (6)
	Type5 -> 'Qbit'                                    (7)
	Type5 -> 'State'                                   (8)
	Type5 -> 'Unitary'                                 (9)
	Type5 -> '()'                                      (10)
	Type5 -> '(' Type ')'                              (11)
	Type4 -> '!' Type5                                 (12)
	Type4 -> Type5                                     (13)
	Type3 -> Type4 '**' Integer                        (14)
	Type3 -> Type4 '*' Type3                           (15)
	Type3 -> Type4                                     (16)
	Type2 -> Type3 '+' Type2                           (17)
	Type2 -> Type3                                     (18)
	Type1 -> Type2 '->' Type1                          (19)
	Type1 -> Type2                                     (20)
	Type -> Type1                                      (21)
	Angle -> Double                                    (22)
	BasisState -> '@0'                                 (23)
	BasisState -> '@1'                                 (24)
	BasisState -> '@+'                                 (25)
	BasisState -> '@-'                                 (26)
	BasisState -> '@+i'                                (27)
	BasisState -> '@-i'                                (28)
	Bit -> Integer                                     (29)
	Gate -> 'H'                                        (30)
	Gate -> 'X'                                        (31)
	Gate -> 'Y'                                        (32)
	Gate -> 'Z'                                        (33)
	Gate -> 'ID'                                       (34)
	Gate -> 'ROOT_X' Integer                           (35)
	Gate -> 'ROOT_X_DAG' Integer                       (36)
	Gate -> 'ROOT_Y' Integer                           (37)
	Gate -> 'ROOT_Y_DAG' Integer                       (38)
	Gate -> 'ROOT_Z' Integer                           (39)
	Gate -> 'ROOT_Z_DAG' Integer                       (40)
	Gate -> 'S'                                        (41)
	Gate -> 'S_DAG'                                    (42)
	Gate -> 'T'                                        (43)
	Gate -> 'T_DAG'                                    (44)
	Gate -> 'SQRT_X'                                   (45)
	Gate -> 'SQRT_X_DAG'                               (46)
	Gate -> 'SQRT_Y'                                   (47)
	Gate -> 'SQRT_Y_DAG'                               (48)
	Gate -> 'RX' Angle                                 (49)
	Gate -> 'RY' Angle                                 (50)
	Gate -> 'RZ' Angle                                 (51)
	Gate -> 'U1' Angle                                 (52)
	Gate -> 'U2' '(' Angle ',' Angle ')'               (53)
	Gate -> 'U3' '(' Angle ',' Angle ',' Angle ')'     (54)
	Gate -> 'SWAP'                                     (55)
	Gate -> 'SQRT_SWAP'                                (56)
	Gate -> 'SQRT_SWAP_DAG'                            (57)
	Gate -> 'ISWAP'                                    (58)
	Gate -> 'FSWAP'                                    (59)
	Gate -> 'SWAP_THETA' Angle                         (60)
	Gate -> 'ROOT_SWAP' Integer                        (61)
	Gate -> 'ROOT_SWAP_DAG' Integer                    (62)
	ControlBasisState -> '[' BasisState ']'            (63)
	ControlBasisStates -> '[' BasisState ',' ListBasisState ']'   (64)
	ListBasisState -> BasisState                       (65)
	ListBasisState -> BasisState ',' ListBasisState    (66)
	ControlBit -> '[' Integer ']'                      (67)
	ControlBits -> '[' Integer ',' ListInteger ']'     (68)
	ListInteger -> Integer                             (69)
	ListInteger -> Integer ',' ListInteger             (70)
	Tuple -> '(' Term ',' ListTerm ')'                 (71)
	ControlTerm -> '[' Term ']'                        (72)
	ControlTerms -> '[' Term ',' ListTerm ']'          (73)
	ListTerm -> Term                                   (74)
	ListTerm -> Term ',' ListTerm                      (75)
	Term1 -> 'if' Term 'then' Term 'else' Term         (76)
	Term1 -> 'let' '{' LetVariable '=' Term '}' 'in' Term   (77)
	Term1 -> 'let' '{' '(' LetVariable ',' ListLetVariable ')' '=' Term '}' 'in' Term   (78)
	Term1 -> LetVariable '<-' Term ';' Term            (79)
	Term1 -> LetVariable ',' ListLetVariable '<-' Term ';' Term   (80)
	Term1 -> Lambda Var Type '.' Term                  (81)
	Term1 -> Term2 '$' Term1                           (82)
	Term1 -> Term2                                     (83)
	Term2 -> 'with' ControlTerm 'ctrl' ControlBasisState   (84)
	Term2 -> 'with' ControlTerms 'ctrl' ControlBasisStates   (85)
	Term2 -> 'with' ControlTerm 'ctrl' ControlBit      (86)
	Term2 -> 'with' ControlTerms 'ctrl' ControlBits    (87)
	Term2 -> Term2 Term3                               (88)
	Term2 -> Term2 '.' Term3                           (89)
	Term2 -> Term3                                     (90)
	Term3 -> Var                                       (91)
	Term3 -> BasisState                                (92)
	Term3 -> 'gate' Gate                               (93)
	Term3 -> Tuple                                     (94)
	Term3 -> Bit                                       (95)
	Term3 -> '()'                                      (96)
	Term3 -> '(' Term ')'                              (97)
	Term -> Term1                                      (98)
	LetVariable -> Var                                 (99)
	ListLetVariable ->                                 (100)
	ListLetVariable -> LetVariable                     (101)
	ListLetVariable -> LetVariable ',' ListLetVariable   (102)
	CaseExpression -> Term '->' Var                    (103)
	ListCaseExpression -> CaseExpression               (104)
	ListCaseExpression -> CaseExpression ListCaseExpression   (105)
	Arg -> Var                                         (106)
	ListArg ->                                         (107)
	ListArg -> Arg ListArg                             (108)
	FunctionDefinition -> Var ListArg '=' Term         (109)
	FunctionDefinition -> FunctionDefinition ';'       (110)
	FunctionType -> Var '::' Type                      (111)
	FunctionType -> FunctionType ';'                   (112)
	FunctionDeclaration -> FunctionType ';' FunctionDefinition ';'   (113)
	ListFunctionDeclaration ->                         (114)
	ListFunctionDeclaration -> FunctionDeclaration ListFunctionDeclaration   (115)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	'!'            { PT _ (TS _ 1) }
	'$'            { PT _ (TS _ 2) }
	'('            { PT _ (TS _ 3) }
	'()'           { PT _ (TS _ 4) }
	')'            { PT _ (TS _ 5) }
	'*'            { PT _ (TS _ 6) }
	'**'           { PT _ (TS _ 7) }
	'+'            { PT _ (TS _ 8) }
	','            { PT _ (TS _ 9) }
	'->'           { PT _ (TS _ 10) }
	'.'            { PT _ (TS _ 11) }
	'::'           { PT _ (TS _ 12) }
	';'            { PT _ (TS _ 13) }
	'<-'           { PT _ (TS _ 14) }
	'='            { PT _ (TS _ 15) }
	'@+'           { PT _ (TS _ 16) }
	'@+i'          { PT _ (TS _ 17) }
	'@-'           { PT _ (TS _ 18) }
	'@-i'          { PT _ (TS _ 19) }
	'@0'           { PT _ (TS _ 20) }
	'@1'           { PT _ (TS _ 21) }
	'Bit'          { PT _ (TS _ 22) }
	'FSWAP'        { PT _ (TS _ 23) }
	'H'            { PT _ (TS _ 24) }
	'ID'           { PT _ (TS _ 25) }
	'ISWAP'        { PT _ (TS _ 26) }
	'Qbit'         { PT _ (TS _ 27) }
	'ROOT_SWAP'    { PT _ (TS _ 28) }
	'ROOT_SWAP_DAG'{ PT _ (TS _ 29) }
	'ROOT_X'       { PT _ (TS _ 30) }
	'ROOT_X_DAG'   { PT _ (TS _ 31) }
	'ROOT_Y'       { PT _ (TS _ 32) }
	'ROOT_Y_DAG'   { PT _ (TS _ 33) }
	'ROOT_Z'       { PT _ (TS _ 34) }
	'ROOT_Z_DAG'   { PT _ (TS _ 35) }
	'RX'           { PT _ (TS _ 36) }
	'RY'           { PT _ (TS _ 37) }
	'RZ'           { PT _ (TS _ 38) }
	'S'            { PT _ (TS _ 39) }
	'SQRT_SWAP'    { PT _ (TS _ 40) }
	'SQRT_SWAP_DAG'{ PT _ (TS _ 41) }
	'SQRT_X'       { PT _ (TS _ 42) }
	'SQRT_X_DAG'   { PT _ (TS _ 43) }
	'SQRT_Y'       { PT _ (TS _ 44) }
	'SQRT_Y_DAG'   { PT _ (TS _ 45) }
	'SWAP'         { PT _ (TS _ 46) }
	'SWAP_THETA'   { PT _ (TS _ 47) }
	'S_DAG'        { PT _ (TS _ 48) }
	'State'        { PT _ (TS _ 49) }
	'T'            { PT _ (TS _ 50) }
	'T_DAG'        { PT _ (TS _ 51) }
	'U1'           { PT _ (TS _ 52) }
	'U2'           { PT _ (TS _ 53) }
	'U3'           { PT _ (TS _ 54) }
	'Unitary'      { PT _ (TS _ 55) }
	'X'            { PT _ (TS _ 56) }
	'Y'            { PT _ (TS _ 57) }
	'Z'            { PT _ (TS _ 58) }
	'['            { PT _ (TS _ 59) }
	']'            { PT _ (TS _ 60) }
	'ctrl'         { PT _ (TS _ 61) }
	'else'         { PT _ (TS _ 62) }
	'gate'         { PT _ (TS _ 63) }
	'if'           { PT _ (TS _ 64) }
	'in'           { PT _ (TS _ 65) }
	'let'          { PT _ (TS _ 66) }
	'then'         { PT _ (TS _ 67) }
	'with'         { PT _ (TS _ 68) }
	'{'            { PT _ (TS _ 69) }
	'}'            { PT _ (TS _ 70) }
	L_doubl        { PT _ (TD $$) }
	L_integ        { PT _ (TI $$) }
	L_Var          { PT _ (T_Var _) }
	L_Lambda       { PT _ (T_Lambda $$) }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_pProgram rule  0
	Double          rule  1
	Integer         rule  2
	Var             rule  3
	Lambda          rule  4
	Program         rule  5
	Type5           rules 6, 7, 8, 9, 10, 11
	Type4           rules 12, 13
	Type3           rules 14, 15, 16
	Type2           rules 17, 18
	Type1           rules 19, 20
	Type            rule  21
	Angle           rule  22
	BasisState      rules 23, 24, 25, 26, 27, 28
	Bit             rule  29
	Gate            rules 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62
	ControlBasisState rule  63
	ControlBasisStates rule  64
	ListBasisState  rules 65, 66
	ControlBit      rule  67
	ControlBits     rule  68
	ListInteger     rules 69, 70
	Tuple           rule  71
	ControlTerm     rule  72
	ControlTerms    rule  73
	ListTerm        rules 74, 75
	Term1           rules 76, 77, 78, 79, 80, 81, 82, 83
	Term2           rules 84, 85, 86, 87, 88, 89, 90
	Term3           rules 91, 92, 93, 94, 95, 96, 97
	Term            rule  98
	LetVariable     rule  99
	ListLetVariable rules 100, 101, 102
	CaseExpression  rule  103
	ListCaseExpression rules 104, 105
	Arg             rule  106
	ListArg         rules 107, 108
	FunctionDefinition rules 109, 110
	FunctionType    rules 111, 112
	FunctionDeclaration rule  113
	ListFunctionDeclaration rules 114, 115

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0

	%start_pProgram -> . Program                        (rule 0)

	L_Var          shift, and enter state 8
	%eof           reduce using rule 114

	Var            goto state 3
	Program        goto state 4
	FunctionType   goto state 5
	FunctionDeclarationgoto state 6
	ListFunctionDeclarationgoto state 7

State 1

	Double -> . L_doubl                                 (rule 1)

	L_doubl        shift, and enter state 2


State 2

	Double -> L_doubl .                                 (rule 1)

	'$'            reduce using rule 1
	'('            reduce using rule 1
	'()'           reduce using rule 1
	')'            reduce using rule 1
	','            reduce using rule 1
	'.'            reduce using rule 1
	';'            reduce using rule 1
	'@+'           reduce using rule 1
	'@+i'          reduce using rule 1
	'@-'           reduce using rule 1
	'@-i'          reduce using rule 1
	'@0'           reduce using rule 1
	'@1'           reduce using rule 1
	']'            reduce using rule 1
	'else'         reduce using rule 1
	'gate'         reduce using rule 1
	'then'         reduce using rule 1
	'}'            reduce using rule 1
	L_integ        reduce using rule 1
	L_Var          reduce using rule 1


State 3

	FunctionType -> Var . '::' Type                     (rule 111)

	'::'           shift, and enter state 11


State 4

	%start_pProgram -> Program .                        (rule 0)

	%eof           accept


State 5

	FunctionType -> FunctionType . ';'                  (rule 112)
	FunctionDeclaration -> FunctionType . ';' FunctionDefinition ';'    (rule 113)

	';'            shift, and enter state 10


State 6

	ListFunctionDeclaration -> FunctionDeclaration . ListFunctionDeclaration    (rule 115)

	L_Var          shift, and enter state 8
	%eof           reduce using rule 114

	Var            goto state 3
	FunctionType   goto state 5
	FunctionDeclarationgoto state 6
	ListFunctionDeclarationgoto state 9

State 7

	Program -> ListFunctionDeclaration .                (rule 5)

	%eof           reduce using rule 5


State 8

	Var -> L_Var .                                      (rule 3)

	'!'            reduce using rule 3
	'$'            reduce using rule 3
	'('            reduce using rule 3
	'()'           reduce using rule 3
	')'            reduce using rule 3
	','            reduce using rule 3
	'.'            reduce using rule 3
	'::'           reduce using rule 3
	';'            reduce using rule 3
	'<-'           reduce using rule 3
	'='            reduce using rule 3
	'@+'           reduce using rule 3
	'@+i'          reduce using rule 3
	'@-'           reduce using rule 3
	'@-i'          reduce using rule 3
	'@0'           reduce using rule 3
	'@1'           reduce using rule 3
	'Bit'          reduce using rule 3
	'Qbit'         reduce using rule 3
	'State'        reduce using rule 3
	'Unitary'      reduce using rule 3
	']'            reduce using rule 3
	'else'         reduce using rule 3
	'gate'         reduce using rule 3
	'then'         reduce using rule 3
	'}'            reduce using rule 3
	L_integ        reduce using rule 3
	L_Var          reduce using rule 3


State 9

	ListFunctionDeclaration -> FunctionDeclaration ListFunctionDeclaration .    (rule 115)

	%eof           reduce using rule 115


State 10

	FunctionType -> FunctionType ';' .                  (rule 112)
	FunctionDeclaration -> FunctionType ';' . FunctionDefinition ';'    (rule 113)

	';'            reduce using rule 112
	L_Var          shift, and enter state 8

	Var            goto state 25
	FunctionDefinitiongoto state 26

State 11

	FunctionType -> Var '::' . Type                     (rule 111)

	'!'            shift, and enter state 18
	'('            shift, and enter state 19
	'()'           shift, and enter state 20
	'Bit'          shift, and enter state 21
	'Qbit'         shift, and enter state 22
	'State'        shift, and enter state 23
	'Unitary'      shift, and enter state 24

	Type5          goto state 12
	Type4          goto state 13
	Type3          goto state 14
	Type2          goto state 15
	Type1          goto state 16
	Type           goto state 17

State 12

	Type4 -> Type5 .                                    (rule 13)

	')'            reduce using rule 13
	'*'            reduce using rule 13
	'**'           reduce using rule 13
	'+'            reduce using rule 13
	'->'           reduce using rule 13
	'.'            reduce using rule 13
	';'            reduce using rule 13


State 13

	Type3 -> Type4 . '**' Integer                       (rule 14)
	Type3 -> Type4 . '*' Type3                          (rule 15)
	Type3 -> Type4 .                                    (rule 16)

	')'            reduce using rule 16
	'*'            shift, and enter state 35
	'**'           shift, and enter state 36
	'+'            reduce using rule 16
	'->'           reduce using rule 16
	'.'            reduce using rule 16
	';'            reduce using rule 16


State 14

	Type2 -> Type3 . '+' Type2                          (rule 17)
	Type2 -> Type3 .                                    (rule 18)

	')'            reduce using rule 18
	'+'            shift, and enter state 34
	'->'           reduce using rule 18
	'.'            reduce using rule 18
	';'            reduce using rule 18


State 15

	Type1 -> Type2 . '->' Type1                         (rule 19)
	Type1 -> Type2 .                                    (rule 20)

	')'            reduce using rule 20
	'->'           shift, and enter state 33
	'.'            reduce using rule 20
	';'            reduce using rule 20


State 16

	Type -> Type1 .                                     (rule 21)

	')'            reduce using rule 21
	'.'            reduce using rule 21
	';'            reduce using rule 21


State 17

	FunctionType -> Var '::' Type .                     (rule 111)

	';'            reduce using rule 111


State 18

	Type4 -> '!' . Type5                                (rule 12)

	'('            shift, and enter state 19
	'()'           shift, and enter state 20
	'Bit'          shift, and enter state 21
	'Qbit'         shift, and enter state 22
	'State'        shift, and enter state 23
	'Unitary'      shift, and enter state 24

	Type5          goto state 32

State 19

	Type5 -> '(' . Type ')'                             (rule 11)

	'!'            shift, and enter state 18
	'('            shift, and enter state 19
	'()'           shift, and enter state 20
	'Bit'          shift, and enter state 21
	'Qbit'         shift, and enter state 22
	'State'        shift, and enter state 23
	'Unitary'      shift, and enter state 24

	Type5          goto state 12
	Type4          goto state 13
	Type3          goto state 14
	Type2          goto state 15
	Type1          goto state 16
	Type           goto state 31

State 20

	Type5 -> '()' .                                     (rule 10)

	')'            reduce using rule 10
	'*'            reduce using rule 10
	'**'           reduce using rule 10
	'+'            reduce using rule 10
	'->'           reduce using rule 10
	'.'            reduce using rule 10
	';'            reduce using rule 10


State 21

	Type5 -> 'Bit' .                                    (rule 6)

	')'            reduce using rule 6
	'*'            reduce using rule 6
	'**'           reduce using rule 6
	'+'            reduce using rule 6
	'->'           reduce using rule 6
	'.'            reduce using rule 6
	';'            reduce using rule 6


State 22

	Type5 -> 'Qbit' .                                   (rule 7)

	')'            reduce using rule 7
	'*'            reduce using rule 7
	'**'           reduce using rule 7
	'+'            reduce using rule 7
	'->'           reduce using rule 7
	'.'            reduce using rule 7
	';'            reduce using rule 7


State 23

	Type5 -> 'State' .                                  (rule 8)

	')'            reduce using rule 8
	'*'            reduce using rule 8
	'**'           reduce using rule 8
	'+'            reduce using rule 8
	'->'           reduce using rule 8
	'.'            reduce using rule 8
	';'            reduce using rule 8


State 24

	Type5 -> 'Unitary' .                                (rule 9)

	')'            reduce using rule 9
	'*'            reduce using rule 9
	'**'           reduce using rule 9
	'+'            reduce using rule 9
	'->'           reduce using rule 9
	'.'            reduce using rule 9
	';'            reduce using rule 9


State 25

	FunctionDefinition -> Var . ListArg '=' Term        (rule 109)

	'='            reduce using rule 107
	L_Var          shift, and enter state 8

	Var            goto state 28
	Arg            goto state 29
	ListArg        goto state 30

State 26

	FunctionDefinition -> FunctionDefinition . ';'      (rule 110)
	FunctionDeclaration -> FunctionType ';' FunctionDefinition . ';'    (rule 113)

	';'            shift, and enter state 27


State 27

	FunctionDefinition -> FunctionDefinition ';' .      (rule 110)
	FunctionDeclaration -> FunctionType ';' FunctionDefinition ';' .    (rule 113)

	';'            reduce using rule 110
	L_Var          reduce using rule 113
	%eof           reduce using rule 113


State 28

	Arg -> Var .                                        (rule 106)

	'='            reduce using rule 106
	L_Var          reduce using rule 106


State 29

	ListArg -> Arg . ListArg                            (rule 108)

	'='            reduce using rule 107
	L_Var          shift, and enter state 8

	Var            goto state 28
	Arg            goto state 29
	ListArg        goto state 44

State 30

	FunctionDefinition -> Var ListArg . '=' Term        (rule 109)

	'='            shift, and enter state 43


State 31

	Type5 -> '(' Type . ')'                             (rule 11)

	')'            shift, and enter state 42


State 32

	Type4 -> '!' Type5 .                                (rule 12)

	')'            reduce using rule 12
	'*'            reduce using rule 12
	'**'           reduce using rule 12
	'+'            reduce using rule 12
	'->'           reduce using rule 12
	'.'            reduce using rule 12
	';'            reduce using rule 12


State 33

	Type1 -> Type2 '->' . Type1                         (rule 19)

	'!'            shift, and enter state 18
	'('            shift, and enter state 19
	'()'           shift, and enter state 20
	'Bit'          shift, and enter state 21
	'Qbit'         shift, and enter state 22
	'State'        shift, and enter state 23
	'Unitary'      shift, and enter state 24

	Type5          goto state 12
	Type4          goto state 13
	Type3          goto state 14
	Type2          goto state 15
	Type1          goto state 41

State 34

	Type2 -> Type3 '+' . Type2                          (rule 17)

	'!'            shift, and enter state 18
	'('            shift, and enter state 19
	'()'           shift, and enter state 20
	'Bit'          shift, and enter state 21
	'Qbit'         shift, and enter state 22
	'State'        shift, and enter state 23
	'Unitary'      shift, and enter state 24

	Type5          goto state 12
	Type4          goto state 13
	Type3          goto state 14
	Type2          goto state 40

State 35

	Type3 -> Type4 '*' . Type3                          (rule 15)

	'!'            shift, and enter state 18
	'('            shift, and enter state 19
	'()'           shift, and enter state 20
	'Bit'          shift, and enter state 21
	'Qbit'         shift, and enter state 22
	'State'        shift, and enter state 23
	'Unitary'      shift, and enter state 24

	Type5          goto state 12
	Type4          goto state 13
	Type3          goto state 39

State 36

	Type3 -> Type4 '**' . Integer                       (rule 14)

	L_integ        shift, and enter state 38

	Integer        goto state 37

State 37

	Type3 -> Type4 '**' Integer .                       (rule 14)

	')'            reduce using rule 14
	'+'            reduce using rule 14
	'->'           reduce using rule 14
	'.'            reduce using rule 14
	';'            reduce using rule 14


State 38

	Integer -> L_integ .                                (rule 2)

	'$'            reduce using rule 2
	'('            reduce using rule 2
	'()'           reduce using rule 2
	')'            reduce using rule 2
	'+'            reduce using rule 2
	','            reduce using rule 2
	'->'           reduce using rule 2
	'.'            reduce using rule 2
	';'            reduce using rule 2
	'@+'           reduce using rule 2
	'@+i'          reduce using rule 2
	'@-'           reduce using rule 2
	'@-i'          reduce using rule 2
	'@0'           reduce using rule 2
	'@1'           reduce using rule 2
	']'            reduce using rule 2
	'else'         reduce using rule 2
	'gate'         reduce using rule 2
	'then'         reduce using rule 2
	'}'            reduce using rule 2
	L_integ        reduce using rule 2
	L_Var          reduce using rule 2


State 39

	Type3 -> Type4 '*' Type3 .                          (rule 15)

	')'            reduce using rule 15
	'+'            reduce using rule 15
	'->'           reduce using rule 15
	'.'            reduce using rule 15
	';'            reduce using rule 15


State 40

	Type2 -> Type3 '+' Type2 .                          (rule 17)

	')'            reduce using rule 17
	'->'           reduce using rule 17
	'.'            reduce using rule 17
	';'            reduce using rule 17


State 41

	Type1 -> Type2 '->' Type1 .                         (rule 19)

	')'            reduce using rule 19
	'.'            reduce using rule 19
	';'            reduce using rule 19


State 42

	Type5 -> '(' Type ')' .                             (rule 11)

	')'            reduce using rule 11
	'*'            reduce using rule 11
	'**'           reduce using rule 11
	'+'            reduce using rule 11
	'->'           reduce using rule 11
	'.'            reduce using rule 11
	';'            reduce using rule 11


State 43

	FunctionDefinition -> Var ListArg '=' . Term        (rule 109)

	'('            shift, and enter state 56
	'()'           shift, and enter state 57
	'@+'           shift, and enter state 58
	'@+i'          shift, and enter state 59
	'@-'           shift, and enter state 60
	'@-i'          shift, and enter state 61
	'@0'           shift, and enter state 62
	'@1'           shift, and enter state 63
	'gate'         shift, and enter state 64
	'if'           shift, and enter state 65
	'let'          shift, and enter state 66
	'with'         shift, and enter state 67
	L_integ        shift, and enter state 38
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 68

	Integer        goto state 45
	Var            goto state 46
	Lambda         goto state 47
	BasisState     goto state 48
	Bit            goto state 49
	Tuple          goto state 50
	Term1          goto state 51
	Term2          goto state 52
	Term3          goto state 53
	Term           goto state 54
	LetVariable    goto state 55

State 44

	ListArg -> Arg ListArg .                            (rule 108)

	'='            reduce using rule 108


State 45

	Bit -> Integer .                                    (rule 29)

	'$'            reduce using rule 29
	'('            reduce using rule 29
	'()'           reduce using rule 29
	')'            reduce using rule 29
	','            reduce using rule 29
	'.'            reduce using rule 29
	';'            reduce using rule 29
	'@+'           reduce using rule 29
	'@+i'          reduce using rule 29
	'@-'           reduce using rule 29
	'@-i'          reduce using rule 29
	'@0'           reduce using rule 29
	'@1'           reduce using rule 29
	']'            reduce using rule 29
	'else'         reduce using rule 29
	'gate'         reduce using rule 29
	'then'         reduce using rule 29
	'}'            reduce using rule 29
	L_integ        reduce using rule 29
	L_Var          reduce using rule 29


State 46

	Term3 -> Var .                                      (rule 91)
	LetVariable -> Var .                                (rule 99)

	'$'            reduce using rule 91
	'('            reduce using rule 91
	'()'           reduce using rule 91
	')'            reduce using rule 91
	','            reduce using rule 99
			(reduce using rule 91)

	'.'            reduce using rule 91
	';'            reduce using rule 91
	'<-'           reduce using rule 99
	'@+'           reduce using rule 91
	'@+i'          reduce using rule 91
	'@-'           reduce using rule 91
	'@-i'          reduce using rule 91
	'@0'           reduce using rule 91
	'@1'           reduce using rule 91
	']'            reduce using rule 91
	'else'         reduce using rule 91
	'gate'         reduce using rule 91
	'then'         reduce using rule 91
	'}'            reduce using rule 91
	L_integ        reduce using rule 91
	L_Var          reduce using rule 91


State 47

	Term1 -> Lambda . Var Type '.' Term                 (rule 81)

	L_Var          shift, and enter state 8

	Var            goto state 115

State 48

	Term3 -> BasisState .                               (rule 92)

	'$'            reduce using rule 92
	'('            reduce using rule 92
	'()'           reduce using rule 92
	')'            reduce using rule 92
	','            reduce using rule 92
	'.'            reduce using rule 92
	';'            reduce using rule 92
	'@+'           reduce using rule 92
	'@+i'          reduce using rule 92
	'@-'           reduce using rule 92
	'@-i'          reduce using rule 92
	'@0'           reduce using rule 92
	'@1'           reduce using rule 92
	']'            reduce using rule 92
	'else'         reduce using rule 92
	'gate'         reduce using rule 92
	'then'         reduce using rule 92
	'}'            reduce using rule 92
	L_integ        reduce using rule 92
	L_Var          reduce using rule 92


State 49

	Term3 -> Bit .                                      (rule 95)

	'$'            reduce using rule 95
	'('            reduce using rule 95
	'()'           reduce using rule 95
	')'            reduce using rule 95
	','            reduce using rule 95
	'.'            reduce using rule 95
	';'            reduce using rule 95
	'@+'           reduce using rule 95
	'@+i'          reduce using rule 95
	'@-'           reduce using rule 95
	'@-i'          reduce using rule 95
	'@0'           reduce using rule 95
	'@1'           reduce using rule 95
	']'            reduce using rule 95
	'else'         reduce using rule 95
	'gate'         reduce using rule 95
	'then'         reduce using rule 95
	'}'            reduce using rule 95
	L_integ        reduce using rule 95
	L_Var          reduce using rule 95


State 50

	Term3 -> Tuple .                                    (rule 94)

	'$'            reduce using rule 94
	'('            reduce using rule 94
	'()'           reduce using rule 94
	')'            reduce using rule 94
	','            reduce using rule 94
	'.'            reduce using rule 94
	';'            reduce using rule 94
	'@+'           reduce using rule 94
	'@+i'          reduce using rule 94
	'@-'           reduce using rule 94
	'@-i'          reduce using rule 94
	'@0'           reduce using rule 94
	'@1'           reduce using rule 94
	']'            reduce using rule 94
	'else'         reduce using rule 94
	'gate'         reduce using rule 94
	'then'         reduce using rule 94
	'}'            reduce using rule 94
	L_integ        reduce using rule 94
	L_Var          reduce using rule 94


State 51

	Term -> Term1 .                                     (rule 98)

	')'            reduce using rule 98
	','            reduce using rule 98
	';'            reduce using rule 98
	']'            reduce using rule 98
	'else'         reduce using rule 98
	'then'         reduce using rule 98
	'}'            reduce using rule 98


State 52

	Term1 -> Term2 . '$' Term1                          (rule 82)
	Term1 -> Term2 .                                    (rule 83)
	Term2 -> Term2 . Term3                              (rule 88)
	Term2 -> Term2 . '.' Term3                          (rule 89)

	'$'            shift, and enter state 113
	'('            shift, and enter state 56
	'()'           shift, and enter state 57
	')'            reduce using rule 83
	','            reduce using rule 83
	'.'            shift, and enter state 114
	';'            reduce using rule 83
	'@+'           shift, and enter state 58
	'@+i'          shift, and enter state 59
	'@-'           shift, and enter state 60
	'@-i'          shift, and enter state 61
	'@0'           shift, and enter state 62
	'@1'           shift, and enter state 63
	']'            reduce using rule 83
	'else'         reduce using rule 83
	'gate'         shift, and enter state 64
	'then'         reduce using rule 83
	'}'            reduce using rule 83
	L_integ        shift, and enter state 38
	L_Var          shift, and enter state 8

	Integer        goto state 45
	Var            goto state 111
	BasisState     goto state 48
	Bit            goto state 49
	Tuple          goto state 50
	Term3          goto state 112

State 53

	Term2 -> Term3 .                                    (rule 90)

	'$'            reduce using rule 90
	'('            reduce using rule 90
	'()'           reduce using rule 90
	')'            reduce using rule 90
	','            reduce using rule 90
	'.'            reduce using rule 90
	';'            reduce using rule 90
	'@+'           reduce using rule 90
	'@+i'          reduce using rule 90
	'@-'           reduce using rule 90
	'@-i'          reduce using rule 90
	'@0'           reduce using rule 90
	'@1'           reduce using rule 90
	']'            reduce using rule 90
	'else'         reduce using rule 90
	'gate'         reduce using rule 90
	'then'         reduce using rule 90
	'}'            reduce using rule 90
	L_integ        reduce using rule 90
	L_Var          reduce using rule 90


State 54

	FunctionDefinition -> Var ListArg '=' Term .        (rule 109)

	';'            reduce using rule 109


State 55

	Term1 -> LetVariable . '<-' Term ';' Term           (rule 79)
	Term1 -> LetVariable . ',' ListLetVariable '<-' Term ';' Term    (rule 80)

	','            shift, and enter state 109
	'<-'           shift, and enter state 110


State 56

	Tuple -> '(' . Term ',' ListTerm ')'                (rule 71)
	Term3 -> '(' . Term ')'                             (rule 97)

	'('            shift, and enter state 56
	'()'           shift, and enter state 57
	'@+'           shift, and enter state 58
	'@+i'          shift, and enter state 59
	'@-'           shift, and enter state 60
	'@-i'          shift, and enter state 61
	'@0'           shift, and enter state 62
	'@1'           shift, and enter state 63
	'gate'         shift, and enter state 64
	'if'           shift, and enter state 65
	'let'          shift, and enter state 66
	'with'         shift, and enter state 67
	L_integ        shift, and enter state 38
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 68

	Integer        goto state 45
	Var            goto state 46
	Lambda         goto state 47
	BasisState     goto state 48
	Bit            goto state 49
	Tuple          goto state 50
	Term1          goto state 51
	Term2          goto state 52
	Term3          goto state 53
	Term           goto state 108
	LetVariable    goto state 55

State 57

	Term3 -> '()' .                                     (rule 96)

	'$'            reduce using rule 96
	'('            reduce using rule 96
	'()'           reduce using rule 96
	')'            reduce using rule 96
	','            reduce using rule 96
	'.'            reduce using rule 96
	';'            reduce using rule 96
	'@+'           reduce using rule 96
	'@+i'          reduce using rule 96
	'@-'           reduce using rule 96
	'@-i'          reduce using rule 96
	'@0'           reduce using rule 96
	'@1'           reduce using rule 96
	']'            reduce using rule 96
	'else'         reduce using rule 96
	'gate'         reduce using rule 96
	'then'         reduce using rule 96
	'}'            reduce using rule 96
	L_integ        reduce using rule 96
	L_Var          reduce using rule 96


State 58

	BasisState -> '@+' .                                (rule 25)

	'$'            reduce using rule 25
	'('            reduce using rule 25
	'()'           reduce using rule 25
	')'            reduce using rule 25
	','            reduce using rule 25
	'.'            reduce using rule 25
	';'            reduce using rule 25
	'@+'           reduce using rule 25
	'@+i'          reduce using rule 25
	'@-'           reduce using rule 25
	'@-i'          reduce using rule 25
	'@0'           reduce using rule 25
	'@1'           reduce using rule 25
	']'            reduce using rule 25
	'else'         reduce using rule 25
	'gate'         reduce using rule 25
	'then'         reduce using rule 25
	'}'            reduce using rule 25
	L_integ        reduce using rule 25
	L_Var          reduce using rule 25


State 59

	BasisState -> '@+i' .                               (rule 27)

	'$'            reduce using rule 27
	'('            reduce using rule 27
	'()'           reduce using rule 27
	')'            reduce using rule 27
	','            reduce using rule 27
	'.'            reduce using rule 27
	';'            reduce using rule 27
	'@+'           reduce using rule 27
	'@+i'          reduce using rule 27
	'@-'           reduce using rule 27
	'@-i'          reduce using rule 27
	'@0'           reduce using rule 27
	'@1'           reduce using rule 27
	']'            reduce using rule 27
	'else'         reduce using rule 27
	'gate'         reduce using rule 27
	'then'         reduce using rule 27
	'}'            reduce using rule 27
	L_integ        reduce using rule 27
	L_Var          reduce using rule 27


State 60

	BasisState -> '@-' .                                (rule 26)

	'$'            reduce using rule 26
	'('            reduce using rule 26
	'()'           reduce using rule 26
	')'            reduce using rule 26
	','            reduce using rule 26
	'.'            reduce using rule 26
	';'            reduce using rule 26
	'@+'           reduce using rule 26
	'@+i'          reduce using rule 26
	'@-'           reduce using rule 26
	'@-i'          reduce using rule 26
	'@0'           reduce using rule 26
	'@1'           reduce using rule 26
	']'            reduce using rule 26
	'else'         reduce using rule 26
	'gate'         reduce using rule 26
	'then'         reduce using rule 26
	'}'            reduce using rule 26
	L_integ        reduce using rule 26
	L_Var          reduce using rule 26


State 61

	BasisState -> '@-i' .                               (rule 28)

	'$'            reduce using rule 28
	'('            reduce using rule 28
	'()'           reduce using rule 28
	')'            reduce using rule 28
	','            reduce using rule 28
	'.'            reduce using rule 28
	';'            reduce using rule 28
	'@+'           reduce using rule 28
	'@+i'          reduce using rule 28
	'@-'           reduce using rule 28
	'@-i'          reduce using rule 28
	'@0'           reduce using rule 28
	'@1'           reduce using rule 28
	']'            reduce using rule 28
	'else'         reduce using rule 28
	'gate'         reduce using rule 28
	'then'         reduce using rule 28
	'}'            reduce using rule 28
	L_integ        reduce using rule 28
	L_Var          reduce using rule 28


State 62

	BasisState -> '@0' .                                (rule 23)

	'$'            reduce using rule 23
	'('            reduce using rule 23
	'()'           reduce using rule 23
	')'            reduce using rule 23
	','            reduce using rule 23
	'.'            reduce using rule 23
	';'            reduce using rule 23
	'@+'           reduce using rule 23
	'@+i'          reduce using rule 23
	'@-'           reduce using rule 23
	'@-i'          reduce using rule 23
	'@0'           reduce using rule 23
	'@1'           reduce using rule 23
	']'            reduce using rule 23
	'else'         reduce using rule 23
	'gate'         reduce using rule 23
	'then'         reduce using rule 23
	'}'            reduce using rule 23
	L_integ        reduce using rule 23
	L_Var          reduce using rule 23


State 63

	BasisState -> '@1' .                                (rule 24)

	'$'            reduce using rule 24
	'('            reduce using rule 24
	'()'           reduce using rule 24
	')'            reduce using rule 24
	','            reduce using rule 24
	'.'            reduce using rule 24
	';'            reduce using rule 24
	'@+'           reduce using rule 24
	'@+i'          reduce using rule 24
	'@-'           reduce using rule 24
	'@-i'          reduce using rule 24
	'@0'           reduce using rule 24
	'@1'           reduce using rule 24
	']'            reduce using rule 24
	'else'         reduce using rule 24
	'gate'         reduce using rule 24
	'then'         reduce using rule 24
	'}'            reduce using rule 24
	L_integ        reduce using rule 24
	L_Var          reduce using rule 24


State 64

	Term3 -> 'gate' . Gate                              (rule 93)

	'FSWAP'        shift, and enter state 75
	'H'            shift, and enter state 76
	'ID'           shift, and enter state 77
	'ISWAP'        shift, and enter state 78
	'ROOT_SWAP'    shift, and enter state 79
	'ROOT_SWAP_DAG'shift, and enter state 80
	'ROOT_X'       shift, and enter state 81
	'ROOT_X_DAG'   shift, and enter state 82
	'ROOT_Y'       shift, and enter state 83
	'ROOT_Y_DAG'   shift, and enter state 84
	'ROOT_Z'       shift, and enter state 85
	'ROOT_Z_DAG'   shift, and enter state 86
	'RX'           shift, and enter state 87
	'RY'           shift, and enter state 88
	'RZ'           shift, and enter state 89
	'S'            shift, and enter state 90
	'SQRT_SWAP'    shift, and enter state 91
	'SQRT_SWAP_DAG'shift, and enter state 92
	'SQRT_X'       shift, and enter state 93
	'SQRT_X_DAG'   shift, and enter state 94
	'SQRT_Y'       shift, and enter state 95
	'SQRT_Y_DAG'   shift, and enter state 96
	'SWAP'         shift, and enter state 97
	'SWAP_THETA'   shift, and enter state 98
	'S_DAG'        shift, and enter state 99
	'T'            shift, and enter state 100
	'T_DAG'        shift, and enter state 101
	'U1'           shift, and enter state 102
	'U2'           shift, and enter state 103
	'U3'           shift, and enter state 104
	'X'            shift, and enter state 105
	'Y'            shift, and enter state 106
	'Z'            shift, and enter state 107

	Gate           goto state 74

State 65

	Term1 -> 'if' . Term 'then' Term 'else' Term        (rule 76)

	'('            shift, and enter state 56
	'()'           shift, and enter state 57
	'@+'           shift, and enter state 58
	'@+i'          shift, and enter state 59
	'@-'           shift, and enter state 60
	'@-i'          shift, and enter state 61
	'@0'           shift, and enter state 62
	'@1'           shift, and enter state 63
	'gate'         shift, and enter state 64
	'if'           shift, and enter state 65
	'let'          shift, and enter state 66
	'with'         shift, and enter state 67
	L_integ        shift, and enter state 38
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 68

	Integer        goto state 45
	Var            goto state 46
	Lambda         goto state 47
	BasisState     goto state 48
	Bit            goto state 49
	Tuple          goto state 50
	Term1          goto state 51
	Term2          goto state 52
	Term3          goto state 53
	Term           goto state 73
	LetVariable    goto state 55

State 66

	Term1 -> 'let' . '{' LetVariable '=' Term '}' 'in' Term    (rule 77)
	Term1 -> 'let' . '{' '(' LetVariable ',' ListLetVariable ')' '=' Term '}' 'in' Term    (rule 78)

	'{'            shift, and enter state 72


State 67

	Term2 -> 'with' . ControlTerm 'ctrl' ControlBasisState    (rule 84)
	Term2 -> 'with' . ControlTerms 'ctrl' ControlBasisStates    (rule 85)
	Term2 -> 'with' . ControlTerm 'ctrl' ControlBit     (rule 86)
	Term2 -> 'with' . ControlTerms 'ctrl' ControlBits    (rule 87)

	'['            shift, and enter state 71

	ControlTerm    goto state 69
	ControlTerms   goto state 70

State 68

	Lambda -> L_Lambda .                                (rule 4)

	L_Var          reduce using rule 4


State 69

	Term2 -> 'with' ControlTerm . 'ctrl' ControlBasisState    (rule 84)
	Term2 -> 'with' ControlTerm . 'ctrl' ControlBit     (rule 86)

	'ctrl'         shift, and enter state 146


State 70

	Term2 -> 'with' ControlTerms . 'ctrl' ControlBasisStates    (rule 85)
	Term2 -> 'with' ControlTerms . 'ctrl' ControlBits    (rule 87)

	'ctrl'         shift, and enter state 145


State 71

	ControlTerm -> '[' . Term ']'                       (rule 72)
	ControlTerms -> '[' . Term ',' ListTerm ']'         (rule 73)

	'('            shift, and enter state 56
	'()'           shift, and enter state 57
	'@+'           shift, and enter state 58
	'@+i'          shift, and enter state 59
	'@-'           shift, and enter state 60
	'@-i'          shift, and enter state 61
	'@0'           shift, and enter state 62
	'@1'           shift, and enter state 63
	'gate'         shift, and enter state 64
	'if'           shift, and enter state 65
	'let'          shift, and enter state 66
	'with'         shift, and enter state 67
	L_integ        shift, and enter state 38
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 68

	Integer        goto state 45
	Var            goto state 46
	Lambda         goto state 47
	BasisState     goto state 48
	Bit            goto state 49
	Tuple          goto state 50
	Term1          goto state 51
	Term2          goto state 52
	Term3          goto state 53
	Term           goto state 144
	LetVariable    goto state 55

State 72

	Term1 -> 'let' '{' . LetVariable '=' Term '}' 'in' Term    (rule 77)
	Term1 -> 'let' '{' . '(' LetVariable ',' ListLetVariable ')' '=' Term '}' 'in' Term    (rule 78)

	'('            shift, and enter state 143
	L_Var          shift, and enter state 8

	Var            goto state 120
	LetVariable    goto state 142

State 73

	Term1 -> 'if' Term . 'then' Term 'else' Term        (rule 76)

	'then'         shift, and enter state 141


State 74

	Term3 -> 'gate' Gate .                              (rule 93)

	'$'            reduce using rule 93
	'('            reduce using rule 93
	'()'           reduce using rule 93
	')'            reduce using rule 93
	','            reduce using rule 93
	'.'            reduce using rule 93
	';'            reduce using rule 93
	'@+'           reduce using rule 93
	'@+i'          reduce using rule 93
	'@-'           reduce using rule 93
	'@-i'          reduce using rule 93
	'@0'           reduce using rule 93
	'@1'           reduce using rule 93
	']'            reduce using rule 93
	'else'         reduce using rule 93
	'gate'         reduce using rule 93
	'then'         reduce using rule 93
	'}'            reduce using rule 93
	L_integ        reduce using rule 93
	L_Var          reduce using rule 93


State 75

	Gate -> 'FSWAP' .                                   (rule 59)

	'$'            reduce using rule 59
	'('            reduce using rule 59
	'()'           reduce using rule 59
	')'            reduce using rule 59
	','            reduce using rule 59
	'.'            reduce using rule 59
	';'            reduce using rule 59
	'@+'           reduce using rule 59
	'@+i'          reduce using rule 59
	'@-'           reduce using rule 59
	'@-i'          reduce using rule 59
	'@0'           reduce using rule 59
	'@1'           reduce using rule 59
	']'            reduce using rule 59
	'else'         reduce using rule 59
	'gate'         reduce using rule 59
	'then'         reduce using rule 59
	'}'            reduce using rule 59
	L_integ        reduce using rule 59
	L_Var          reduce using rule 59


State 76

	Gate -> 'H' .                                       (rule 30)

	'$'            reduce using rule 30
	'('            reduce using rule 30
	'()'           reduce using rule 30
	')'            reduce using rule 30
	','            reduce using rule 30
	'.'            reduce using rule 30
	';'            reduce using rule 30
	'@+'           reduce using rule 30
	'@+i'          reduce using rule 30
	'@-'           reduce using rule 30
	'@-i'          reduce using rule 30
	'@0'           reduce using rule 30
	'@1'           reduce using rule 30
	']'            reduce using rule 30
	'else'         reduce using rule 30
	'gate'         reduce using rule 30
	'then'         reduce using rule 30
	'}'            reduce using rule 30
	L_integ        reduce using rule 30
	L_Var          reduce using rule 30


State 77

	Gate -> 'ID' .                                      (rule 34)

	'$'            reduce using rule 34
	'('            reduce using rule 34
	'()'           reduce using rule 34
	')'            reduce using rule 34
	','            reduce using rule 34
	'.'            reduce using rule 34
	';'            reduce using rule 34
	'@+'           reduce using rule 34
	'@+i'          reduce using rule 34
	'@-'           reduce using rule 34
	'@-i'          reduce using rule 34
	'@0'           reduce using rule 34
	'@1'           reduce using rule 34
	']'            reduce using rule 34
	'else'         reduce using rule 34
	'gate'         reduce using rule 34
	'then'         reduce using rule 34
	'}'            reduce using rule 34
	L_integ        reduce using rule 34
	L_Var          reduce using rule 34


State 78

	Gate -> 'ISWAP' .                                   (rule 58)

	'$'            reduce using rule 58
	'('            reduce using rule 58
	'()'           reduce using rule 58
	')'            reduce using rule 58
	','            reduce using rule 58
	'.'            reduce using rule 58
	';'            reduce using rule 58
	'@+'           reduce using rule 58
	'@+i'          reduce using rule 58
	'@-'           reduce using rule 58
	'@-i'          reduce using rule 58
	'@0'           reduce using rule 58
	'@1'           reduce using rule 58
	']'            reduce using rule 58
	'else'         reduce using rule 58
	'gate'         reduce using rule 58
	'then'         reduce using rule 58
	'}'            reduce using rule 58
	L_integ        reduce using rule 58
	L_Var          reduce using rule 58


State 79

	Gate -> 'ROOT_SWAP' . Integer                       (rule 61)

	L_integ        shift, and enter state 38

	Integer        goto state 140

State 80

	Gate -> 'ROOT_SWAP_DAG' . Integer                   (rule 62)

	L_integ        shift, and enter state 38

	Integer        goto state 139

State 81

	Gate -> 'ROOT_X' . Integer                          (rule 35)

	L_integ        shift, and enter state 38

	Integer        goto state 138

State 82

	Gate -> 'ROOT_X_DAG' . Integer                      (rule 36)

	L_integ        shift, and enter state 38

	Integer        goto state 137

State 83

	Gate -> 'ROOT_Y' . Integer                          (rule 37)

	L_integ        shift, and enter state 38

	Integer        goto state 136

State 84

	Gate -> 'ROOT_Y_DAG' . Integer                      (rule 38)

	L_integ        shift, and enter state 38

	Integer        goto state 135

State 85

	Gate -> 'ROOT_Z' . Integer                          (rule 39)

	L_integ        shift, and enter state 38

	Integer        goto state 134

State 86

	Gate -> 'ROOT_Z_DAG' . Integer                      (rule 40)

	L_integ        shift, and enter state 38

	Integer        goto state 133

State 87

	Gate -> 'RX' . Angle                                (rule 49)

	L_doubl        shift, and enter state 2

	Double         goto state 127
	Angle          goto state 132

State 88

	Gate -> 'RY' . Angle                                (rule 50)

	L_doubl        shift, and enter state 2

	Double         goto state 127
	Angle          goto state 131

State 89

	Gate -> 'RZ' . Angle                                (rule 51)

	L_doubl        shift, and enter state 2

	Double         goto state 127
	Angle          goto state 130

State 90

	Gate -> 'S' .                                       (rule 41)

	'$'            reduce using rule 41
	'('            reduce using rule 41
	'()'           reduce using rule 41
	')'            reduce using rule 41
	','            reduce using rule 41
	'.'            reduce using rule 41
	';'            reduce using rule 41
	'@+'           reduce using rule 41
	'@+i'          reduce using rule 41
	'@-'           reduce using rule 41
	'@-i'          reduce using rule 41
	'@0'           reduce using rule 41
	'@1'           reduce using rule 41
	']'            reduce using rule 41
	'else'         reduce using rule 41
	'gate'         reduce using rule 41
	'then'         reduce using rule 41
	'}'            reduce using rule 41
	L_integ        reduce using rule 41
	L_Var          reduce using rule 41


State 91

	Gate -> 'SQRT_SWAP' .                               (rule 56)

	'$'            reduce using rule 56
	'('            reduce using rule 56
	'()'           reduce using rule 56
	')'            reduce using rule 56
	','            reduce using rule 56
	'.'            reduce using rule 56
	';'            reduce using rule 56
	'@+'           reduce using rule 56
	'@+i'          reduce using rule 56
	'@-'           reduce using rule 56
	'@-i'          reduce using rule 56
	'@0'           reduce using rule 56
	'@1'           reduce using rule 56
	']'            reduce using rule 56
	'else'         reduce using rule 56
	'gate'         reduce using rule 56
	'then'         reduce using rule 56
	'}'            reduce using rule 56
	L_integ        reduce using rule 56
	L_Var          reduce using rule 56


State 92

	Gate -> 'SQRT_SWAP_DAG' .                           (rule 57)

	'$'            reduce using rule 57
	'('            reduce using rule 57
	'()'           reduce using rule 57
	')'            reduce using rule 57
	','            reduce using rule 57
	'.'            reduce using rule 57
	';'            reduce using rule 57
	'@+'           reduce using rule 57
	'@+i'          reduce using rule 57
	'@-'           reduce using rule 57
	'@-i'          reduce using rule 57
	'@0'           reduce using rule 57
	'@1'           reduce using rule 57
	']'            reduce using rule 57
	'else'         reduce using rule 57
	'gate'         reduce using rule 57
	'then'         reduce using rule 57
	'}'            reduce using rule 57
	L_integ        reduce using rule 57
	L_Var          reduce using rule 57


State 93

	Gate -> 'SQRT_X' .                                  (rule 45)

	'$'            reduce using rule 45
	'('            reduce using rule 45
	'()'           reduce using rule 45
	')'            reduce using rule 45
	','            reduce using rule 45
	'.'            reduce using rule 45
	';'            reduce using rule 45
	'@+'           reduce using rule 45
	'@+i'          reduce using rule 45
	'@-'           reduce using rule 45
	'@-i'          reduce using rule 45
	'@0'           reduce using rule 45
	'@1'           reduce using rule 45
	']'            reduce using rule 45
	'else'         reduce using rule 45
	'gate'         reduce using rule 45
	'then'         reduce using rule 45
	'}'            reduce using rule 45
	L_integ        reduce using rule 45
	L_Var          reduce using rule 45


State 94

	Gate -> 'SQRT_X_DAG' .                              (rule 46)

	'$'            reduce using rule 46
	'('            reduce using rule 46
	'()'           reduce using rule 46
	')'            reduce using rule 46
	','            reduce using rule 46
	'.'            reduce using rule 46
	';'            reduce using rule 46
	'@+'           reduce using rule 46
	'@+i'          reduce using rule 46
	'@-'           reduce using rule 46
	'@-i'          reduce using rule 46
	'@0'           reduce using rule 46
	'@1'           reduce using rule 46
	']'            reduce using rule 46
	'else'         reduce using rule 46
	'gate'         reduce using rule 46
	'then'         reduce using rule 46
	'}'            reduce using rule 46
	L_integ        reduce using rule 46
	L_Var          reduce using rule 46


State 95

	Gate -> 'SQRT_Y' .                                  (rule 47)

	'$'            reduce using rule 47
	'('            reduce using rule 47
	'()'           reduce using rule 47
	')'            reduce using rule 47
	','            reduce using rule 47
	'.'            reduce using rule 47
	';'            reduce using rule 47
	'@+'           reduce using rule 47
	'@+i'          reduce using rule 47
	'@-'           reduce using rule 47
	'@-i'          reduce using rule 47
	'@0'           reduce using rule 47
	'@1'           reduce using rule 47
	']'            reduce using rule 47
	'else'         reduce using rule 47
	'gate'         reduce using rule 47
	'then'         reduce using rule 47
	'}'            reduce using rule 47
	L_integ        reduce using rule 47
	L_Var          reduce using rule 47


State 96

	Gate -> 'SQRT_Y_DAG' .                              (rule 48)

	'$'            reduce using rule 48
	'('            reduce using rule 48
	'()'           reduce using rule 48
	')'            reduce using rule 48
	','            reduce using rule 48
	'.'            reduce using rule 48
	';'            reduce using rule 48
	'@+'           reduce using rule 48
	'@+i'          reduce using rule 48
	'@-'           reduce using rule 48
	'@-i'          reduce using rule 48
	'@0'           reduce using rule 48
	'@1'           reduce using rule 48
	']'            reduce using rule 48
	'else'         reduce using rule 48
	'gate'         reduce using rule 48
	'then'         reduce using rule 48
	'}'            reduce using rule 48
	L_integ        reduce using rule 48
	L_Var          reduce using rule 48


State 97

	Gate -> 'SWAP' .                                    (rule 55)

	'$'            reduce using rule 55
	'('            reduce using rule 55
	'()'           reduce using rule 55
	')'            reduce using rule 55
	','            reduce using rule 55
	'.'            reduce using rule 55
	';'            reduce using rule 55
	'@+'           reduce using rule 55
	'@+i'          reduce using rule 55
	'@-'           reduce using rule 55
	'@-i'          reduce using rule 55
	'@0'           reduce using rule 55
	'@1'           reduce using rule 55
	']'            reduce using rule 55
	'else'         reduce using rule 55
	'gate'         reduce using rule 55
	'then'         reduce using rule 55
	'}'            reduce using rule 55
	L_integ        reduce using rule 55
	L_Var          reduce using rule 55


State 98

	Gate -> 'SWAP_THETA' . Angle                        (rule 60)

	L_doubl        shift, and enter state 2

	Double         goto state 127
	Angle          goto state 129

State 99

	Gate -> 'S_DAG' .                                   (rule 42)

	'$'            reduce using rule 42
	'('            reduce using rule 42
	'()'           reduce using rule 42
	')'            reduce using rule 42
	','            reduce using rule 42
	'.'            reduce using rule 42
	';'            reduce using rule 42
	'@+'           reduce using rule 42
	'@+i'          reduce using rule 42
	'@-'           reduce using rule 42
	'@-i'          reduce using rule 42
	'@0'           reduce using rule 42
	'@1'           reduce using rule 42
	']'            reduce using rule 42
	'else'         reduce using rule 42
	'gate'         reduce using rule 42
	'then'         reduce using rule 42
	'}'            reduce using rule 42
	L_integ        reduce using rule 42
	L_Var          reduce using rule 42


State 100

	Gate -> 'T' .                                       (rule 43)

	'$'            reduce using rule 43
	'('            reduce using rule 43
	'()'           reduce using rule 43
	')'            reduce using rule 43
	','            reduce using rule 43
	'.'            reduce using rule 43
	';'            reduce using rule 43
	'@+'           reduce using rule 43
	'@+i'          reduce using rule 43
	'@-'           reduce using rule 43
	'@-i'          reduce using rule 43
	'@0'           reduce using rule 43
	'@1'           reduce using rule 43
	']'            reduce using rule 43
	'else'         reduce using rule 43
	'gate'         reduce using rule 43
	'then'         reduce using rule 43
	'}'            reduce using rule 43
	L_integ        reduce using rule 43
	L_Var          reduce using rule 43


State 101

	Gate -> 'T_DAG' .                                   (rule 44)

	'$'            reduce using rule 44
	'('            reduce using rule 44
	'()'           reduce using rule 44
	')'            reduce using rule 44
	','            reduce using rule 44
	'.'            reduce using rule 44
	';'            reduce using rule 44
	'@+'           reduce using rule 44
	'@+i'          reduce using rule 44
	'@-'           reduce using rule 44
	'@-i'          reduce using rule 44
	'@0'           reduce using rule 44
	'@1'           reduce using rule 44
	']'            reduce using rule 44
	'else'         reduce using rule 44
	'gate'         reduce using rule 44
	'then'         reduce using rule 44
	'}'            reduce using rule 44
	L_integ        reduce using rule 44
	L_Var          reduce using rule 44


State 102

	Gate -> 'U1' . Angle                                (rule 52)

	L_doubl        shift, and enter state 2

	Double         goto state 127
	Angle          goto state 128

State 103

	Gate -> 'U2' . '(' Angle ',' Angle ')'              (rule 53)

	'('            shift, and enter state 126


State 104

	Gate -> 'U3' . '(' Angle ',' Angle ',' Angle ')'    (rule 54)

	'('            shift, and enter state 125


State 105

	Gate -> 'X' .                                       (rule 31)

	'$'            reduce using rule 31
	'('            reduce using rule 31
	'()'           reduce using rule 31
	')'            reduce using rule 31
	','            reduce using rule 31
	'.'            reduce using rule 31
	';'            reduce using rule 31
	'@+'           reduce using rule 31
	'@+i'          reduce using rule 31
	'@-'           reduce using rule 31
	'@-i'          reduce using rule 31
	'@0'           reduce using rule 31
	'@1'           reduce using rule 31
	']'            reduce using rule 31
	'else'         reduce using rule 31
	'gate'         reduce using rule 31
	'then'         reduce using rule 31
	'}'            reduce using rule 31
	L_integ        reduce using rule 31
	L_Var          reduce using rule 31


State 106

	Gate -> 'Y' .                                       (rule 32)

	'$'            reduce using rule 32
	'('            reduce using rule 32
	'()'           reduce using rule 32
	')'            reduce using rule 32
	','            reduce using rule 32
	'.'            reduce using rule 32
	';'            reduce using rule 32
	'@+'           reduce using rule 32
	'@+i'          reduce using rule 32
	'@-'           reduce using rule 32
	'@-i'          reduce using rule 32
	'@0'           reduce using rule 32
	'@1'           reduce using rule 32
	']'            reduce using rule 32
	'else'         reduce using rule 32
	'gate'         reduce using rule 32
	'then'         reduce using rule 32
	'}'            reduce using rule 32
	L_integ        reduce using rule 32
	L_Var          reduce using rule 32


State 107

	Gate -> 'Z' .                                       (rule 33)

	'$'            reduce using rule 33
	'('            reduce using rule 33
	'()'           reduce using rule 33
	')'            reduce using rule 33
	','            reduce using rule 33
	'.'            reduce using rule 33
	';'            reduce using rule 33
	'@+'           reduce using rule 33
	'@+i'          reduce using rule 33
	'@-'           reduce using rule 33
	'@-i'          reduce using rule 33
	'@0'           reduce using rule 33
	'@1'           reduce using rule 33
	']'            reduce using rule 33
	'else'         reduce using rule 33
	'gate'         reduce using rule 33
	'then'         reduce using rule 33
	'}'            reduce using rule 33
	L_integ        reduce using rule 33
	L_Var          reduce using rule 33


State 108

	Tuple -> '(' Term . ',' ListTerm ')'                (rule 71)
	Term3 -> '(' Term . ')'                             (rule 97)

	')'            shift, and enter state 123
	','            shift, and enter state 124


State 109

	Term1 -> LetVariable ',' . ListLetVariable '<-' Term ';' Term    (rule 80)

	'<-'           reduce using rule 100
	L_Var          shift, and enter state 8

	Var            goto state 120
	LetVariable    goto state 121
	ListLetVariablegoto state 122

State 110

	Term1 -> LetVariable '<-' . Term ';' Term           (rule 79)

	'('            shift, and enter state 56
	'()'           shift, and enter state 57
	'@+'           shift, and enter state 58
	'@+i'          shift, and enter state 59
	'@-'           shift, and enter state 60
	'@-i'          shift, and enter state 61
	'@0'           shift, and enter state 62
	'@1'           shift, and enter state 63
	'gate'         shift, and enter state 64
	'if'           shift, and enter state 65
	'let'          shift, and enter state 66
	'with'         shift, and enter state 67
	L_integ        shift, and enter state 38
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 68

	Integer        goto state 45
	Var            goto state 46
	Lambda         goto state 47
	BasisState     goto state 48
	Bit            goto state 49
	Tuple          goto state 50
	Term1          goto state 51
	Term2          goto state 52
	Term3          goto state 53
	Term           goto state 119
	LetVariable    goto state 55

State 111

	Term3 -> Var .                                      (rule 91)

	'$'            reduce using rule 91
	'('            reduce using rule 91
	'()'           reduce using rule 91
	')'            reduce using rule 91
	','            reduce using rule 91
	'.'            reduce using rule 91
	';'            reduce using rule 91
	'@+'           reduce using rule 91
	'@+i'          reduce using rule 91
	'@-'           reduce using rule 91
	'@-i'          reduce using rule 91
	'@0'           reduce using rule 91
	'@1'           reduce using rule 91
	']'            reduce using rule 91
	'else'         reduce using rule 91
	'gate'         reduce using rule 91
	'then'         reduce using rule 91
	'}'            reduce using rule 91
	L_integ        reduce using rule 91
	L_Var          reduce using rule 91


State 112

	Term2 -> Term2 Term3 .                              (rule 88)

	'$'            reduce using rule 88
	'('            reduce using rule 88
	'()'           reduce using rule 88
	')'            reduce using rule 88
	','            reduce using rule 88
	'.'            reduce using rule 88
	';'            reduce using rule 88
	'@+'           reduce using rule 88
	'@+i'          reduce using rule 88
	'@-'           reduce using rule 88
	'@-i'          reduce using rule 88
	'@0'           reduce using rule 88
	'@1'           reduce using rule 88
	']'            reduce using rule 88
	'else'         reduce using rule 88
	'gate'         reduce using rule 88
	'then'         reduce using rule 88
	'}'            reduce using rule 88
	L_integ        reduce using rule 88
	L_Var          reduce using rule 88


State 113

	Term1 -> Term2 '$' . Term1                          (rule 82)

	'('            shift, and enter state 56
	'()'           shift, and enter state 57
	'@+'           shift, and enter state 58
	'@+i'          shift, and enter state 59
	'@-'           shift, and enter state 60
	'@-i'          shift, and enter state 61
	'@0'           shift, and enter state 62
	'@1'           shift, and enter state 63
	'gate'         shift, and enter state 64
	'if'           shift, and enter state 65
	'let'          shift, and enter state 66
	'with'         shift, and enter state 67
	L_integ        shift, and enter state 38
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 68

	Integer        goto state 45
	Var            goto state 46
	Lambda         goto state 47
	BasisState     goto state 48
	Bit            goto state 49
	Tuple          goto state 50
	Term1          goto state 118
	Term2          goto state 52
	Term3          goto state 53
	LetVariable    goto state 55

State 114

	Term2 -> Term2 '.' . Term3                          (rule 89)

	'('            shift, and enter state 56
	'()'           shift, and enter state 57
	'@+'           shift, and enter state 58
	'@+i'          shift, and enter state 59
	'@-'           shift, and enter state 60
	'@-i'          shift, and enter state 61
	'@0'           shift, and enter state 62
	'@1'           shift, and enter state 63
	'gate'         shift, and enter state 64
	L_integ        shift, and enter state 38
	L_Var          shift, and enter state 8

	Integer        goto state 45
	Var            goto state 111
	BasisState     goto state 48
	Bit            goto state 49
	Tuple          goto state 50
	Term3          goto state 117

State 115

	Term1 -> Lambda Var . Type '.' Term                 (rule 81)

	'!'            shift, and enter state 18
	'('            shift, and enter state 19
	'()'           shift, and enter state 20
	'Bit'          shift, and enter state 21
	'Qbit'         shift, and enter state 22
	'State'        shift, and enter state 23
	'Unitary'      shift, and enter state 24

	Type5          goto state 12
	Type4          goto state 13
	Type3          goto state 14
	Type2          goto state 15
	Type1          goto state 16
	Type           goto state 116

State 116

	Term1 -> Lambda Var Type . '.' Term                 (rule 81)

	'.'            shift, and enter state 165


State 117

	Term2 -> Term2 '.' Term3 .                          (rule 89)

	'$'            reduce using rule 89
	'('            reduce using rule 89
	'()'           reduce using rule 89
	')'            reduce using rule 89
	','            reduce using rule 89
	'.'            reduce using rule 89
	';'            reduce using rule 89
	'@+'           reduce using rule 89
	'@+i'          reduce using rule 89
	'@-'           reduce using rule 89
	'@-i'          reduce using rule 89
	'@0'           reduce using rule 89
	'@1'           reduce using rule 89
	']'            reduce using rule 89
	'else'         reduce using rule 89
	'gate'         reduce using rule 89
	'then'         reduce using rule 89
	'}'            reduce using rule 89
	L_integ        reduce using rule 89
	L_Var          reduce using rule 89


State 118

	Term1 -> Term2 '$' Term1 .                          (rule 82)

	')'            reduce using rule 82
	','            reduce using rule 82
	';'            reduce using rule 82
	']'            reduce using rule 82
	'else'         reduce using rule 82
	'then'         reduce using rule 82
	'}'            reduce using rule 82


State 119

	Term1 -> LetVariable '<-' Term . ';' Term           (rule 79)

	';'            shift, and enter state 164


State 120

	LetVariable -> Var .                                (rule 99)

	')'            reduce using rule 99
	','            reduce using rule 99
	'<-'           reduce using rule 99
	'='            reduce using rule 99


State 121

	ListLetVariable -> LetVariable .                    (rule 101)
	ListLetVariable -> LetVariable . ',' ListLetVariable    (rule 102)

	')'            reduce using rule 101
	','            shift, and enter state 163
	'<-'           reduce using rule 101


State 122

	Term1 -> LetVariable ',' ListLetVariable . '<-' Term ';' Term    (rule 80)

	'<-'           shift, and enter state 162


State 123

	Term3 -> '(' Term ')' .                             (rule 97)

	'$'            reduce using rule 97
	'('            reduce using rule 97
	'()'           reduce using rule 97
	')'            reduce using rule 97
	','            reduce using rule 97
	'.'            reduce using rule 97
	';'            reduce using rule 97
	'@+'           reduce using rule 97
	'@+i'          reduce using rule 97
	'@-'           reduce using rule 97
	'@-i'          reduce using rule 97
	'@0'           reduce using rule 97
	'@1'           reduce using rule 97
	']'            reduce using rule 97
	'else'         reduce using rule 97
	'gate'         reduce using rule 97
	'then'         reduce using rule 97
	'}'            reduce using rule 97
	L_integ        reduce using rule 97
	L_Var          reduce using rule 97


State 124

	Tuple -> '(' Term ',' . ListTerm ')'                (rule 71)

	'('            shift, and enter state 56
	'()'           shift, and enter state 57
	'@+'           shift, and enter state 58
	'@+i'          shift, and enter state 59
	'@-'           shift, and enter state 60
	'@-i'          shift, and enter state 61
	'@0'           shift, and enter state 62
	'@1'           shift, and enter state 63
	'gate'         shift, and enter state 64
	'if'           shift, and enter state 65
	'let'          shift, and enter state 66
	'with'         shift, and enter state 67
	L_integ        shift, and enter state 38
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 68

	Integer        goto state 45
	Var            goto state 46
	Lambda         goto state 47
	BasisState     goto state 48
	Bit            goto state 49
	Tuple          goto state 50
	ListTerm       goto state 160
	Term1          goto state 51
	Term2          goto state 52
	Term3          goto state 53
	Term           goto state 161
	LetVariable    goto state 55

State 125

	Gate -> 'U3' '(' . Angle ',' Angle ',' Angle ')'    (rule 54)

	L_doubl        shift, and enter state 2

	Double         goto state 127
	Angle          goto state 159

State 126

	Gate -> 'U2' '(' . Angle ',' Angle ')'              (rule 53)

	L_doubl        shift, and enter state 2

	Double         goto state 127
	Angle          goto state 158

State 127

	Angle -> Double .                                   (rule 22)

	'$'            reduce using rule 22
	'('            reduce using rule 22
	'()'           reduce using rule 22
	')'            reduce using rule 22
	','            reduce using rule 22
	'.'            reduce using rule 22
	';'            reduce using rule 22
	'@+'           reduce using rule 22
	'@+i'          reduce using rule 22
	'@-'           reduce using rule 22
	'@-i'          reduce using rule 22
	'@0'           reduce using rule 22
	'@1'           reduce using rule 22
	']'            reduce using rule 22
	'else'         reduce using rule 22
	'gate'         reduce using rule 22
	'then'         reduce using rule 22
	'}'            reduce using rule 22
	L_integ        reduce using rule 22
	L_Var          reduce using rule 22


State 128

	Gate -> 'U1' Angle .                                (rule 52)

	'$'            reduce using rule 52
	'('            reduce using rule 52
	'()'           reduce using rule 52
	')'            reduce using rule 52
	','            reduce using rule 52
	'.'            reduce using rule 52
	';'            reduce using rule 52
	'@+'           reduce using rule 52
	'@+i'          reduce using rule 52
	'@-'           reduce using rule 52
	'@-i'          reduce using rule 52
	'@0'           reduce using rule 52
	'@1'           reduce using rule 52
	']'            reduce using rule 52
	'else'         reduce using rule 52
	'gate'         reduce using rule 52
	'then'         reduce using rule 52
	'}'            reduce using rule 52
	L_integ        reduce using rule 52
	L_Var          reduce using rule 52


State 129

	Gate -> 'SWAP_THETA' Angle .                        (rule 60)

	'$'            reduce using rule 60
	'('            reduce using rule 60
	'()'           reduce using rule 60
	')'            reduce using rule 60
	','            reduce using rule 60
	'.'            reduce using rule 60
	';'            reduce using rule 60
	'@+'           reduce using rule 60
	'@+i'          reduce using rule 60
	'@-'           reduce using rule 60
	'@-i'          reduce using rule 60
	'@0'           reduce using rule 60
	'@1'           reduce using rule 60
	']'            reduce using rule 60
	'else'         reduce using rule 60
	'gate'         reduce using rule 60
	'then'         reduce using rule 60
	'}'            reduce using rule 60
	L_integ        reduce using rule 60
	L_Var          reduce using rule 60


State 130

	Gate -> 'RZ' Angle .                                (rule 51)

	'$'            reduce using rule 51
	'('            reduce using rule 51
	'()'           reduce using rule 51
	')'            reduce using rule 51
	','            reduce using rule 51
	'.'            reduce using rule 51
	';'            reduce using rule 51
	'@+'           reduce using rule 51
	'@+i'          reduce using rule 51
	'@-'           reduce using rule 51
	'@-i'          reduce using rule 51
	'@0'           reduce using rule 51
	'@1'           reduce using rule 51
	']'            reduce using rule 51
	'else'         reduce using rule 51
	'gate'         reduce using rule 51
	'then'         reduce using rule 51
	'}'            reduce using rule 51
	L_integ        reduce using rule 51
	L_Var          reduce using rule 51


State 131

	Gate -> 'RY' Angle .                                (rule 50)

	'$'            reduce using rule 50
	'('            reduce using rule 50
	'()'           reduce using rule 50
	')'            reduce using rule 50
	','            reduce using rule 50
	'.'            reduce using rule 50
	';'            reduce using rule 50
	'@+'           reduce using rule 50
	'@+i'          reduce using rule 50
	'@-'           reduce using rule 50
	'@-i'          reduce using rule 50
	'@0'           reduce using rule 50
	'@1'           reduce using rule 50
	']'            reduce using rule 50
	'else'         reduce using rule 50
	'gate'         reduce using rule 50
	'then'         reduce using rule 50
	'}'            reduce using rule 50
	L_integ        reduce using rule 50
	L_Var          reduce using rule 50


State 132

	Gate -> 'RX' Angle .                                (rule 49)

	'$'            reduce using rule 49
	'('            reduce using rule 49
	'()'           reduce using rule 49
	')'            reduce using rule 49
	','            reduce using rule 49
	'.'            reduce using rule 49
	';'            reduce using rule 49
	'@+'           reduce using rule 49
	'@+i'          reduce using rule 49
	'@-'           reduce using rule 49
	'@-i'          reduce using rule 49
	'@0'           reduce using rule 49
	'@1'           reduce using rule 49
	']'            reduce using rule 49
	'else'         reduce using rule 49
	'gate'         reduce using rule 49
	'then'         reduce using rule 49
	'}'            reduce using rule 49
	L_integ        reduce using rule 49
	L_Var          reduce using rule 49


State 133

	Gate -> 'ROOT_Z_DAG' Integer .                      (rule 40)

	'$'            reduce using rule 40
	'('            reduce using rule 40
	'()'           reduce using rule 40
	')'            reduce using rule 40
	','            reduce using rule 40
	'.'            reduce using rule 40
	';'            reduce using rule 40
	'@+'           reduce using rule 40
	'@+i'          reduce using rule 40
	'@-'           reduce using rule 40
	'@-i'          reduce using rule 40
	'@0'           reduce using rule 40
	'@1'           reduce using rule 40
	']'            reduce using rule 40
	'else'         reduce using rule 40
	'gate'         reduce using rule 40
	'then'         reduce using rule 40
	'}'            reduce using rule 40
	L_integ        reduce using rule 40
	L_Var          reduce using rule 40


State 134

	Gate -> 'ROOT_Z' Integer .                          (rule 39)

	'$'            reduce using rule 39
	'('            reduce using rule 39
	'()'           reduce using rule 39
	')'            reduce using rule 39
	','            reduce using rule 39
	'.'            reduce using rule 39
	';'            reduce using rule 39
	'@+'           reduce using rule 39
	'@+i'          reduce using rule 39
	'@-'           reduce using rule 39
	'@-i'          reduce using rule 39
	'@0'           reduce using rule 39
	'@1'           reduce using rule 39
	']'            reduce using rule 39
	'else'         reduce using rule 39
	'gate'         reduce using rule 39
	'then'         reduce using rule 39
	'}'            reduce using rule 39
	L_integ        reduce using rule 39
	L_Var          reduce using rule 39


State 135

	Gate -> 'ROOT_Y_DAG' Integer .                      (rule 38)

	'$'            reduce using rule 38
	'('            reduce using rule 38
	'()'           reduce using rule 38
	')'            reduce using rule 38
	','            reduce using rule 38
	'.'            reduce using rule 38
	';'            reduce using rule 38
	'@+'           reduce using rule 38
	'@+i'          reduce using rule 38
	'@-'           reduce using rule 38
	'@-i'          reduce using rule 38
	'@0'           reduce using rule 38
	'@1'           reduce using rule 38
	']'            reduce using rule 38
	'else'         reduce using rule 38
	'gate'         reduce using rule 38
	'then'         reduce using rule 38
	'}'            reduce using rule 38
	L_integ        reduce using rule 38
	L_Var          reduce using rule 38


State 136

	Gate -> 'ROOT_Y' Integer .                          (rule 37)

	'$'            reduce using rule 37
	'('            reduce using rule 37
	'()'           reduce using rule 37
	')'            reduce using rule 37
	','            reduce using rule 37
	'.'            reduce using rule 37
	';'            reduce using rule 37
	'@+'           reduce using rule 37
	'@+i'          reduce using rule 37
	'@-'           reduce using rule 37
	'@-i'          reduce using rule 37
	'@0'           reduce using rule 37
	'@1'           reduce using rule 37
	']'            reduce using rule 37
	'else'         reduce using rule 37
	'gate'         reduce using rule 37
	'then'         reduce using rule 37
	'}'            reduce using rule 37
	L_integ        reduce using rule 37
	L_Var          reduce using rule 37


State 137

	Gate -> 'ROOT_X_DAG' Integer .                      (rule 36)

	'$'            reduce using rule 36
	'('            reduce using rule 36
	'()'           reduce using rule 36
	')'            reduce using rule 36
	','            reduce using rule 36
	'.'            reduce using rule 36
	';'            reduce using rule 36
	'@+'           reduce using rule 36
	'@+i'          reduce using rule 36
	'@-'           reduce using rule 36
	'@-i'          reduce using rule 36
	'@0'           reduce using rule 36
	'@1'           reduce using rule 36
	']'            reduce using rule 36
	'else'         reduce using rule 36
	'gate'         reduce using rule 36
	'then'         reduce using rule 36
	'}'            reduce using rule 36
	L_integ        reduce using rule 36
	L_Var          reduce using rule 36


State 138

	Gate -> 'ROOT_X' Integer .                          (rule 35)

	'$'            reduce using rule 35
	'('            reduce using rule 35
	'()'           reduce using rule 35
	')'            reduce using rule 35
	','            reduce using rule 35
	'.'            reduce using rule 35
	';'            reduce using rule 35
	'@+'           reduce using rule 35
	'@+i'          reduce using rule 35
	'@-'           reduce using rule 35
	'@-i'          reduce using rule 35
	'@0'           reduce using rule 35
	'@1'           reduce using rule 35
	']'            reduce using rule 35
	'else'         reduce using rule 35
	'gate'         reduce using rule 35
	'then'         reduce using rule 35
	'}'            reduce using rule 35
	L_integ        reduce using rule 35
	L_Var          reduce using rule 35


State 139

	Gate -> 'ROOT_SWAP_DAG' Integer .                   (rule 62)

	'$'            reduce using rule 62
	'('            reduce using rule 62
	'()'           reduce using rule 62
	')'            reduce using rule 62
	','            reduce using rule 62
	'.'            reduce using rule 62
	';'            reduce using rule 62
	'@+'           reduce using rule 62
	'@+i'          reduce using rule 62
	'@-'           reduce using rule 62
	'@-i'          reduce using rule 62
	'@0'           reduce using rule 62
	'@1'           reduce using rule 62
	']'            reduce using rule 62
	'else'         reduce using rule 62
	'gate'         reduce using rule 62
	'then'         reduce using rule 62
	'}'            reduce using rule 62
	L_integ        reduce using rule 62
	L_Var          reduce using rule 62


State 140

	Gate -> 'ROOT_SWAP' Integer .                       (rule 61)

	'$'            reduce using rule 61
	'('            reduce using rule 61
	'()'           reduce using rule 61
	')'            reduce using rule 61
	','            reduce using rule 61
	'.'            reduce using rule 61
	';'            reduce using rule 61
	'@+'           reduce using rule 61
	'@+i'          reduce using rule 61
	'@-'           reduce using rule 61
	'@-i'          reduce using rule 61
	'@0'           reduce using rule 61
	'@1'           reduce using rule 61
	']'            reduce using rule 61
	'else'         reduce using rule 61
	'gate'         reduce using rule 61
	'then'         reduce using rule 61
	'}'            reduce using rule 61
	L_integ        reduce using rule 61
	L_Var          reduce using rule 61


State 141

	Term1 -> 'if' Term 'then' . Term 'else' Term        (rule 76)

	'('            shift, and enter state 56
	'()'           shift, and enter state 57
	'@+'           shift, and enter state 58
	'@+i'          shift, and enter state 59
	'@-'           shift, and enter state 60
	'@-i'          shift, and enter state 61
	'@0'           shift, and enter state 62
	'@1'           shift, and enter state 63
	'gate'         shift, and enter state 64
	'if'           shift, and enter state 65
	'let'          shift, and enter state 66
	'with'         shift, and enter state 67
	L_integ        shift, and enter state 38
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 68

	Integer        goto state 45
	Var            goto state 46
	Lambda         goto state 47
	BasisState     goto state 48
	Bit            goto state 49
	Tuple          goto state 50
	Term1          goto state 51
	Term2          goto state 52
	Term3          goto state 53
	Term           goto state 157
	LetVariable    goto state 55

State 142

	Term1 -> 'let' '{' LetVariable . '=' Term '}' 'in' Term    (rule 77)

	'='            shift, and enter state 156


State 143

	Term1 -> 'let' '{' '(' . LetVariable ',' ListLetVariable ')' '=' Term '}' 'in' Term    (rule 78)

	L_Var          shift, and enter state 8

	Var            goto state 120
	LetVariable    goto state 155

State 144

	ControlTerm -> '[' Term . ']'                       (rule 72)
	ControlTerms -> '[' Term . ',' ListTerm ']'         (rule 73)

	','            shift, and enter state 153
	']'            shift, and enter state 154


State 145

	Term2 -> 'with' ControlTerms 'ctrl' . ControlBasisStates    (rule 85)
	Term2 -> 'with' ControlTerms 'ctrl' . ControlBits    (rule 87)

	'['            shift, and enter state 152

	ControlBasisStatesgoto state 150
	ControlBits    goto state 151

State 146

	Term2 -> 'with' ControlTerm 'ctrl' . ControlBasisState    (rule 84)
	Term2 -> 'with' ControlTerm 'ctrl' . ControlBit     (rule 86)

	'['            shift, and enter state 149

	ControlBasisStategoto state 147
	ControlBit     goto state 148

State 147

	Term2 -> 'with' ControlTerm 'ctrl' ControlBasisState .    (rule 84)

	'$'            reduce using rule 84
	'('            reduce using rule 84
	'()'           reduce using rule 84
	')'            reduce using rule 84
	','            reduce using rule 84
	'.'            reduce using rule 84
	';'            reduce using rule 84
	'@+'           reduce using rule 84
	'@+i'          reduce using rule 84
	'@-'           reduce using rule 84
	'@-i'          reduce using rule 84
	'@0'           reduce using rule 84
	'@1'           reduce using rule 84
	']'            reduce using rule 84
	'else'         reduce using rule 84
	'gate'         reduce using rule 84
	'then'         reduce using rule 84
	'}'            reduce using rule 84
	L_integ        reduce using rule 84
	L_Var          reduce using rule 84


State 148

	Term2 -> 'with' ControlTerm 'ctrl' ControlBit .     (rule 86)

	'$'            reduce using rule 86
	'('            reduce using rule 86
	'()'           reduce using rule 86
	')'            reduce using rule 86
	','            reduce using rule 86
	'.'            reduce using rule 86
	';'            reduce using rule 86
	'@+'           reduce using rule 86
	'@+i'          reduce using rule 86
	'@-'           reduce using rule 86
	'@-i'          reduce using rule 86
	'@0'           reduce using rule 86
	'@1'           reduce using rule 86
	']'            reduce using rule 86
	'else'         reduce using rule 86
	'gate'         reduce using rule 86
	'then'         reduce using rule 86
	'}'            reduce using rule 86
	L_integ        reduce using rule 86
	L_Var          reduce using rule 86


State 149

	ControlBasisState -> '[' . BasisState ']'           (rule 63)
	ControlBit -> '[' . Integer ']'                     (rule 67)

	'@+'           shift, and enter state 58
	'@+i'          shift, and enter state 59
	'@-'           shift, and enter state 60
	'@-i'          shift, and enter state 61
	'@0'           shift, and enter state 62
	'@1'           shift, and enter state 63
	L_integ        shift, and enter state 38

	Integer        goto state 180
	BasisState     goto state 181

State 150

	Term2 -> 'with' ControlTerms 'ctrl' ControlBasisStates .    (rule 85)

	'$'            reduce using rule 85
	'('            reduce using rule 85
	'()'           reduce using rule 85
	')'            reduce using rule 85
	','            reduce using rule 85
	'.'            reduce using rule 85
	';'            reduce using rule 85
	'@+'           reduce using rule 85
	'@+i'          reduce using rule 85
	'@-'           reduce using rule 85
	'@-i'          reduce using rule 85
	'@0'           reduce using rule 85
	'@1'           reduce using rule 85
	']'            reduce using rule 85
	'else'         reduce using rule 85
	'gate'         reduce using rule 85
	'then'         reduce using rule 85
	'}'            reduce using rule 85
	L_integ        reduce using rule 85
	L_Var          reduce using rule 85


State 151

	Term2 -> 'with' ControlTerms 'ctrl' ControlBits .    (rule 87)

	'$'            reduce using rule 87
	'('            reduce using rule 87
	'()'           reduce using rule 87
	')'            reduce using rule 87
	','            reduce using rule 87
	'.'            reduce using rule 87
	';'            reduce using rule 87
	'@+'           reduce using rule 87
	'@+i'          reduce using rule 87
	'@-'           reduce using rule 87
	'@-i'          reduce using rule 87
	'@0'           reduce using rule 87
	'@1'           reduce using rule 87
	']'            reduce using rule 87
	'else'         reduce using rule 87
	'gate'         reduce using rule 87
	'then'         reduce using rule 87
	'}'            reduce using rule 87
	L_integ        reduce using rule 87
	L_Var          reduce using rule 87


State 152

	ControlBasisStates -> '[' . BasisState ',' ListBasisState ']'    (rule 64)
	ControlBits -> '[' . Integer ',' ListInteger ']'    (rule 68)

	'@+'           shift, and enter state 58
	'@+i'          shift, and enter state 59
	'@-'           shift, and enter state 60
	'@-i'          shift, and enter state 61
	'@0'           shift, and enter state 62
	'@1'           shift, and enter state 63
	L_integ        shift, and enter state 38

	Integer        goto state 178
	BasisState     goto state 179

State 153

	ControlTerms -> '[' Term ',' . ListTerm ']'         (rule 73)

	'('            shift, and enter state 56
	'()'           shift, and enter state 57
	'@+'           shift, and enter state 58
	'@+i'          shift, and enter state 59
	'@-'           shift, and enter state 60
	'@-i'          shift, and enter state 61
	'@0'           shift, and enter state 62
	'@1'           shift, and enter state 63
	'gate'         shift, and enter state 64
	'if'           shift, and enter state 65
	'let'          shift, and enter state 66
	'with'         shift, and enter state 67
	L_integ        shift, and enter state 38
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 68

	Integer        goto state 45
	Var            goto state 46
	Lambda         goto state 47
	BasisState     goto state 48
	Bit            goto state 49
	Tuple          goto state 50
	ListTerm       goto state 177
	Term1          goto state 51
	Term2          goto state 52
	Term3          goto state 53
	Term           goto state 161
	LetVariable    goto state 55

State 154

	ControlTerm -> '[' Term ']' .                       (rule 72)

	'ctrl'         reduce using rule 72


State 155

	Term1 -> 'let' '{' '(' LetVariable . ',' ListLetVariable ')' '=' Term '}' 'in' Term    (rule 78)

	','            shift, and enter state 176


State 156

	Term1 -> 'let' '{' LetVariable '=' . Term '}' 'in' Term    (rule 77)

	'('            shift, and enter state 56
	'()'           shift, and enter state 57
	'@+'           shift, and enter state 58
	'@+i'          shift, and enter state 59
	'@-'           shift, and enter state 60
	'@-i'          shift, and enter state 61
	'@0'           shift, and enter state 62
	'@1'           shift, and enter state 63
	'gate'         shift, and enter state 64
	'if'           shift, and enter state 65
	'let'          shift, and enter state 66
	'with'         shift, and enter state 67
	L_integ        shift, and enter state 38
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 68

	Integer        goto state 45
	Var            goto state 46
	Lambda         goto state 47
	BasisState     goto state 48
	Bit            goto state 49
	Tuple          goto state 50
	Term1          goto state 51
	Term2          goto state 52
	Term3          goto state 53
	Term           goto state 175
	LetVariable    goto state 55

State 157

	Term1 -> 'if' Term 'then' Term . 'else' Term        (rule 76)

	'else'         shift, and enter state 174


State 158

	Gate -> 'U2' '(' Angle . ',' Angle ')'              (rule 53)

	','            shift, and enter state 173


State 159

	Gate -> 'U3' '(' Angle . ',' Angle ',' Angle ')'    (rule 54)

	','            shift, and enter state 172


State 160

	Tuple -> '(' Term ',' ListTerm . ')'                (rule 71)

	')'            shift, and enter state 171


State 161

	ListTerm -> Term .                                  (rule 74)
	ListTerm -> Term . ',' ListTerm                     (rule 75)

	')'            reduce using rule 74
	','            shift, and enter state 170
	']'            reduce using rule 74


State 162

	Term1 -> LetVariable ',' ListLetVariable '<-' . Term ';' Term    (rule 80)

	'('            shift, and enter state 56
	'()'           shift, and enter state 57
	'@+'           shift, and enter state 58
	'@+i'          shift, and enter state 59
	'@-'           shift, and enter state 60
	'@-i'          shift, and enter state 61
	'@0'           shift, and enter state 62
	'@1'           shift, and enter state 63
	'gate'         shift, and enter state 64
	'if'           shift, and enter state 65
	'let'          shift, and enter state 66
	'with'         shift, and enter state 67
	L_integ        shift, and enter state 38
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 68

	Integer        goto state 45
	Var            goto state 46
	Lambda         goto state 47
	BasisState     goto state 48
	Bit            goto state 49
	Tuple          goto state 50
	Term1          goto state 51
	Term2          goto state 52
	Term3          goto state 53
	Term           goto state 169
	LetVariable    goto state 55

State 163

	ListLetVariable -> LetVariable ',' . ListLetVariable    (rule 102)

	')'            reduce using rule 100
	'<-'           reduce using rule 100
	L_Var          shift, and enter state 8

	Var            goto state 120
	LetVariable    goto state 121
	ListLetVariablegoto state 168

State 164

	Term1 -> LetVariable '<-' Term ';' . Term           (rule 79)

	'('            shift, and enter state 56
	'()'           shift, and enter state 57
	'@+'           shift, and enter state 58
	'@+i'          shift, and enter state 59
	'@-'           shift, and enter state 60
	'@-i'          shift, and enter state 61
	'@0'           shift, and enter state 62
	'@1'           shift, and enter state 63
	'gate'         shift, and enter state 64
	'if'           shift, and enter state 65
	'let'          shift, and enter state 66
	'with'         shift, and enter state 67
	L_integ        shift, and enter state 38
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 68

	Integer        goto state 45
	Var            goto state 46
	Lambda         goto state 47
	BasisState     goto state 48
	Bit            goto state 49
	Tuple          goto state 50
	Term1          goto state 51
	Term2          goto state 52
	Term3          goto state 53
	Term           goto state 167
	LetVariable    goto state 55

State 165

	Term1 -> Lambda Var Type '.' . Term                 (rule 81)

	'('            shift, and enter state 56
	'()'           shift, and enter state 57
	'@+'           shift, and enter state 58
	'@+i'          shift, and enter state 59
	'@-'           shift, and enter state 60
	'@-i'          shift, and enter state 61
	'@0'           shift, and enter state 62
	'@1'           shift, and enter state 63
	'gate'         shift, and enter state 64
	'if'           shift, and enter state 65
	'let'          shift, and enter state 66
	'with'         shift, and enter state 67
	L_integ        shift, and enter state 38
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 68

	Integer        goto state 45
	Var            goto state 46
	Lambda         goto state 47
	BasisState     goto state 48
	Bit            goto state 49
	Tuple          goto state 50
	Term1          goto state 51
	Term2          goto state 52
	Term3          goto state 53
	Term           goto state 166
	LetVariable    goto state 55

State 166

	Term1 -> Lambda Var Type '.' Term .                 (rule 81)

	')'            reduce using rule 81
	','            reduce using rule 81
	';'            reduce using rule 81
	']'            reduce using rule 81
	'else'         reduce using rule 81
	'then'         reduce using rule 81
	'}'            reduce using rule 81


State 167

	Term1 -> LetVariable '<-' Term ';' Term .           (rule 79)

	')'            reduce using rule 79
	','            reduce using rule 79
	';'            reduce using rule 79
	']'            reduce using rule 79
	'else'         reduce using rule 79
	'then'         reduce using rule 79
	'}'            reduce using rule 79


State 168

	ListLetVariable -> LetVariable ',' ListLetVariable .    (rule 102)

	')'            reduce using rule 102
	'<-'           reduce using rule 102


State 169

	Term1 -> LetVariable ',' ListLetVariable '<-' Term . ';' Term    (rule 80)

	';'            shift, and enter state 193


State 170

	ListTerm -> Term ',' . ListTerm                     (rule 75)

	'('            shift, and enter state 56
	'()'           shift, and enter state 57
	'@+'           shift, and enter state 58
	'@+i'          shift, and enter state 59
	'@-'           shift, and enter state 60
	'@-i'          shift, and enter state 61
	'@0'           shift, and enter state 62
	'@1'           shift, and enter state 63
	'gate'         shift, and enter state 64
	'if'           shift, and enter state 65
	'let'          shift, and enter state 66
	'with'         shift, and enter state 67
	L_integ        shift, and enter state 38
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 68

	Integer        goto state 45
	Var            goto state 46
	Lambda         goto state 47
	BasisState     goto state 48
	Bit            goto state 49
	Tuple          goto state 50
	ListTerm       goto state 192
	Term1          goto state 51
	Term2          goto state 52
	Term3          goto state 53
	Term           goto state 161
	LetVariable    goto state 55

State 171

	Tuple -> '(' Term ',' ListTerm ')' .                (rule 71)

	'$'            reduce using rule 71
	'('            reduce using rule 71
	'()'           reduce using rule 71
	')'            reduce using rule 71
	','            reduce using rule 71
	'.'            reduce using rule 71
	';'            reduce using rule 71
	'@+'           reduce using rule 71
	'@+i'          reduce using rule 71
	'@-'           reduce using rule 71
	'@-i'          reduce using rule 71
	'@0'           reduce using rule 71
	'@1'           reduce using rule 71
	']'            reduce using rule 71
	'else'         reduce using rule 71
	'gate'         reduce using rule 71
	'then'         reduce using rule 71
	'}'            reduce using rule 71
	L_integ        reduce using rule 71
	L_Var          reduce using rule 71


State 172

	Gate -> 'U3' '(' Angle ',' . Angle ',' Angle ')'    (rule 54)

	L_doubl        shift, and enter state 2

	Double         goto state 127
	Angle          goto state 191

State 173

	Gate -> 'U2' '(' Angle ',' . Angle ')'              (rule 53)

	L_doubl        shift, and enter state 2

	Double         goto state 127
	Angle          goto state 190

State 174

	Term1 -> 'if' Term 'then' Term 'else' . Term        (rule 76)

	'('            shift, and enter state 56
	'()'           shift, and enter state 57
	'@+'           shift, and enter state 58
	'@+i'          shift, and enter state 59
	'@-'           shift, and enter state 60
	'@-i'          shift, and enter state 61
	'@0'           shift, and enter state 62
	'@1'           shift, and enter state 63
	'gate'         shift, and enter state 64
	'if'           shift, and enter state 65
	'let'          shift, and enter state 66
	'with'         shift, and enter state 67
	L_integ        shift, and enter state 38
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 68

	Integer        goto state 45
	Var            goto state 46
	Lambda         goto state 47
	BasisState     goto state 48
	Bit            goto state 49
	Tuple          goto state 50
	Term1          goto state 51
	Term2          goto state 52
	Term3          goto state 53
	Term           goto state 189
	LetVariable    goto state 55

State 175

	Term1 -> 'let' '{' LetVariable '=' Term . '}' 'in' Term    (rule 77)

	'}'            shift, and enter state 188


State 176

	Term1 -> 'let' '{' '(' LetVariable ',' . ListLetVariable ')' '=' Term '}' 'in' Term    (rule 78)

	')'            reduce using rule 100
	L_Var          shift, and enter state 8

	Var            goto state 120
	LetVariable    goto state 121
	ListLetVariablegoto state 187

State 177

	ControlTerms -> '[' Term ',' ListTerm . ']'         (rule 73)

	']'            shift, and enter state 186


State 178

	ControlBits -> '[' Integer . ',' ListInteger ']'    (rule 68)

	','            shift, and enter state 185


State 179

	ControlBasisStates -> '[' BasisState . ',' ListBasisState ']'    (rule 64)

	','            shift, and enter state 184


State 180

	ControlBit -> '[' Integer . ']'                     (rule 67)

	']'            shift, and enter state 183


State 181

	ControlBasisState -> '[' BasisState . ']'           (rule 63)

	']'            shift, and enter state 182


State 182

	ControlBasisState -> '[' BasisState ']' .           (rule 63)

	'$'            reduce using rule 63
	'('            reduce using rule 63
	'()'           reduce using rule 63
	')'            reduce using rule 63
	','            reduce using rule 63
	'.'            reduce using rule 63
	';'            reduce using rule 63
	'@+'           reduce using rule 63
	'@+i'          reduce using rule 63
	'@-'           reduce using rule 63
	'@-i'          reduce using rule 63
	'@0'           reduce using rule 63
	'@1'           reduce using rule 63
	']'            reduce using rule 63
	'else'         reduce using rule 63
	'gate'         reduce using rule 63
	'then'         reduce using rule 63
	'}'            reduce using rule 63
	L_integ        reduce using rule 63
	L_Var          reduce using rule 63


State 183

	ControlBit -> '[' Integer ']' .                     (rule 67)

	'$'            reduce using rule 67
	'('            reduce using rule 67
	'()'           reduce using rule 67
	')'            reduce using rule 67
	','            reduce using rule 67
	'.'            reduce using rule 67
	';'            reduce using rule 67
	'@+'           reduce using rule 67
	'@+i'          reduce using rule 67
	'@-'           reduce using rule 67
	'@-i'          reduce using rule 67
	'@0'           reduce using rule 67
	'@1'           reduce using rule 67
	']'            reduce using rule 67
	'else'         reduce using rule 67
	'gate'         reduce using rule 67
	'then'         reduce using rule 67
	'}'            reduce using rule 67
	L_integ        reduce using rule 67
	L_Var          reduce using rule 67


State 184

	ControlBasisStates -> '[' BasisState ',' . ListBasisState ']'    (rule 64)

	'@+'           shift, and enter state 58
	'@+i'          shift, and enter state 59
	'@-'           shift, and enter state 60
	'@-i'          shift, and enter state 61
	'@0'           shift, and enter state 62
	'@1'           shift, and enter state 63

	BasisState     goto state 201
	ListBasisState goto state 202

State 185

	ControlBits -> '[' Integer ',' . ListInteger ']'    (rule 68)

	L_integ        shift, and enter state 38

	Integer        goto state 199
	ListInteger    goto state 200

State 186

	ControlTerms -> '[' Term ',' ListTerm ']' .         (rule 73)

	'ctrl'         reduce using rule 73


State 187

	Term1 -> 'let' '{' '(' LetVariable ',' ListLetVariable . ')' '=' Term '}' 'in' Term    (rule 78)

	')'            shift, and enter state 198


State 188

	Term1 -> 'let' '{' LetVariable '=' Term '}' . 'in' Term    (rule 77)

	'in'           shift, and enter state 197


State 189

	Term1 -> 'if' Term 'then' Term 'else' Term .        (rule 76)

	')'            reduce using rule 76
	','            reduce using rule 76
	';'            reduce using rule 76
	']'            reduce using rule 76
	'else'         reduce using rule 76
	'then'         reduce using rule 76
	'}'            reduce using rule 76


State 190

	Gate -> 'U2' '(' Angle ',' Angle . ')'              (rule 53)

	')'            shift, and enter state 196


State 191

	Gate -> 'U3' '(' Angle ',' Angle . ',' Angle ')'    (rule 54)

	','            shift, and enter state 195


State 192

	ListTerm -> Term ',' ListTerm .                     (rule 75)

	')'            reduce using rule 75
	']'            reduce using rule 75


State 193

	Term1 -> LetVariable ',' ListLetVariable '<-' Term ';' . Term    (rule 80)

	'('            shift, and enter state 56
	'()'           shift, and enter state 57
	'@+'           shift, and enter state 58
	'@+i'          shift, and enter state 59
	'@-'           shift, and enter state 60
	'@-i'          shift, and enter state 61
	'@0'           shift, and enter state 62
	'@1'           shift, and enter state 63
	'gate'         shift, and enter state 64
	'if'           shift, and enter state 65
	'let'          shift, and enter state 66
	'with'         shift, and enter state 67
	L_integ        shift, and enter state 38
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 68

	Integer        goto state 45
	Var            goto state 46
	Lambda         goto state 47
	BasisState     goto state 48
	Bit            goto state 49
	Tuple          goto state 50
	Term1          goto state 51
	Term2          goto state 52
	Term3          goto state 53
	Term           goto state 194
	LetVariable    goto state 55

State 194

	Term1 -> LetVariable ',' ListLetVariable '<-' Term ';' Term .    (rule 80)

	')'            reduce using rule 80
	','            reduce using rule 80
	';'            reduce using rule 80
	']'            reduce using rule 80
	'else'         reduce using rule 80
	'then'         reduce using rule 80
	'}'            reduce using rule 80


State 195

	Gate -> 'U3' '(' Angle ',' Angle ',' . Angle ')'    (rule 54)

	L_doubl        shift, and enter state 2

	Double         goto state 127
	Angle          goto state 209

State 196

	Gate -> 'U2' '(' Angle ',' Angle ')' .              (rule 53)

	'$'            reduce using rule 53
	'('            reduce using rule 53
	'()'           reduce using rule 53
	')'            reduce using rule 53
	','            reduce using rule 53
	'.'            reduce using rule 53
	';'            reduce using rule 53
	'@+'           reduce using rule 53
	'@+i'          reduce using rule 53
	'@-'           reduce using rule 53
	'@-i'          reduce using rule 53
	'@0'           reduce using rule 53
	'@1'           reduce using rule 53
	']'            reduce using rule 53
	'else'         reduce using rule 53
	'gate'         reduce using rule 53
	'then'         reduce using rule 53
	'}'            reduce using rule 53
	L_integ        reduce using rule 53
	L_Var          reduce using rule 53


State 197

	Term1 -> 'let' '{' LetVariable '=' Term '}' 'in' . Term    (rule 77)

	'('            shift, and enter state 56
	'()'           shift, and enter state 57
	'@+'           shift, and enter state 58
	'@+i'          shift, and enter state 59
	'@-'           shift, and enter state 60
	'@-i'          shift, and enter state 61
	'@0'           shift, and enter state 62
	'@1'           shift, and enter state 63
	'gate'         shift, and enter state 64
	'if'           shift, and enter state 65
	'let'          shift, and enter state 66
	'with'         shift, and enter state 67
	L_integ        shift, and enter state 38
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 68

	Integer        goto state 45
	Var            goto state 46
	Lambda         goto state 47
	BasisState     goto state 48
	Bit            goto state 49
	Tuple          goto state 50
	Term1          goto state 51
	Term2          goto state 52
	Term3          goto state 53
	Term           goto state 208
	LetVariable    goto state 55

State 198

	Term1 -> 'let' '{' '(' LetVariable ',' ListLetVariable ')' . '=' Term '}' 'in' Term    (rule 78)

	'='            shift, and enter state 207


State 199

	ListInteger -> Integer .                            (rule 69)
	ListInteger -> Integer . ',' ListInteger            (rule 70)

	','            shift, and enter state 206
	']'            reduce using rule 69


State 200

	ControlBits -> '[' Integer ',' ListInteger . ']'    (rule 68)

	']'            shift, and enter state 205


State 201

	ListBasisState -> BasisState .                      (rule 65)
	ListBasisState -> BasisState . ',' ListBasisState    (rule 66)

	','            shift, and enter state 204
	']'            reduce using rule 65


State 202

	ControlBasisStates -> '[' BasisState ',' ListBasisState . ']'    (rule 64)

	']'            shift, and enter state 203


State 203

	ControlBasisStates -> '[' BasisState ',' ListBasisState ']' .    (rule 64)

	'$'            reduce using rule 64
	'('            reduce using rule 64
	'()'           reduce using rule 64
	')'            reduce using rule 64
	','            reduce using rule 64
	'.'            reduce using rule 64
	';'            reduce using rule 64
	'@+'           reduce using rule 64
	'@+i'          reduce using rule 64
	'@-'           reduce using rule 64
	'@-i'          reduce using rule 64
	'@0'           reduce using rule 64
	'@1'           reduce using rule 64
	']'            reduce using rule 64
	'else'         reduce using rule 64
	'gate'         reduce using rule 64
	'then'         reduce using rule 64
	'}'            reduce using rule 64
	L_integ        reduce using rule 64
	L_Var          reduce using rule 64


State 204

	ListBasisState -> BasisState ',' . ListBasisState    (rule 66)

	'@+'           shift, and enter state 58
	'@+i'          shift, and enter state 59
	'@-'           shift, and enter state 60
	'@-i'          shift, and enter state 61
	'@0'           shift, and enter state 62
	'@1'           shift, and enter state 63

	BasisState     goto state 201
	ListBasisState goto state 213

State 205

	ControlBits -> '[' Integer ',' ListInteger ']' .    (rule 68)

	'$'            reduce using rule 68
	'('            reduce using rule 68
	'()'           reduce using rule 68
	')'            reduce using rule 68
	','            reduce using rule 68
	'.'            reduce using rule 68
	';'            reduce using rule 68
	'@+'           reduce using rule 68
	'@+i'          reduce using rule 68
	'@-'           reduce using rule 68
	'@-i'          reduce using rule 68
	'@0'           reduce using rule 68
	'@1'           reduce using rule 68
	']'            reduce using rule 68
	'else'         reduce using rule 68
	'gate'         reduce using rule 68
	'then'         reduce using rule 68
	'}'            reduce using rule 68
	L_integ        reduce using rule 68
	L_Var          reduce using rule 68


State 206

	ListInteger -> Integer ',' . ListInteger            (rule 70)

	L_integ        shift, and enter state 38

	Integer        goto state 199
	ListInteger    goto state 212

State 207

	Term1 -> 'let' '{' '(' LetVariable ',' ListLetVariable ')' '=' . Term '}' 'in' Term    (rule 78)

	'('            shift, and enter state 56
	'()'           shift, and enter state 57
	'@+'           shift, and enter state 58
	'@+i'          shift, and enter state 59
	'@-'           shift, and enter state 60
	'@-i'          shift, and enter state 61
	'@0'           shift, and enter state 62
	'@1'           shift, and enter state 63
	'gate'         shift, and enter state 64
	'if'           shift, and enter state 65
	'let'          shift, and enter state 66
	'with'         shift, and enter state 67
	L_integ        shift, and enter state 38
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 68

	Integer        goto state 45
	Var            goto state 46
	Lambda         goto state 47
	BasisState     goto state 48
	Bit            goto state 49
	Tuple          goto state 50
	Term1          goto state 51
	Term2          goto state 52
	Term3          goto state 53
	Term           goto state 211
	LetVariable    goto state 55

State 208

	Term1 -> 'let' '{' LetVariable '=' Term '}' 'in' Term .    (rule 77)

	')'            reduce using rule 77
	','            reduce using rule 77
	';'            reduce using rule 77
	']'            reduce using rule 77
	'else'         reduce using rule 77
	'then'         reduce using rule 77
	'}'            reduce using rule 77


State 209

	Gate -> 'U3' '(' Angle ',' Angle ',' Angle . ')'    (rule 54)

	')'            shift, and enter state 210


State 210

	Gate -> 'U3' '(' Angle ',' Angle ',' Angle ')' .    (rule 54)

	'$'            reduce using rule 54
	'('            reduce using rule 54
	'()'           reduce using rule 54
	')'            reduce using rule 54
	','            reduce using rule 54
	'.'            reduce using rule 54
	';'            reduce using rule 54
	'@+'           reduce using rule 54
	'@+i'          reduce using rule 54
	'@-'           reduce using rule 54
	'@-i'          reduce using rule 54
	'@0'           reduce using rule 54
	'@1'           reduce using rule 54
	']'            reduce using rule 54
	'else'         reduce using rule 54
	'gate'         reduce using rule 54
	'then'         reduce using rule 54
	'}'            reduce using rule 54
	L_integ        reduce using rule 54
	L_Var          reduce using rule 54


State 211

	Term1 -> 'let' '{' '(' LetVariable ',' ListLetVariable ')' '=' Term . '}' 'in' Term    (rule 78)

	'}'            shift, and enter state 214


State 212

	ListInteger -> Integer ',' ListInteger .            (rule 70)

	']'            reduce using rule 70


State 213

	ListBasisState -> BasisState ',' ListBasisState .    (rule 66)

	']'            reduce using rule 66


State 214

	Term1 -> 'let' '{' '(' LetVariable ',' ListLetVariable ')' '=' Term '}' . 'in' Term    (rule 78)

	'in'           shift, and enter state 215


State 215

	Term1 -> 'let' '{' '(' LetVariable ',' ListLetVariable ')' '=' Term '}' 'in' . Term    (rule 78)

	'('            shift, and enter state 56
	'()'           shift, and enter state 57
	'@+'           shift, and enter state 58
	'@+i'          shift, and enter state 59
	'@-'           shift, and enter state 60
	'@-i'          shift, and enter state 61
	'@0'           shift, and enter state 62
	'@1'           shift, and enter state 63
	'gate'         shift, and enter state 64
	'if'           shift, and enter state 65
	'let'          shift, and enter state 66
	'with'         shift, and enter state 67
	L_integ        shift, and enter state 38
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 68

	Integer        goto state 45
	Var            goto state 46
	Lambda         goto state 47
	BasisState     goto state 48
	Bit            goto state 49
	Tuple          goto state 50
	Term1          goto state 51
	Term2          goto state 52
	Term3          goto state 53
	Term           goto state 216
	LetVariable    goto state 55

State 216

	Term1 -> 'let' '{' '(' LetVariable ',' ListLetVariable ')' '=' Term '}' 'in' Term .    (rule 78)

	')'            reduce using rule 78
	','            reduce using rule 78
	';'            reduce using rule 78
	']'            reduce using rule 78
	'else'         reduce using rule 78
	'then'         reduce using rule 78
	'}'            reduce using rule 78


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 116
Number of terminals: 74
Number of non-terminals: 40
Number of states: 217
