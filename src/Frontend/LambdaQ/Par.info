-----------------------------------------------------------------------------
Info file generated by Happy Version 1.20.0 from Frontend/LambdaQ/Par.y
-----------------------------------------------------------------------------

state 54 contains 1 shift/reduce conflicts.
state 63 contains 12 shift/reduce conflicts.
state 66 contains 17 shift/reduce conflicts.
state 225 contains 1 shift/reduce conflicts.

-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_pIntegerExpr -> IntegerExpr                 (0)
	%start_pIntegerExpr1 -> IntegerExpr1               (1)
	%start_pIntegerExpr2 -> IntegerExpr2               (2)
	%start_pProgram -> Program                         (3)
	%start_pType -> Type                               (4)
	%start_pType1 -> Type1                             (5)
	%start_pType2 -> Type2                             (6)
	%start_pType3 -> Type3                             (7)
	%start_pType5 -> Type5                             (8)
	%start_pType4 -> Type4                             (9)
	%start_pAngle -> Angle                             (10)
	%start_pBasisState -> BasisState                   (11)
	%start_pBit -> Bit                                 (12)
	%start_pGate -> Gate                               (13)
	%start_pListVar -> ListVar                         (14)
	%start_pControlBasisState -> ControlBasisState     (15)
	%start_pControlBasisStates -> ControlBasisStates   (16)
	%start_pListBasisState -> ListBasisState           (17)
	%start_pControlBit -> ControlBit                   (18)
	%start_pControlBits -> ControlBits                 (19)
	%start_pListInteger -> ListInteger                 (20)
	%start_pTuple -> Tuple                             (21)
	%start_pControlTerm -> ControlTerm                 (22)
	%start_pControlTerms -> ControlTerms               (23)
	%start_pListTerm -> ListTerm                       (24)
	%start_pTerm1 -> Term1                             (25)
	%start_pTerm2 -> Term2                             (26)
	%start_pTerm3 -> Term3                             (27)
	%start_pTerm -> Term                               (28)
	%start_pCaseExpression -> CaseExpression           (29)
	%start_pListCaseExpression -> ListCaseExpression   (30)
	%start_pArg -> Arg                                 (31)
	%start_pListArg -> ListArg                         (32)
	%start_pFunctionDefinition -> FunctionDefinition   (33)
	%start_pFunctionType -> FunctionType               (34)
	%start_pFunctionDeclaration -> FunctionDeclaration   (35)
	%start_pListFunctionDeclaration -> ListFunctionDeclaration   (36)
	Double -> L_doubl                                  (37)
	Integer -> L_integ                                 (38)
	ZeroOrOne -> L_ZeroOrOne                           (39)
	Var -> L_Var                                       (40)
	Lambda -> L_Lambda                                 (41)
	IntegerExpr -> IntegerExpr '+' IntegerExpr1        (42)
	IntegerExpr -> IntegerExpr '-' IntegerExpr1        (43)
	IntegerExpr -> IntegerExpr1                        (44)
	IntegerExpr1 -> IntegerExpr1 '*' IntegerExpr2      (45)
	IntegerExpr1 -> IntegerExpr1 '/' IntegerExpr2      (46)
	IntegerExpr1 -> IntegerExpr2                       (47)
	IntegerExpr2 -> Integer                            (48)
	IntegerExpr2 -> '(' IntegerExpr ')'                (49)
	Program -> ListFunctionDeclaration                 (50)
	Type -> Type '->' Type1                            (51)
	Type -> Type1                                      (52)
	Type1 -> Type1 '+' Type2                           (53)
	Type1 -> Type2                                     (54)
	Type2 -> Type2 '*' Type3                           (55)
	Type2 -> Type2 '**' Integer                        (56)
	Type2 -> Type3                                     (57)
	Type3 -> '!' Type4                                 (58)
	Type3 -> Type4                                     (59)
	Type5 -> 'Bit'                                     (60)
	Type5 -> 'Int'                                     (61)
	Type5 -> 'Qbit'                                    (62)
	Type5 -> 'State'                                   (63)
	Type5 -> 'Unitary'                                 (64)
	Type5 -> '()'                                      (65)
	Type5 -> '(' Type ')'                              (66)
	Type4 -> Type5                                     (67)
	Angle -> Double                                    (68)
	BasisState -> '@0'                                 (69)
	BasisState -> '@1'                                 (70)
	BasisState -> '@+'                                 (71)
	BasisState -> '@-'                                 (72)
	BasisState -> '@+i'                                (73)
	BasisState -> '@-i'                                (74)
	Bit -> ZeroOrOne                                   (75)
	Gate -> 'H'                                        (76)
	Gate -> 'X'                                        (77)
	Gate -> 'Y'                                        (78)
	Gate -> 'Z'                                        (79)
	Gate -> 'ID'                                       (80)
	Gate -> 'ROOT_X' Integer                           (81)
	Gate -> 'ROOT_X_DAG' Integer                       (82)
	Gate -> 'ROOT_Y' Integer                           (83)
	Gate -> 'ROOT_Y_DAG' Integer                       (84)
	Gate -> 'ROOT_Z' Integer                           (85)
	Gate -> 'ROOT_Z_DAG' Integer                       (86)
	Gate -> 'S'                                        (87)
	Gate -> 'S_DAG'                                    (88)
	Gate -> 'T'                                        (89)
	Gate -> 'T_DAG'                                    (90)
	Gate -> 'SQRT_X'                                   (91)
	Gate -> 'SQRT_X_DAG'                               (92)
	Gate -> 'SQRT_Y'                                   (93)
	Gate -> 'SQRT_Y_DAG'                               (94)
	Gate -> 'RX' Angle                                 (95)
	Gate -> 'RY' Angle                                 (96)
	Gate -> 'RZ' Angle                                 (97)
	Gate -> 'U1' Angle                                 (98)
	Gate -> 'U2' '(' Angle ',' Angle ')'               (99)
	Gate -> 'U3' '(' Angle ',' Angle ',' Angle ')'     (100)
	Gate -> 'SWAP'                                     (101)
	Gate -> 'SQRT_SWAP'                                (102)
	Gate -> 'SQRT_SWAP_DAG'                            (103)
	Gate -> 'ISWAP'                                    (104)
	Gate -> 'FSWAP'                                    (105)
	Gate -> 'SWAP_THETA' Angle                         (106)
	Gate -> 'ROOT_SWAP' Integer                        (107)
	Gate -> 'ROOT_SWAP_DAG' Integer                    (108)
	Gate -> 'QFT' Integer                              (109)
	Gate -> 'QFT_DAG' Integer                          (110)
	ListVar -> Var                                     (111)
	ListVar -> Var ',' ListVar                         (112)
	ControlBasisState -> '[' BasisState ']'            (113)
	ControlBasisStates -> '[' BasisState ',' ListBasisState ']'   (114)
	ListBasisState -> BasisState                       (115)
	ListBasisState -> BasisState ',' ListBasisState    (116)
	ControlBit -> '[' Integer ']'                      (117)
	ControlBits -> '[' Integer ',' ListInteger ']'     (118)
	ListInteger -> Integer                             (119)
	ListInteger -> Integer ',' ListInteger             (120)
	Tuple -> '(' Term ',' ListTerm ')'                 (121)
	ControlTerm -> '[' Term ']'                        (122)
	ControlTerms -> '[' Term ',' ListTerm ']'          (123)
	ListTerm -> Term                                   (124)
	ListTerm -> Term ',' ListTerm                      (125)
	Term1 -> 'if' Term 'then' Term 'else' Term         (126)
	Term1 -> 'let' '{' Var '=' Term '}' 'in' Term      (127)
	Term1 -> 'let' '{' '(' Var ',' ListVar ')' '=' Term '}' 'in' Term   (128)
	Term1 -> Var '<-' Term ';' Term                    (129)
	Term1 -> Var ',' ListVar '<-' Term ';' Term        (130)
	Term1 -> 'case' Term 'of' CaseExpression ListCaseExpression   (131)
	Term1 -> Lambda Var Type '.' Term                  (132)
	Term1 -> Term2 '$' Term1                           (133)
	Term1 -> Term2                                     (134)
	Term2 -> 'with' ControlTerm 'ctrl' ControlBasisState   (135)
	Term2 -> 'with' ControlTerms 'ctrl' ControlBasisStates   (136)
	Term2 -> 'with' ControlTerm 'ctrl' ControlBit      (137)
	Term2 -> 'with' ControlTerms 'ctrl' ControlBits    (138)
	Term2 -> Term2 Term3                               (139)
	Term2 -> Term2 '.' Term3                           (140)
	Term2 -> Term3                                     (141)
	Term3 -> Var                                       (142)
	Term3 -> BasisState                                (143)
	Term3 -> IntegerExpr                               (144)
	Term3 -> 'gate' Gate                               (145)
	Term3 -> Tuple                                     (146)
	Term3 -> Bit                                       (147)
	Term3 -> '()'                                      (148)
	Term3 -> '(' Term ')'                              (149)
	Term -> Term1                                      (150)
	CaseExpression -> Term '->' Term                   (151)
	ListCaseExpression -> CaseExpression               (152)
	ListCaseExpression -> CaseExpression ListCaseExpression   (153)
	Arg -> Var                                         (154)
	ListArg ->                                         (155)
	ListArg -> Arg ListArg                             (156)
	FunctionDefinition -> Var ListArg '=' Term         (157)
	FunctionDefinition -> FunctionDefinition ';'       (158)
	FunctionType -> Var '::' Type                      (159)
	FunctionType -> FunctionType ';'                   (160)
	FunctionDeclaration -> FunctionType ';' FunctionDefinition ';'   (161)
	ListFunctionDeclaration ->                         (162)
	ListFunctionDeclaration -> FunctionDeclaration ListFunctionDeclaration   (163)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	'!'            { PT _ (TS _ 1) }
	'$'            { PT _ (TS _ 2) }
	'('            { PT _ (TS _ 3) }
	'()'           { PT _ (TS _ 4) }
	')'            { PT _ (TS _ 5) }
	'*'            { PT _ (TS _ 6) }
	'**'           { PT _ (TS _ 7) }
	'+'            { PT _ (TS _ 8) }
	','            { PT _ (TS _ 9) }
	'-'            { PT _ (TS _ 10) }
	'->'           { PT _ (TS _ 11) }
	'.'            { PT _ (TS _ 12) }
	'/'            { PT _ (TS _ 13) }
	'::'           { PT _ (TS _ 14) }
	';'            { PT _ (TS _ 15) }
	'<-'           { PT _ (TS _ 16) }
	'='            { PT _ (TS _ 17) }
	'@+'           { PT _ (TS _ 18) }
	'@+i'          { PT _ (TS _ 19) }
	'@-'           { PT _ (TS _ 20) }
	'@-i'          { PT _ (TS _ 21) }
	'@0'           { PT _ (TS _ 22) }
	'@1'           { PT _ (TS _ 23) }
	'Bit'          { PT _ (TS _ 24) }
	'FSWAP'        { PT _ (TS _ 25) }
	'H'            { PT _ (TS _ 26) }
	'ID'           { PT _ (TS _ 27) }
	'ISWAP'        { PT _ (TS _ 28) }
	'Int'          { PT _ (TS _ 29) }
	'QFT'          { PT _ (TS _ 30) }
	'QFT_DAG'      { PT _ (TS _ 31) }
	'Qbit'         { PT _ (TS _ 32) }
	'ROOT_SWAP'    { PT _ (TS _ 33) }
	'ROOT_SWAP_DAG'{ PT _ (TS _ 34) }
	'ROOT_X'       { PT _ (TS _ 35) }
	'ROOT_X_DAG'   { PT _ (TS _ 36) }
	'ROOT_Y'       { PT _ (TS _ 37) }
	'ROOT_Y_DAG'   { PT _ (TS _ 38) }
	'ROOT_Z'       { PT _ (TS _ 39) }
	'ROOT_Z_DAG'   { PT _ (TS _ 40) }
	'RX'           { PT _ (TS _ 41) }
	'RY'           { PT _ (TS _ 42) }
	'RZ'           { PT _ (TS _ 43) }
	'S'            { PT _ (TS _ 44) }
	'SQRT_SWAP'    { PT _ (TS _ 45) }
	'SQRT_SWAP_DAG'{ PT _ (TS _ 46) }
	'SQRT_X'       { PT _ (TS _ 47) }
	'SQRT_X_DAG'   { PT _ (TS _ 48) }
	'SQRT_Y'       { PT _ (TS _ 49) }
	'SQRT_Y_DAG'   { PT _ (TS _ 50) }
	'SWAP'         { PT _ (TS _ 51) }
	'SWAP_THETA'   { PT _ (TS _ 52) }
	'S_DAG'        { PT _ (TS _ 53) }
	'State'        { PT _ (TS _ 54) }
	'T'            { PT _ (TS _ 55) }
	'T_DAG'        { PT _ (TS _ 56) }
	'U1'           { PT _ (TS _ 57) }
	'U2'           { PT _ (TS _ 58) }
	'U3'           { PT _ (TS _ 59) }
	'Unitary'      { PT _ (TS _ 60) }
	'X'            { PT _ (TS _ 61) }
	'Y'            { PT _ (TS _ 62) }
	'Z'            { PT _ (TS _ 63) }
	'['            { PT _ (TS _ 64) }
	']'            { PT _ (TS _ 65) }
	'case'         { PT _ (TS _ 66) }
	'ctrl'         { PT _ (TS _ 67) }
	'else'         { PT _ (TS _ 68) }
	'gate'         { PT _ (TS _ 69) }
	'if'           { PT _ (TS _ 70) }
	'in'           { PT _ (TS _ 71) }
	'let'          { PT _ (TS _ 72) }
	'of'           { PT _ (TS _ 73) }
	'then'         { PT _ (TS _ 74) }
	'with'         { PT _ (TS _ 75) }
	'{'            { PT _ (TS _ 76) }
	'}'            { PT _ (TS _ 77) }
	L_doubl        { PT _ (TD $$) }
	L_integ        { PT _ (TI $$) }
	L_ZeroOrOne    { PT _ (T_ZeroOrOne $$) }
	L_Var          { PT _ (T_Var _) }
	L_Lambda       { PT _ (T_Lambda $$) }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_pIntegerExpr rule  0
	%start_pIntegerExpr1 rule  1
	%start_pIntegerExpr2 rule  2
	%start_pProgram rule  3
	%start_pType    rule  4
	%start_pType1   rule  5
	%start_pType2   rule  6
	%start_pType3   rule  7
	%start_pType5   rule  8
	%start_pType4   rule  9
	%start_pAngle   rule  10
	%start_pBasisState rule  11
	%start_pBit     rule  12
	%start_pGate    rule  13
	%start_pListVar rule  14
	%start_pControlBasisState rule  15
	%start_pControlBasisStates rule  16
	%start_pListBasisState rule  17
	%start_pControlBit rule  18
	%start_pControlBits rule  19
	%start_pListInteger rule  20
	%start_pTuple   rule  21
	%start_pControlTerm rule  22
	%start_pControlTerms rule  23
	%start_pListTerm rule  24
	%start_pTerm1   rule  25
	%start_pTerm2   rule  26
	%start_pTerm3   rule  27
	%start_pTerm    rule  28
	%start_pCaseExpression rule  29
	%start_pListCaseExpression rule  30
	%start_pArg     rule  31
	%start_pListArg rule  32
	%start_pFunctionDefinition rule  33
	%start_pFunctionType rule  34
	%start_pFunctionDeclaration rule  35
	%start_pListFunctionDeclaration rule  36
	Double          rule  37
	Integer         rule  38
	ZeroOrOne       rule  39
	Var             rule  40
	Lambda          rule  41
	IntegerExpr     rules 42, 43, 44
	IntegerExpr1    rules 45, 46, 47
	IntegerExpr2    rules 48, 49
	Program         rule  50
	Type            rules 51, 52
	Type1           rules 53, 54
	Type2           rules 55, 56, 57
	Type3           rules 58, 59
	Type5           rules 60, 61, 62, 63, 64, 65, 66
	Type4           rule  67
	Angle           rule  68
	BasisState      rules 69, 70, 71, 72, 73, 74
	Bit             rule  75
	Gate            rules 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110
	ListVar         rules 111, 112
	ControlBasisState rule  113
	ControlBasisStates rule  114
	ListBasisState  rules 115, 116
	ControlBit      rule  117
	ControlBits     rule  118
	ListInteger     rules 119, 120
	Tuple           rule  121
	ControlTerm     rule  122
	ControlTerms    rule  123
	ListTerm        rules 124, 125
	Term1           rules 126, 127, 128, 129, 130, 131, 132, 133, 134
	Term2           rules 135, 136, 137, 138, 139, 140, 141
	Term3           rules 142, 143, 144, 145, 146, 147, 148, 149
	Term            rule  150
	CaseExpression  rule  151
	ListCaseExpression rules 152, 153
	Arg             rule  154
	ListArg         rules 155, 156
	FunctionDefinition rules 157, 158
	FunctionType    rules 159, 160
	FunctionDeclaration rule  161
	ListFunctionDeclaration rules 162, 163

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0

	%start_pIntegerExpr -> . IntegerExpr                (rule 0)

	'('            shift, and enter state 174
	L_integ        shift, and enter state 81

	Integer        goto state 52
	IntegerExpr    goto state 176
	IntegerExpr1   goto state 57
	IntegerExpr2   goto state 58

State 1

	%start_pIntegerExpr1 -> . IntegerExpr1              (rule 1)

	'('            shift, and enter state 174
	L_integ        shift, and enter state 81

	Integer        goto state 52
	IntegerExpr1   goto state 175
	IntegerExpr2   goto state 58

State 2

	%start_pIntegerExpr2 -> . IntegerExpr2              (rule 2)

	'('            shift, and enter state 174
	L_integ        shift, and enter state 81

	Integer        goto state 52
	IntegerExpr2   goto state 173

State 3

	%start_pProgram -> . Program                        (rule 3)

	L_Var          shift, and enter state 43
	%eof           reduce using rule 162

	Var            goto state 39
	Program        goto state 171
	FunctionType   goto state 40
	FunctionDeclarationgoto state 41
	ListFunctionDeclarationgoto state 172

State 4

	%start_pType -> . Type                              (rule 4)

	'!'            shift, and enter state 164
	'('            shift, and enter state 154
	'()'           shift, and enter state 155
	'Bit'          shift, and enter state 156
	'Int'          shift, and enter state 157
	'Qbit'         shift, and enter state 158
	'State'        shift, and enter state 159
	'Unitary'      shift, and enter state 160

	Type           goto state 169
	Type1          goto state 170
	Type2          goto state 168
	Type3          goto state 166
	Type5          goto state 152
	Type4          goto state 163

State 5

	%start_pType1 -> . Type1                            (rule 5)

	'!'            shift, and enter state 164
	'('            shift, and enter state 154
	'()'           shift, and enter state 155
	'Bit'          shift, and enter state 156
	'Int'          shift, and enter state 157
	'Qbit'         shift, and enter state 158
	'State'        shift, and enter state 159
	'Unitary'      shift, and enter state 160

	Type1          goto state 167
	Type2          goto state 168
	Type3          goto state 166
	Type5          goto state 152
	Type4          goto state 163

State 6

	%start_pType2 -> . Type2                            (rule 6)

	'!'            shift, and enter state 164
	'('            shift, and enter state 154
	'()'           shift, and enter state 155
	'Bit'          shift, and enter state 156
	'Int'          shift, and enter state 157
	'Qbit'         shift, and enter state 158
	'State'        shift, and enter state 159
	'Unitary'      shift, and enter state 160

	Type2          goto state 165
	Type3          goto state 166
	Type5          goto state 152
	Type4          goto state 163

State 7

	%start_pType3 -> . Type3                            (rule 7)

	'!'            shift, and enter state 164
	'('            shift, and enter state 154
	'()'           shift, and enter state 155
	'Bit'          shift, and enter state 156
	'Int'          shift, and enter state 157
	'Qbit'         shift, and enter state 158
	'State'        shift, and enter state 159
	'Unitary'      shift, and enter state 160

	Type3          goto state 162
	Type5          goto state 152
	Type4          goto state 163

State 8

	%start_pType5 -> . Type5                            (rule 8)

	'('            shift, and enter state 154
	'()'           shift, and enter state 155
	'Bit'          shift, and enter state 156
	'Int'          shift, and enter state 157
	'Qbit'         shift, and enter state 158
	'State'        shift, and enter state 159
	'Unitary'      shift, and enter state 160

	Type5          goto state 161

State 9

	%start_pType4 -> . Type4                            (rule 9)

	'('            shift, and enter state 154
	'()'           shift, and enter state 155
	'Bit'          shift, and enter state 156
	'Int'          shift, and enter state 157
	'Qbit'         shift, and enter state 158
	'State'        shift, and enter state 159
	'Unitary'      shift, and enter state 160

	Type5          goto state 152
	Type4          goto state 153

State 10

	%start_pAngle -> . Angle                            (rule 10)

	L_doubl        shift, and enter state 38

	Double         goto state 150
	Angle          goto state 151

State 11

	%start_pBasisState -> . BasisState                  (rule 11)

	'@+'           shift, and enter state 70
	'@+i'          shift, and enter state 71
	'@-'           shift, and enter state 72
	'@-i'          shift, and enter state 73
	'@0'           shift, and enter state 74
	'@1'           shift, and enter state 75

	BasisState     goto state 149

State 12

	%start_pBit -> . Bit                                (rule 12)

	L_ZeroOrOne    shift, and enter state 82

	ZeroOrOne      goto state 53
	Bit            goto state 148

State 13

	%start_pGate -> . Gate                              (rule 13)

	'FSWAP'        shift, and enter state 113
	'H'            shift, and enter state 114
	'ID'           shift, and enter state 115
	'ISWAP'        shift, and enter state 116
	'QFT'          shift, and enter state 117
	'QFT_DAG'      shift, and enter state 118
	'ROOT_SWAP'    shift, and enter state 119
	'ROOT_SWAP_DAG'shift, and enter state 120
	'ROOT_X'       shift, and enter state 121
	'ROOT_X_DAG'   shift, and enter state 122
	'ROOT_Y'       shift, and enter state 123
	'ROOT_Y_DAG'   shift, and enter state 124
	'ROOT_Z'       shift, and enter state 125
	'ROOT_Z_DAG'   shift, and enter state 126
	'RX'           shift, and enter state 127
	'RY'           shift, and enter state 128
	'RZ'           shift, and enter state 129
	'S'            shift, and enter state 130
	'SQRT_SWAP'    shift, and enter state 131
	'SQRT_SWAP_DAG'shift, and enter state 132
	'SQRT_X'       shift, and enter state 133
	'SQRT_X_DAG'   shift, and enter state 134
	'SQRT_Y'       shift, and enter state 135
	'SQRT_Y_DAG'   shift, and enter state 136
	'SWAP'         shift, and enter state 137
	'SWAP_THETA'   shift, and enter state 138
	'S_DAG'        shift, and enter state 139
	'T'            shift, and enter state 140
	'T_DAG'        shift, and enter state 141
	'U1'           shift, and enter state 142
	'U2'           shift, and enter state 143
	'U3'           shift, and enter state 144
	'X'            shift, and enter state 145
	'Y'            shift, and enter state 146
	'Z'            shift, and enter state 147

	Gate           goto state 112

State 14

	%start_pListVar -> . ListVar                        (rule 14)

	L_Var          shift, and enter state 43

	Var            goto state 110
	ListVar        goto state 111

State 15

	%start_pControlBasisState -> . ControlBasisState    (rule 15)

	'['            shift, and enter state 109

	ControlBasisStategoto state 108

State 16

	%start_pControlBasisStates -> . ControlBasisStates    (rule 16)

	'['            shift, and enter state 107

	ControlBasisStatesgoto state 106

State 17

	%start_pListBasisState -> . ListBasisState          (rule 17)

	'@+'           shift, and enter state 70
	'@+i'          shift, and enter state 71
	'@-'           shift, and enter state 72
	'@-i'          shift, and enter state 73
	'@0'           shift, and enter state 74
	'@1'           shift, and enter state 75

	BasisState     goto state 104
	ListBasisState goto state 105

State 18

	%start_pControlBit -> . ControlBit                  (rule 18)

	'['            shift, and enter state 103

	ControlBit     goto state 102

State 19

	%start_pControlBits -> . ControlBits                (rule 19)

	'['            shift, and enter state 101

	ControlBits    goto state 100

State 20

	%start_pListInteger -> . ListInteger                (rule 20)

	L_integ        shift, and enter state 81

	Integer        goto state 98
	ListInteger    goto state 99

State 21

	%start_pTuple -> . Tuple                            (rule 21)

	'('            shift, and enter state 97

	Tuple          goto state 96

State 22

	%start_pControlTerm -> . ControlTerm                (rule 22)

	'['            shift, and enter state 95

	ControlTerm    goto state 94

State 23

	%start_pControlTerms -> . ControlTerms              (rule 23)

	'['            shift, and enter state 93

	ControlTerms   goto state 92

State 24

	%start_pListTerm -> . ListTerm                      (rule 24)

	'('            shift, and enter state 68
	'()'           shift, and enter state 69
	'@+'           shift, and enter state 70
	'@+i'          shift, and enter state 71
	'@-'           shift, and enter state 72
	'@-i'          shift, and enter state 73
	'@0'           shift, and enter state 74
	'@1'           shift, and enter state 75
	'case'         shift, and enter state 76
	'gate'         shift, and enter state 77
	'if'           shift, and enter state 78
	'let'          shift, and enter state 79
	'with'         shift, and enter state 80
	L_integ        shift, and enter state 81
	L_ZeroOrOne    shift, and enter state 82
	L_Var          shift, and enter state 43
	L_Lambda       shift, and enter state 83

	Integer        goto state 52
	ZeroOrOne      goto state 53
	Var            goto state 54
	Lambda         goto state 55
	IntegerExpr    goto state 56
	IntegerExpr1   goto state 57
	IntegerExpr2   goto state 58
	BasisState     goto state 59
	Bit            goto state 60
	Tuple          goto state 61
	ListTerm       goto state 90
	Term1          goto state 62
	Term2          goto state 63
	Term3          goto state 64
	Term           goto state 91

State 25

	%start_pTerm1 -> . Term1                            (rule 25)

	'('            shift, and enter state 68
	'()'           shift, and enter state 69
	'@+'           shift, and enter state 70
	'@+i'          shift, and enter state 71
	'@-'           shift, and enter state 72
	'@-i'          shift, and enter state 73
	'@0'           shift, and enter state 74
	'@1'           shift, and enter state 75
	'case'         shift, and enter state 76
	'gate'         shift, and enter state 77
	'if'           shift, and enter state 78
	'let'          shift, and enter state 79
	'with'         shift, and enter state 80
	L_integ        shift, and enter state 81
	L_ZeroOrOne    shift, and enter state 82
	L_Var          shift, and enter state 43
	L_Lambda       shift, and enter state 83

	Integer        goto state 52
	ZeroOrOne      goto state 53
	Var            goto state 54
	Lambda         goto state 55
	IntegerExpr    goto state 56
	IntegerExpr1   goto state 57
	IntegerExpr2   goto state 58
	BasisState     goto state 59
	Bit            goto state 60
	Tuple          goto state 61
	Term1          goto state 89
	Term2          goto state 63
	Term3          goto state 64

State 26

	%start_pTerm2 -> . Term2                            (rule 26)

	'('            shift, and enter state 68
	'()'           shift, and enter state 69
	'@+'           shift, and enter state 70
	'@+i'          shift, and enter state 71
	'@-'           shift, and enter state 72
	'@-i'          shift, and enter state 73
	'@0'           shift, and enter state 74
	'@1'           shift, and enter state 75
	'gate'         shift, and enter state 77
	'with'         shift, and enter state 80
	L_integ        shift, and enter state 81
	L_ZeroOrOne    shift, and enter state 82
	L_Var          shift, and enter state 43

	Integer        goto state 52
	ZeroOrOne      goto state 53
	Var            goto state 86
	IntegerExpr    goto state 56
	IntegerExpr1   goto state 57
	IntegerExpr2   goto state 58
	BasisState     goto state 59
	Bit            goto state 60
	Tuple          goto state 61
	Term2          goto state 88
	Term3          goto state 64

State 27

	%start_pTerm3 -> . Term3                            (rule 27)

	'('            shift, and enter state 68
	'()'           shift, and enter state 69
	'@+'           shift, and enter state 70
	'@+i'          shift, and enter state 71
	'@-'           shift, and enter state 72
	'@-i'          shift, and enter state 73
	'@0'           shift, and enter state 74
	'@1'           shift, and enter state 75
	'gate'         shift, and enter state 77
	L_integ        shift, and enter state 81
	L_ZeroOrOne    shift, and enter state 82
	L_Var          shift, and enter state 43

	Integer        goto state 52
	ZeroOrOne      goto state 53
	Var            goto state 86
	IntegerExpr    goto state 56
	IntegerExpr1   goto state 57
	IntegerExpr2   goto state 58
	BasisState     goto state 59
	Bit            goto state 60
	Tuple          goto state 61
	Term3          goto state 87

State 28

	%start_pTerm -> . Term                              (rule 28)

	'('            shift, and enter state 68
	'()'           shift, and enter state 69
	'@+'           shift, and enter state 70
	'@+i'          shift, and enter state 71
	'@-'           shift, and enter state 72
	'@-i'          shift, and enter state 73
	'@0'           shift, and enter state 74
	'@1'           shift, and enter state 75
	'case'         shift, and enter state 76
	'gate'         shift, and enter state 77
	'if'           shift, and enter state 78
	'let'          shift, and enter state 79
	'with'         shift, and enter state 80
	L_integ        shift, and enter state 81
	L_ZeroOrOne    shift, and enter state 82
	L_Var          shift, and enter state 43
	L_Lambda       shift, and enter state 83

	Integer        goto state 52
	ZeroOrOne      goto state 53
	Var            goto state 54
	Lambda         goto state 55
	IntegerExpr    goto state 56
	IntegerExpr1   goto state 57
	IntegerExpr2   goto state 58
	BasisState     goto state 59
	Bit            goto state 60
	Tuple          goto state 61
	Term1          goto state 62
	Term2          goto state 63
	Term3          goto state 64
	Term           goto state 85

State 29

	%start_pCaseExpression -> . CaseExpression          (rule 29)

	'('            shift, and enter state 68
	'()'           shift, and enter state 69
	'@+'           shift, and enter state 70
	'@+i'          shift, and enter state 71
	'@-'           shift, and enter state 72
	'@-i'          shift, and enter state 73
	'@0'           shift, and enter state 74
	'@1'           shift, and enter state 75
	'case'         shift, and enter state 76
	'gate'         shift, and enter state 77
	'if'           shift, and enter state 78
	'let'          shift, and enter state 79
	'with'         shift, and enter state 80
	L_integ        shift, and enter state 81
	L_ZeroOrOne    shift, and enter state 82
	L_Var          shift, and enter state 43
	L_Lambda       shift, and enter state 83

	Integer        goto state 52
	ZeroOrOne      goto state 53
	Var            goto state 54
	Lambda         goto state 55
	IntegerExpr    goto state 56
	IntegerExpr1   goto state 57
	IntegerExpr2   goto state 58
	BasisState     goto state 59
	Bit            goto state 60
	Tuple          goto state 61
	Term1          goto state 62
	Term2          goto state 63
	Term3          goto state 64
	Term           goto state 65
	CaseExpression goto state 84

State 30

	%start_pListCaseExpression -> . ListCaseExpression    (rule 30)

	'('            shift, and enter state 68
	'()'           shift, and enter state 69
	'@+'           shift, and enter state 70
	'@+i'          shift, and enter state 71
	'@-'           shift, and enter state 72
	'@-i'          shift, and enter state 73
	'@0'           shift, and enter state 74
	'@1'           shift, and enter state 75
	'case'         shift, and enter state 76
	'gate'         shift, and enter state 77
	'if'           shift, and enter state 78
	'let'          shift, and enter state 79
	'with'         shift, and enter state 80
	L_integ        shift, and enter state 81
	L_ZeroOrOne    shift, and enter state 82
	L_Var          shift, and enter state 43
	L_Lambda       shift, and enter state 83

	Integer        goto state 52
	ZeroOrOne      goto state 53
	Var            goto state 54
	Lambda         goto state 55
	IntegerExpr    goto state 56
	IntegerExpr1   goto state 57
	IntegerExpr2   goto state 58
	BasisState     goto state 59
	Bit            goto state 60
	Tuple          goto state 61
	Term1          goto state 62
	Term2          goto state 63
	Term3          goto state 64
	Term           goto state 65
	CaseExpression goto state 66
	ListCaseExpressiongoto state 67

State 31

	%start_pArg -> . Arg                                (rule 31)

	L_Var          shift, and enter state 43

	Var            goto state 48
	Arg            goto state 51

State 32

	%start_pListArg -> . ListArg                        (rule 32)

	L_Var          shift, and enter state 43
	%eof           reduce using rule 155

	Var            goto state 48
	Arg            goto state 49
	ListArg        goto state 50

State 33

	%start_pFunctionDefinition -> . FunctionDefinition    (rule 33)

	L_Var          shift, and enter state 43

	Var            goto state 46
	FunctionDefinitiongoto state 47

State 34

	%start_pFunctionType -> . FunctionType              (rule 34)

	L_Var          shift, and enter state 43

	Var            goto state 39
	FunctionType   goto state 45

State 35

	%start_pFunctionDeclaration -> . FunctionDeclaration    (rule 35)

	L_Var          shift, and enter state 43

	Var            goto state 39
	FunctionType   goto state 40
	FunctionDeclarationgoto state 44

State 36

	%start_pListFunctionDeclaration -> . ListFunctionDeclaration    (rule 36)

	L_Var          shift, and enter state 43
	%eof           reduce using rule 162

	Var            goto state 39
	FunctionType   goto state 40
	FunctionDeclarationgoto state 41
	ListFunctionDeclarationgoto state 42

State 37

	Double -> . L_doubl                                 (rule 37)

	L_doubl        shift, and enter state 38


State 38

	Double -> L_doubl .                                 (rule 37)

	'$'            reduce using rule 37
	'('            reduce using rule 37
	'()'           reduce using rule 37
	')'            reduce using rule 37
	','            reduce using rule 37
	'->'           reduce using rule 37
	'.'            reduce using rule 37
	';'            reduce using rule 37
	'@+'           reduce using rule 37
	'@+i'          reduce using rule 37
	'@-'           reduce using rule 37
	'@-i'          reduce using rule 37
	'@0'           reduce using rule 37
	'@1'           reduce using rule 37
	']'            reduce using rule 37
	'case'         reduce using rule 37
	'else'         reduce using rule 37
	'gate'         reduce using rule 37
	'if'           reduce using rule 37
	'let'          reduce using rule 37
	'of'           reduce using rule 37
	'then'         reduce using rule 37
	'with'         reduce using rule 37
	'}'            reduce using rule 37
	L_integ        reduce using rule 37
	L_ZeroOrOne    reduce using rule 37
	L_Var          reduce using rule 37
	L_Lambda       reduce using rule 37
	%eof           reduce using rule 37


State 39

	FunctionType -> Var . '::' Type                     (rule 159)

	'::'           shift, and enter state 239


State 40

	FunctionType -> FunctionType . ';'                  (rule 160)
	FunctionDeclaration -> FunctionType . ';' FunctionDefinition ';'    (rule 161)

	';'            shift, and enter state 238


State 41

	ListFunctionDeclaration -> FunctionDeclaration . ListFunctionDeclaration    (rule 163)

	L_Var          shift, and enter state 43
	%eof           reduce using rule 162

	Var            goto state 39
	FunctionType   goto state 40
	FunctionDeclarationgoto state 41
	ListFunctionDeclarationgoto state 237

State 42

	%start_pListFunctionDeclaration -> ListFunctionDeclaration .    (rule 36)

	%eof           accept


State 43

	Var -> L_Var .                                      (rule 40)

	'!'            reduce using rule 40
	'$'            reduce using rule 40
	'('            reduce using rule 40
	'()'           reduce using rule 40
	')'            reduce using rule 40
	','            reduce using rule 40
	'->'           reduce using rule 40
	'.'            reduce using rule 40
	'::'           reduce using rule 40
	';'            reduce using rule 40
	'<-'           reduce using rule 40
	'='            reduce using rule 40
	'@+'           reduce using rule 40
	'@+i'          reduce using rule 40
	'@-'           reduce using rule 40
	'@-i'          reduce using rule 40
	'@0'           reduce using rule 40
	'@1'           reduce using rule 40
	'Bit'          reduce using rule 40
	'Int'          reduce using rule 40
	'Qbit'         reduce using rule 40
	'State'        reduce using rule 40
	'Unitary'      reduce using rule 40
	']'            reduce using rule 40
	'case'         reduce using rule 40
	'else'         reduce using rule 40
	'gate'         reduce using rule 40
	'if'           reduce using rule 40
	'let'          reduce using rule 40
	'of'           reduce using rule 40
	'then'         reduce using rule 40
	'with'         reduce using rule 40
	'}'            reduce using rule 40
	L_integ        reduce using rule 40
	L_ZeroOrOne    reduce using rule 40
	L_Var          reduce using rule 40
	L_Lambda       reduce using rule 40
	%eof           reduce using rule 40


State 44

	%start_pFunctionDeclaration -> FunctionDeclaration .    (rule 35)

	%eof           accept


State 45

	%start_pFunctionType -> FunctionType .              (rule 34)
	FunctionType -> FunctionType . ';'                  (rule 160)

	';'            shift, and enter state 236
	%eof           accept


State 46

	FunctionDefinition -> Var . ListArg '=' Term        (rule 157)

	'='            reduce using rule 155
	L_Var          shift, and enter state 43

	Var            goto state 48
	Arg            goto state 49
	ListArg        goto state 235

State 47

	%start_pFunctionDefinition -> FunctionDefinition .    (rule 33)
	FunctionDefinition -> FunctionDefinition . ';'      (rule 158)

	';'            shift, and enter state 234
	%eof           accept


State 48

	Arg -> Var .                                        (rule 154)

	'='            reduce using rule 154
	L_Var          reduce using rule 154
	%eof           reduce using rule 154


State 49

	ListArg -> Arg . ListArg                            (rule 156)

	'='            reduce using rule 155
	L_Var          shift, and enter state 43
	%eof           reduce using rule 155

	Var            goto state 48
	Arg            goto state 49
	ListArg        goto state 233

State 50

	%start_pListArg -> ListArg .                        (rule 32)

	%eof           accept


State 51

	%start_pArg -> Arg .                                (rule 31)

	%eof           accept


State 52

	IntegerExpr2 -> Integer .                           (rule 48)

	'$'            reduce using rule 48
	'('            reduce using rule 48
	'()'           reduce using rule 48
	')'            reduce using rule 48
	'*'            reduce using rule 48
	'+'            reduce using rule 48
	','            reduce using rule 48
	'-'            reduce using rule 48
	'->'           reduce using rule 48
	'.'            reduce using rule 48
	'/'            reduce using rule 48
	';'            reduce using rule 48
	'@+'           reduce using rule 48
	'@+i'          reduce using rule 48
	'@-'           reduce using rule 48
	'@-i'          reduce using rule 48
	'@0'           reduce using rule 48
	'@1'           reduce using rule 48
	']'            reduce using rule 48
	'case'         reduce using rule 48
	'else'         reduce using rule 48
	'gate'         reduce using rule 48
	'if'           reduce using rule 48
	'let'          reduce using rule 48
	'of'           reduce using rule 48
	'then'         reduce using rule 48
	'with'         reduce using rule 48
	'}'            reduce using rule 48
	L_integ        reduce using rule 48
	L_ZeroOrOne    reduce using rule 48
	L_Var          reduce using rule 48
	L_Lambda       reduce using rule 48
	%eof           reduce using rule 48


State 53

	Bit -> ZeroOrOne .                                  (rule 75)

	'$'            reduce using rule 75
	'('            reduce using rule 75
	'()'           reduce using rule 75
	')'            reduce using rule 75
	','            reduce using rule 75
	'->'           reduce using rule 75
	'.'            reduce using rule 75
	';'            reduce using rule 75
	'@+'           reduce using rule 75
	'@+i'          reduce using rule 75
	'@-'           reduce using rule 75
	'@-i'          reduce using rule 75
	'@0'           reduce using rule 75
	'@1'           reduce using rule 75
	']'            reduce using rule 75
	'case'         reduce using rule 75
	'else'         reduce using rule 75
	'gate'         reduce using rule 75
	'if'           reduce using rule 75
	'let'          reduce using rule 75
	'of'           reduce using rule 75
	'then'         reduce using rule 75
	'with'         reduce using rule 75
	'}'            reduce using rule 75
	L_integ        reduce using rule 75
	L_ZeroOrOne    reduce using rule 75
	L_Var          reduce using rule 75
	L_Lambda       reduce using rule 75
	%eof           reduce using rule 75


State 54

	Term1 -> Var . '<-' Term ';' Term                   (rule 129)
	Term1 -> Var . ',' ListVar '<-' Term ';' Term       (rule 130)
	Term3 -> Var .                                      (rule 142)

	'$'            reduce using rule 142
	'('            reduce using rule 142
	'()'           reduce using rule 142
	')'            reduce using rule 142
	','            shift, and enter state 231
			(reduce using rule 142)

	'->'           reduce using rule 142
	'.'            reduce using rule 142
	';'            reduce using rule 142
	'<-'           shift, and enter state 232
	'@+'           reduce using rule 142
	'@+i'          reduce using rule 142
	'@-'           reduce using rule 142
	'@-i'          reduce using rule 142
	'@0'           reduce using rule 142
	'@1'           reduce using rule 142
	']'            reduce using rule 142
	'case'         reduce using rule 142
	'else'         reduce using rule 142
	'gate'         reduce using rule 142
	'if'           reduce using rule 142
	'let'          reduce using rule 142
	'of'           reduce using rule 142
	'then'         reduce using rule 142
	'with'         reduce using rule 142
	'}'            reduce using rule 142
	L_integ        reduce using rule 142
	L_ZeroOrOne    reduce using rule 142
	L_Var          reduce using rule 142
	L_Lambda       reduce using rule 142
	%eof           reduce using rule 142


State 55

	Term1 -> Lambda . Var Type '.' Term                 (rule 132)

	L_Var          shift, and enter state 43

	Var            goto state 230

State 56

	IntegerExpr -> IntegerExpr . '+' IntegerExpr1       (rule 42)
	IntegerExpr -> IntegerExpr . '-' IntegerExpr1       (rule 43)
	Term3 -> IntegerExpr .                              (rule 144)

	'$'            reduce using rule 144
	'('            reduce using rule 144
	'()'           reduce using rule 144
	')'            reduce using rule 144
	'+'            shift, and enter state 177
	','            reduce using rule 144
	'-'            shift, and enter state 178
	'->'           reduce using rule 144
	'.'            reduce using rule 144
	';'            reduce using rule 144
	'@+'           reduce using rule 144
	'@+i'          reduce using rule 144
	'@-'           reduce using rule 144
	'@-i'          reduce using rule 144
	'@0'           reduce using rule 144
	'@1'           reduce using rule 144
	']'            reduce using rule 144
	'case'         reduce using rule 144
	'else'         reduce using rule 144
	'gate'         reduce using rule 144
	'if'           reduce using rule 144
	'let'          reduce using rule 144
	'of'           reduce using rule 144
	'then'         reduce using rule 144
	'with'         reduce using rule 144
	'}'            reduce using rule 144
	L_integ        reduce using rule 144
	L_ZeroOrOne    reduce using rule 144
	L_Var          reduce using rule 144
	L_Lambda       reduce using rule 144
	%eof           reduce using rule 144


State 57

	IntegerExpr -> IntegerExpr1 .                       (rule 44)
	IntegerExpr1 -> IntegerExpr1 . '*' IntegerExpr2     (rule 45)
	IntegerExpr1 -> IntegerExpr1 . '/' IntegerExpr2     (rule 46)

	'$'            reduce using rule 44
	'('            reduce using rule 44
	'()'           reduce using rule 44
	')'            reduce using rule 44
	'*'            shift, and enter state 179
	'+'            reduce using rule 44
	','            reduce using rule 44
	'-'            reduce using rule 44
	'->'           reduce using rule 44
	'.'            reduce using rule 44
	'/'            shift, and enter state 180
	';'            reduce using rule 44
	'@+'           reduce using rule 44
	'@+i'          reduce using rule 44
	'@-'           reduce using rule 44
	'@-i'          reduce using rule 44
	'@0'           reduce using rule 44
	'@1'           reduce using rule 44
	']'            reduce using rule 44
	'case'         reduce using rule 44
	'else'         reduce using rule 44
	'gate'         reduce using rule 44
	'if'           reduce using rule 44
	'let'          reduce using rule 44
	'of'           reduce using rule 44
	'then'         reduce using rule 44
	'with'         reduce using rule 44
	'}'            reduce using rule 44
	L_integ        reduce using rule 44
	L_ZeroOrOne    reduce using rule 44
	L_Var          reduce using rule 44
	L_Lambda       reduce using rule 44
	%eof           reduce using rule 44


State 58

	IntegerExpr1 -> IntegerExpr2 .                      (rule 47)

	'$'            reduce using rule 47
	'('            reduce using rule 47
	'()'           reduce using rule 47
	')'            reduce using rule 47
	'*'            reduce using rule 47
	'+'            reduce using rule 47
	','            reduce using rule 47
	'-'            reduce using rule 47
	'->'           reduce using rule 47
	'.'            reduce using rule 47
	'/'            reduce using rule 47
	';'            reduce using rule 47
	'@+'           reduce using rule 47
	'@+i'          reduce using rule 47
	'@-'           reduce using rule 47
	'@-i'          reduce using rule 47
	'@0'           reduce using rule 47
	'@1'           reduce using rule 47
	']'            reduce using rule 47
	'case'         reduce using rule 47
	'else'         reduce using rule 47
	'gate'         reduce using rule 47
	'if'           reduce using rule 47
	'let'          reduce using rule 47
	'of'           reduce using rule 47
	'then'         reduce using rule 47
	'with'         reduce using rule 47
	'}'            reduce using rule 47
	L_integ        reduce using rule 47
	L_ZeroOrOne    reduce using rule 47
	L_Var          reduce using rule 47
	L_Lambda       reduce using rule 47
	%eof           reduce using rule 47


State 59

	Term3 -> BasisState .                               (rule 143)

	'$'            reduce using rule 143
	'('            reduce using rule 143
	'()'           reduce using rule 143
	')'            reduce using rule 143
	','            reduce using rule 143
	'->'           reduce using rule 143
	'.'            reduce using rule 143
	';'            reduce using rule 143
	'@+'           reduce using rule 143
	'@+i'          reduce using rule 143
	'@-'           reduce using rule 143
	'@-i'          reduce using rule 143
	'@0'           reduce using rule 143
	'@1'           reduce using rule 143
	']'            reduce using rule 143
	'case'         reduce using rule 143
	'else'         reduce using rule 143
	'gate'         reduce using rule 143
	'if'           reduce using rule 143
	'let'          reduce using rule 143
	'of'           reduce using rule 143
	'then'         reduce using rule 143
	'with'         reduce using rule 143
	'}'            reduce using rule 143
	L_integ        reduce using rule 143
	L_ZeroOrOne    reduce using rule 143
	L_Var          reduce using rule 143
	L_Lambda       reduce using rule 143
	%eof           reduce using rule 143


State 60

	Term3 -> Bit .                                      (rule 147)

	'$'            reduce using rule 147
	'('            reduce using rule 147
	'()'           reduce using rule 147
	')'            reduce using rule 147
	','            reduce using rule 147
	'->'           reduce using rule 147
	'.'            reduce using rule 147
	';'            reduce using rule 147
	'@+'           reduce using rule 147
	'@+i'          reduce using rule 147
	'@-'           reduce using rule 147
	'@-i'          reduce using rule 147
	'@0'           reduce using rule 147
	'@1'           reduce using rule 147
	']'            reduce using rule 147
	'case'         reduce using rule 147
	'else'         reduce using rule 147
	'gate'         reduce using rule 147
	'if'           reduce using rule 147
	'let'          reduce using rule 147
	'of'           reduce using rule 147
	'then'         reduce using rule 147
	'with'         reduce using rule 147
	'}'            reduce using rule 147
	L_integ        reduce using rule 147
	L_ZeroOrOne    reduce using rule 147
	L_Var          reduce using rule 147
	L_Lambda       reduce using rule 147
	%eof           reduce using rule 147


State 61

	Term3 -> Tuple .                                    (rule 146)

	'$'            reduce using rule 146
	'('            reduce using rule 146
	'()'           reduce using rule 146
	')'            reduce using rule 146
	','            reduce using rule 146
	'->'           reduce using rule 146
	'.'            reduce using rule 146
	';'            reduce using rule 146
	'@+'           reduce using rule 146
	'@+i'          reduce using rule 146
	'@-'           reduce using rule 146
	'@-i'          reduce using rule 146
	'@0'           reduce using rule 146
	'@1'           reduce using rule 146
	']'            reduce using rule 146
	'case'         reduce using rule 146
	'else'         reduce using rule 146
	'gate'         reduce using rule 146
	'if'           reduce using rule 146
	'let'          reduce using rule 146
	'of'           reduce using rule 146
	'then'         reduce using rule 146
	'with'         reduce using rule 146
	'}'            reduce using rule 146
	L_integ        reduce using rule 146
	L_ZeroOrOne    reduce using rule 146
	L_Var          reduce using rule 146
	L_Lambda       reduce using rule 146
	%eof           reduce using rule 146


State 62

	Term -> Term1 .                                     (rule 150)

	'('            reduce using rule 150
	'()'           reduce using rule 150
	')'            reduce using rule 150
	','            reduce using rule 150
	'->'           reduce using rule 150
	';'            reduce using rule 150
	'@+'           reduce using rule 150
	'@+i'          reduce using rule 150
	'@-'           reduce using rule 150
	'@-i'          reduce using rule 150
	'@0'           reduce using rule 150
	'@1'           reduce using rule 150
	']'            reduce using rule 150
	'case'         reduce using rule 150
	'else'         reduce using rule 150
	'gate'         reduce using rule 150
	'if'           reduce using rule 150
	'let'          reduce using rule 150
	'of'           reduce using rule 150
	'then'         reduce using rule 150
	'with'         reduce using rule 150
	'}'            reduce using rule 150
	L_integ        reduce using rule 150
	L_ZeroOrOne    reduce using rule 150
	L_Var          reduce using rule 150
	L_Lambda       reduce using rule 150
	%eof           reduce using rule 150


State 63

	Term1 -> Term2 . '$' Term1                          (rule 133)
	Term1 -> Term2 .                                    (rule 134)
	Term2 -> Term2 . Term3                              (rule 139)
	Term2 -> Term2 . '.' Term3                          (rule 140)

	'$'            shift, and enter state 229
	'('            shift, and enter state 68
			(reduce using rule 134)

	'()'           shift, and enter state 69
			(reduce using rule 134)

	')'            reduce using rule 134
	','            reduce using rule 134
	'->'           reduce using rule 134
	'.'            shift, and enter state 217
	';'            reduce using rule 134
	'@+'           shift, and enter state 70
			(reduce using rule 134)

	'@+i'          shift, and enter state 71
			(reduce using rule 134)

	'@-'           shift, and enter state 72
			(reduce using rule 134)

	'@-i'          shift, and enter state 73
			(reduce using rule 134)

	'@0'           shift, and enter state 74
			(reduce using rule 134)

	'@1'           shift, and enter state 75
			(reduce using rule 134)

	']'            reduce using rule 134
	'case'         reduce using rule 134
	'else'         reduce using rule 134
	'gate'         shift, and enter state 77
			(reduce using rule 134)

	'if'           reduce using rule 134
	'let'          reduce using rule 134
	'of'           reduce using rule 134
	'then'         reduce using rule 134
	'with'         reduce using rule 134
	'}'            reduce using rule 134
	L_integ        shift, and enter state 81
			(reduce using rule 134)

	L_ZeroOrOne    shift, and enter state 82
			(reduce using rule 134)

	L_Var          shift, and enter state 43
			(reduce using rule 134)

	L_Lambda       reduce using rule 134
	%eof           reduce using rule 134

	Integer        goto state 52
	ZeroOrOne      goto state 53
	Var            goto state 86
	IntegerExpr    goto state 56
	IntegerExpr1   goto state 57
	IntegerExpr2   goto state 58
	BasisState     goto state 59
	Bit            goto state 60
	Tuple          goto state 61
	Term3          goto state 216

State 64

	Term2 -> Term3 .                                    (rule 141)

	'$'            reduce using rule 141
	'('            reduce using rule 141
	'()'           reduce using rule 141
	')'            reduce using rule 141
	','            reduce using rule 141
	'->'           reduce using rule 141
	'.'            reduce using rule 141
	';'            reduce using rule 141
	'@+'           reduce using rule 141
	'@+i'          reduce using rule 141
	'@-'           reduce using rule 141
	'@-i'          reduce using rule 141
	'@0'           reduce using rule 141
	'@1'           reduce using rule 141
	']'            reduce using rule 141
	'case'         reduce using rule 141
	'else'         reduce using rule 141
	'gate'         reduce using rule 141
	'if'           reduce using rule 141
	'let'          reduce using rule 141
	'of'           reduce using rule 141
	'then'         reduce using rule 141
	'with'         reduce using rule 141
	'}'            reduce using rule 141
	L_integ        reduce using rule 141
	L_ZeroOrOne    reduce using rule 141
	L_Var          reduce using rule 141
	L_Lambda       reduce using rule 141
	%eof           reduce using rule 141


State 65

	CaseExpression -> Term . '->' Term                  (rule 151)

	'->'           shift, and enter state 228


State 66

	ListCaseExpression -> CaseExpression .              (rule 152)
	ListCaseExpression -> CaseExpression . ListCaseExpression    (rule 153)

	'('            shift, and enter state 68
			(reduce using rule 152)

	'()'           shift, and enter state 69
			(reduce using rule 152)

	')'            reduce using rule 152
	','            reduce using rule 152
	'->'           reduce using rule 152
	';'            reduce using rule 152
	'@+'           shift, and enter state 70
			(reduce using rule 152)

	'@+i'          shift, and enter state 71
			(reduce using rule 152)

	'@-'           shift, and enter state 72
			(reduce using rule 152)

	'@-i'          shift, and enter state 73
			(reduce using rule 152)

	'@0'           shift, and enter state 74
			(reduce using rule 152)

	'@1'           shift, and enter state 75
			(reduce using rule 152)

	']'            reduce using rule 152
	'case'         shift, and enter state 76
			(reduce using rule 152)

	'else'         reduce using rule 152
	'gate'         shift, and enter state 77
			(reduce using rule 152)

	'if'           shift, and enter state 78
			(reduce using rule 152)

	'let'          shift, and enter state 79
			(reduce using rule 152)

	'of'           reduce using rule 152
	'then'         reduce using rule 152
	'with'         shift, and enter state 80
			(reduce using rule 152)

	'}'            reduce using rule 152
	L_integ        shift, and enter state 81
			(reduce using rule 152)

	L_ZeroOrOne    shift, and enter state 82
			(reduce using rule 152)

	L_Var          shift, and enter state 43
			(reduce using rule 152)

	L_Lambda       shift, and enter state 83
			(reduce using rule 152)

	%eof           reduce using rule 152

	Integer        goto state 52
	ZeroOrOne      goto state 53
	Var            goto state 54
	Lambda         goto state 55
	IntegerExpr    goto state 56
	IntegerExpr1   goto state 57
	IntegerExpr2   goto state 58
	BasisState     goto state 59
	Bit            goto state 60
	Tuple          goto state 61
	Term1          goto state 62
	Term2          goto state 63
	Term3          goto state 64
	Term           goto state 65
	CaseExpression goto state 66
	ListCaseExpressiongoto state 227

State 67

	%start_pListCaseExpression -> ListCaseExpression .    (rule 30)

	%eof           accept


State 68

	IntegerExpr2 -> '(' . IntegerExpr ')'               (rule 49)
	Tuple -> '(' . Term ',' ListTerm ')'                (rule 121)
	Term3 -> '(' . Term ')'                             (rule 149)

	'('            shift, and enter state 68
	'()'           shift, and enter state 69
	'@+'           shift, and enter state 70
	'@+i'          shift, and enter state 71
	'@-'           shift, and enter state 72
	'@-i'          shift, and enter state 73
	'@0'           shift, and enter state 74
	'@1'           shift, and enter state 75
	'case'         shift, and enter state 76
	'gate'         shift, and enter state 77
	'if'           shift, and enter state 78
	'let'          shift, and enter state 79
	'with'         shift, and enter state 80
	L_integ        shift, and enter state 81
	L_ZeroOrOne    shift, and enter state 82
	L_Var          shift, and enter state 43
	L_Lambda       shift, and enter state 83

	Integer        goto state 52
	ZeroOrOne      goto state 53
	Var            goto state 54
	Lambda         goto state 55
	IntegerExpr    goto state 225
	IntegerExpr1   goto state 57
	IntegerExpr2   goto state 58
	BasisState     goto state 59
	Bit            goto state 60
	Tuple          goto state 61
	Term1          goto state 62
	Term2          goto state 63
	Term3          goto state 64
	Term           goto state 226

State 69

	Term3 -> '()' .                                     (rule 148)

	'$'            reduce using rule 148
	'('            reduce using rule 148
	'()'           reduce using rule 148
	')'            reduce using rule 148
	','            reduce using rule 148
	'->'           reduce using rule 148
	'.'            reduce using rule 148
	';'            reduce using rule 148
	'@+'           reduce using rule 148
	'@+i'          reduce using rule 148
	'@-'           reduce using rule 148
	'@-i'          reduce using rule 148
	'@0'           reduce using rule 148
	'@1'           reduce using rule 148
	']'            reduce using rule 148
	'case'         reduce using rule 148
	'else'         reduce using rule 148
	'gate'         reduce using rule 148
	'if'           reduce using rule 148
	'let'          reduce using rule 148
	'of'           reduce using rule 148
	'then'         reduce using rule 148
	'with'         reduce using rule 148
	'}'            reduce using rule 148
	L_integ        reduce using rule 148
	L_ZeroOrOne    reduce using rule 148
	L_Var          reduce using rule 148
	L_Lambda       reduce using rule 148
	%eof           reduce using rule 148


State 70

	BasisState -> '@+' .                                (rule 71)

	'$'            reduce using rule 71
	'('            reduce using rule 71
	'()'           reduce using rule 71
	')'            reduce using rule 71
	','            reduce using rule 71
	'->'           reduce using rule 71
	'.'            reduce using rule 71
	';'            reduce using rule 71
	'@+'           reduce using rule 71
	'@+i'          reduce using rule 71
	'@-'           reduce using rule 71
	'@-i'          reduce using rule 71
	'@0'           reduce using rule 71
	'@1'           reduce using rule 71
	']'            reduce using rule 71
	'case'         reduce using rule 71
	'else'         reduce using rule 71
	'gate'         reduce using rule 71
	'if'           reduce using rule 71
	'let'          reduce using rule 71
	'of'           reduce using rule 71
	'then'         reduce using rule 71
	'with'         reduce using rule 71
	'}'            reduce using rule 71
	L_integ        reduce using rule 71
	L_ZeroOrOne    reduce using rule 71
	L_Var          reduce using rule 71
	L_Lambda       reduce using rule 71
	%eof           reduce using rule 71


State 71

	BasisState -> '@+i' .                               (rule 73)

	'$'            reduce using rule 73
	'('            reduce using rule 73
	'()'           reduce using rule 73
	')'            reduce using rule 73
	','            reduce using rule 73
	'->'           reduce using rule 73
	'.'            reduce using rule 73
	';'            reduce using rule 73
	'@+'           reduce using rule 73
	'@+i'          reduce using rule 73
	'@-'           reduce using rule 73
	'@-i'          reduce using rule 73
	'@0'           reduce using rule 73
	'@1'           reduce using rule 73
	']'            reduce using rule 73
	'case'         reduce using rule 73
	'else'         reduce using rule 73
	'gate'         reduce using rule 73
	'if'           reduce using rule 73
	'let'          reduce using rule 73
	'of'           reduce using rule 73
	'then'         reduce using rule 73
	'with'         reduce using rule 73
	'}'            reduce using rule 73
	L_integ        reduce using rule 73
	L_ZeroOrOne    reduce using rule 73
	L_Var          reduce using rule 73
	L_Lambda       reduce using rule 73
	%eof           reduce using rule 73


State 72

	BasisState -> '@-' .                                (rule 72)

	'$'            reduce using rule 72
	'('            reduce using rule 72
	'()'           reduce using rule 72
	')'            reduce using rule 72
	','            reduce using rule 72
	'->'           reduce using rule 72
	'.'            reduce using rule 72
	';'            reduce using rule 72
	'@+'           reduce using rule 72
	'@+i'          reduce using rule 72
	'@-'           reduce using rule 72
	'@-i'          reduce using rule 72
	'@0'           reduce using rule 72
	'@1'           reduce using rule 72
	']'            reduce using rule 72
	'case'         reduce using rule 72
	'else'         reduce using rule 72
	'gate'         reduce using rule 72
	'if'           reduce using rule 72
	'let'          reduce using rule 72
	'of'           reduce using rule 72
	'then'         reduce using rule 72
	'with'         reduce using rule 72
	'}'            reduce using rule 72
	L_integ        reduce using rule 72
	L_ZeroOrOne    reduce using rule 72
	L_Var          reduce using rule 72
	L_Lambda       reduce using rule 72
	%eof           reduce using rule 72


State 73

	BasisState -> '@-i' .                               (rule 74)

	'$'            reduce using rule 74
	'('            reduce using rule 74
	'()'           reduce using rule 74
	')'            reduce using rule 74
	','            reduce using rule 74
	'->'           reduce using rule 74
	'.'            reduce using rule 74
	';'            reduce using rule 74
	'@+'           reduce using rule 74
	'@+i'          reduce using rule 74
	'@-'           reduce using rule 74
	'@-i'          reduce using rule 74
	'@0'           reduce using rule 74
	'@1'           reduce using rule 74
	']'            reduce using rule 74
	'case'         reduce using rule 74
	'else'         reduce using rule 74
	'gate'         reduce using rule 74
	'if'           reduce using rule 74
	'let'          reduce using rule 74
	'of'           reduce using rule 74
	'then'         reduce using rule 74
	'with'         reduce using rule 74
	'}'            reduce using rule 74
	L_integ        reduce using rule 74
	L_ZeroOrOne    reduce using rule 74
	L_Var          reduce using rule 74
	L_Lambda       reduce using rule 74
	%eof           reduce using rule 74


State 74

	BasisState -> '@0' .                                (rule 69)

	'$'            reduce using rule 69
	'('            reduce using rule 69
	'()'           reduce using rule 69
	')'            reduce using rule 69
	','            reduce using rule 69
	'->'           reduce using rule 69
	'.'            reduce using rule 69
	';'            reduce using rule 69
	'@+'           reduce using rule 69
	'@+i'          reduce using rule 69
	'@-'           reduce using rule 69
	'@-i'          reduce using rule 69
	'@0'           reduce using rule 69
	'@1'           reduce using rule 69
	']'            reduce using rule 69
	'case'         reduce using rule 69
	'else'         reduce using rule 69
	'gate'         reduce using rule 69
	'if'           reduce using rule 69
	'let'          reduce using rule 69
	'of'           reduce using rule 69
	'then'         reduce using rule 69
	'with'         reduce using rule 69
	'}'            reduce using rule 69
	L_integ        reduce using rule 69
	L_ZeroOrOne    reduce using rule 69
	L_Var          reduce using rule 69
	L_Lambda       reduce using rule 69
	%eof           reduce using rule 69


State 75

	BasisState -> '@1' .                                (rule 70)

	'$'            reduce using rule 70
	'('            reduce using rule 70
	'()'           reduce using rule 70
	')'            reduce using rule 70
	','            reduce using rule 70
	'->'           reduce using rule 70
	'.'            reduce using rule 70
	';'            reduce using rule 70
	'@+'           reduce using rule 70
	'@+i'          reduce using rule 70
	'@-'           reduce using rule 70
	'@-i'          reduce using rule 70
	'@0'           reduce using rule 70
	'@1'           reduce using rule 70
	']'            reduce using rule 70
	'case'         reduce using rule 70
	'else'         reduce using rule 70
	'gate'         reduce using rule 70
	'if'           reduce using rule 70
	'let'          reduce using rule 70
	'of'           reduce using rule 70
	'then'         reduce using rule 70
	'with'         reduce using rule 70
	'}'            reduce using rule 70
	L_integ        reduce using rule 70
	L_ZeroOrOne    reduce using rule 70
	L_Var          reduce using rule 70
	L_Lambda       reduce using rule 70
	%eof           reduce using rule 70


State 76

	Term1 -> 'case' . Term 'of' CaseExpression ListCaseExpression    (rule 131)

	'('            shift, and enter state 68
	'()'           shift, and enter state 69
	'@+'           shift, and enter state 70
	'@+i'          shift, and enter state 71
	'@-'           shift, and enter state 72
	'@-i'          shift, and enter state 73
	'@0'           shift, and enter state 74
	'@1'           shift, and enter state 75
	'case'         shift, and enter state 76
	'gate'         shift, and enter state 77
	'if'           shift, and enter state 78
	'let'          shift, and enter state 79
	'with'         shift, and enter state 80
	L_integ        shift, and enter state 81
	L_ZeroOrOne    shift, and enter state 82
	L_Var          shift, and enter state 43
	L_Lambda       shift, and enter state 83

	Integer        goto state 52
	ZeroOrOne      goto state 53
	Var            goto state 54
	Lambda         goto state 55
	IntegerExpr    goto state 56
	IntegerExpr1   goto state 57
	IntegerExpr2   goto state 58
	BasisState     goto state 59
	Bit            goto state 60
	Tuple          goto state 61
	Term1          goto state 62
	Term2          goto state 63
	Term3          goto state 64
	Term           goto state 224

State 77

	Term3 -> 'gate' . Gate                              (rule 145)

	'FSWAP'        shift, and enter state 113
	'H'            shift, and enter state 114
	'ID'           shift, and enter state 115
	'ISWAP'        shift, and enter state 116
	'QFT'          shift, and enter state 117
	'QFT_DAG'      shift, and enter state 118
	'ROOT_SWAP'    shift, and enter state 119
	'ROOT_SWAP_DAG'shift, and enter state 120
	'ROOT_X'       shift, and enter state 121
	'ROOT_X_DAG'   shift, and enter state 122
	'ROOT_Y'       shift, and enter state 123
	'ROOT_Y_DAG'   shift, and enter state 124
	'ROOT_Z'       shift, and enter state 125
	'ROOT_Z_DAG'   shift, and enter state 126
	'RX'           shift, and enter state 127
	'RY'           shift, and enter state 128
	'RZ'           shift, and enter state 129
	'S'            shift, and enter state 130
	'SQRT_SWAP'    shift, and enter state 131
	'SQRT_SWAP_DAG'shift, and enter state 132
	'SQRT_X'       shift, and enter state 133
	'SQRT_X_DAG'   shift, and enter state 134
	'SQRT_Y'       shift, and enter state 135
	'SQRT_Y_DAG'   shift, and enter state 136
	'SWAP'         shift, and enter state 137
	'SWAP_THETA'   shift, and enter state 138
	'S_DAG'        shift, and enter state 139
	'T'            shift, and enter state 140
	'T_DAG'        shift, and enter state 141
	'U1'           shift, and enter state 142
	'U2'           shift, and enter state 143
	'U3'           shift, and enter state 144
	'X'            shift, and enter state 145
	'Y'            shift, and enter state 146
	'Z'            shift, and enter state 147

	Gate           goto state 223

State 78

	Term1 -> 'if' . Term 'then' Term 'else' Term        (rule 126)

	'('            shift, and enter state 68
	'()'           shift, and enter state 69
	'@+'           shift, and enter state 70
	'@+i'          shift, and enter state 71
	'@-'           shift, and enter state 72
	'@-i'          shift, and enter state 73
	'@0'           shift, and enter state 74
	'@1'           shift, and enter state 75
	'case'         shift, and enter state 76
	'gate'         shift, and enter state 77
	'if'           shift, and enter state 78
	'let'          shift, and enter state 79
	'with'         shift, and enter state 80
	L_integ        shift, and enter state 81
	L_ZeroOrOne    shift, and enter state 82
	L_Var          shift, and enter state 43
	L_Lambda       shift, and enter state 83

	Integer        goto state 52
	ZeroOrOne      goto state 53
	Var            goto state 54
	Lambda         goto state 55
	IntegerExpr    goto state 56
	IntegerExpr1   goto state 57
	IntegerExpr2   goto state 58
	BasisState     goto state 59
	Bit            goto state 60
	Tuple          goto state 61
	Term1          goto state 62
	Term2          goto state 63
	Term3          goto state 64
	Term           goto state 222

State 79

	Term1 -> 'let' . '{' Var '=' Term '}' 'in' Term     (rule 127)
	Term1 -> 'let' . '{' '(' Var ',' ListVar ')' '=' Term '}' 'in' Term    (rule 128)

	'{'            shift, and enter state 221


State 80

	Term2 -> 'with' . ControlTerm 'ctrl' ControlBasisState    (rule 135)
	Term2 -> 'with' . ControlTerms 'ctrl' ControlBasisStates    (rule 136)
	Term2 -> 'with' . ControlTerm 'ctrl' ControlBit     (rule 137)
	Term2 -> 'with' . ControlTerms 'ctrl' ControlBits    (rule 138)

	'['            shift, and enter state 220

	ControlTerm    goto state 218
	ControlTerms   goto state 219

State 81

	Integer -> L_integ .                                (rule 38)

	'$'            reduce using rule 38
	'('            reduce using rule 38
	'()'           reduce using rule 38
	')'            reduce using rule 38
	'*'            reduce using rule 38
	'**'           reduce using rule 38
	'+'            reduce using rule 38
	','            reduce using rule 38
	'-'            reduce using rule 38
	'->'           reduce using rule 38
	'.'            reduce using rule 38
	'/'            reduce using rule 38
	';'            reduce using rule 38
	'@+'           reduce using rule 38
	'@+i'          reduce using rule 38
	'@-'           reduce using rule 38
	'@-i'          reduce using rule 38
	'@0'           reduce using rule 38
	'@1'           reduce using rule 38
	']'            reduce using rule 38
	'case'         reduce using rule 38
	'else'         reduce using rule 38
	'gate'         reduce using rule 38
	'if'           reduce using rule 38
	'let'          reduce using rule 38
	'of'           reduce using rule 38
	'then'         reduce using rule 38
	'with'         reduce using rule 38
	'}'            reduce using rule 38
	L_integ        reduce using rule 38
	L_ZeroOrOne    reduce using rule 38
	L_Var          reduce using rule 38
	L_Lambda       reduce using rule 38
	%eof           reduce using rule 38


State 82

	ZeroOrOne -> L_ZeroOrOne .                          (rule 39)

	'$'            reduce using rule 39
	'('            reduce using rule 39
	'()'           reduce using rule 39
	')'            reduce using rule 39
	','            reduce using rule 39
	'->'           reduce using rule 39
	'.'            reduce using rule 39
	';'            reduce using rule 39
	'@+'           reduce using rule 39
	'@+i'          reduce using rule 39
	'@-'           reduce using rule 39
	'@-i'          reduce using rule 39
	'@0'           reduce using rule 39
	'@1'           reduce using rule 39
	']'            reduce using rule 39
	'case'         reduce using rule 39
	'else'         reduce using rule 39
	'gate'         reduce using rule 39
	'if'           reduce using rule 39
	'let'          reduce using rule 39
	'of'           reduce using rule 39
	'then'         reduce using rule 39
	'with'         reduce using rule 39
	'}'            reduce using rule 39
	L_integ        reduce using rule 39
	L_ZeroOrOne    reduce using rule 39
	L_Var          reduce using rule 39
	L_Lambda       reduce using rule 39
	%eof           reduce using rule 39


State 83

	Lambda -> L_Lambda .                                (rule 41)

	L_Var          reduce using rule 41


State 84

	%start_pCaseExpression -> CaseExpression .          (rule 29)

	%eof           accept


State 85

	%start_pTerm -> Term .                              (rule 28)

	%eof           accept


State 86

	Term3 -> Var .                                      (rule 142)

	'$'            reduce using rule 142
	'('            reduce using rule 142
	'()'           reduce using rule 142
	')'            reduce using rule 142
	','            reduce using rule 142
	'->'           reduce using rule 142
	'.'            reduce using rule 142
	';'            reduce using rule 142
	'@+'           reduce using rule 142
	'@+i'          reduce using rule 142
	'@-'           reduce using rule 142
	'@-i'          reduce using rule 142
	'@0'           reduce using rule 142
	'@1'           reduce using rule 142
	']'            reduce using rule 142
	'case'         reduce using rule 142
	'else'         reduce using rule 142
	'gate'         reduce using rule 142
	'if'           reduce using rule 142
	'let'          reduce using rule 142
	'of'           reduce using rule 142
	'then'         reduce using rule 142
	'with'         reduce using rule 142
	'}'            reduce using rule 142
	L_integ        reduce using rule 142
	L_ZeroOrOne    reduce using rule 142
	L_Var          reduce using rule 142
	L_Lambda       reduce using rule 142
	%eof           reduce using rule 142


State 87

	%start_pTerm3 -> Term3 .                            (rule 27)

	%eof           accept


State 88

	%start_pTerm2 -> Term2 .                            (rule 26)
	Term2 -> Term2 . Term3                              (rule 139)
	Term2 -> Term2 . '.' Term3                          (rule 140)

	'('            shift, and enter state 68
	'()'           shift, and enter state 69
	'.'            shift, and enter state 217
	'@+'           shift, and enter state 70
	'@+i'          shift, and enter state 71
	'@-'           shift, and enter state 72
	'@-i'          shift, and enter state 73
	'@0'           shift, and enter state 74
	'@1'           shift, and enter state 75
	'gate'         shift, and enter state 77
	L_integ        shift, and enter state 81
	L_ZeroOrOne    shift, and enter state 82
	L_Var          shift, and enter state 43
	%eof           accept

	Integer        goto state 52
	ZeroOrOne      goto state 53
	Var            goto state 86
	IntegerExpr    goto state 56
	IntegerExpr1   goto state 57
	IntegerExpr2   goto state 58
	BasisState     goto state 59
	Bit            goto state 60
	Tuple          goto state 61
	Term3          goto state 216

State 89

	%start_pTerm1 -> Term1 .                            (rule 25)

	%eof           accept


State 90

	%start_pListTerm -> ListTerm .                      (rule 24)

	%eof           accept


State 91

	ListTerm -> Term .                                  (rule 124)
	ListTerm -> Term . ',' ListTerm                     (rule 125)

	')'            reduce using rule 124
	','            shift, and enter state 215
	']'            reduce using rule 124
	%eof           reduce using rule 124


State 92

	%start_pControlTerms -> ControlTerms .              (rule 23)

	%eof           accept


State 93

	ControlTerms -> '[' . Term ',' ListTerm ']'         (rule 123)

	'('            shift, and enter state 68
	'()'           shift, and enter state 69
	'@+'           shift, and enter state 70
	'@+i'          shift, and enter state 71
	'@-'           shift, and enter state 72
	'@-i'          shift, and enter state 73
	'@0'           shift, and enter state 74
	'@1'           shift, and enter state 75
	'case'         shift, and enter state 76
	'gate'         shift, and enter state 77
	'if'           shift, and enter state 78
	'let'          shift, and enter state 79
	'with'         shift, and enter state 80
	L_integ        shift, and enter state 81
	L_ZeroOrOne    shift, and enter state 82
	L_Var          shift, and enter state 43
	L_Lambda       shift, and enter state 83

	Integer        goto state 52
	ZeroOrOne      goto state 53
	Var            goto state 54
	Lambda         goto state 55
	IntegerExpr    goto state 56
	IntegerExpr1   goto state 57
	IntegerExpr2   goto state 58
	BasisState     goto state 59
	Bit            goto state 60
	Tuple          goto state 61
	Term1          goto state 62
	Term2          goto state 63
	Term3          goto state 64
	Term           goto state 214

State 94

	%start_pControlTerm -> ControlTerm .                (rule 22)

	%eof           accept


State 95

	ControlTerm -> '[' . Term ']'                       (rule 122)

	'('            shift, and enter state 68
	'()'           shift, and enter state 69
	'@+'           shift, and enter state 70
	'@+i'          shift, and enter state 71
	'@-'           shift, and enter state 72
	'@-i'          shift, and enter state 73
	'@0'           shift, and enter state 74
	'@1'           shift, and enter state 75
	'case'         shift, and enter state 76
	'gate'         shift, and enter state 77
	'if'           shift, and enter state 78
	'let'          shift, and enter state 79
	'with'         shift, and enter state 80
	L_integ        shift, and enter state 81
	L_ZeroOrOne    shift, and enter state 82
	L_Var          shift, and enter state 43
	L_Lambda       shift, and enter state 83

	Integer        goto state 52
	ZeroOrOne      goto state 53
	Var            goto state 54
	Lambda         goto state 55
	IntegerExpr    goto state 56
	IntegerExpr1   goto state 57
	IntegerExpr2   goto state 58
	BasisState     goto state 59
	Bit            goto state 60
	Tuple          goto state 61
	Term1          goto state 62
	Term2          goto state 63
	Term3          goto state 64
	Term           goto state 213

State 96

	%start_pTuple -> Tuple .                            (rule 21)

	%eof           accept


State 97

	Tuple -> '(' . Term ',' ListTerm ')'                (rule 121)

	'('            shift, and enter state 68
	'()'           shift, and enter state 69
	'@+'           shift, and enter state 70
	'@+i'          shift, and enter state 71
	'@-'           shift, and enter state 72
	'@-i'          shift, and enter state 73
	'@0'           shift, and enter state 74
	'@1'           shift, and enter state 75
	'case'         shift, and enter state 76
	'gate'         shift, and enter state 77
	'if'           shift, and enter state 78
	'let'          shift, and enter state 79
	'with'         shift, and enter state 80
	L_integ        shift, and enter state 81
	L_ZeroOrOne    shift, and enter state 82
	L_Var          shift, and enter state 43
	L_Lambda       shift, and enter state 83

	Integer        goto state 52
	ZeroOrOne      goto state 53
	Var            goto state 54
	Lambda         goto state 55
	IntegerExpr    goto state 56
	IntegerExpr1   goto state 57
	IntegerExpr2   goto state 58
	BasisState     goto state 59
	Bit            goto state 60
	Tuple          goto state 61
	Term1          goto state 62
	Term2          goto state 63
	Term3          goto state 64
	Term           goto state 212

State 98

	ListInteger -> Integer .                            (rule 119)
	ListInteger -> Integer . ',' ListInteger            (rule 120)

	','            shift, and enter state 211
	']'            reduce using rule 119
	%eof           reduce using rule 119


State 99

	%start_pListInteger -> ListInteger .                (rule 20)

	%eof           accept


State 100

	%start_pControlBits -> ControlBits .                (rule 19)

	%eof           accept


State 101

	ControlBits -> '[' . Integer ',' ListInteger ']'    (rule 118)

	L_integ        shift, and enter state 81

	Integer        goto state 210

State 102

	%start_pControlBit -> ControlBit .                  (rule 18)

	%eof           accept


State 103

	ControlBit -> '[' . Integer ']'                     (rule 117)

	L_integ        shift, and enter state 81

	Integer        goto state 209

State 104

	ListBasisState -> BasisState .                      (rule 115)
	ListBasisState -> BasisState . ',' ListBasisState    (rule 116)

	','            shift, and enter state 208
	']'            reduce using rule 115
	%eof           reduce using rule 115


State 105

	%start_pListBasisState -> ListBasisState .          (rule 17)

	%eof           accept


State 106

	%start_pControlBasisStates -> ControlBasisStates .    (rule 16)

	%eof           accept


State 107

	ControlBasisStates -> '[' . BasisState ',' ListBasisState ']'    (rule 114)

	'@+'           shift, and enter state 70
	'@+i'          shift, and enter state 71
	'@-'           shift, and enter state 72
	'@-i'          shift, and enter state 73
	'@0'           shift, and enter state 74
	'@1'           shift, and enter state 75

	BasisState     goto state 207

State 108

	%start_pControlBasisState -> ControlBasisState .    (rule 15)

	%eof           accept


State 109

	ControlBasisState -> '[' . BasisState ']'           (rule 113)

	'@+'           shift, and enter state 70
	'@+i'          shift, and enter state 71
	'@-'           shift, and enter state 72
	'@-i'          shift, and enter state 73
	'@0'           shift, and enter state 74
	'@1'           shift, and enter state 75

	BasisState     goto state 206

State 110

	ListVar -> Var .                                    (rule 111)
	ListVar -> Var . ',' ListVar                        (rule 112)

	')'            reduce using rule 111
	','            shift, and enter state 205
	'<-'           reduce using rule 111
	%eof           reduce using rule 111


State 111

	%start_pListVar -> ListVar .                        (rule 14)

	%eof           accept


State 112

	%start_pGate -> Gate .                              (rule 13)

	%eof           accept


State 113

	Gate -> 'FSWAP' .                                   (rule 105)

	'$'            reduce using rule 105
	'('            reduce using rule 105
	'()'           reduce using rule 105
	')'            reduce using rule 105
	','            reduce using rule 105
	'->'           reduce using rule 105
	'.'            reduce using rule 105
	';'            reduce using rule 105
	'@+'           reduce using rule 105
	'@+i'          reduce using rule 105
	'@-'           reduce using rule 105
	'@-i'          reduce using rule 105
	'@0'           reduce using rule 105
	'@1'           reduce using rule 105
	']'            reduce using rule 105
	'case'         reduce using rule 105
	'else'         reduce using rule 105
	'gate'         reduce using rule 105
	'if'           reduce using rule 105
	'let'          reduce using rule 105
	'of'           reduce using rule 105
	'then'         reduce using rule 105
	'with'         reduce using rule 105
	'}'            reduce using rule 105
	L_integ        reduce using rule 105
	L_ZeroOrOne    reduce using rule 105
	L_Var          reduce using rule 105
	L_Lambda       reduce using rule 105
	%eof           reduce using rule 105


State 114

	Gate -> 'H' .                                       (rule 76)

	'$'            reduce using rule 76
	'('            reduce using rule 76
	'()'           reduce using rule 76
	')'            reduce using rule 76
	','            reduce using rule 76
	'->'           reduce using rule 76
	'.'            reduce using rule 76
	';'            reduce using rule 76
	'@+'           reduce using rule 76
	'@+i'          reduce using rule 76
	'@-'           reduce using rule 76
	'@-i'          reduce using rule 76
	'@0'           reduce using rule 76
	'@1'           reduce using rule 76
	']'            reduce using rule 76
	'case'         reduce using rule 76
	'else'         reduce using rule 76
	'gate'         reduce using rule 76
	'if'           reduce using rule 76
	'let'          reduce using rule 76
	'of'           reduce using rule 76
	'then'         reduce using rule 76
	'with'         reduce using rule 76
	'}'            reduce using rule 76
	L_integ        reduce using rule 76
	L_ZeroOrOne    reduce using rule 76
	L_Var          reduce using rule 76
	L_Lambda       reduce using rule 76
	%eof           reduce using rule 76


State 115

	Gate -> 'ID' .                                      (rule 80)

	'$'            reduce using rule 80
	'('            reduce using rule 80
	'()'           reduce using rule 80
	')'            reduce using rule 80
	','            reduce using rule 80
	'->'           reduce using rule 80
	'.'            reduce using rule 80
	';'            reduce using rule 80
	'@+'           reduce using rule 80
	'@+i'          reduce using rule 80
	'@-'           reduce using rule 80
	'@-i'          reduce using rule 80
	'@0'           reduce using rule 80
	'@1'           reduce using rule 80
	']'            reduce using rule 80
	'case'         reduce using rule 80
	'else'         reduce using rule 80
	'gate'         reduce using rule 80
	'if'           reduce using rule 80
	'let'          reduce using rule 80
	'of'           reduce using rule 80
	'then'         reduce using rule 80
	'with'         reduce using rule 80
	'}'            reduce using rule 80
	L_integ        reduce using rule 80
	L_ZeroOrOne    reduce using rule 80
	L_Var          reduce using rule 80
	L_Lambda       reduce using rule 80
	%eof           reduce using rule 80


State 116

	Gate -> 'ISWAP' .                                   (rule 104)

	'$'            reduce using rule 104
	'('            reduce using rule 104
	'()'           reduce using rule 104
	')'            reduce using rule 104
	','            reduce using rule 104
	'->'           reduce using rule 104
	'.'            reduce using rule 104
	';'            reduce using rule 104
	'@+'           reduce using rule 104
	'@+i'          reduce using rule 104
	'@-'           reduce using rule 104
	'@-i'          reduce using rule 104
	'@0'           reduce using rule 104
	'@1'           reduce using rule 104
	']'            reduce using rule 104
	'case'         reduce using rule 104
	'else'         reduce using rule 104
	'gate'         reduce using rule 104
	'if'           reduce using rule 104
	'let'          reduce using rule 104
	'of'           reduce using rule 104
	'then'         reduce using rule 104
	'with'         reduce using rule 104
	'}'            reduce using rule 104
	L_integ        reduce using rule 104
	L_ZeroOrOne    reduce using rule 104
	L_Var          reduce using rule 104
	L_Lambda       reduce using rule 104
	%eof           reduce using rule 104


State 117

	Gate -> 'QFT' . Integer                             (rule 109)

	L_integ        shift, and enter state 81

	Integer        goto state 204

State 118

	Gate -> 'QFT_DAG' . Integer                         (rule 110)

	L_integ        shift, and enter state 81

	Integer        goto state 203

State 119

	Gate -> 'ROOT_SWAP' . Integer                       (rule 107)

	L_integ        shift, and enter state 81

	Integer        goto state 202

State 120

	Gate -> 'ROOT_SWAP_DAG' . Integer                   (rule 108)

	L_integ        shift, and enter state 81

	Integer        goto state 201

State 121

	Gate -> 'ROOT_X' . Integer                          (rule 81)

	L_integ        shift, and enter state 81

	Integer        goto state 200

State 122

	Gate -> 'ROOT_X_DAG' . Integer                      (rule 82)

	L_integ        shift, and enter state 81

	Integer        goto state 199

State 123

	Gate -> 'ROOT_Y' . Integer                          (rule 83)

	L_integ        shift, and enter state 81

	Integer        goto state 198

State 124

	Gate -> 'ROOT_Y_DAG' . Integer                      (rule 84)

	L_integ        shift, and enter state 81

	Integer        goto state 197

State 125

	Gate -> 'ROOT_Z' . Integer                          (rule 85)

	L_integ        shift, and enter state 81

	Integer        goto state 196

State 126

	Gate -> 'ROOT_Z_DAG' . Integer                      (rule 86)

	L_integ        shift, and enter state 81

	Integer        goto state 195

State 127

	Gate -> 'RX' . Angle                                (rule 95)

	L_doubl        shift, and enter state 38

	Double         goto state 150
	Angle          goto state 194

State 128

	Gate -> 'RY' . Angle                                (rule 96)

	L_doubl        shift, and enter state 38

	Double         goto state 150
	Angle          goto state 193

State 129

	Gate -> 'RZ' . Angle                                (rule 97)

	L_doubl        shift, and enter state 38

	Double         goto state 150
	Angle          goto state 192

State 130

	Gate -> 'S' .                                       (rule 87)

	'$'            reduce using rule 87
	'('            reduce using rule 87
	'()'           reduce using rule 87
	')'            reduce using rule 87
	','            reduce using rule 87
	'->'           reduce using rule 87
	'.'            reduce using rule 87
	';'            reduce using rule 87
	'@+'           reduce using rule 87
	'@+i'          reduce using rule 87
	'@-'           reduce using rule 87
	'@-i'          reduce using rule 87
	'@0'           reduce using rule 87
	'@1'           reduce using rule 87
	']'            reduce using rule 87
	'case'         reduce using rule 87
	'else'         reduce using rule 87
	'gate'         reduce using rule 87
	'if'           reduce using rule 87
	'let'          reduce using rule 87
	'of'           reduce using rule 87
	'then'         reduce using rule 87
	'with'         reduce using rule 87
	'}'            reduce using rule 87
	L_integ        reduce using rule 87
	L_ZeroOrOne    reduce using rule 87
	L_Var          reduce using rule 87
	L_Lambda       reduce using rule 87
	%eof           reduce using rule 87


State 131

	Gate -> 'SQRT_SWAP' .                               (rule 102)

	'$'            reduce using rule 102
	'('            reduce using rule 102
	'()'           reduce using rule 102
	')'            reduce using rule 102
	','            reduce using rule 102
	'->'           reduce using rule 102
	'.'            reduce using rule 102
	';'            reduce using rule 102
	'@+'           reduce using rule 102
	'@+i'          reduce using rule 102
	'@-'           reduce using rule 102
	'@-i'          reduce using rule 102
	'@0'           reduce using rule 102
	'@1'           reduce using rule 102
	']'            reduce using rule 102
	'case'         reduce using rule 102
	'else'         reduce using rule 102
	'gate'         reduce using rule 102
	'if'           reduce using rule 102
	'let'          reduce using rule 102
	'of'           reduce using rule 102
	'then'         reduce using rule 102
	'with'         reduce using rule 102
	'}'            reduce using rule 102
	L_integ        reduce using rule 102
	L_ZeroOrOne    reduce using rule 102
	L_Var          reduce using rule 102
	L_Lambda       reduce using rule 102
	%eof           reduce using rule 102


State 132

	Gate -> 'SQRT_SWAP_DAG' .                           (rule 103)

	'$'            reduce using rule 103
	'('            reduce using rule 103
	'()'           reduce using rule 103
	')'            reduce using rule 103
	','            reduce using rule 103
	'->'           reduce using rule 103
	'.'            reduce using rule 103
	';'            reduce using rule 103
	'@+'           reduce using rule 103
	'@+i'          reduce using rule 103
	'@-'           reduce using rule 103
	'@-i'          reduce using rule 103
	'@0'           reduce using rule 103
	'@1'           reduce using rule 103
	']'            reduce using rule 103
	'case'         reduce using rule 103
	'else'         reduce using rule 103
	'gate'         reduce using rule 103
	'if'           reduce using rule 103
	'let'          reduce using rule 103
	'of'           reduce using rule 103
	'then'         reduce using rule 103
	'with'         reduce using rule 103
	'}'            reduce using rule 103
	L_integ        reduce using rule 103
	L_ZeroOrOne    reduce using rule 103
	L_Var          reduce using rule 103
	L_Lambda       reduce using rule 103
	%eof           reduce using rule 103


State 133

	Gate -> 'SQRT_X' .                                  (rule 91)

	'$'            reduce using rule 91
	'('            reduce using rule 91
	'()'           reduce using rule 91
	')'            reduce using rule 91
	','            reduce using rule 91
	'->'           reduce using rule 91
	'.'            reduce using rule 91
	';'            reduce using rule 91
	'@+'           reduce using rule 91
	'@+i'          reduce using rule 91
	'@-'           reduce using rule 91
	'@-i'          reduce using rule 91
	'@0'           reduce using rule 91
	'@1'           reduce using rule 91
	']'            reduce using rule 91
	'case'         reduce using rule 91
	'else'         reduce using rule 91
	'gate'         reduce using rule 91
	'if'           reduce using rule 91
	'let'          reduce using rule 91
	'of'           reduce using rule 91
	'then'         reduce using rule 91
	'with'         reduce using rule 91
	'}'            reduce using rule 91
	L_integ        reduce using rule 91
	L_ZeroOrOne    reduce using rule 91
	L_Var          reduce using rule 91
	L_Lambda       reduce using rule 91
	%eof           reduce using rule 91


State 134

	Gate -> 'SQRT_X_DAG' .                              (rule 92)

	'$'            reduce using rule 92
	'('            reduce using rule 92
	'()'           reduce using rule 92
	')'            reduce using rule 92
	','            reduce using rule 92
	'->'           reduce using rule 92
	'.'            reduce using rule 92
	';'            reduce using rule 92
	'@+'           reduce using rule 92
	'@+i'          reduce using rule 92
	'@-'           reduce using rule 92
	'@-i'          reduce using rule 92
	'@0'           reduce using rule 92
	'@1'           reduce using rule 92
	']'            reduce using rule 92
	'case'         reduce using rule 92
	'else'         reduce using rule 92
	'gate'         reduce using rule 92
	'if'           reduce using rule 92
	'let'          reduce using rule 92
	'of'           reduce using rule 92
	'then'         reduce using rule 92
	'with'         reduce using rule 92
	'}'            reduce using rule 92
	L_integ        reduce using rule 92
	L_ZeroOrOne    reduce using rule 92
	L_Var          reduce using rule 92
	L_Lambda       reduce using rule 92
	%eof           reduce using rule 92


State 135

	Gate -> 'SQRT_Y' .                                  (rule 93)

	'$'            reduce using rule 93
	'('            reduce using rule 93
	'()'           reduce using rule 93
	')'            reduce using rule 93
	','            reduce using rule 93
	'->'           reduce using rule 93
	'.'            reduce using rule 93
	';'            reduce using rule 93
	'@+'           reduce using rule 93
	'@+i'          reduce using rule 93
	'@-'           reduce using rule 93
	'@-i'          reduce using rule 93
	'@0'           reduce using rule 93
	'@1'           reduce using rule 93
	']'            reduce using rule 93
	'case'         reduce using rule 93
	'else'         reduce using rule 93
	'gate'         reduce using rule 93
	'if'           reduce using rule 93
	'let'          reduce using rule 93
	'of'           reduce using rule 93
	'then'         reduce using rule 93
	'with'         reduce using rule 93
	'}'            reduce using rule 93
	L_integ        reduce using rule 93
	L_ZeroOrOne    reduce using rule 93
	L_Var          reduce using rule 93
	L_Lambda       reduce using rule 93
	%eof           reduce using rule 93


State 136

	Gate -> 'SQRT_Y_DAG' .                              (rule 94)

	'$'            reduce using rule 94
	'('            reduce using rule 94
	'()'           reduce using rule 94
	')'            reduce using rule 94
	','            reduce using rule 94
	'->'           reduce using rule 94
	'.'            reduce using rule 94
	';'            reduce using rule 94
	'@+'           reduce using rule 94
	'@+i'          reduce using rule 94
	'@-'           reduce using rule 94
	'@-i'          reduce using rule 94
	'@0'           reduce using rule 94
	'@1'           reduce using rule 94
	']'            reduce using rule 94
	'case'         reduce using rule 94
	'else'         reduce using rule 94
	'gate'         reduce using rule 94
	'if'           reduce using rule 94
	'let'          reduce using rule 94
	'of'           reduce using rule 94
	'then'         reduce using rule 94
	'with'         reduce using rule 94
	'}'            reduce using rule 94
	L_integ        reduce using rule 94
	L_ZeroOrOne    reduce using rule 94
	L_Var          reduce using rule 94
	L_Lambda       reduce using rule 94
	%eof           reduce using rule 94


State 137

	Gate -> 'SWAP' .                                    (rule 101)

	'$'            reduce using rule 101
	'('            reduce using rule 101
	'()'           reduce using rule 101
	')'            reduce using rule 101
	','            reduce using rule 101
	'->'           reduce using rule 101
	'.'            reduce using rule 101
	';'            reduce using rule 101
	'@+'           reduce using rule 101
	'@+i'          reduce using rule 101
	'@-'           reduce using rule 101
	'@-i'          reduce using rule 101
	'@0'           reduce using rule 101
	'@1'           reduce using rule 101
	']'            reduce using rule 101
	'case'         reduce using rule 101
	'else'         reduce using rule 101
	'gate'         reduce using rule 101
	'if'           reduce using rule 101
	'let'          reduce using rule 101
	'of'           reduce using rule 101
	'then'         reduce using rule 101
	'with'         reduce using rule 101
	'}'            reduce using rule 101
	L_integ        reduce using rule 101
	L_ZeroOrOne    reduce using rule 101
	L_Var          reduce using rule 101
	L_Lambda       reduce using rule 101
	%eof           reduce using rule 101


State 138

	Gate -> 'SWAP_THETA' . Angle                        (rule 106)

	L_doubl        shift, and enter state 38

	Double         goto state 150
	Angle          goto state 191

State 139

	Gate -> 'S_DAG' .                                   (rule 88)

	'$'            reduce using rule 88
	'('            reduce using rule 88
	'()'           reduce using rule 88
	')'            reduce using rule 88
	','            reduce using rule 88
	'->'           reduce using rule 88
	'.'            reduce using rule 88
	';'            reduce using rule 88
	'@+'           reduce using rule 88
	'@+i'          reduce using rule 88
	'@-'           reduce using rule 88
	'@-i'          reduce using rule 88
	'@0'           reduce using rule 88
	'@1'           reduce using rule 88
	']'            reduce using rule 88
	'case'         reduce using rule 88
	'else'         reduce using rule 88
	'gate'         reduce using rule 88
	'if'           reduce using rule 88
	'let'          reduce using rule 88
	'of'           reduce using rule 88
	'then'         reduce using rule 88
	'with'         reduce using rule 88
	'}'            reduce using rule 88
	L_integ        reduce using rule 88
	L_ZeroOrOne    reduce using rule 88
	L_Var          reduce using rule 88
	L_Lambda       reduce using rule 88
	%eof           reduce using rule 88


State 140

	Gate -> 'T' .                                       (rule 89)

	'$'            reduce using rule 89
	'('            reduce using rule 89
	'()'           reduce using rule 89
	')'            reduce using rule 89
	','            reduce using rule 89
	'->'           reduce using rule 89
	'.'            reduce using rule 89
	';'            reduce using rule 89
	'@+'           reduce using rule 89
	'@+i'          reduce using rule 89
	'@-'           reduce using rule 89
	'@-i'          reduce using rule 89
	'@0'           reduce using rule 89
	'@1'           reduce using rule 89
	']'            reduce using rule 89
	'case'         reduce using rule 89
	'else'         reduce using rule 89
	'gate'         reduce using rule 89
	'if'           reduce using rule 89
	'let'          reduce using rule 89
	'of'           reduce using rule 89
	'then'         reduce using rule 89
	'with'         reduce using rule 89
	'}'            reduce using rule 89
	L_integ        reduce using rule 89
	L_ZeroOrOne    reduce using rule 89
	L_Var          reduce using rule 89
	L_Lambda       reduce using rule 89
	%eof           reduce using rule 89


State 141

	Gate -> 'T_DAG' .                                   (rule 90)

	'$'            reduce using rule 90
	'('            reduce using rule 90
	'()'           reduce using rule 90
	')'            reduce using rule 90
	','            reduce using rule 90
	'->'           reduce using rule 90
	'.'            reduce using rule 90
	';'            reduce using rule 90
	'@+'           reduce using rule 90
	'@+i'          reduce using rule 90
	'@-'           reduce using rule 90
	'@-i'          reduce using rule 90
	'@0'           reduce using rule 90
	'@1'           reduce using rule 90
	']'            reduce using rule 90
	'case'         reduce using rule 90
	'else'         reduce using rule 90
	'gate'         reduce using rule 90
	'if'           reduce using rule 90
	'let'          reduce using rule 90
	'of'           reduce using rule 90
	'then'         reduce using rule 90
	'with'         reduce using rule 90
	'}'            reduce using rule 90
	L_integ        reduce using rule 90
	L_ZeroOrOne    reduce using rule 90
	L_Var          reduce using rule 90
	L_Lambda       reduce using rule 90
	%eof           reduce using rule 90


State 142

	Gate -> 'U1' . Angle                                (rule 98)

	L_doubl        shift, and enter state 38

	Double         goto state 150
	Angle          goto state 190

State 143

	Gate -> 'U2' . '(' Angle ',' Angle ')'              (rule 99)

	'('            shift, and enter state 189


State 144

	Gate -> 'U3' . '(' Angle ',' Angle ',' Angle ')'    (rule 100)

	'('            shift, and enter state 188


State 145

	Gate -> 'X' .                                       (rule 77)

	'$'            reduce using rule 77
	'('            reduce using rule 77
	'()'           reduce using rule 77
	')'            reduce using rule 77
	','            reduce using rule 77
	'->'           reduce using rule 77
	'.'            reduce using rule 77
	';'            reduce using rule 77
	'@+'           reduce using rule 77
	'@+i'          reduce using rule 77
	'@-'           reduce using rule 77
	'@-i'          reduce using rule 77
	'@0'           reduce using rule 77
	'@1'           reduce using rule 77
	']'            reduce using rule 77
	'case'         reduce using rule 77
	'else'         reduce using rule 77
	'gate'         reduce using rule 77
	'if'           reduce using rule 77
	'let'          reduce using rule 77
	'of'           reduce using rule 77
	'then'         reduce using rule 77
	'with'         reduce using rule 77
	'}'            reduce using rule 77
	L_integ        reduce using rule 77
	L_ZeroOrOne    reduce using rule 77
	L_Var          reduce using rule 77
	L_Lambda       reduce using rule 77
	%eof           reduce using rule 77


State 146

	Gate -> 'Y' .                                       (rule 78)

	'$'            reduce using rule 78
	'('            reduce using rule 78
	'()'           reduce using rule 78
	')'            reduce using rule 78
	','            reduce using rule 78
	'->'           reduce using rule 78
	'.'            reduce using rule 78
	';'            reduce using rule 78
	'@+'           reduce using rule 78
	'@+i'          reduce using rule 78
	'@-'           reduce using rule 78
	'@-i'          reduce using rule 78
	'@0'           reduce using rule 78
	'@1'           reduce using rule 78
	']'            reduce using rule 78
	'case'         reduce using rule 78
	'else'         reduce using rule 78
	'gate'         reduce using rule 78
	'if'           reduce using rule 78
	'let'          reduce using rule 78
	'of'           reduce using rule 78
	'then'         reduce using rule 78
	'with'         reduce using rule 78
	'}'            reduce using rule 78
	L_integ        reduce using rule 78
	L_ZeroOrOne    reduce using rule 78
	L_Var          reduce using rule 78
	L_Lambda       reduce using rule 78
	%eof           reduce using rule 78


State 147

	Gate -> 'Z' .                                       (rule 79)

	'$'            reduce using rule 79
	'('            reduce using rule 79
	'()'           reduce using rule 79
	')'            reduce using rule 79
	','            reduce using rule 79
	'->'           reduce using rule 79
	'.'            reduce using rule 79
	';'            reduce using rule 79
	'@+'           reduce using rule 79
	'@+i'          reduce using rule 79
	'@-'           reduce using rule 79
	'@-i'          reduce using rule 79
	'@0'           reduce using rule 79
	'@1'           reduce using rule 79
	']'            reduce using rule 79
	'case'         reduce using rule 79
	'else'         reduce using rule 79
	'gate'         reduce using rule 79
	'if'           reduce using rule 79
	'let'          reduce using rule 79
	'of'           reduce using rule 79
	'then'         reduce using rule 79
	'with'         reduce using rule 79
	'}'            reduce using rule 79
	L_integ        reduce using rule 79
	L_ZeroOrOne    reduce using rule 79
	L_Var          reduce using rule 79
	L_Lambda       reduce using rule 79
	%eof           reduce using rule 79


State 148

	%start_pBit -> Bit .                                (rule 12)

	%eof           accept


State 149

	%start_pBasisState -> BasisState .                  (rule 11)

	%eof           accept


State 150

	Angle -> Double .                                   (rule 68)

	'$'            reduce using rule 68
	'('            reduce using rule 68
	'()'           reduce using rule 68
	')'            reduce using rule 68
	','            reduce using rule 68
	'->'           reduce using rule 68
	'.'            reduce using rule 68
	';'            reduce using rule 68
	'@+'           reduce using rule 68
	'@+i'          reduce using rule 68
	'@-'           reduce using rule 68
	'@-i'          reduce using rule 68
	'@0'           reduce using rule 68
	'@1'           reduce using rule 68
	']'            reduce using rule 68
	'case'         reduce using rule 68
	'else'         reduce using rule 68
	'gate'         reduce using rule 68
	'if'           reduce using rule 68
	'let'          reduce using rule 68
	'of'           reduce using rule 68
	'then'         reduce using rule 68
	'with'         reduce using rule 68
	'}'            reduce using rule 68
	L_integ        reduce using rule 68
	L_ZeroOrOne    reduce using rule 68
	L_Var          reduce using rule 68
	L_Lambda       reduce using rule 68
	%eof           reduce using rule 68


State 151

	%start_pAngle -> Angle .                            (rule 10)

	%eof           accept


State 152

	Type4 -> Type5 .                                    (rule 67)

	')'            reduce using rule 67
	'*'            reduce using rule 67
	'**'           reduce using rule 67
	'+'            reduce using rule 67
	'->'           reduce using rule 67
	'.'            reduce using rule 67
	';'            reduce using rule 67
	%eof           reduce using rule 67


State 153

	%start_pType4 -> Type4 .                            (rule 9)

	%eof           accept


State 154

	Type5 -> '(' . Type ')'                             (rule 66)

	'!'            shift, and enter state 164
	'('            shift, and enter state 154
	'()'           shift, and enter state 155
	'Bit'          shift, and enter state 156
	'Int'          shift, and enter state 157
	'Qbit'         shift, and enter state 158
	'State'        shift, and enter state 159
	'Unitary'      shift, and enter state 160

	Type           goto state 187
	Type1          goto state 170
	Type2          goto state 168
	Type3          goto state 166
	Type5          goto state 152
	Type4          goto state 163

State 155

	Type5 -> '()' .                                     (rule 65)

	')'            reduce using rule 65
	'*'            reduce using rule 65
	'**'           reduce using rule 65
	'+'            reduce using rule 65
	'->'           reduce using rule 65
	'.'            reduce using rule 65
	';'            reduce using rule 65
	%eof           reduce using rule 65


State 156

	Type5 -> 'Bit' .                                    (rule 60)

	')'            reduce using rule 60
	'*'            reduce using rule 60
	'**'           reduce using rule 60
	'+'            reduce using rule 60
	'->'           reduce using rule 60
	'.'            reduce using rule 60
	';'            reduce using rule 60
	%eof           reduce using rule 60


State 157

	Type5 -> 'Int' .                                    (rule 61)

	')'            reduce using rule 61
	'*'            reduce using rule 61
	'**'           reduce using rule 61
	'+'            reduce using rule 61
	'->'           reduce using rule 61
	'.'            reduce using rule 61
	';'            reduce using rule 61
	%eof           reduce using rule 61


State 158

	Type5 -> 'Qbit' .                                   (rule 62)

	')'            reduce using rule 62
	'*'            reduce using rule 62
	'**'           reduce using rule 62
	'+'            reduce using rule 62
	'->'           reduce using rule 62
	'.'            reduce using rule 62
	';'            reduce using rule 62
	%eof           reduce using rule 62


State 159

	Type5 -> 'State' .                                  (rule 63)

	')'            reduce using rule 63
	'*'            reduce using rule 63
	'**'           reduce using rule 63
	'+'            reduce using rule 63
	'->'           reduce using rule 63
	'.'            reduce using rule 63
	';'            reduce using rule 63
	%eof           reduce using rule 63


State 160

	Type5 -> 'Unitary' .                                (rule 64)

	')'            reduce using rule 64
	'*'            reduce using rule 64
	'**'           reduce using rule 64
	'+'            reduce using rule 64
	'->'           reduce using rule 64
	'.'            reduce using rule 64
	';'            reduce using rule 64
	%eof           reduce using rule 64


State 161

	%start_pType5 -> Type5 .                            (rule 8)

	%eof           accept


State 162

	%start_pType3 -> Type3 .                            (rule 7)

	%eof           accept


State 163

	Type3 -> Type4 .                                    (rule 59)

	')'            reduce using rule 59
	'*'            reduce using rule 59
	'**'           reduce using rule 59
	'+'            reduce using rule 59
	'->'           reduce using rule 59
	'.'            reduce using rule 59
	';'            reduce using rule 59
	%eof           reduce using rule 59


State 164

	Type3 -> '!' . Type4                                (rule 58)

	'('            shift, and enter state 154
	'()'           shift, and enter state 155
	'Bit'          shift, and enter state 156
	'Int'          shift, and enter state 157
	'Qbit'         shift, and enter state 158
	'State'        shift, and enter state 159
	'Unitary'      shift, and enter state 160

	Type5          goto state 152
	Type4          goto state 186

State 165

	%start_pType2 -> Type2 .                            (rule 6)
	Type2 -> Type2 . '*' Type3                          (rule 55)
	Type2 -> Type2 . '**' Integer                       (rule 56)

	'*'            shift, and enter state 184
	'**'           shift, and enter state 185
	%eof           accept


State 166

	Type2 -> Type3 .                                    (rule 57)

	')'            reduce using rule 57
	'*'            reduce using rule 57
	'**'           reduce using rule 57
	'+'            reduce using rule 57
	'->'           reduce using rule 57
	'.'            reduce using rule 57
	';'            reduce using rule 57
	%eof           reduce using rule 57


State 167

	%start_pType1 -> Type1 .                            (rule 5)
	Type1 -> Type1 . '+' Type2                          (rule 53)

	'+'            shift, and enter state 182
	%eof           accept


State 168

	Type1 -> Type2 .                                    (rule 54)
	Type2 -> Type2 . '*' Type3                          (rule 55)
	Type2 -> Type2 . '**' Integer                       (rule 56)

	')'            reduce using rule 54
	'*'            shift, and enter state 184
	'**'           shift, and enter state 185
	'+'            reduce using rule 54
	'->'           reduce using rule 54
	'.'            reduce using rule 54
	';'            reduce using rule 54
	%eof           reduce using rule 54


State 169

	%start_pType -> Type .                              (rule 4)
	Type -> Type . '->' Type1                           (rule 51)

	'->'           shift, and enter state 183
	%eof           accept


State 170

	Type -> Type1 .                                     (rule 52)
	Type1 -> Type1 . '+' Type2                          (rule 53)

	')'            reduce using rule 52
	'+'            shift, and enter state 182
	'->'           reduce using rule 52
	'.'            reduce using rule 52
	';'            reduce using rule 52
	%eof           reduce using rule 52


State 171

	%start_pProgram -> Program .                        (rule 3)

	%eof           accept


State 172

	Program -> ListFunctionDeclaration .                (rule 50)

	%eof           reduce using rule 50


State 173

	%start_pIntegerExpr2 -> IntegerExpr2 .              (rule 2)

	%eof           accept


State 174

	IntegerExpr2 -> '(' . IntegerExpr ')'               (rule 49)

	'('            shift, and enter state 174
	L_integ        shift, and enter state 81

	Integer        goto state 52
	IntegerExpr    goto state 181
	IntegerExpr1   goto state 57
	IntegerExpr2   goto state 58

State 175

	%start_pIntegerExpr1 -> IntegerExpr1 .              (rule 1)
	IntegerExpr1 -> IntegerExpr1 . '*' IntegerExpr2     (rule 45)
	IntegerExpr1 -> IntegerExpr1 . '/' IntegerExpr2     (rule 46)

	'*'            shift, and enter state 179
	'/'            shift, and enter state 180
	%eof           accept


State 176

	%start_pIntegerExpr -> IntegerExpr .                (rule 0)
	IntegerExpr -> IntegerExpr . '+' IntegerExpr1       (rule 42)
	IntegerExpr -> IntegerExpr . '-' IntegerExpr1       (rule 43)

	'+'            shift, and enter state 177
	'-'            shift, and enter state 178
	%eof           accept


State 177

	IntegerExpr -> IntegerExpr '+' . IntegerExpr1       (rule 42)

	'('            shift, and enter state 174
	L_integ        shift, and enter state 81

	Integer        goto state 52
	IntegerExpr1   goto state 279
	IntegerExpr2   goto state 58

State 178

	IntegerExpr -> IntegerExpr '-' . IntegerExpr1       (rule 43)

	'('            shift, and enter state 174
	L_integ        shift, and enter state 81

	Integer        goto state 52
	IntegerExpr1   goto state 278
	IntegerExpr2   goto state 58

State 179

	IntegerExpr1 -> IntegerExpr1 '*' . IntegerExpr2     (rule 45)

	'('            shift, and enter state 174
	L_integ        shift, and enter state 81

	Integer        goto state 52
	IntegerExpr2   goto state 277

State 180

	IntegerExpr1 -> IntegerExpr1 '/' . IntegerExpr2     (rule 46)

	'('            shift, and enter state 174
	L_integ        shift, and enter state 81

	Integer        goto state 52
	IntegerExpr2   goto state 276

State 181

	IntegerExpr -> IntegerExpr . '+' IntegerExpr1       (rule 42)
	IntegerExpr -> IntegerExpr . '-' IntegerExpr1       (rule 43)
	IntegerExpr2 -> '(' IntegerExpr . ')'               (rule 49)

	')'            shift, and enter state 250
	'+'            shift, and enter state 177
	'-'            shift, and enter state 178


State 182

	Type1 -> Type1 '+' . Type2                          (rule 53)

	'!'            shift, and enter state 164
	'('            shift, and enter state 154
	'()'           shift, and enter state 155
	'Bit'          shift, and enter state 156
	'Int'          shift, and enter state 157
	'Qbit'         shift, and enter state 158
	'State'        shift, and enter state 159
	'Unitary'      shift, and enter state 160

	Type2          goto state 275
	Type3          goto state 166
	Type5          goto state 152
	Type4          goto state 163

State 183

	Type -> Type '->' . Type1                           (rule 51)

	'!'            shift, and enter state 164
	'('            shift, and enter state 154
	'()'           shift, and enter state 155
	'Bit'          shift, and enter state 156
	'Int'          shift, and enter state 157
	'Qbit'         shift, and enter state 158
	'State'        shift, and enter state 159
	'Unitary'      shift, and enter state 160

	Type1          goto state 274
	Type2          goto state 168
	Type3          goto state 166
	Type5          goto state 152
	Type4          goto state 163

State 184

	Type2 -> Type2 '*' . Type3                          (rule 55)

	'!'            shift, and enter state 164
	'('            shift, and enter state 154
	'()'           shift, and enter state 155
	'Bit'          shift, and enter state 156
	'Int'          shift, and enter state 157
	'Qbit'         shift, and enter state 158
	'State'        shift, and enter state 159
	'Unitary'      shift, and enter state 160

	Type3          goto state 273
	Type5          goto state 152
	Type4          goto state 163

State 185

	Type2 -> Type2 '**' . Integer                       (rule 56)

	L_integ        shift, and enter state 81

	Integer        goto state 272

State 186

	Type3 -> '!' Type4 .                                (rule 58)

	')'            reduce using rule 58
	'*'            reduce using rule 58
	'**'           reduce using rule 58
	'+'            reduce using rule 58
	'->'           reduce using rule 58
	'.'            reduce using rule 58
	';'            reduce using rule 58
	%eof           reduce using rule 58


State 187

	Type -> Type . '->' Type1                           (rule 51)
	Type5 -> '(' Type . ')'                             (rule 66)

	')'            shift, and enter state 271
	'->'           shift, and enter state 183


State 188

	Gate -> 'U3' '(' . Angle ',' Angle ',' Angle ')'    (rule 100)

	L_doubl        shift, and enter state 38

	Double         goto state 150
	Angle          goto state 270

State 189

	Gate -> 'U2' '(' . Angle ',' Angle ')'              (rule 99)

	L_doubl        shift, and enter state 38

	Double         goto state 150
	Angle          goto state 269

State 190

	Gate -> 'U1' Angle .                                (rule 98)

	'$'            reduce using rule 98
	'('            reduce using rule 98
	'()'           reduce using rule 98
	')'            reduce using rule 98
	','            reduce using rule 98
	'->'           reduce using rule 98
	'.'            reduce using rule 98
	';'            reduce using rule 98
	'@+'           reduce using rule 98
	'@+i'          reduce using rule 98
	'@-'           reduce using rule 98
	'@-i'          reduce using rule 98
	'@0'           reduce using rule 98
	'@1'           reduce using rule 98
	']'            reduce using rule 98
	'case'         reduce using rule 98
	'else'         reduce using rule 98
	'gate'         reduce using rule 98
	'if'           reduce using rule 98
	'let'          reduce using rule 98
	'of'           reduce using rule 98
	'then'         reduce using rule 98
	'with'         reduce using rule 98
	'}'            reduce using rule 98
	L_integ        reduce using rule 98
	L_ZeroOrOne    reduce using rule 98
	L_Var          reduce using rule 98
	L_Lambda       reduce using rule 98
	%eof           reduce using rule 98


State 191

	Gate -> 'SWAP_THETA' Angle .                        (rule 106)

	'$'            reduce using rule 106
	'('            reduce using rule 106
	'()'           reduce using rule 106
	')'            reduce using rule 106
	','            reduce using rule 106
	'->'           reduce using rule 106
	'.'            reduce using rule 106
	';'            reduce using rule 106
	'@+'           reduce using rule 106
	'@+i'          reduce using rule 106
	'@-'           reduce using rule 106
	'@-i'          reduce using rule 106
	'@0'           reduce using rule 106
	'@1'           reduce using rule 106
	']'            reduce using rule 106
	'case'         reduce using rule 106
	'else'         reduce using rule 106
	'gate'         reduce using rule 106
	'if'           reduce using rule 106
	'let'          reduce using rule 106
	'of'           reduce using rule 106
	'then'         reduce using rule 106
	'with'         reduce using rule 106
	'}'            reduce using rule 106
	L_integ        reduce using rule 106
	L_ZeroOrOne    reduce using rule 106
	L_Var          reduce using rule 106
	L_Lambda       reduce using rule 106
	%eof           reduce using rule 106


State 192

	Gate -> 'RZ' Angle .                                (rule 97)

	'$'            reduce using rule 97
	'('            reduce using rule 97
	'()'           reduce using rule 97
	')'            reduce using rule 97
	','            reduce using rule 97
	'->'           reduce using rule 97
	'.'            reduce using rule 97
	';'            reduce using rule 97
	'@+'           reduce using rule 97
	'@+i'          reduce using rule 97
	'@-'           reduce using rule 97
	'@-i'          reduce using rule 97
	'@0'           reduce using rule 97
	'@1'           reduce using rule 97
	']'            reduce using rule 97
	'case'         reduce using rule 97
	'else'         reduce using rule 97
	'gate'         reduce using rule 97
	'if'           reduce using rule 97
	'let'          reduce using rule 97
	'of'           reduce using rule 97
	'then'         reduce using rule 97
	'with'         reduce using rule 97
	'}'            reduce using rule 97
	L_integ        reduce using rule 97
	L_ZeroOrOne    reduce using rule 97
	L_Var          reduce using rule 97
	L_Lambda       reduce using rule 97
	%eof           reduce using rule 97


State 193

	Gate -> 'RY' Angle .                                (rule 96)

	'$'            reduce using rule 96
	'('            reduce using rule 96
	'()'           reduce using rule 96
	')'            reduce using rule 96
	','            reduce using rule 96
	'->'           reduce using rule 96
	'.'            reduce using rule 96
	';'            reduce using rule 96
	'@+'           reduce using rule 96
	'@+i'          reduce using rule 96
	'@-'           reduce using rule 96
	'@-i'          reduce using rule 96
	'@0'           reduce using rule 96
	'@1'           reduce using rule 96
	']'            reduce using rule 96
	'case'         reduce using rule 96
	'else'         reduce using rule 96
	'gate'         reduce using rule 96
	'if'           reduce using rule 96
	'let'          reduce using rule 96
	'of'           reduce using rule 96
	'then'         reduce using rule 96
	'with'         reduce using rule 96
	'}'            reduce using rule 96
	L_integ        reduce using rule 96
	L_ZeroOrOne    reduce using rule 96
	L_Var          reduce using rule 96
	L_Lambda       reduce using rule 96
	%eof           reduce using rule 96


State 194

	Gate -> 'RX' Angle .                                (rule 95)

	'$'            reduce using rule 95
	'('            reduce using rule 95
	'()'           reduce using rule 95
	')'            reduce using rule 95
	','            reduce using rule 95
	'->'           reduce using rule 95
	'.'            reduce using rule 95
	';'            reduce using rule 95
	'@+'           reduce using rule 95
	'@+i'          reduce using rule 95
	'@-'           reduce using rule 95
	'@-i'          reduce using rule 95
	'@0'           reduce using rule 95
	'@1'           reduce using rule 95
	']'            reduce using rule 95
	'case'         reduce using rule 95
	'else'         reduce using rule 95
	'gate'         reduce using rule 95
	'if'           reduce using rule 95
	'let'          reduce using rule 95
	'of'           reduce using rule 95
	'then'         reduce using rule 95
	'with'         reduce using rule 95
	'}'            reduce using rule 95
	L_integ        reduce using rule 95
	L_ZeroOrOne    reduce using rule 95
	L_Var          reduce using rule 95
	L_Lambda       reduce using rule 95
	%eof           reduce using rule 95


State 195

	Gate -> 'ROOT_Z_DAG' Integer .                      (rule 86)

	'$'            reduce using rule 86
	'('            reduce using rule 86
	'()'           reduce using rule 86
	')'            reduce using rule 86
	','            reduce using rule 86
	'->'           reduce using rule 86
	'.'            reduce using rule 86
	';'            reduce using rule 86
	'@+'           reduce using rule 86
	'@+i'          reduce using rule 86
	'@-'           reduce using rule 86
	'@-i'          reduce using rule 86
	'@0'           reduce using rule 86
	'@1'           reduce using rule 86
	']'            reduce using rule 86
	'case'         reduce using rule 86
	'else'         reduce using rule 86
	'gate'         reduce using rule 86
	'if'           reduce using rule 86
	'let'          reduce using rule 86
	'of'           reduce using rule 86
	'then'         reduce using rule 86
	'with'         reduce using rule 86
	'}'            reduce using rule 86
	L_integ        reduce using rule 86
	L_ZeroOrOne    reduce using rule 86
	L_Var          reduce using rule 86
	L_Lambda       reduce using rule 86
	%eof           reduce using rule 86


State 196

	Gate -> 'ROOT_Z' Integer .                          (rule 85)

	'$'            reduce using rule 85
	'('            reduce using rule 85
	'()'           reduce using rule 85
	')'            reduce using rule 85
	','            reduce using rule 85
	'->'           reduce using rule 85
	'.'            reduce using rule 85
	';'            reduce using rule 85
	'@+'           reduce using rule 85
	'@+i'          reduce using rule 85
	'@-'           reduce using rule 85
	'@-i'          reduce using rule 85
	'@0'           reduce using rule 85
	'@1'           reduce using rule 85
	']'            reduce using rule 85
	'case'         reduce using rule 85
	'else'         reduce using rule 85
	'gate'         reduce using rule 85
	'if'           reduce using rule 85
	'let'          reduce using rule 85
	'of'           reduce using rule 85
	'then'         reduce using rule 85
	'with'         reduce using rule 85
	'}'            reduce using rule 85
	L_integ        reduce using rule 85
	L_ZeroOrOne    reduce using rule 85
	L_Var          reduce using rule 85
	L_Lambda       reduce using rule 85
	%eof           reduce using rule 85


State 197

	Gate -> 'ROOT_Y_DAG' Integer .                      (rule 84)

	'$'            reduce using rule 84
	'('            reduce using rule 84
	'()'           reduce using rule 84
	')'            reduce using rule 84
	','            reduce using rule 84
	'->'           reduce using rule 84
	'.'            reduce using rule 84
	';'            reduce using rule 84
	'@+'           reduce using rule 84
	'@+i'          reduce using rule 84
	'@-'           reduce using rule 84
	'@-i'          reduce using rule 84
	'@0'           reduce using rule 84
	'@1'           reduce using rule 84
	']'            reduce using rule 84
	'case'         reduce using rule 84
	'else'         reduce using rule 84
	'gate'         reduce using rule 84
	'if'           reduce using rule 84
	'let'          reduce using rule 84
	'of'           reduce using rule 84
	'then'         reduce using rule 84
	'with'         reduce using rule 84
	'}'            reduce using rule 84
	L_integ        reduce using rule 84
	L_ZeroOrOne    reduce using rule 84
	L_Var          reduce using rule 84
	L_Lambda       reduce using rule 84
	%eof           reduce using rule 84


State 198

	Gate -> 'ROOT_Y' Integer .                          (rule 83)

	'$'            reduce using rule 83
	'('            reduce using rule 83
	'()'           reduce using rule 83
	')'            reduce using rule 83
	','            reduce using rule 83
	'->'           reduce using rule 83
	'.'            reduce using rule 83
	';'            reduce using rule 83
	'@+'           reduce using rule 83
	'@+i'          reduce using rule 83
	'@-'           reduce using rule 83
	'@-i'          reduce using rule 83
	'@0'           reduce using rule 83
	'@1'           reduce using rule 83
	']'            reduce using rule 83
	'case'         reduce using rule 83
	'else'         reduce using rule 83
	'gate'         reduce using rule 83
	'if'           reduce using rule 83
	'let'          reduce using rule 83
	'of'           reduce using rule 83
	'then'         reduce using rule 83
	'with'         reduce using rule 83
	'}'            reduce using rule 83
	L_integ        reduce using rule 83
	L_ZeroOrOne    reduce using rule 83
	L_Var          reduce using rule 83
	L_Lambda       reduce using rule 83
	%eof           reduce using rule 83


State 199

	Gate -> 'ROOT_X_DAG' Integer .                      (rule 82)

	'$'            reduce using rule 82
	'('            reduce using rule 82
	'()'           reduce using rule 82
	')'            reduce using rule 82
	','            reduce using rule 82
	'->'           reduce using rule 82
	'.'            reduce using rule 82
	';'            reduce using rule 82
	'@+'           reduce using rule 82
	'@+i'          reduce using rule 82
	'@-'           reduce using rule 82
	'@-i'          reduce using rule 82
	'@0'           reduce using rule 82
	'@1'           reduce using rule 82
	']'            reduce using rule 82
	'case'         reduce using rule 82
	'else'         reduce using rule 82
	'gate'         reduce using rule 82
	'if'           reduce using rule 82
	'let'          reduce using rule 82
	'of'           reduce using rule 82
	'then'         reduce using rule 82
	'with'         reduce using rule 82
	'}'            reduce using rule 82
	L_integ        reduce using rule 82
	L_ZeroOrOne    reduce using rule 82
	L_Var          reduce using rule 82
	L_Lambda       reduce using rule 82
	%eof           reduce using rule 82


State 200

	Gate -> 'ROOT_X' Integer .                          (rule 81)

	'$'            reduce using rule 81
	'('            reduce using rule 81
	'()'           reduce using rule 81
	')'            reduce using rule 81
	','            reduce using rule 81
	'->'           reduce using rule 81
	'.'            reduce using rule 81
	';'            reduce using rule 81
	'@+'           reduce using rule 81
	'@+i'          reduce using rule 81
	'@-'           reduce using rule 81
	'@-i'          reduce using rule 81
	'@0'           reduce using rule 81
	'@1'           reduce using rule 81
	']'            reduce using rule 81
	'case'         reduce using rule 81
	'else'         reduce using rule 81
	'gate'         reduce using rule 81
	'if'           reduce using rule 81
	'let'          reduce using rule 81
	'of'           reduce using rule 81
	'then'         reduce using rule 81
	'with'         reduce using rule 81
	'}'            reduce using rule 81
	L_integ        reduce using rule 81
	L_ZeroOrOne    reduce using rule 81
	L_Var          reduce using rule 81
	L_Lambda       reduce using rule 81
	%eof           reduce using rule 81


State 201

	Gate -> 'ROOT_SWAP_DAG' Integer .                   (rule 108)

	'$'            reduce using rule 108
	'('            reduce using rule 108
	'()'           reduce using rule 108
	')'            reduce using rule 108
	','            reduce using rule 108
	'->'           reduce using rule 108
	'.'            reduce using rule 108
	';'            reduce using rule 108
	'@+'           reduce using rule 108
	'@+i'          reduce using rule 108
	'@-'           reduce using rule 108
	'@-i'          reduce using rule 108
	'@0'           reduce using rule 108
	'@1'           reduce using rule 108
	']'            reduce using rule 108
	'case'         reduce using rule 108
	'else'         reduce using rule 108
	'gate'         reduce using rule 108
	'if'           reduce using rule 108
	'let'          reduce using rule 108
	'of'           reduce using rule 108
	'then'         reduce using rule 108
	'with'         reduce using rule 108
	'}'            reduce using rule 108
	L_integ        reduce using rule 108
	L_ZeroOrOne    reduce using rule 108
	L_Var          reduce using rule 108
	L_Lambda       reduce using rule 108
	%eof           reduce using rule 108


State 202

	Gate -> 'ROOT_SWAP' Integer .                       (rule 107)

	'$'            reduce using rule 107
	'('            reduce using rule 107
	'()'           reduce using rule 107
	')'            reduce using rule 107
	','            reduce using rule 107
	'->'           reduce using rule 107
	'.'            reduce using rule 107
	';'            reduce using rule 107
	'@+'           reduce using rule 107
	'@+i'          reduce using rule 107
	'@-'           reduce using rule 107
	'@-i'          reduce using rule 107
	'@0'           reduce using rule 107
	'@1'           reduce using rule 107
	']'            reduce using rule 107
	'case'         reduce using rule 107
	'else'         reduce using rule 107
	'gate'         reduce using rule 107
	'if'           reduce using rule 107
	'let'          reduce using rule 107
	'of'           reduce using rule 107
	'then'         reduce using rule 107
	'with'         reduce using rule 107
	'}'            reduce using rule 107
	L_integ        reduce using rule 107
	L_ZeroOrOne    reduce using rule 107
	L_Var          reduce using rule 107
	L_Lambda       reduce using rule 107
	%eof           reduce using rule 107


State 203

	Gate -> 'QFT_DAG' Integer .                         (rule 110)

	'$'            reduce using rule 110
	'('            reduce using rule 110
	'()'           reduce using rule 110
	')'            reduce using rule 110
	','            reduce using rule 110
	'->'           reduce using rule 110
	'.'            reduce using rule 110
	';'            reduce using rule 110
	'@+'           reduce using rule 110
	'@+i'          reduce using rule 110
	'@-'           reduce using rule 110
	'@-i'          reduce using rule 110
	'@0'           reduce using rule 110
	'@1'           reduce using rule 110
	']'            reduce using rule 110
	'case'         reduce using rule 110
	'else'         reduce using rule 110
	'gate'         reduce using rule 110
	'if'           reduce using rule 110
	'let'          reduce using rule 110
	'of'           reduce using rule 110
	'then'         reduce using rule 110
	'with'         reduce using rule 110
	'}'            reduce using rule 110
	L_integ        reduce using rule 110
	L_ZeroOrOne    reduce using rule 110
	L_Var          reduce using rule 110
	L_Lambda       reduce using rule 110
	%eof           reduce using rule 110


State 204

	Gate -> 'QFT' Integer .                             (rule 109)

	'$'            reduce using rule 109
	'('            reduce using rule 109
	'()'           reduce using rule 109
	')'            reduce using rule 109
	','            reduce using rule 109
	'->'           reduce using rule 109
	'.'            reduce using rule 109
	';'            reduce using rule 109
	'@+'           reduce using rule 109
	'@+i'          reduce using rule 109
	'@-'           reduce using rule 109
	'@-i'          reduce using rule 109
	'@0'           reduce using rule 109
	'@1'           reduce using rule 109
	']'            reduce using rule 109
	'case'         reduce using rule 109
	'else'         reduce using rule 109
	'gate'         reduce using rule 109
	'if'           reduce using rule 109
	'let'          reduce using rule 109
	'of'           reduce using rule 109
	'then'         reduce using rule 109
	'with'         reduce using rule 109
	'}'            reduce using rule 109
	L_integ        reduce using rule 109
	L_ZeroOrOne    reduce using rule 109
	L_Var          reduce using rule 109
	L_Lambda       reduce using rule 109
	%eof           reduce using rule 109


State 205

	ListVar -> Var ',' . ListVar                        (rule 112)

	L_Var          shift, and enter state 43

	Var            goto state 110
	ListVar        goto state 268

State 206

	ControlBasisState -> '[' BasisState . ']'           (rule 113)

	']'            shift, and enter state 267


State 207

	ControlBasisStates -> '[' BasisState . ',' ListBasisState ']'    (rule 114)

	','            shift, and enter state 266


State 208

	ListBasisState -> BasisState ',' . ListBasisState    (rule 116)

	'@+'           shift, and enter state 70
	'@+i'          shift, and enter state 71
	'@-'           shift, and enter state 72
	'@-i'          shift, and enter state 73
	'@0'           shift, and enter state 74
	'@1'           shift, and enter state 75

	BasisState     goto state 104
	ListBasisState goto state 265

State 209

	ControlBit -> '[' Integer . ']'                     (rule 117)

	']'            shift, and enter state 264


State 210

	ControlBits -> '[' Integer . ',' ListInteger ']'    (rule 118)

	','            shift, and enter state 263


State 211

	ListInteger -> Integer ',' . ListInteger            (rule 120)

	L_integ        shift, and enter state 81

	Integer        goto state 98
	ListInteger    goto state 262

State 212

	Tuple -> '(' Term . ',' ListTerm ')'                (rule 121)

	','            shift, and enter state 249


State 213

	ControlTerm -> '[' Term . ']'                       (rule 122)

	']'            shift, and enter state 261


State 214

	ControlTerms -> '[' Term . ',' ListTerm ']'         (rule 123)

	','            shift, and enter state 260


State 215

	ListTerm -> Term ',' . ListTerm                     (rule 125)

	'('            shift, and enter state 68
	'()'           shift, and enter state 69
	'@+'           shift, and enter state 70
	'@+i'          shift, and enter state 71
	'@-'           shift, and enter state 72
	'@-i'          shift, and enter state 73
	'@0'           shift, and enter state 74
	'@1'           shift, and enter state 75
	'case'         shift, and enter state 76
	'gate'         shift, and enter state 77
	'if'           shift, and enter state 78
	'let'          shift, and enter state 79
	'with'         shift, and enter state 80
	L_integ        shift, and enter state 81
	L_ZeroOrOne    shift, and enter state 82
	L_Var          shift, and enter state 43
	L_Lambda       shift, and enter state 83

	Integer        goto state 52
	ZeroOrOne      goto state 53
	Var            goto state 54
	Lambda         goto state 55
	IntegerExpr    goto state 56
	IntegerExpr1   goto state 57
	IntegerExpr2   goto state 58
	BasisState     goto state 59
	Bit            goto state 60
	Tuple          goto state 61
	ListTerm       goto state 259
	Term1          goto state 62
	Term2          goto state 63
	Term3          goto state 64
	Term           goto state 91

State 216

	Term2 -> Term2 Term3 .                              (rule 139)

	'$'            reduce using rule 139
	'('            reduce using rule 139
	'()'           reduce using rule 139
	')'            reduce using rule 139
	','            reduce using rule 139
	'->'           reduce using rule 139
	'.'            reduce using rule 139
	';'            reduce using rule 139
	'@+'           reduce using rule 139
	'@+i'          reduce using rule 139
	'@-'           reduce using rule 139
	'@-i'          reduce using rule 139
	'@0'           reduce using rule 139
	'@1'           reduce using rule 139
	']'            reduce using rule 139
	'case'         reduce using rule 139
	'else'         reduce using rule 139
	'gate'         reduce using rule 139
	'if'           reduce using rule 139
	'let'          reduce using rule 139
	'of'           reduce using rule 139
	'then'         reduce using rule 139
	'with'         reduce using rule 139
	'}'            reduce using rule 139
	L_integ        reduce using rule 139
	L_ZeroOrOne    reduce using rule 139
	L_Var          reduce using rule 139
	L_Lambda       reduce using rule 139
	%eof           reduce using rule 139


State 217

	Term2 -> Term2 '.' . Term3                          (rule 140)

	'('            shift, and enter state 68
	'()'           shift, and enter state 69
	'@+'           shift, and enter state 70
	'@+i'          shift, and enter state 71
	'@-'           shift, and enter state 72
	'@-i'          shift, and enter state 73
	'@0'           shift, and enter state 74
	'@1'           shift, and enter state 75
	'gate'         shift, and enter state 77
	L_integ        shift, and enter state 81
	L_ZeroOrOne    shift, and enter state 82
	L_Var          shift, and enter state 43

	Integer        goto state 52
	ZeroOrOne      goto state 53
	Var            goto state 86
	IntegerExpr    goto state 56
	IntegerExpr1   goto state 57
	IntegerExpr2   goto state 58
	BasisState     goto state 59
	Bit            goto state 60
	Tuple          goto state 61
	Term3          goto state 258

State 218

	Term2 -> 'with' ControlTerm . 'ctrl' ControlBasisState    (rule 135)
	Term2 -> 'with' ControlTerm . 'ctrl' ControlBit     (rule 137)

	'ctrl'         shift, and enter state 257


State 219

	Term2 -> 'with' ControlTerms . 'ctrl' ControlBasisStates    (rule 136)
	Term2 -> 'with' ControlTerms . 'ctrl' ControlBits    (rule 138)

	'ctrl'         shift, and enter state 256


State 220

	ControlTerm -> '[' . Term ']'                       (rule 122)
	ControlTerms -> '[' . Term ',' ListTerm ']'         (rule 123)

	'('            shift, and enter state 68
	'()'           shift, and enter state 69
	'@+'           shift, and enter state 70
	'@+i'          shift, and enter state 71
	'@-'           shift, and enter state 72
	'@-i'          shift, and enter state 73
	'@0'           shift, and enter state 74
	'@1'           shift, and enter state 75
	'case'         shift, and enter state 76
	'gate'         shift, and enter state 77
	'if'           shift, and enter state 78
	'let'          shift, and enter state 79
	'with'         shift, and enter state 80
	L_integ        shift, and enter state 81
	L_ZeroOrOne    shift, and enter state 82
	L_Var          shift, and enter state 43
	L_Lambda       shift, and enter state 83

	Integer        goto state 52
	ZeroOrOne      goto state 53
	Var            goto state 54
	Lambda         goto state 55
	IntegerExpr    goto state 56
	IntegerExpr1   goto state 57
	IntegerExpr2   goto state 58
	BasisState     goto state 59
	Bit            goto state 60
	Tuple          goto state 61
	Term1          goto state 62
	Term2          goto state 63
	Term3          goto state 64
	Term           goto state 255

State 221

	Term1 -> 'let' '{' . Var '=' Term '}' 'in' Term     (rule 127)
	Term1 -> 'let' '{' . '(' Var ',' ListVar ')' '=' Term '}' 'in' Term    (rule 128)

	'('            shift, and enter state 254
	L_Var          shift, and enter state 43

	Var            goto state 253

State 222

	Term1 -> 'if' Term . 'then' Term 'else' Term        (rule 126)

	'then'         shift, and enter state 252


State 223

	Term3 -> 'gate' Gate .                              (rule 145)

	'$'            reduce using rule 145
	'('            reduce using rule 145
	'()'           reduce using rule 145
	')'            reduce using rule 145
	','            reduce using rule 145
	'->'           reduce using rule 145
	'.'            reduce using rule 145
	';'            reduce using rule 145
	'@+'           reduce using rule 145
	'@+i'          reduce using rule 145
	'@-'           reduce using rule 145
	'@-i'          reduce using rule 145
	'@0'           reduce using rule 145
	'@1'           reduce using rule 145
	']'            reduce using rule 145
	'case'         reduce using rule 145
	'else'         reduce using rule 145
	'gate'         reduce using rule 145
	'if'           reduce using rule 145
	'let'          reduce using rule 145
	'of'           reduce using rule 145
	'then'         reduce using rule 145
	'with'         reduce using rule 145
	'}'            reduce using rule 145
	L_integ        reduce using rule 145
	L_ZeroOrOne    reduce using rule 145
	L_Var          reduce using rule 145
	L_Lambda       reduce using rule 145
	%eof           reduce using rule 145


State 224

	Term1 -> 'case' Term . 'of' CaseExpression ListCaseExpression    (rule 131)

	'of'           shift, and enter state 251


State 225

	IntegerExpr -> IntegerExpr . '+' IntegerExpr1       (rule 42)
	IntegerExpr -> IntegerExpr . '-' IntegerExpr1       (rule 43)
	IntegerExpr2 -> '(' IntegerExpr . ')'               (rule 49)
	Term3 -> IntegerExpr .                              (rule 144)

	'$'            reduce using rule 144
	'('            reduce using rule 144
	'()'           reduce using rule 144
	')'            shift, and enter state 250
			(reduce using rule 144)

	'+'            shift, and enter state 177
	','            reduce using rule 144
	'-'            shift, and enter state 178
	'.'            reduce using rule 144
	'@+'           reduce using rule 144
	'@+i'          reduce using rule 144
	'@-'           reduce using rule 144
	'@-i'          reduce using rule 144
	'@0'           reduce using rule 144
	'@1'           reduce using rule 144
	'gate'         reduce using rule 144
	L_integ        reduce using rule 144
	L_ZeroOrOne    reduce using rule 144
	L_Var          reduce using rule 144


State 226

	Tuple -> '(' Term . ',' ListTerm ')'                (rule 121)
	Term3 -> '(' Term . ')'                             (rule 149)

	')'            shift, and enter state 248
	','            shift, and enter state 249


State 227

	ListCaseExpression -> CaseExpression ListCaseExpression .    (rule 153)

	'('            reduce using rule 153
	'()'           reduce using rule 153
	')'            reduce using rule 153
	','            reduce using rule 153
	'->'           reduce using rule 153
	';'            reduce using rule 153
	'@+'           reduce using rule 153
	'@+i'          reduce using rule 153
	'@-'           reduce using rule 153
	'@-i'          reduce using rule 153
	'@0'           reduce using rule 153
	'@1'           reduce using rule 153
	']'            reduce using rule 153
	'case'         reduce using rule 153
	'else'         reduce using rule 153
	'gate'         reduce using rule 153
	'if'           reduce using rule 153
	'let'          reduce using rule 153
	'of'           reduce using rule 153
	'then'         reduce using rule 153
	'with'         reduce using rule 153
	'}'            reduce using rule 153
	L_integ        reduce using rule 153
	L_ZeroOrOne    reduce using rule 153
	L_Var          reduce using rule 153
	L_Lambda       reduce using rule 153
	%eof           reduce using rule 153


State 228

	CaseExpression -> Term '->' . Term                  (rule 151)

	'('            shift, and enter state 68
	'()'           shift, and enter state 69
	'@+'           shift, and enter state 70
	'@+i'          shift, and enter state 71
	'@-'           shift, and enter state 72
	'@-i'          shift, and enter state 73
	'@0'           shift, and enter state 74
	'@1'           shift, and enter state 75
	'case'         shift, and enter state 76
	'gate'         shift, and enter state 77
	'if'           shift, and enter state 78
	'let'          shift, and enter state 79
	'with'         shift, and enter state 80
	L_integ        shift, and enter state 81
	L_ZeroOrOne    shift, and enter state 82
	L_Var          shift, and enter state 43
	L_Lambda       shift, and enter state 83

	Integer        goto state 52
	ZeroOrOne      goto state 53
	Var            goto state 54
	Lambda         goto state 55
	IntegerExpr    goto state 56
	IntegerExpr1   goto state 57
	IntegerExpr2   goto state 58
	BasisState     goto state 59
	Bit            goto state 60
	Tuple          goto state 61
	Term1          goto state 62
	Term2          goto state 63
	Term3          goto state 64
	Term           goto state 247

State 229

	Term1 -> Term2 '$' . Term1                          (rule 133)

	'('            shift, and enter state 68
	'()'           shift, and enter state 69
	'@+'           shift, and enter state 70
	'@+i'          shift, and enter state 71
	'@-'           shift, and enter state 72
	'@-i'          shift, and enter state 73
	'@0'           shift, and enter state 74
	'@1'           shift, and enter state 75
	'case'         shift, and enter state 76
	'gate'         shift, and enter state 77
	'if'           shift, and enter state 78
	'let'          shift, and enter state 79
	'with'         shift, and enter state 80
	L_integ        shift, and enter state 81
	L_ZeroOrOne    shift, and enter state 82
	L_Var          shift, and enter state 43
	L_Lambda       shift, and enter state 83

	Integer        goto state 52
	ZeroOrOne      goto state 53
	Var            goto state 54
	Lambda         goto state 55
	IntegerExpr    goto state 56
	IntegerExpr1   goto state 57
	IntegerExpr2   goto state 58
	BasisState     goto state 59
	Bit            goto state 60
	Tuple          goto state 61
	Term1          goto state 246
	Term2          goto state 63
	Term3          goto state 64

State 230

	Term1 -> Lambda Var . Type '.' Term                 (rule 132)

	'!'            shift, and enter state 164
	'('            shift, and enter state 154
	'()'           shift, and enter state 155
	'Bit'          shift, and enter state 156
	'Int'          shift, and enter state 157
	'Qbit'         shift, and enter state 158
	'State'        shift, and enter state 159
	'Unitary'      shift, and enter state 160

	Type           goto state 245
	Type1          goto state 170
	Type2          goto state 168
	Type3          goto state 166
	Type5          goto state 152
	Type4          goto state 163

State 231

	Term1 -> Var ',' . ListVar '<-' Term ';' Term       (rule 130)

	L_Var          shift, and enter state 43

	Var            goto state 110
	ListVar        goto state 244

State 232

	Term1 -> Var '<-' . Term ';' Term                   (rule 129)

	'('            shift, and enter state 68
	'()'           shift, and enter state 69
	'@+'           shift, and enter state 70
	'@+i'          shift, and enter state 71
	'@-'           shift, and enter state 72
	'@-i'          shift, and enter state 73
	'@0'           shift, and enter state 74
	'@1'           shift, and enter state 75
	'case'         shift, and enter state 76
	'gate'         shift, and enter state 77
	'if'           shift, and enter state 78
	'let'          shift, and enter state 79
	'with'         shift, and enter state 80
	L_integ        shift, and enter state 81
	L_ZeroOrOne    shift, and enter state 82
	L_Var          shift, and enter state 43
	L_Lambda       shift, and enter state 83

	Integer        goto state 52
	ZeroOrOne      goto state 53
	Var            goto state 54
	Lambda         goto state 55
	IntegerExpr    goto state 56
	IntegerExpr1   goto state 57
	IntegerExpr2   goto state 58
	BasisState     goto state 59
	Bit            goto state 60
	Tuple          goto state 61
	Term1          goto state 62
	Term2          goto state 63
	Term3          goto state 64
	Term           goto state 243

State 233

	ListArg -> Arg ListArg .                            (rule 156)

	'='            reduce using rule 156
	%eof           reduce using rule 156


State 234

	FunctionDefinition -> FunctionDefinition ';' .      (rule 158)

	';'            reduce using rule 158
	%eof           reduce using rule 158


State 235

	FunctionDefinition -> Var ListArg . '=' Term        (rule 157)

	'='            shift, and enter state 242


State 236

	FunctionType -> FunctionType ';' .                  (rule 160)

	';'            reduce using rule 160
	%eof           reduce using rule 160


State 237

	ListFunctionDeclaration -> FunctionDeclaration ListFunctionDeclaration .    (rule 163)

	%eof           reduce using rule 163


State 238

	FunctionType -> FunctionType ';' .                  (rule 160)
	FunctionDeclaration -> FunctionType ';' . FunctionDefinition ';'    (rule 161)

	';'            reduce using rule 160
	L_Var          shift, and enter state 43

	Var            goto state 46
	FunctionDefinitiongoto state 241

State 239

	FunctionType -> Var '::' . Type                     (rule 159)

	'!'            shift, and enter state 164
	'('            shift, and enter state 154
	'()'           shift, and enter state 155
	'Bit'          shift, and enter state 156
	'Int'          shift, and enter state 157
	'Qbit'         shift, and enter state 158
	'State'        shift, and enter state 159
	'Unitary'      shift, and enter state 160

	Type           goto state 240
	Type1          goto state 170
	Type2          goto state 168
	Type3          goto state 166
	Type5          goto state 152
	Type4          goto state 163

State 240

	Type -> Type . '->' Type1                           (rule 51)
	FunctionType -> Var '::' Type .                     (rule 159)

	'->'           shift, and enter state 183
	';'            reduce using rule 159
	%eof           reduce using rule 159


State 241

	FunctionDefinition -> FunctionDefinition . ';'      (rule 158)
	FunctionDeclaration -> FunctionType ';' FunctionDefinition . ';'    (rule 161)

	';'            shift, and enter state 300


State 242

	FunctionDefinition -> Var ListArg '=' . Term        (rule 157)

	'('            shift, and enter state 68
	'()'           shift, and enter state 69
	'@+'           shift, and enter state 70
	'@+i'          shift, and enter state 71
	'@-'           shift, and enter state 72
	'@-i'          shift, and enter state 73
	'@0'           shift, and enter state 74
	'@1'           shift, and enter state 75
	'case'         shift, and enter state 76
	'gate'         shift, and enter state 77
	'if'           shift, and enter state 78
	'let'          shift, and enter state 79
	'with'         shift, and enter state 80
	L_integ        shift, and enter state 81
	L_ZeroOrOne    shift, and enter state 82
	L_Var          shift, and enter state 43
	L_Lambda       shift, and enter state 83

	Integer        goto state 52
	ZeroOrOne      goto state 53
	Var            goto state 54
	Lambda         goto state 55
	IntegerExpr    goto state 56
	IntegerExpr1   goto state 57
	IntegerExpr2   goto state 58
	BasisState     goto state 59
	Bit            goto state 60
	Tuple          goto state 61
	Term1          goto state 62
	Term2          goto state 63
	Term3          goto state 64
	Term           goto state 299

State 243

	Term1 -> Var '<-' Term . ';' Term                   (rule 129)

	';'            shift, and enter state 298


State 244

	Term1 -> Var ',' ListVar . '<-' Term ';' Term       (rule 130)

	'<-'           shift, and enter state 297


State 245

	Type -> Type . '->' Type1                           (rule 51)
	Term1 -> Lambda Var Type . '.' Term                 (rule 132)

	'->'           shift, and enter state 183
	'.'            shift, and enter state 296


State 246

	Term1 -> Term2 '$' Term1 .                          (rule 133)

	'('            reduce using rule 133
	'()'           reduce using rule 133
	')'            reduce using rule 133
	','            reduce using rule 133
	'->'           reduce using rule 133
	';'            reduce using rule 133
	'@+'           reduce using rule 133
	'@+i'          reduce using rule 133
	'@-'           reduce using rule 133
	'@-i'          reduce using rule 133
	'@0'           reduce using rule 133
	'@1'           reduce using rule 133
	']'            reduce using rule 133
	'case'         reduce using rule 133
	'else'         reduce using rule 133
	'gate'         reduce using rule 133
	'if'           reduce using rule 133
	'let'          reduce using rule 133
	'of'           reduce using rule 133
	'then'         reduce using rule 133
	'with'         reduce using rule 133
	'}'            reduce using rule 133
	L_integ        reduce using rule 133
	L_ZeroOrOne    reduce using rule 133
	L_Var          reduce using rule 133
	L_Lambda       reduce using rule 133
	%eof           reduce using rule 133


State 247

	CaseExpression -> Term '->' Term .                  (rule 151)

	'('            reduce using rule 151
	'()'           reduce using rule 151
	')'            reduce using rule 151
	','            reduce using rule 151
	'->'           reduce using rule 151
	';'            reduce using rule 151
	'@+'           reduce using rule 151
	'@+i'          reduce using rule 151
	'@-'           reduce using rule 151
	'@-i'          reduce using rule 151
	'@0'           reduce using rule 151
	'@1'           reduce using rule 151
	']'            reduce using rule 151
	'case'         reduce using rule 151
	'else'         reduce using rule 151
	'gate'         reduce using rule 151
	'if'           reduce using rule 151
	'let'          reduce using rule 151
	'of'           reduce using rule 151
	'then'         reduce using rule 151
	'with'         reduce using rule 151
	'}'            reduce using rule 151
	L_integ        reduce using rule 151
	L_ZeroOrOne    reduce using rule 151
	L_Var          reduce using rule 151
	L_Lambda       reduce using rule 151
	%eof           reduce using rule 151


State 248

	Term3 -> '(' Term ')' .                             (rule 149)

	'$'            reduce using rule 149
	'('            reduce using rule 149
	'()'           reduce using rule 149
	')'            reduce using rule 149
	','            reduce using rule 149
	'->'           reduce using rule 149
	'.'            reduce using rule 149
	';'            reduce using rule 149
	'@+'           reduce using rule 149
	'@+i'          reduce using rule 149
	'@-'           reduce using rule 149
	'@-i'          reduce using rule 149
	'@0'           reduce using rule 149
	'@1'           reduce using rule 149
	']'            reduce using rule 149
	'case'         reduce using rule 149
	'else'         reduce using rule 149
	'gate'         reduce using rule 149
	'if'           reduce using rule 149
	'let'          reduce using rule 149
	'of'           reduce using rule 149
	'then'         reduce using rule 149
	'with'         reduce using rule 149
	'}'            reduce using rule 149
	L_integ        reduce using rule 149
	L_ZeroOrOne    reduce using rule 149
	L_Var          reduce using rule 149
	L_Lambda       reduce using rule 149
	%eof           reduce using rule 149


State 249

	Tuple -> '(' Term ',' . ListTerm ')'                (rule 121)

	'('            shift, and enter state 68
	'()'           shift, and enter state 69
	'@+'           shift, and enter state 70
	'@+i'          shift, and enter state 71
	'@-'           shift, and enter state 72
	'@-i'          shift, and enter state 73
	'@0'           shift, and enter state 74
	'@1'           shift, and enter state 75
	'case'         shift, and enter state 76
	'gate'         shift, and enter state 77
	'if'           shift, and enter state 78
	'let'          shift, and enter state 79
	'with'         shift, and enter state 80
	L_integ        shift, and enter state 81
	L_ZeroOrOne    shift, and enter state 82
	L_Var          shift, and enter state 43
	L_Lambda       shift, and enter state 83

	Integer        goto state 52
	ZeroOrOne      goto state 53
	Var            goto state 54
	Lambda         goto state 55
	IntegerExpr    goto state 56
	IntegerExpr1   goto state 57
	IntegerExpr2   goto state 58
	BasisState     goto state 59
	Bit            goto state 60
	Tuple          goto state 61
	ListTerm       goto state 295
	Term1          goto state 62
	Term2          goto state 63
	Term3          goto state 64
	Term           goto state 91

State 250

	IntegerExpr2 -> '(' IntegerExpr ')' .               (rule 49)

	'$'            reduce using rule 49
	'('            reduce using rule 49
	'()'           reduce using rule 49
	')'            reduce using rule 49
	'*'            reduce using rule 49
	'+'            reduce using rule 49
	','            reduce using rule 49
	'-'            reduce using rule 49
	'->'           reduce using rule 49
	'.'            reduce using rule 49
	'/'            reduce using rule 49
	';'            reduce using rule 49
	'@+'           reduce using rule 49
	'@+i'          reduce using rule 49
	'@-'           reduce using rule 49
	'@-i'          reduce using rule 49
	'@0'           reduce using rule 49
	'@1'           reduce using rule 49
	']'            reduce using rule 49
	'case'         reduce using rule 49
	'else'         reduce using rule 49
	'gate'         reduce using rule 49
	'if'           reduce using rule 49
	'let'          reduce using rule 49
	'of'           reduce using rule 49
	'then'         reduce using rule 49
	'with'         reduce using rule 49
	'}'            reduce using rule 49
	L_integ        reduce using rule 49
	L_ZeroOrOne    reduce using rule 49
	L_Var          reduce using rule 49
	L_Lambda       reduce using rule 49
	%eof           reduce using rule 49


State 251

	Term1 -> 'case' Term 'of' . CaseExpression ListCaseExpression    (rule 131)

	'('            shift, and enter state 68
	'()'           shift, and enter state 69
	'@+'           shift, and enter state 70
	'@+i'          shift, and enter state 71
	'@-'           shift, and enter state 72
	'@-i'          shift, and enter state 73
	'@0'           shift, and enter state 74
	'@1'           shift, and enter state 75
	'case'         shift, and enter state 76
	'gate'         shift, and enter state 77
	'if'           shift, and enter state 78
	'let'          shift, and enter state 79
	'with'         shift, and enter state 80
	L_integ        shift, and enter state 81
	L_ZeroOrOne    shift, and enter state 82
	L_Var          shift, and enter state 43
	L_Lambda       shift, and enter state 83

	Integer        goto state 52
	ZeroOrOne      goto state 53
	Var            goto state 54
	Lambda         goto state 55
	IntegerExpr    goto state 56
	IntegerExpr1   goto state 57
	IntegerExpr2   goto state 58
	BasisState     goto state 59
	Bit            goto state 60
	Tuple          goto state 61
	Term1          goto state 62
	Term2          goto state 63
	Term3          goto state 64
	Term           goto state 65
	CaseExpression goto state 294

State 252

	Term1 -> 'if' Term 'then' . Term 'else' Term        (rule 126)

	'('            shift, and enter state 68
	'()'           shift, and enter state 69
	'@+'           shift, and enter state 70
	'@+i'          shift, and enter state 71
	'@-'           shift, and enter state 72
	'@-i'          shift, and enter state 73
	'@0'           shift, and enter state 74
	'@1'           shift, and enter state 75
	'case'         shift, and enter state 76
	'gate'         shift, and enter state 77
	'if'           shift, and enter state 78
	'let'          shift, and enter state 79
	'with'         shift, and enter state 80
	L_integ        shift, and enter state 81
	L_ZeroOrOne    shift, and enter state 82
	L_Var          shift, and enter state 43
	L_Lambda       shift, and enter state 83

	Integer        goto state 52
	ZeroOrOne      goto state 53
	Var            goto state 54
	Lambda         goto state 55
	IntegerExpr    goto state 56
	IntegerExpr1   goto state 57
	IntegerExpr2   goto state 58
	BasisState     goto state 59
	Bit            goto state 60
	Tuple          goto state 61
	Term1          goto state 62
	Term2          goto state 63
	Term3          goto state 64
	Term           goto state 293

State 253

	Term1 -> 'let' '{' Var . '=' Term '}' 'in' Term     (rule 127)

	'='            shift, and enter state 292


State 254

	Term1 -> 'let' '{' '(' . Var ',' ListVar ')' '=' Term '}' 'in' Term    (rule 128)

	L_Var          shift, and enter state 43

	Var            goto state 291

State 255

	ControlTerm -> '[' Term . ']'                       (rule 122)
	ControlTerms -> '[' Term . ',' ListTerm ']'         (rule 123)

	','            shift, and enter state 260
	']'            shift, and enter state 261


State 256

	Term2 -> 'with' ControlTerms 'ctrl' . ControlBasisStates    (rule 136)
	Term2 -> 'with' ControlTerms 'ctrl' . ControlBits    (rule 138)

	'['            shift, and enter state 290

	ControlBasisStatesgoto state 288
	ControlBits    goto state 289

State 257

	Term2 -> 'with' ControlTerm 'ctrl' . ControlBasisState    (rule 135)
	Term2 -> 'with' ControlTerm 'ctrl' . ControlBit     (rule 137)

	'['            shift, and enter state 287

	ControlBasisStategoto state 285
	ControlBit     goto state 286

State 258

	Term2 -> Term2 '.' Term3 .                          (rule 140)

	'$'            reduce using rule 140
	'('            reduce using rule 140
	'()'           reduce using rule 140
	')'            reduce using rule 140
	','            reduce using rule 140
	'->'           reduce using rule 140
	'.'            reduce using rule 140
	';'            reduce using rule 140
	'@+'           reduce using rule 140
	'@+i'          reduce using rule 140
	'@-'           reduce using rule 140
	'@-i'          reduce using rule 140
	'@0'           reduce using rule 140
	'@1'           reduce using rule 140
	']'            reduce using rule 140
	'case'         reduce using rule 140
	'else'         reduce using rule 140
	'gate'         reduce using rule 140
	'if'           reduce using rule 140
	'let'          reduce using rule 140
	'of'           reduce using rule 140
	'then'         reduce using rule 140
	'with'         reduce using rule 140
	'}'            reduce using rule 140
	L_integ        reduce using rule 140
	L_ZeroOrOne    reduce using rule 140
	L_Var          reduce using rule 140
	L_Lambda       reduce using rule 140
	%eof           reduce using rule 140


State 259

	ListTerm -> Term ',' ListTerm .                     (rule 125)

	')'            reduce using rule 125
	']'            reduce using rule 125
	%eof           reduce using rule 125


State 260

	ControlTerms -> '[' Term ',' . ListTerm ']'         (rule 123)

	'('            shift, and enter state 68
	'()'           shift, and enter state 69
	'@+'           shift, and enter state 70
	'@+i'          shift, and enter state 71
	'@-'           shift, and enter state 72
	'@-i'          shift, and enter state 73
	'@0'           shift, and enter state 74
	'@1'           shift, and enter state 75
	'case'         shift, and enter state 76
	'gate'         shift, and enter state 77
	'if'           shift, and enter state 78
	'let'          shift, and enter state 79
	'with'         shift, and enter state 80
	L_integ        shift, and enter state 81
	L_ZeroOrOne    shift, and enter state 82
	L_Var          shift, and enter state 43
	L_Lambda       shift, and enter state 83

	Integer        goto state 52
	ZeroOrOne      goto state 53
	Var            goto state 54
	Lambda         goto state 55
	IntegerExpr    goto state 56
	IntegerExpr1   goto state 57
	IntegerExpr2   goto state 58
	BasisState     goto state 59
	Bit            goto state 60
	Tuple          goto state 61
	ListTerm       goto state 284
	Term1          goto state 62
	Term2          goto state 63
	Term3          goto state 64
	Term           goto state 91

State 261

	ControlTerm -> '[' Term ']' .                       (rule 122)

	'ctrl'         reduce using rule 122
	%eof           reduce using rule 122


State 262

	ListInteger -> Integer ',' ListInteger .            (rule 120)

	']'            reduce using rule 120
	%eof           reduce using rule 120


State 263

	ControlBits -> '[' Integer ',' . ListInteger ']'    (rule 118)

	L_integ        shift, and enter state 81

	Integer        goto state 98
	ListInteger    goto state 283

State 264

	ControlBit -> '[' Integer ']' .                     (rule 117)

	'$'            reduce using rule 117
	'('            reduce using rule 117
	'()'           reduce using rule 117
	')'            reduce using rule 117
	','            reduce using rule 117
	'->'           reduce using rule 117
	'.'            reduce using rule 117
	';'            reduce using rule 117
	'@+'           reduce using rule 117
	'@+i'          reduce using rule 117
	'@-'           reduce using rule 117
	'@-i'          reduce using rule 117
	'@0'           reduce using rule 117
	'@1'           reduce using rule 117
	']'            reduce using rule 117
	'case'         reduce using rule 117
	'else'         reduce using rule 117
	'gate'         reduce using rule 117
	'if'           reduce using rule 117
	'let'          reduce using rule 117
	'of'           reduce using rule 117
	'then'         reduce using rule 117
	'with'         reduce using rule 117
	'}'            reduce using rule 117
	L_integ        reduce using rule 117
	L_ZeroOrOne    reduce using rule 117
	L_Var          reduce using rule 117
	L_Lambda       reduce using rule 117
	%eof           reduce using rule 117


State 265

	ListBasisState -> BasisState ',' ListBasisState .    (rule 116)

	']'            reduce using rule 116
	%eof           reduce using rule 116


State 266

	ControlBasisStates -> '[' BasisState ',' . ListBasisState ']'    (rule 114)

	'@+'           shift, and enter state 70
	'@+i'          shift, and enter state 71
	'@-'           shift, and enter state 72
	'@-i'          shift, and enter state 73
	'@0'           shift, and enter state 74
	'@1'           shift, and enter state 75

	BasisState     goto state 104
	ListBasisState goto state 282

State 267

	ControlBasisState -> '[' BasisState ']' .           (rule 113)

	'$'            reduce using rule 113
	'('            reduce using rule 113
	'()'           reduce using rule 113
	')'            reduce using rule 113
	','            reduce using rule 113
	'->'           reduce using rule 113
	'.'            reduce using rule 113
	';'            reduce using rule 113
	'@+'           reduce using rule 113
	'@+i'          reduce using rule 113
	'@-'           reduce using rule 113
	'@-i'          reduce using rule 113
	'@0'           reduce using rule 113
	'@1'           reduce using rule 113
	']'            reduce using rule 113
	'case'         reduce using rule 113
	'else'         reduce using rule 113
	'gate'         reduce using rule 113
	'if'           reduce using rule 113
	'let'          reduce using rule 113
	'of'           reduce using rule 113
	'then'         reduce using rule 113
	'with'         reduce using rule 113
	'}'            reduce using rule 113
	L_integ        reduce using rule 113
	L_ZeroOrOne    reduce using rule 113
	L_Var          reduce using rule 113
	L_Lambda       reduce using rule 113
	%eof           reduce using rule 113


State 268

	ListVar -> Var ',' ListVar .                        (rule 112)

	')'            reduce using rule 112
	'<-'           reduce using rule 112
	%eof           reduce using rule 112


State 269

	Gate -> 'U2' '(' Angle . ',' Angle ')'              (rule 99)

	','            shift, and enter state 281


State 270

	Gate -> 'U3' '(' Angle . ',' Angle ',' Angle ')'    (rule 100)

	','            shift, and enter state 280


State 271

	Type5 -> '(' Type ')' .                             (rule 66)

	')'            reduce using rule 66
	'*'            reduce using rule 66
	'**'           reduce using rule 66
	'+'            reduce using rule 66
	'->'           reduce using rule 66
	'.'            reduce using rule 66
	';'            reduce using rule 66
	%eof           reduce using rule 66


State 272

	Type2 -> Type2 '**' Integer .                       (rule 56)

	')'            reduce using rule 56
	'*'            reduce using rule 56
	'**'           reduce using rule 56
	'+'            reduce using rule 56
	'->'           reduce using rule 56
	'.'            reduce using rule 56
	';'            reduce using rule 56
	%eof           reduce using rule 56


State 273

	Type2 -> Type2 '*' Type3 .                          (rule 55)

	')'            reduce using rule 55
	'*'            reduce using rule 55
	'**'           reduce using rule 55
	'+'            reduce using rule 55
	'->'           reduce using rule 55
	'.'            reduce using rule 55
	';'            reduce using rule 55
	%eof           reduce using rule 55


State 274

	Type -> Type '->' Type1 .                           (rule 51)
	Type1 -> Type1 . '+' Type2                          (rule 53)

	')'            reduce using rule 51
	'+'            shift, and enter state 182
	'->'           reduce using rule 51
	'.'            reduce using rule 51
	';'            reduce using rule 51
	%eof           reduce using rule 51


State 275

	Type1 -> Type1 '+' Type2 .                          (rule 53)
	Type2 -> Type2 . '*' Type3                          (rule 55)
	Type2 -> Type2 . '**' Integer                       (rule 56)

	')'            reduce using rule 53
	'*'            shift, and enter state 184
	'**'           shift, and enter state 185
	'+'            reduce using rule 53
	'->'           reduce using rule 53
	'.'            reduce using rule 53
	';'            reduce using rule 53
	%eof           reduce using rule 53


State 276

	IntegerExpr1 -> IntegerExpr1 '/' IntegerExpr2 .     (rule 46)

	'$'            reduce using rule 46
	'('            reduce using rule 46
	'()'           reduce using rule 46
	')'            reduce using rule 46
	'*'            reduce using rule 46
	'+'            reduce using rule 46
	','            reduce using rule 46
	'-'            reduce using rule 46
	'->'           reduce using rule 46
	'.'            reduce using rule 46
	'/'            reduce using rule 46
	';'            reduce using rule 46
	'@+'           reduce using rule 46
	'@+i'          reduce using rule 46
	'@-'           reduce using rule 46
	'@-i'          reduce using rule 46
	'@0'           reduce using rule 46
	'@1'           reduce using rule 46
	']'            reduce using rule 46
	'case'         reduce using rule 46
	'else'         reduce using rule 46
	'gate'         reduce using rule 46
	'if'           reduce using rule 46
	'let'          reduce using rule 46
	'of'           reduce using rule 46
	'then'         reduce using rule 46
	'with'         reduce using rule 46
	'}'            reduce using rule 46
	L_integ        reduce using rule 46
	L_ZeroOrOne    reduce using rule 46
	L_Var          reduce using rule 46
	L_Lambda       reduce using rule 46
	%eof           reduce using rule 46


State 277

	IntegerExpr1 -> IntegerExpr1 '*' IntegerExpr2 .     (rule 45)

	'$'            reduce using rule 45
	'('            reduce using rule 45
	'()'           reduce using rule 45
	')'            reduce using rule 45
	'*'            reduce using rule 45
	'+'            reduce using rule 45
	','            reduce using rule 45
	'-'            reduce using rule 45
	'->'           reduce using rule 45
	'.'            reduce using rule 45
	'/'            reduce using rule 45
	';'            reduce using rule 45
	'@+'           reduce using rule 45
	'@+i'          reduce using rule 45
	'@-'           reduce using rule 45
	'@-i'          reduce using rule 45
	'@0'           reduce using rule 45
	'@1'           reduce using rule 45
	']'            reduce using rule 45
	'case'         reduce using rule 45
	'else'         reduce using rule 45
	'gate'         reduce using rule 45
	'if'           reduce using rule 45
	'let'          reduce using rule 45
	'of'           reduce using rule 45
	'then'         reduce using rule 45
	'with'         reduce using rule 45
	'}'            reduce using rule 45
	L_integ        reduce using rule 45
	L_ZeroOrOne    reduce using rule 45
	L_Var          reduce using rule 45
	L_Lambda       reduce using rule 45
	%eof           reduce using rule 45


State 278

	IntegerExpr -> IntegerExpr '-' IntegerExpr1 .       (rule 43)
	IntegerExpr1 -> IntegerExpr1 . '*' IntegerExpr2     (rule 45)
	IntegerExpr1 -> IntegerExpr1 . '/' IntegerExpr2     (rule 46)

	'$'            reduce using rule 43
	'('            reduce using rule 43
	'()'           reduce using rule 43
	')'            reduce using rule 43
	'*'            shift, and enter state 179
	'+'            reduce using rule 43
	','            reduce using rule 43
	'-'            reduce using rule 43
	'->'           reduce using rule 43
	'.'            reduce using rule 43
	'/'            shift, and enter state 180
	';'            reduce using rule 43
	'@+'           reduce using rule 43
	'@+i'          reduce using rule 43
	'@-'           reduce using rule 43
	'@-i'          reduce using rule 43
	'@0'           reduce using rule 43
	'@1'           reduce using rule 43
	']'            reduce using rule 43
	'case'         reduce using rule 43
	'else'         reduce using rule 43
	'gate'         reduce using rule 43
	'if'           reduce using rule 43
	'let'          reduce using rule 43
	'of'           reduce using rule 43
	'then'         reduce using rule 43
	'with'         reduce using rule 43
	'}'            reduce using rule 43
	L_integ        reduce using rule 43
	L_ZeroOrOne    reduce using rule 43
	L_Var          reduce using rule 43
	L_Lambda       reduce using rule 43
	%eof           reduce using rule 43


State 279

	IntegerExpr -> IntegerExpr '+' IntegerExpr1 .       (rule 42)
	IntegerExpr1 -> IntegerExpr1 . '*' IntegerExpr2     (rule 45)
	IntegerExpr1 -> IntegerExpr1 . '/' IntegerExpr2     (rule 46)

	'$'            reduce using rule 42
	'('            reduce using rule 42
	'()'           reduce using rule 42
	')'            reduce using rule 42
	'*'            shift, and enter state 179
	'+'            reduce using rule 42
	','            reduce using rule 42
	'-'            reduce using rule 42
	'->'           reduce using rule 42
	'.'            reduce using rule 42
	'/'            shift, and enter state 180
	';'            reduce using rule 42
	'@+'           reduce using rule 42
	'@+i'          reduce using rule 42
	'@-'           reduce using rule 42
	'@-i'          reduce using rule 42
	'@0'           reduce using rule 42
	'@1'           reduce using rule 42
	']'            reduce using rule 42
	'case'         reduce using rule 42
	'else'         reduce using rule 42
	'gate'         reduce using rule 42
	'if'           reduce using rule 42
	'let'          reduce using rule 42
	'of'           reduce using rule 42
	'then'         reduce using rule 42
	'with'         reduce using rule 42
	'}'            reduce using rule 42
	L_integ        reduce using rule 42
	L_ZeroOrOne    reduce using rule 42
	L_Var          reduce using rule 42
	L_Lambda       reduce using rule 42
	%eof           reduce using rule 42


State 280

	Gate -> 'U3' '(' Angle ',' . Angle ',' Angle ')'    (rule 100)

	L_doubl        shift, and enter state 38

	Double         goto state 150
	Angle          goto state 313

State 281

	Gate -> 'U2' '(' Angle ',' . Angle ')'              (rule 99)

	L_doubl        shift, and enter state 38

	Double         goto state 150
	Angle          goto state 312

State 282

	ControlBasisStates -> '[' BasisState ',' ListBasisState . ']'    (rule 114)

	']'            shift, and enter state 311


State 283

	ControlBits -> '[' Integer ',' ListInteger . ']'    (rule 118)

	']'            shift, and enter state 310


State 284

	ControlTerms -> '[' Term ',' ListTerm . ']'         (rule 123)

	']'            shift, and enter state 309


State 285

	Term2 -> 'with' ControlTerm 'ctrl' ControlBasisState .    (rule 135)

	'$'            reduce using rule 135
	'('            reduce using rule 135
	'()'           reduce using rule 135
	')'            reduce using rule 135
	','            reduce using rule 135
	'->'           reduce using rule 135
	'.'            reduce using rule 135
	';'            reduce using rule 135
	'@+'           reduce using rule 135
	'@+i'          reduce using rule 135
	'@-'           reduce using rule 135
	'@-i'          reduce using rule 135
	'@0'           reduce using rule 135
	'@1'           reduce using rule 135
	']'            reduce using rule 135
	'case'         reduce using rule 135
	'else'         reduce using rule 135
	'gate'         reduce using rule 135
	'if'           reduce using rule 135
	'let'          reduce using rule 135
	'of'           reduce using rule 135
	'then'         reduce using rule 135
	'with'         reduce using rule 135
	'}'            reduce using rule 135
	L_integ        reduce using rule 135
	L_ZeroOrOne    reduce using rule 135
	L_Var          reduce using rule 135
	L_Lambda       reduce using rule 135
	%eof           reduce using rule 135


State 286

	Term2 -> 'with' ControlTerm 'ctrl' ControlBit .     (rule 137)

	'$'            reduce using rule 137
	'('            reduce using rule 137
	'()'           reduce using rule 137
	')'            reduce using rule 137
	','            reduce using rule 137
	'->'           reduce using rule 137
	'.'            reduce using rule 137
	';'            reduce using rule 137
	'@+'           reduce using rule 137
	'@+i'          reduce using rule 137
	'@-'           reduce using rule 137
	'@-i'          reduce using rule 137
	'@0'           reduce using rule 137
	'@1'           reduce using rule 137
	']'            reduce using rule 137
	'case'         reduce using rule 137
	'else'         reduce using rule 137
	'gate'         reduce using rule 137
	'if'           reduce using rule 137
	'let'          reduce using rule 137
	'of'           reduce using rule 137
	'then'         reduce using rule 137
	'with'         reduce using rule 137
	'}'            reduce using rule 137
	L_integ        reduce using rule 137
	L_ZeroOrOne    reduce using rule 137
	L_Var          reduce using rule 137
	L_Lambda       reduce using rule 137
	%eof           reduce using rule 137


State 287

	ControlBasisState -> '[' . BasisState ']'           (rule 113)
	ControlBit -> '[' . Integer ']'                     (rule 117)

	'@+'           shift, and enter state 70
	'@+i'          shift, and enter state 71
	'@-'           shift, and enter state 72
	'@-i'          shift, and enter state 73
	'@0'           shift, and enter state 74
	'@1'           shift, and enter state 75
	L_integ        shift, and enter state 81

	Integer        goto state 209
	BasisState     goto state 206

State 288

	Term2 -> 'with' ControlTerms 'ctrl' ControlBasisStates .    (rule 136)

	'$'            reduce using rule 136
	'('            reduce using rule 136
	'()'           reduce using rule 136
	')'            reduce using rule 136
	','            reduce using rule 136
	'->'           reduce using rule 136
	'.'            reduce using rule 136
	';'            reduce using rule 136
	'@+'           reduce using rule 136
	'@+i'          reduce using rule 136
	'@-'           reduce using rule 136
	'@-i'          reduce using rule 136
	'@0'           reduce using rule 136
	'@1'           reduce using rule 136
	']'            reduce using rule 136
	'case'         reduce using rule 136
	'else'         reduce using rule 136
	'gate'         reduce using rule 136
	'if'           reduce using rule 136
	'let'          reduce using rule 136
	'of'           reduce using rule 136
	'then'         reduce using rule 136
	'with'         reduce using rule 136
	'}'            reduce using rule 136
	L_integ        reduce using rule 136
	L_ZeroOrOne    reduce using rule 136
	L_Var          reduce using rule 136
	L_Lambda       reduce using rule 136
	%eof           reduce using rule 136


State 289

	Term2 -> 'with' ControlTerms 'ctrl' ControlBits .    (rule 138)

	'$'            reduce using rule 138
	'('            reduce using rule 138
	'()'           reduce using rule 138
	')'            reduce using rule 138
	','            reduce using rule 138
	'->'           reduce using rule 138
	'.'            reduce using rule 138
	';'            reduce using rule 138
	'@+'           reduce using rule 138
	'@+i'          reduce using rule 138
	'@-'           reduce using rule 138
	'@-i'          reduce using rule 138
	'@0'           reduce using rule 138
	'@1'           reduce using rule 138
	']'            reduce using rule 138
	'case'         reduce using rule 138
	'else'         reduce using rule 138
	'gate'         reduce using rule 138
	'if'           reduce using rule 138
	'let'          reduce using rule 138
	'of'           reduce using rule 138
	'then'         reduce using rule 138
	'with'         reduce using rule 138
	'}'            reduce using rule 138
	L_integ        reduce using rule 138
	L_ZeroOrOne    reduce using rule 138
	L_Var          reduce using rule 138
	L_Lambda       reduce using rule 138
	%eof           reduce using rule 138


State 290

	ControlBasisStates -> '[' . BasisState ',' ListBasisState ']'    (rule 114)
	ControlBits -> '[' . Integer ',' ListInteger ']'    (rule 118)

	'@+'           shift, and enter state 70
	'@+i'          shift, and enter state 71
	'@-'           shift, and enter state 72
	'@-i'          shift, and enter state 73
	'@0'           shift, and enter state 74
	'@1'           shift, and enter state 75
	L_integ        shift, and enter state 81

	Integer        goto state 210
	BasisState     goto state 207

State 291

	Term1 -> 'let' '{' '(' Var . ',' ListVar ')' '=' Term '}' 'in' Term    (rule 128)

	','            shift, and enter state 308


State 292

	Term1 -> 'let' '{' Var '=' . Term '}' 'in' Term     (rule 127)

	'('            shift, and enter state 68
	'()'           shift, and enter state 69
	'@+'           shift, and enter state 70
	'@+i'          shift, and enter state 71
	'@-'           shift, and enter state 72
	'@-i'          shift, and enter state 73
	'@0'           shift, and enter state 74
	'@1'           shift, and enter state 75
	'case'         shift, and enter state 76
	'gate'         shift, and enter state 77
	'if'           shift, and enter state 78
	'let'          shift, and enter state 79
	'with'         shift, and enter state 80
	L_integ        shift, and enter state 81
	L_ZeroOrOne    shift, and enter state 82
	L_Var          shift, and enter state 43
	L_Lambda       shift, and enter state 83

	Integer        goto state 52
	ZeroOrOne      goto state 53
	Var            goto state 54
	Lambda         goto state 55
	IntegerExpr    goto state 56
	IntegerExpr1   goto state 57
	IntegerExpr2   goto state 58
	BasisState     goto state 59
	Bit            goto state 60
	Tuple          goto state 61
	Term1          goto state 62
	Term2          goto state 63
	Term3          goto state 64
	Term           goto state 307

State 293

	Term1 -> 'if' Term 'then' Term . 'else' Term        (rule 126)

	'else'         shift, and enter state 306


State 294

	Term1 -> 'case' Term 'of' CaseExpression . ListCaseExpression    (rule 131)

	'('            shift, and enter state 68
	'()'           shift, and enter state 69
	'@+'           shift, and enter state 70
	'@+i'          shift, and enter state 71
	'@-'           shift, and enter state 72
	'@-i'          shift, and enter state 73
	'@0'           shift, and enter state 74
	'@1'           shift, and enter state 75
	'case'         shift, and enter state 76
	'gate'         shift, and enter state 77
	'if'           shift, and enter state 78
	'let'          shift, and enter state 79
	'with'         shift, and enter state 80
	L_integ        shift, and enter state 81
	L_ZeroOrOne    shift, and enter state 82
	L_Var          shift, and enter state 43
	L_Lambda       shift, and enter state 83

	Integer        goto state 52
	ZeroOrOne      goto state 53
	Var            goto state 54
	Lambda         goto state 55
	IntegerExpr    goto state 56
	IntegerExpr1   goto state 57
	IntegerExpr2   goto state 58
	BasisState     goto state 59
	Bit            goto state 60
	Tuple          goto state 61
	Term1          goto state 62
	Term2          goto state 63
	Term3          goto state 64
	Term           goto state 65
	CaseExpression goto state 66
	ListCaseExpressiongoto state 305

State 295

	Tuple -> '(' Term ',' ListTerm . ')'                (rule 121)

	')'            shift, and enter state 304


State 296

	Term1 -> Lambda Var Type '.' . Term                 (rule 132)

	'('            shift, and enter state 68
	'()'           shift, and enter state 69
	'@+'           shift, and enter state 70
	'@+i'          shift, and enter state 71
	'@-'           shift, and enter state 72
	'@-i'          shift, and enter state 73
	'@0'           shift, and enter state 74
	'@1'           shift, and enter state 75
	'case'         shift, and enter state 76
	'gate'         shift, and enter state 77
	'if'           shift, and enter state 78
	'let'          shift, and enter state 79
	'with'         shift, and enter state 80
	L_integ        shift, and enter state 81
	L_ZeroOrOne    shift, and enter state 82
	L_Var          shift, and enter state 43
	L_Lambda       shift, and enter state 83

	Integer        goto state 52
	ZeroOrOne      goto state 53
	Var            goto state 54
	Lambda         goto state 55
	IntegerExpr    goto state 56
	IntegerExpr1   goto state 57
	IntegerExpr2   goto state 58
	BasisState     goto state 59
	Bit            goto state 60
	Tuple          goto state 61
	Term1          goto state 62
	Term2          goto state 63
	Term3          goto state 64
	Term           goto state 303

State 297

	Term1 -> Var ',' ListVar '<-' . Term ';' Term       (rule 130)

	'('            shift, and enter state 68
	'()'           shift, and enter state 69
	'@+'           shift, and enter state 70
	'@+i'          shift, and enter state 71
	'@-'           shift, and enter state 72
	'@-i'          shift, and enter state 73
	'@0'           shift, and enter state 74
	'@1'           shift, and enter state 75
	'case'         shift, and enter state 76
	'gate'         shift, and enter state 77
	'if'           shift, and enter state 78
	'let'          shift, and enter state 79
	'with'         shift, and enter state 80
	L_integ        shift, and enter state 81
	L_ZeroOrOne    shift, and enter state 82
	L_Var          shift, and enter state 43
	L_Lambda       shift, and enter state 83

	Integer        goto state 52
	ZeroOrOne      goto state 53
	Var            goto state 54
	Lambda         goto state 55
	IntegerExpr    goto state 56
	IntegerExpr1   goto state 57
	IntegerExpr2   goto state 58
	BasisState     goto state 59
	Bit            goto state 60
	Tuple          goto state 61
	Term1          goto state 62
	Term2          goto state 63
	Term3          goto state 64
	Term           goto state 302

State 298

	Term1 -> Var '<-' Term ';' . Term                   (rule 129)

	'('            shift, and enter state 68
	'()'           shift, and enter state 69
	'@+'           shift, and enter state 70
	'@+i'          shift, and enter state 71
	'@-'           shift, and enter state 72
	'@-i'          shift, and enter state 73
	'@0'           shift, and enter state 74
	'@1'           shift, and enter state 75
	'case'         shift, and enter state 76
	'gate'         shift, and enter state 77
	'if'           shift, and enter state 78
	'let'          shift, and enter state 79
	'with'         shift, and enter state 80
	L_integ        shift, and enter state 81
	L_ZeroOrOne    shift, and enter state 82
	L_Var          shift, and enter state 43
	L_Lambda       shift, and enter state 83

	Integer        goto state 52
	ZeroOrOne      goto state 53
	Var            goto state 54
	Lambda         goto state 55
	IntegerExpr    goto state 56
	IntegerExpr1   goto state 57
	IntegerExpr2   goto state 58
	BasisState     goto state 59
	Bit            goto state 60
	Tuple          goto state 61
	Term1          goto state 62
	Term2          goto state 63
	Term3          goto state 64
	Term           goto state 301

State 299

	FunctionDefinition -> Var ListArg '=' Term .        (rule 157)

	';'            reduce using rule 157
	%eof           reduce using rule 157


State 300

	FunctionDefinition -> FunctionDefinition ';' .      (rule 158)
	FunctionDeclaration -> FunctionType ';' FunctionDefinition ';' .    (rule 161)

	';'            reduce using rule 158
	L_Var          reduce using rule 161
	%eof           reduce using rule 161


State 301

	Term1 -> Var '<-' Term ';' Term .                   (rule 129)

	'('            reduce using rule 129
	'()'           reduce using rule 129
	')'            reduce using rule 129
	','            reduce using rule 129
	'->'           reduce using rule 129
	';'            reduce using rule 129
	'@+'           reduce using rule 129
	'@+i'          reduce using rule 129
	'@-'           reduce using rule 129
	'@-i'          reduce using rule 129
	'@0'           reduce using rule 129
	'@1'           reduce using rule 129
	']'            reduce using rule 129
	'case'         reduce using rule 129
	'else'         reduce using rule 129
	'gate'         reduce using rule 129
	'if'           reduce using rule 129
	'let'          reduce using rule 129
	'of'           reduce using rule 129
	'then'         reduce using rule 129
	'with'         reduce using rule 129
	'}'            reduce using rule 129
	L_integ        reduce using rule 129
	L_ZeroOrOne    reduce using rule 129
	L_Var          reduce using rule 129
	L_Lambda       reduce using rule 129
	%eof           reduce using rule 129


State 302

	Term1 -> Var ',' ListVar '<-' Term . ';' Term       (rule 130)

	';'            shift, and enter state 319


State 303

	Term1 -> Lambda Var Type '.' Term .                 (rule 132)

	'('            reduce using rule 132
	'()'           reduce using rule 132
	')'            reduce using rule 132
	','            reduce using rule 132
	'->'           reduce using rule 132
	';'            reduce using rule 132
	'@+'           reduce using rule 132
	'@+i'          reduce using rule 132
	'@-'           reduce using rule 132
	'@-i'          reduce using rule 132
	'@0'           reduce using rule 132
	'@1'           reduce using rule 132
	']'            reduce using rule 132
	'case'         reduce using rule 132
	'else'         reduce using rule 132
	'gate'         reduce using rule 132
	'if'           reduce using rule 132
	'let'          reduce using rule 132
	'of'           reduce using rule 132
	'then'         reduce using rule 132
	'with'         reduce using rule 132
	'}'            reduce using rule 132
	L_integ        reduce using rule 132
	L_ZeroOrOne    reduce using rule 132
	L_Var          reduce using rule 132
	L_Lambda       reduce using rule 132
	%eof           reduce using rule 132


State 304

	Tuple -> '(' Term ',' ListTerm ')' .                (rule 121)

	'$'            reduce using rule 121
	'('            reduce using rule 121
	'()'           reduce using rule 121
	')'            reduce using rule 121
	','            reduce using rule 121
	'->'           reduce using rule 121
	'.'            reduce using rule 121
	';'            reduce using rule 121
	'@+'           reduce using rule 121
	'@+i'          reduce using rule 121
	'@-'           reduce using rule 121
	'@-i'          reduce using rule 121
	'@0'           reduce using rule 121
	'@1'           reduce using rule 121
	']'            reduce using rule 121
	'case'         reduce using rule 121
	'else'         reduce using rule 121
	'gate'         reduce using rule 121
	'if'           reduce using rule 121
	'let'          reduce using rule 121
	'of'           reduce using rule 121
	'then'         reduce using rule 121
	'with'         reduce using rule 121
	'}'            reduce using rule 121
	L_integ        reduce using rule 121
	L_ZeroOrOne    reduce using rule 121
	L_Var          reduce using rule 121
	L_Lambda       reduce using rule 121
	%eof           reduce using rule 121


State 305

	Term1 -> 'case' Term 'of' CaseExpression ListCaseExpression .    (rule 131)

	'('            reduce using rule 131
	'()'           reduce using rule 131
	')'            reduce using rule 131
	','            reduce using rule 131
	'->'           reduce using rule 131
	';'            reduce using rule 131
	'@+'           reduce using rule 131
	'@+i'          reduce using rule 131
	'@-'           reduce using rule 131
	'@-i'          reduce using rule 131
	'@0'           reduce using rule 131
	'@1'           reduce using rule 131
	']'            reduce using rule 131
	'case'         reduce using rule 131
	'else'         reduce using rule 131
	'gate'         reduce using rule 131
	'if'           reduce using rule 131
	'let'          reduce using rule 131
	'of'           reduce using rule 131
	'then'         reduce using rule 131
	'with'         reduce using rule 131
	'}'            reduce using rule 131
	L_integ        reduce using rule 131
	L_ZeroOrOne    reduce using rule 131
	L_Var          reduce using rule 131
	L_Lambda       reduce using rule 131
	%eof           reduce using rule 131


State 306

	Term1 -> 'if' Term 'then' Term 'else' . Term        (rule 126)

	'('            shift, and enter state 68
	'()'           shift, and enter state 69
	'@+'           shift, and enter state 70
	'@+i'          shift, and enter state 71
	'@-'           shift, and enter state 72
	'@-i'          shift, and enter state 73
	'@0'           shift, and enter state 74
	'@1'           shift, and enter state 75
	'case'         shift, and enter state 76
	'gate'         shift, and enter state 77
	'if'           shift, and enter state 78
	'let'          shift, and enter state 79
	'with'         shift, and enter state 80
	L_integ        shift, and enter state 81
	L_ZeroOrOne    shift, and enter state 82
	L_Var          shift, and enter state 43
	L_Lambda       shift, and enter state 83

	Integer        goto state 52
	ZeroOrOne      goto state 53
	Var            goto state 54
	Lambda         goto state 55
	IntegerExpr    goto state 56
	IntegerExpr1   goto state 57
	IntegerExpr2   goto state 58
	BasisState     goto state 59
	Bit            goto state 60
	Tuple          goto state 61
	Term1          goto state 62
	Term2          goto state 63
	Term3          goto state 64
	Term           goto state 318

State 307

	Term1 -> 'let' '{' Var '=' Term . '}' 'in' Term     (rule 127)

	'}'            shift, and enter state 317


State 308

	Term1 -> 'let' '{' '(' Var ',' . ListVar ')' '=' Term '}' 'in' Term    (rule 128)

	L_Var          shift, and enter state 43

	Var            goto state 110
	ListVar        goto state 316

State 309

	ControlTerms -> '[' Term ',' ListTerm ']' .         (rule 123)

	'ctrl'         reduce using rule 123
	%eof           reduce using rule 123


State 310

	ControlBits -> '[' Integer ',' ListInteger ']' .    (rule 118)

	'$'            reduce using rule 118
	'('            reduce using rule 118
	'()'           reduce using rule 118
	')'            reduce using rule 118
	','            reduce using rule 118
	'->'           reduce using rule 118
	'.'            reduce using rule 118
	';'            reduce using rule 118
	'@+'           reduce using rule 118
	'@+i'          reduce using rule 118
	'@-'           reduce using rule 118
	'@-i'          reduce using rule 118
	'@0'           reduce using rule 118
	'@1'           reduce using rule 118
	']'            reduce using rule 118
	'case'         reduce using rule 118
	'else'         reduce using rule 118
	'gate'         reduce using rule 118
	'if'           reduce using rule 118
	'let'          reduce using rule 118
	'of'           reduce using rule 118
	'then'         reduce using rule 118
	'with'         reduce using rule 118
	'}'            reduce using rule 118
	L_integ        reduce using rule 118
	L_ZeroOrOne    reduce using rule 118
	L_Var          reduce using rule 118
	L_Lambda       reduce using rule 118
	%eof           reduce using rule 118


State 311

	ControlBasisStates -> '[' BasisState ',' ListBasisState ']' .    (rule 114)

	'$'            reduce using rule 114
	'('            reduce using rule 114
	'()'           reduce using rule 114
	')'            reduce using rule 114
	','            reduce using rule 114
	'->'           reduce using rule 114
	'.'            reduce using rule 114
	';'            reduce using rule 114
	'@+'           reduce using rule 114
	'@+i'          reduce using rule 114
	'@-'           reduce using rule 114
	'@-i'          reduce using rule 114
	'@0'           reduce using rule 114
	'@1'           reduce using rule 114
	']'            reduce using rule 114
	'case'         reduce using rule 114
	'else'         reduce using rule 114
	'gate'         reduce using rule 114
	'if'           reduce using rule 114
	'let'          reduce using rule 114
	'of'           reduce using rule 114
	'then'         reduce using rule 114
	'with'         reduce using rule 114
	'}'            reduce using rule 114
	L_integ        reduce using rule 114
	L_ZeroOrOne    reduce using rule 114
	L_Var          reduce using rule 114
	L_Lambda       reduce using rule 114
	%eof           reduce using rule 114


State 312

	Gate -> 'U2' '(' Angle ',' Angle . ')'              (rule 99)

	')'            shift, and enter state 315


State 313

	Gate -> 'U3' '(' Angle ',' Angle . ',' Angle ')'    (rule 100)

	','            shift, and enter state 314


State 314

	Gate -> 'U3' '(' Angle ',' Angle ',' . Angle ')'    (rule 100)

	L_doubl        shift, and enter state 38

	Double         goto state 150
	Angle          goto state 323

State 315

	Gate -> 'U2' '(' Angle ',' Angle ')' .              (rule 99)

	'$'            reduce using rule 99
	'('            reduce using rule 99
	'()'           reduce using rule 99
	')'            reduce using rule 99
	','            reduce using rule 99
	'->'           reduce using rule 99
	'.'            reduce using rule 99
	';'            reduce using rule 99
	'@+'           reduce using rule 99
	'@+i'          reduce using rule 99
	'@-'           reduce using rule 99
	'@-i'          reduce using rule 99
	'@0'           reduce using rule 99
	'@1'           reduce using rule 99
	']'            reduce using rule 99
	'case'         reduce using rule 99
	'else'         reduce using rule 99
	'gate'         reduce using rule 99
	'if'           reduce using rule 99
	'let'          reduce using rule 99
	'of'           reduce using rule 99
	'then'         reduce using rule 99
	'with'         reduce using rule 99
	'}'            reduce using rule 99
	L_integ        reduce using rule 99
	L_ZeroOrOne    reduce using rule 99
	L_Var          reduce using rule 99
	L_Lambda       reduce using rule 99
	%eof           reduce using rule 99


State 316

	Term1 -> 'let' '{' '(' Var ',' ListVar . ')' '=' Term '}' 'in' Term    (rule 128)

	')'            shift, and enter state 322


State 317

	Term1 -> 'let' '{' Var '=' Term '}' . 'in' Term     (rule 127)

	'in'           shift, and enter state 321


State 318

	Term1 -> 'if' Term 'then' Term 'else' Term .        (rule 126)

	'('            reduce using rule 126
	'()'           reduce using rule 126
	')'            reduce using rule 126
	','            reduce using rule 126
	'->'           reduce using rule 126
	';'            reduce using rule 126
	'@+'           reduce using rule 126
	'@+i'          reduce using rule 126
	'@-'           reduce using rule 126
	'@-i'          reduce using rule 126
	'@0'           reduce using rule 126
	'@1'           reduce using rule 126
	']'            reduce using rule 126
	'case'         reduce using rule 126
	'else'         reduce using rule 126
	'gate'         reduce using rule 126
	'if'           reduce using rule 126
	'let'          reduce using rule 126
	'of'           reduce using rule 126
	'then'         reduce using rule 126
	'with'         reduce using rule 126
	'}'            reduce using rule 126
	L_integ        reduce using rule 126
	L_ZeroOrOne    reduce using rule 126
	L_Var          reduce using rule 126
	L_Lambda       reduce using rule 126
	%eof           reduce using rule 126


State 319

	Term1 -> Var ',' ListVar '<-' Term ';' . Term       (rule 130)

	'('            shift, and enter state 68
	'()'           shift, and enter state 69
	'@+'           shift, and enter state 70
	'@+i'          shift, and enter state 71
	'@-'           shift, and enter state 72
	'@-i'          shift, and enter state 73
	'@0'           shift, and enter state 74
	'@1'           shift, and enter state 75
	'case'         shift, and enter state 76
	'gate'         shift, and enter state 77
	'if'           shift, and enter state 78
	'let'          shift, and enter state 79
	'with'         shift, and enter state 80
	L_integ        shift, and enter state 81
	L_ZeroOrOne    shift, and enter state 82
	L_Var          shift, and enter state 43
	L_Lambda       shift, and enter state 83

	Integer        goto state 52
	ZeroOrOne      goto state 53
	Var            goto state 54
	Lambda         goto state 55
	IntegerExpr    goto state 56
	IntegerExpr1   goto state 57
	IntegerExpr2   goto state 58
	BasisState     goto state 59
	Bit            goto state 60
	Tuple          goto state 61
	Term1          goto state 62
	Term2          goto state 63
	Term3          goto state 64
	Term           goto state 320

State 320

	Term1 -> Var ',' ListVar '<-' Term ';' Term .       (rule 130)

	'('            reduce using rule 130
	'()'           reduce using rule 130
	')'            reduce using rule 130
	','            reduce using rule 130
	'->'           reduce using rule 130
	';'            reduce using rule 130
	'@+'           reduce using rule 130
	'@+i'          reduce using rule 130
	'@-'           reduce using rule 130
	'@-i'          reduce using rule 130
	'@0'           reduce using rule 130
	'@1'           reduce using rule 130
	']'            reduce using rule 130
	'case'         reduce using rule 130
	'else'         reduce using rule 130
	'gate'         reduce using rule 130
	'if'           reduce using rule 130
	'let'          reduce using rule 130
	'of'           reduce using rule 130
	'then'         reduce using rule 130
	'with'         reduce using rule 130
	'}'            reduce using rule 130
	L_integ        reduce using rule 130
	L_ZeroOrOne    reduce using rule 130
	L_Var          reduce using rule 130
	L_Lambda       reduce using rule 130
	%eof           reduce using rule 130


State 321

	Term1 -> 'let' '{' Var '=' Term '}' 'in' . Term     (rule 127)

	'('            shift, and enter state 68
	'()'           shift, and enter state 69
	'@+'           shift, and enter state 70
	'@+i'          shift, and enter state 71
	'@-'           shift, and enter state 72
	'@-i'          shift, and enter state 73
	'@0'           shift, and enter state 74
	'@1'           shift, and enter state 75
	'case'         shift, and enter state 76
	'gate'         shift, and enter state 77
	'if'           shift, and enter state 78
	'let'          shift, and enter state 79
	'with'         shift, and enter state 80
	L_integ        shift, and enter state 81
	L_ZeroOrOne    shift, and enter state 82
	L_Var          shift, and enter state 43
	L_Lambda       shift, and enter state 83

	Integer        goto state 52
	ZeroOrOne      goto state 53
	Var            goto state 54
	Lambda         goto state 55
	IntegerExpr    goto state 56
	IntegerExpr1   goto state 57
	IntegerExpr2   goto state 58
	BasisState     goto state 59
	Bit            goto state 60
	Tuple          goto state 61
	Term1          goto state 62
	Term2          goto state 63
	Term3          goto state 64
	Term           goto state 326

State 322

	Term1 -> 'let' '{' '(' Var ',' ListVar ')' . '=' Term '}' 'in' Term    (rule 128)

	'='            shift, and enter state 325


State 323

	Gate -> 'U3' '(' Angle ',' Angle ',' Angle . ')'    (rule 100)

	')'            shift, and enter state 324


State 324

	Gate -> 'U3' '(' Angle ',' Angle ',' Angle ')' .    (rule 100)

	'$'            reduce using rule 100
	'('            reduce using rule 100
	'()'           reduce using rule 100
	')'            reduce using rule 100
	','            reduce using rule 100
	'->'           reduce using rule 100
	'.'            reduce using rule 100
	';'            reduce using rule 100
	'@+'           reduce using rule 100
	'@+i'          reduce using rule 100
	'@-'           reduce using rule 100
	'@-i'          reduce using rule 100
	'@0'           reduce using rule 100
	'@1'           reduce using rule 100
	']'            reduce using rule 100
	'case'         reduce using rule 100
	'else'         reduce using rule 100
	'gate'         reduce using rule 100
	'if'           reduce using rule 100
	'let'          reduce using rule 100
	'of'           reduce using rule 100
	'then'         reduce using rule 100
	'with'         reduce using rule 100
	'}'            reduce using rule 100
	L_integ        reduce using rule 100
	L_ZeroOrOne    reduce using rule 100
	L_Var          reduce using rule 100
	L_Lambda       reduce using rule 100
	%eof           reduce using rule 100


State 325

	Term1 -> 'let' '{' '(' Var ',' ListVar ')' '=' . Term '}' 'in' Term    (rule 128)

	'('            shift, and enter state 68
	'()'           shift, and enter state 69
	'@+'           shift, and enter state 70
	'@+i'          shift, and enter state 71
	'@-'           shift, and enter state 72
	'@-i'          shift, and enter state 73
	'@0'           shift, and enter state 74
	'@1'           shift, and enter state 75
	'case'         shift, and enter state 76
	'gate'         shift, and enter state 77
	'if'           shift, and enter state 78
	'let'          shift, and enter state 79
	'with'         shift, and enter state 80
	L_integ        shift, and enter state 81
	L_ZeroOrOne    shift, and enter state 82
	L_Var          shift, and enter state 43
	L_Lambda       shift, and enter state 83

	Integer        goto state 52
	ZeroOrOne      goto state 53
	Var            goto state 54
	Lambda         goto state 55
	IntegerExpr    goto state 56
	IntegerExpr1   goto state 57
	IntegerExpr2   goto state 58
	BasisState     goto state 59
	Bit            goto state 60
	Tuple          goto state 61
	Term1          goto state 62
	Term2          goto state 63
	Term3          goto state 64
	Term           goto state 327

State 326

	Term1 -> 'let' '{' Var '=' Term '}' 'in' Term .     (rule 127)

	'('            reduce using rule 127
	'()'           reduce using rule 127
	')'            reduce using rule 127
	','            reduce using rule 127
	'->'           reduce using rule 127
	';'            reduce using rule 127
	'@+'           reduce using rule 127
	'@+i'          reduce using rule 127
	'@-'           reduce using rule 127
	'@-i'          reduce using rule 127
	'@0'           reduce using rule 127
	'@1'           reduce using rule 127
	']'            reduce using rule 127
	'case'         reduce using rule 127
	'else'         reduce using rule 127
	'gate'         reduce using rule 127
	'if'           reduce using rule 127
	'let'          reduce using rule 127
	'of'           reduce using rule 127
	'then'         reduce using rule 127
	'with'         reduce using rule 127
	'}'            reduce using rule 127
	L_integ        reduce using rule 127
	L_ZeroOrOne    reduce using rule 127
	L_Var          reduce using rule 127
	L_Lambda       reduce using rule 127
	%eof           reduce using rule 127


State 327

	Term1 -> 'let' '{' '(' Var ',' ListVar ')' '=' Term . '}' 'in' Term    (rule 128)

	'}'            shift, and enter state 328


State 328

	Term1 -> 'let' '{' '(' Var ',' ListVar ')' '=' Term '}' . 'in' Term    (rule 128)

	'in'           shift, and enter state 329


State 329

	Term1 -> 'let' '{' '(' Var ',' ListVar ')' '=' Term '}' 'in' . Term    (rule 128)

	'('            shift, and enter state 68
	'()'           shift, and enter state 69
	'@+'           shift, and enter state 70
	'@+i'          shift, and enter state 71
	'@-'           shift, and enter state 72
	'@-i'          shift, and enter state 73
	'@0'           shift, and enter state 74
	'@1'           shift, and enter state 75
	'case'         shift, and enter state 76
	'gate'         shift, and enter state 77
	'if'           shift, and enter state 78
	'let'          shift, and enter state 79
	'with'         shift, and enter state 80
	L_integ        shift, and enter state 81
	L_ZeroOrOne    shift, and enter state 82
	L_Var          shift, and enter state 43
	L_Lambda       shift, and enter state 83

	Integer        goto state 52
	ZeroOrOne      goto state 53
	Var            goto state 54
	Lambda         goto state 55
	IntegerExpr    goto state 56
	IntegerExpr1   goto state 57
	IntegerExpr2   goto state 58
	BasisState     goto state 59
	Bit            goto state 60
	Tuple          goto state 61
	Term1          goto state 62
	Term2          goto state 63
	Term3          goto state 64
	Term           goto state 330

State 330

	Term1 -> 'let' '{' '(' Var ',' ListVar ')' '=' Term '}' 'in' Term .    (rule 128)

	'('            reduce using rule 128
	'()'           reduce using rule 128
	')'            reduce using rule 128
	','            reduce using rule 128
	'->'           reduce using rule 128
	';'            reduce using rule 128
	'@+'           reduce using rule 128
	'@+i'          reduce using rule 128
	'@-'           reduce using rule 128
	'@-i'          reduce using rule 128
	'@0'           reduce using rule 128
	'@1'           reduce using rule 128
	']'            reduce using rule 128
	'case'         reduce using rule 128
	'else'         reduce using rule 128
	'gate'         reduce using rule 128
	'if'           reduce using rule 128
	'let'          reduce using rule 128
	'of'           reduce using rule 128
	'then'         reduce using rule 128
	'with'         reduce using rule 128
	'}'            reduce using rule 128
	L_integ        reduce using rule 128
	L_ZeroOrOne    reduce using rule 128
	L_Var          reduce using rule 128
	L_Lambda       reduce using rule 128
	%eof           reduce using rule 128


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 164
Number of terminals: 82
Number of non-terminals: 79
Number of states: 331
