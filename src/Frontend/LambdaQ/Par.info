-----------------------------------------------------------------------------
Info file generated by Happy Version 1.20.0 from Frontend/LambdaQ/Par.y
-----------------------------------------------------------------------------


-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_pProgram -> Program                         (0)
	Double -> L_doubl                                  (1)
	Integer -> L_integ                                 (2)
	GateIdent -> L_GateIdent                           (3)
	Var -> L_Var                                       (4)
	Lambda -> L_Lambda                                 (5)
	Bit -> L_Bit                                       (6)
	Program -> ListFunctionDeclaration                 (7)
	Type3 -> 'Bit'                                     (8)
	Type3 -> 'Qbit'                                    (9)
	Type3 -> '()'                                      (10)
	Type3 -> '(' Type ')'                              (11)
	Type2 -> '!' Type3                                 (12)
	Type2 -> Type3                                     (13)
	Type1 -> Type2 '**' Integer                        (14)
	Type1 -> Type2 '*' Type1                           (15)
	Type1 -> Type2                                     (16)
	Type -> Type1 '->' Type                            (17)
	Type -> Type1                                      (18)
	Angle -> Double                                    (19)
	ControlState -> '@0'                               (20)
	ControlState -> '@1'                               (21)
	ControlState -> '@+'                               (22)
	ControlState -> '@-'                               (23)
	ControlState -> '@+i'                              (24)
	ControlState -> '@-i'                              (25)
	Control -> ControlState '->' Term                  (26)
	ListControl -> Control                             (27)
	ListControl -> Control ',' ListControl             (28)
	Gate -> 'H'                                        (29)
	Gate -> 'H' '[' ListControl ']'                    (30)
	Gate -> 'X'                                        (31)
	Gate -> 'X' '[' ListControl ']'                    (32)
	Gate -> 'Y'                                        (33)
	Gate -> 'Y' '[' ListControl ']'                    (34)
	Gate -> 'Z'                                        (35)
	Gate -> 'Z' '[' ListControl ']'                    (36)
	Gate -> 'ID'                                       (37)
	Gate -> 'ROOT_X' Integer                           (38)
	Gate -> 'ROOT_X' Integer '[' ListControl ']'       (39)
	Gate -> 'ROOT_X_DAG' Integer                       (40)
	Gate -> 'ROOT_X_DAG' Integer '[' ListControl ']'   (41)
	Gate -> 'ROOT_Y' Integer                           (42)
	Gate -> 'ROOT_Y' Integer '[' ListControl ']'       (43)
	Gate -> 'ROOT_Y_DAG' Integer                       (44)
	Gate -> 'ROOT_Y_DAG' Integer '[' ListControl ']'   (45)
	Gate -> 'ROOT_Z' Integer                           (46)
	Gate -> 'ROOT_Z' Integer '[' ListControl ']'       (47)
	Gate -> 'ROOT_Z_DAG' Integer                       (48)
	Gate -> 'ROOT_Z_DAG' Integer '[' ListControl ']'   (49)
	Gate -> 'S'                                        (50)
	Gate -> 'S' '[' ListControl ']'                    (51)
	Gate -> 'S_DAG'                                    (52)
	Gate -> 'S_DAG' '[' ListControl ']'                (53)
	Gate -> 'T'                                        (54)
	Gate -> 'T' '[' ListControl ']'                    (55)
	Gate -> 'T_DAG'                                    (56)
	Gate -> 'T_DAG' '[' ListControl ']'                (57)
	Gate -> 'SQRT_X'                                   (58)
	Gate -> 'SQRT_X' '[' ListControl ']'               (59)
	Gate -> 'SQRT_X_DAG'                               (60)
	Gate -> 'SQRT_X_DAG' '[' ListControl ']'           (61)
	Gate -> 'SQRT_Y'                                   (62)
	Gate -> 'SQRT_Y' '[' ListControl ']'               (63)
	Gate -> 'SQRT_Y_DAG'                               (64)
	Gate -> 'SQRT_Y_DAG' '[' ListControl ']'           (65)
	Gate -> 'RX' Angle                                 (66)
	Gate -> 'RX' Angle '[' ListControl ']'             (67)
	Gate -> 'RY' Angle                                 (68)
	Gate -> 'RY' Angle '[' ListControl ']'             (69)
	Gate -> 'RZ' Angle                                 (70)
	Gate -> 'RZ' Angle '[' ListControl ']'             (71)
	Gate -> 'U1' Angle                                 (72)
	Gate -> 'U1' Angle '[' ListControl ']'             (73)
	Gate -> 'U2' Angle Angle                           (74)
	Gate -> 'U2' Angle Angle '[' ListControl ']'       (75)
	Gate -> 'U3' Angle Angle Angle                     (76)
	Gate -> 'U3' Angle Angle Angle '[' ListControl ']'   (77)
	Gate -> 'SWAP'                                     (78)
	Gate -> 'SWAP' '[' ListControl ']'                 (79)
	Gate -> 'SQRT_SWAP'                                (80)
	Gate -> 'SQRT_SWAP' '[' ListControl ']'            (81)
	Gate -> 'SQRT_SWAP_DAG'                            (82)
	Gate -> 'SQRT_SWAP_DAG' '[' ListControl ']'        (83)
	Gate -> 'ISWAP'                                    (84)
	Gate -> 'ISWAP' '[' ListControl ']'                (85)
	Gate -> 'FSWAP'                                    (86)
	Gate -> 'FSWAP' '[' ListControl ']'                (87)
	Gate -> 'SWAP_THETA' Angle                         (88)
	Gate -> 'ROOT_SWAP' Integer                        (89)
	Gate -> 'ROOT_SWAP' Integer '[' ListControl ']'    (90)
	Gate -> 'ROOT_SWAP_DAG' Integer                    (91)
	Gate -> 'ROOT_SWAP_DAG' Integer '[' ListControl ']'   (92)
	Gate -> GateIdent                                  (93)
	Gate -> GateIdent '[' ListControl ']'              (94)
	LetVariable -> Var                                 (95)
	ListLetVariable -> LetVariable                     (96)
	ListLetVariable -> LetVariable ',' ListLetVariable   (97)
	LambdaVariable -> Var                              (98)
	ListLambdaVariable ->                              (99)
	ListLambdaVariable -> LambdaVariable ListLambdaVariable   (100)
	Tuple -> '(' Term ',' ListTerm ')'                 (101)
	ListTerm -> Term                                   (102)
	ListTerm -> Term ',' ListTerm                      (103)
	Term3 -> Var                                       (104)
	Term3 -> Bit                                       (105)
	Term3 -> Gate                                      (106)
	Term3 -> Tuple                                     (107)
	Term3 -> '()'                                      (108)
	Term3 -> '(' Term ')'                              (109)
	Term1 -> 'if' Term 'then' Term 'else' Term         (110)
	Term1 -> 'let' '{' LetVariable '=' Term '}' 'in' Term   (111)
	Term1 -> 'let' '{' '(' LetVariable ',' ListLetVariable ')' '=' Term '}' 'in' Term   (112)
	Term1 -> 'case' Term 'of' CaseExpression ListCaseExpression   (113)
	Term1 -> Lambda LambdaVariable ListLambdaVariable '->' Term   (114)
	Term1 -> Term2 '$' Term1                           (115)
	Term1 -> Term2                                     (116)
	Term2 -> Term2 Term3                               (117)
	Term2 -> Term3                                     (118)
	Term -> Term1                                      (119)
	CaseExpression -> Term '->' Var                    (120)
	ListCaseExpression -> CaseExpression               (121)
	ListCaseExpression -> CaseExpression ListCaseExpression   (122)
	Arg -> Var                                         (123)
	ListArg ->                                         (124)
	ListArg -> Arg ListArg                             (125)
	FunctionDefinition -> Var ListArg '=' Term         (126)
	FunctionDefinition -> FunctionDefinition ';'       (127)
	FunctionType -> Var '::' Type                      (128)
	FunctionType -> FunctionType ';'                   (129)
	FunctionDeclaration -> FunctionType ';' FunctionDefinition ';'   (130)
	ListFunctionDeclaration ->                         (131)
	ListFunctionDeclaration -> FunctionDeclaration ListFunctionDeclaration   (132)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	'!'            { PT _ (TS _ 1) }
	'$'            { PT _ (TS _ 2) }
	'('            { PT _ (TS _ 3) }
	'()'           { PT _ (TS _ 4) }
	')'            { PT _ (TS _ 5) }
	'*'            { PT _ (TS _ 6) }
	'**'           { PT _ (TS _ 7) }
	','            { PT _ (TS _ 8) }
	'->'           { PT _ (TS _ 9) }
	'::'           { PT _ (TS _ 10) }
	';'            { PT _ (TS _ 11) }
	'='            { PT _ (TS _ 12) }
	'@+'           { PT _ (TS _ 13) }
	'@+i'          { PT _ (TS _ 14) }
	'@-'           { PT _ (TS _ 15) }
	'@-i'          { PT _ (TS _ 16) }
	'@0'           { PT _ (TS _ 17) }
	'@1'           { PT _ (TS _ 18) }
	'Bit'          { PT _ (TS _ 19) }
	'FSWAP'        { PT _ (TS _ 20) }
	'H'            { PT _ (TS _ 21) }
	'ID'           { PT _ (TS _ 22) }
	'ISWAP'        { PT _ (TS _ 23) }
	'Qbit'         { PT _ (TS _ 24) }
	'ROOT_SWAP'    { PT _ (TS _ 25) }
	'ROOT_SWAP_DAG'{ PT _ (TS _ 26) }
	'ROOT_X'       { PT _ (TS _ 27) }
	'ROOT_X_DAG'   { PT _ (TS _ 28) }
	'ROOT_Y'       { PT _ (TS _ 29) }
	'ROOT_Y_DAG'   { PT _ (TS _ 30) }
	'ROOT_Z'       { PT _ (TS _ 31) }
	'ROOT_Z_DAG'   { PT _ (TS _ 32) }
	'RX'           { PT _ (TS _ 33) }
	'RY'           { PT _ (TS _ 34) }
	'RZ'           { PT _ (TS _ 35) }
	'S'            { PT _ (TS _ 36) }
	'SQRT_SWAP'    { PT _ (TS _ 37) }
	'SQRT_SWAP_DAG'{ PT _ (TS _ 38) }
	'SQRT_X'       { PT _ (TS _ 39) }
	'SQRT_X_DAG'   { PT _ (TS _ 40) }
	'SQRT_Y'       { PT _ (TS _ 41) }
	'SQRT_Y_DAG'   { PT _ (TS _ 42) }
	'SWAP'         { PT _ (TS _ 43) }
	'SWAP_THETA'   { PT _ (TS _ 44) }
	'S_DAG'        { PT _ (TS _ 45) }
	'T'            { PT _ (TS _ 46) }
	'T_DAG'        { PT _ (TS _ 47) }
	'U1'           { PT _ (TS _ 48) }
	'U2'           { PT _ (TS _ 49) }
	'U3'           { PT _ (TS _ 50) }
	'X'            { PT _ (TS _ 51) }
	'Y'            { PT _ (TS _ 52) }
	'Z'            { PT _ (TS _ 53) }
	'['            { PT _ (TS _ 54) }
	']'            { PT _ (TS _ 55) }
	'case'         { PT _ (TS _ 56) }
	'else'         { PT _ (TS _ 57) }
	'if'           { PT _ (TS _ 58) }
	'in'           { PT _ (TS _ 59) }
	'let'          { PT _ (TS _ 60) }
	'of'           { PT _ (TS _ 61) }
	'then'         { PT _ (TS _ 62) }
	'{'            { PT _ (TS _ 63) }
	'}'            { PT _ (TS _ 64) }
	L_doubl        { PT _ (TD $$) }
	L_integ        { PT _ (TI $$) }
	L_GateIdent    { PT _ (T_GateIdent _) }
	L_Var          { PT _ (T_Var _) }
	L_Lambda       { PT _ (T_Lambda _) }
	L_Bit          { PT _ (T_Bit _) }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_pProgram rule  0
	Double          rule  1
	Integer         rule  2
	GateIdent       rule  3
	Var             rule  4
	Lambda          rule  5
	Bit             rule  6
	Program         rule  7
	Type3           rules 8, 9, 10, 11
	Type2           rules 12, 13
	Type1           rules 14, 15, 16
	Type            rules 17, 18
	Angle           rule  19
	ControlState    rules 20, 21, 22, 23, 24, 25
	Control         rule  26
	ListControl     rules 27, 28
	Gate            rules 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94
	LetVariable     rule  95
	ListLetVariable rules 96, 97
	LambdaVariable  rule  98
	ListLambdaVariable rules 99, 100
	Tuple           rule  101
	ListTerm        rules 102, 103
	Term3           rules 104, 105, 106, 107, 108, 109
	Term1           rules 110, 111, 112, 113, 114, 115, 116
	Term2           rules 117, 118
	Term            rule  119
	CaseExpression  rule  120
	ListCaseExpression rules 121, 122
	Arg             rule  123
	ListArg         rules 124, 125
	FunctionDefinition rules 126, 127
	FunctionType    rules 128, 129
	FunctionDeclaration rule  130
	ListFunctionDeclaration rules 131, 132

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0

	%start_pProgram -> . Program                        (rule 0)

	L_Var          shift, and enter state 8
	%eof           reduce using rule 131

	Var            goto state 3
	Program        goto state 4
	FunctionType   goto state 5
	FunctionDeclarationgoto state 6
	ListFunctionDeclarationgoto state 7

State 1

	Double -> . L_doubl                                 (rule 1)

	L_doubl        shift, and enter state 2


State 2

	Double -> L_doubl .                                 (rule 1)

	'$'            reduce using rule 1
	'('            reduce using rule 1
	'()'           reduce using rule 1
	')'            reduce using rule 1
	','            reduce using rule 1
	'->'           reduce using rule 1
	';'            reduce using rule 1
	'FSWAP'        reduce using rule 1
	'H'            reduce using rule 1
	'ID'           reduce using rule 1
	'ISWAP'        reduce using rule 1
	'ROOT_SWAP'    reduce using rule 1
	'ROOT_SWAP_DAG'reduce using rule 1
	'ROOT_X'       reduce using rule 1
	'ROOT_X_DAG'   reduce using rule 1
	'ROOT_Y'       reduce using rule 1
	'ROOT_Y_DAG'   reduce using rule 1
	'ROOT_Z'       reduce using rule 1
	'ROOT_Z_DAG'   reduce using rule 1
	'RX'           reduce using rule 1
	'RY'           reduce using rule 1
	'RZ'           reduce using rule 1
	'S'            reduce using rule 1
	'SQRT_SWAP'    reduce using rule 1
	'SQRT_SWAP_DAG'reduce using rule 1
	'SQRT_X'       reduce using rule 1
	'SQRT_X_DAG'   reduce using rule 1
	'SQRT_Y'       reduce using rule 1
	'SQRT_Y_DAG'   reduce using rule 1
	'SWAP'         reduce using rule 1
	'SWAP_THETA'   reduce using rule 1
	'S_DAG'        reduce using rule 1
	'T'            reduce using rule 1
	'T_DAG'        reduce using rule 1
	'U1'           reduce using rule 1
	'U2'           reduce using rule 1
	'U3'           reduce using rule 1
	'X'            reduce using rule 1
	'Y'            reduce using rule 1
	'Z'            reduce using rule 1
	'['            reduce using rule 1
	']'            reduce using rule 1
	'else'         reduce using rule 1
	'of'           reduce using rule 1
	'then'         reduce using rule 1
	'}'            reduce using rule 1
	L_doubl        reduce using rule 1
	L_GateIdent    reduce using rule 1
	L_Var          reduce using rule 1
	L_Bit          reduce using rule 1


State 3

	FunctionType -> Var . '::' Type                     (rule 128)

	'::'           shift, and enter state 11


State 4

	%start_pProgram -> Program .                        (rule 0)

	%eof           accept


State 5

	FunctionType -> FunctionType . ';'                  (rule 129)
	FunctionDeclaration -> FunctionType . ';' FunctionDefinition ';'    (rule 130)

	';'            shift, and enter state 10


State 6

	ListFunctionDeclaration -> FunctionDeclaration . ListFunctionDeclaration    (rule 132)

	L_Var          shift, and enter state 8
	%eof           reduce using rule 131

	Var            goto state 3
	FunctionType   goto state 5
	FunctionDeclarationgoto state 6
	ListFunctionDeclarationgoto state 9

State 7

	Program -> ListFunctionDeclaration .                (rule 7)

	%eof           reduce using rule 7


State 8

	Var -> L_Var .                                      (rule 4)

	'$'            reduce using rule 4
	'('            reduce using rule 4
	'()'           reduce using rule 4
	')'            reduce using rule 4
	','            reduce using rule 4
	'->'           reduce using rule 4
	'::'           reduce using rule 4
	';'            reduce using rule 4
	'='            reduce using rule 4
	'FSWAP'        reduce using rule 4
	'H'            reduce using rule 4
	'ID'           reduce using rule 4
	'ISWAP'        reduce using rule 4
	'ROOT_SWAP'    reduce using rule 4
	'ROOT_SWAP_DAG'reduce using rule 4
	'ROOT_X'       reduce using rule 4
	'ROOT_X_DAG'   reduce using rule 4
	'ROOT_Y'       reduce using rule 4
	'ROOT_Y_DAG'   reduce using rule 4
	'ROOT_Z'       reduce using rule 4
	'ROOT_Z_DAG'   reduce using rule 4
	'RX'           reduce using rule 4
	'RY'           reduce using rule 4
	'RZ'           reduce using rule 4
	'S'            reduce using rule 4
	'SQRT_SWAP'    reduce using rule 4
	'SQRT_SWAP_DAG'reduce using rule 4
	'SQRT_X'       reduce using rule 4
	'SQRT_X_DAG'   reduce using rule 4
	'SQRT_Y'       reduce using rule 4
	'SQRT_Y_DAG'   reduce using rule 4
	'SWAP'         reduce using rule 4
	'SWAP_THETA'   reduce using rule 4
	'S_DAG'        reduce using rule 4
	'T'            reduce using rule 4
	'T_DAG'        reduce using rule 4
	'U1'           reduce using rule 4
	'U2'           reduce using rule 4
	'U3'           reduce using rule 4
	'X'            reduce using rule 4
	'Y'            reduce using rule 4
	'Z'            reduce using rule 4
	']'            reduce using rule 4
	'case'         reduce using rule 4
	'else'         reduce using rule 4
	'if'           reduce using rule 4
	'let'          reduce using rule 4
	'of'           reduce using rule 4
	'then'         reduce using rule 4
	'}'            reduce using rule 4
	L_GateIdent    reduce using rule 4
	L_Var          reduce using rule 4
	L_Lambda       reduce using rule 4
	L_Bit          reduce using rule 4


State 9

	ListFunctionDeclaration -> FunctionDeclaration ListFunctionDeclaration .    (rule 132)

	%eof           reduce using rule 132


State 10

	FunctionType -> FunctionType ';' .                  (rule 129)
	FunctionDeclaration -> FunctionType ';' . FunctionDefinition ';'    (rule 130)

	';'            reduce using rule 129
	L_Var          shift, and enter state 8

	Var            goto state 21
	FunctionDefinitiongoto state 22

State 11

	FunctionType -> Var '::' . Type                     (rule 128)

	'!'            shift, and enter state 16
	'('            shift, and enter state 17
	'()'           shift, and enter state 18
	'Bit'          shift, and enter state 19
	'Qbit'         shift, and enter state 20

	Type3          goto state 12
	Type2          goto state 13
	Type1          goto state 14
	Type           goto state 15

State 12

	Type2 -> Type3 .                                    (rule 13)

	')'            reduce using rule 13
	'*'            reduce using rule 13
	'**'           reduce using rule 13
	'->'           reduce using rule 13
	';'            reduce using rule 13


State 13

	Type1 -> Type2 . '**' Integer                       (rule 14)
	Type1 -> Type2 . '*' Type1                          (rule 15)
	Type1 -> Type2 .                                    (rule 16)

	')'            reduce using rule 16
	'*'            shift, and enter state 30
	'**'           shift, and enter state 31
	'->'           reduce using rule 16
	';'            reduce using rule 16


State 14

	Type -> Type1 . '->' Type                           (rule 17)
	Type -> Type1 .                                     (rule 18)

	')'            reduce using rule 18
	'->'           shift, and enter state 29
	';'            reduce using rule 18


State 15

	FunctionType -> Var '::' Type .                     (rule 128)

	';'            reduce using rule 128


State 16

	Type2 -> '!' . Type3                                (rule 12)

	'('            shift, and enter state 17
	'()'           shift, and enter state 18
	'Bit'          shift, and enter state 19
	'Qbit'         shift, and enter state 20

	Type3          goto state 28

State 17

	Type3 -> '(' . Type ')'                             (rule 11)

	'!'            shift, and enter state 16
	'('            shift, and enter state 17
	'()'           shift, and enter state 18
	'Bit'          shift, and enter state 19
	'Qbit'         shift, and enter state 20

	Type3          goto state 12
	Type2          goto state 13
	Type1          goto state 14
	Type           goto state 27

State 18

	Type3 -> '()' .                                     (rule 10)

	')'            reduce using rule 10
	'*'            reduce using rule 10
	'**'           reduce using rule 10
	'->'           reduce using rule 10
	';'            reduce using rule 10


State 19

	Type3 -> 'Bit' .                                    (rule 8)

	')'            reduce using rule 8
	'*'            reduce using rule 8
	'**'           reduce using rule 8
	'->'           reduce using rule 8
	';'            reduce using rule 8


State 20

	Type3 -> 'Qbit' .                                   (rule 9)

	')'            reduce using rule 9
	'*'            reduce using rule 9
	'**'           reduce using rule 9
	'->'           reduce using rule 9
	';'            reduce using rule 9


State 21

	FunctionDefinition -> Var . ListArg '=' Term        (rule 126)

	'='            reduce using rule 124
	L_Var          shift, and enter state 8

	Var            goto state 24
	Arg            goto state 25
	ListArg        goto state 26

State 22

	FunctionDefinition -> FunctionDefinition . ';'      (rule 127)
	FunctionDeclaration -> FunctionType ';' FunctionDefinition . ';'    (rule 130)

	';'            shift, and enter state 23


State 23

	FunctionDefinition -> FunctionDefinition ';' .      (rule 127)
	FunctionDeclaration -> FunctionType ';' FunctionDefinition ';' .    (rule 130)

	';'            reduce using rule 127
	L_Var          reduce using rule 130
	%eof           reduce using rule 130


State 24

	Arg -> Var .                                        (rule 123)

	'='            reduce using rule 123
	L_Var          reduce using rule 123


State 25

	ListArg -> Arg . ListArg                            (rule 125)

	'='            reduce using rule 124
	L_Var          shift, and enter state 8

	Var            goto state 24
	Arg            goto state 25
	ListArg        goto state 38

State 26

	FunctionDefinition -> Var ListArg . '=' Term        (rule 126)

	'='            shift, and enter state 37


State 27

	Type3 -> '(' Type . ')'                             (rule 11)

	')'            shift, and enter state 36


State 28

	Type2 -> '!' Type3 .                                (rule 12)

	')'            reduce using rule 12
	'*'            reduce using rule 12
	'**'           reduce using rule 12
	'->'           reduce using rule 12
	';'            reduce using rule 12


State 29

	Type -> Type1 '->' . Type                           (rule 17)

	'!'            shift, and enter state 16
	'('            shift, and enter state 17
	'()'           shift, and enter state 18
	'Bit'          shift, and enter state 19
	'Qbit'         shift, and enter state 20

	Type3          goto state 12
	Type2          goto state 13
	Type1          goto state 14
	Type           goto state 35

State 30

	Type1 -> Type2 '*' . Type1                          (rule 15)

	'!'            shift, and enter state 16
	'('            shift, and enter state 17
	'()'           shift, and enter state 18
	'Bit'          shift, and enter state 19
	'Qbit'         shift, and enter state 20

	Type3          goto state 12
	Type2          goto state 13
	Type1          goto state 34

State 31

	Type1 -> Type2 '**' . Integer                       (rule 14)

	L_integ        shift, and enter state 33

	Integer        goto state 32

State 32

	Type1 -> Type2 '**' Integer .                       (rule 14)

	')'            reduce using rule 14
	'->'           reduce using rule 14
	';'            reduce using rule 14


State 33

	Integer -> L_integ .                                (rule 2)

	'$'            reduce using rule 2
	'('            reduce using rule 2
	'()'           reduce using rule 2
	')'            reduce using rule 2
	','            reduce using rule 2
	'->'           reduce using rule 2
	';'            reduce using rule 2
	'FSWAP'        reduce using rule 2
	'H'            reduce using rule 2
	'ID'           reduce using rule 2
	'ISWAP'        reduce using rule 2
	'ROOT_SWAP'    reduce using rule 2
	'ROOT_SWAP_DAG'reduce using rule 2
	'ROOT_X'       reduce using rule 2
	'ROOT_X_DAG'   reduce using rule 2
	'ROOT_Y'       reduce using rule 2
	'ROOT_Y_DAG'   reduce using rule 2
	'ROOT_Z'       reduce using rule 2
	'ROOT_Z_DAG'   reduce using rule 2
	'RX'           reduce using rule 2
	'RY'           reduce using rule 2
	'RZ'           reduce using rule 2
	'S'            reduce using rule 2
	'SQRT_SWAP'    reduce using rule 2
	'SQRT_SWAP_DAG'reduce using rule 2
	'SQRT_X'       reduce using rule 2
	'SQRT_X_DAG'   reduce using rule 2
	'SQRT_Y'       reduce using rule 2
	'SQRT_Y_DAG'   reduce using rule 2
	'SWAP'         reduce using rule 2
	'SWAP_THETA'   reduce using rule 2
	'S_DAG'        reduce using rule 2
	'T'            reduce using rule 2
	'T_DAG'        reduce using rule 2
	'U1'           reduce using rule 2
	'U2'           reduce using rule 2
	'U3'           reduce using rule 2
	'X'            reduce using rule 2
	'Y'            reduce using rule 2
	'Z'            reduce using rule 2
	'['            reduce using rule 2
	']'            reduce using rule 2
	'else'         reduce using rule 2
	'of'           reduce using rule 2
	'then'         reduce using rule 2
	'}'            reduce using rule 2
	L_GateIdent    reduce using rule 2
	L_Var          reduce using rule 2
	L_Bit          reduce using rule 2


State 34

	Type1 -> Type2 '*' Type1 .                          (rule 15)

	')'            reduce using rule 15
	'->'           reduce using rule 15
	';'            reduce using rule 15


State 35

	Type -> Type1 '->' Type .                           (rule 17)

	')'            reduce using rule 17
	';'            reduce using rule 17


State 36

	Type3 -> '(' Type ')' .                             (rule 11)

	')'            reduce using rule 11
	'*'            reduce using rule 11
	'**'           reduce using rule 11
	'->'           reduce using rule 11
	';'            reduce using rule 11


State 37

	FunctionDefinition -> Var ListArg '=' . Term        (rule 126)

	'('            shift, and enter state 49
	'()'           shift, and enter state 50
	'FSWAP'        shift, and enter state 51
	'H'            shift, and enter state 52
	'ID'           shift, and enter state 53
	'ISWAP'        shift, and enter state 54
	'ROOT_SWAP'    shift, and enter state 55
	'ROOT_SWAP_DAG'shift, and enter state 56
	'ROOT_X'       shift, and enter state 57
	'ROOT_X_DAG'   shift, and enter state 58
	'ROOT_Y'       shift, and enter state 59
	'ROOT_Y_DAG'   shift, and enter state 60
	'ROOT_Z'       shift, and enter state 61
	'ROOT_Z_DAG'   shift, and enter state 62
	'RX'           shift, and enter state 63
	'RY'           shift, and enter state 64
	'RZ'           shift, and enter state 65
	'S'            shift, and enter state 66
	'SQRT_SWAP'    shift, and enter state 67
	'SQRT_SWAP_DAG'shift, and enter state 68
	'SQRT_X'       shift, and enter state 69
	'SQRT_X_DAG'   shift, and enter state 70
	'SQRT_Y'       shift, and enter state 71
	'SQRT_Y_DAG'   shift, and enter state 72
	'SWAP'         shift, and enter state 73
	'SWAP_THETA'   shift, and enter state 74
	'S_DAG'        shift, and enter state 75
	'T'            shift, and enter state 76
	'T_DAG'        shift, and enter state 77
	'U1'           shift, and enter state 78
	'U2'           shift, and enter state 79
	'U3'           shift, and enter state 80
	'X'            shift, and enter state 81
	'Y'            shift, and enter state 82
	'Z'            shift, and enter state 83
	'case'         shift, and enter state 84
	'if'           shift, and enter state 85
	'let'          shift, and enter state 86
	L_GateIdent    shift, and enter state 87
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 88
	L_Bit          shift, and enter state 89

	GateIdent      goto state 39
	Var            goto state 40
	Lambda         goto state 41
	Bit            goto state 42
	Gate           goto state 43
	Tuple          goto state 44
	Term3          goto state 45
	Term1          goto state 46
	Term2          goto state 47
	Term           goto state 48

State 38

	ListArg -> Arg ListArg .                            (rule 125)

	'='            reduce using rule 125


State 39

	Gate -> GateIdent .                                 (rule 93)
	Gate -> GateIdent . '[' ListControl ']'             (rule 94)

	'$'            reduce using rule 93
	'('            reduce using rule 93
	'()'           reduce using rule 93
	')'            reduce using rule 93
	','            reduce using rule 93
	'->'           reduce using rule 93
	';'            reduce using rule 93
	'FSWAP'        reduce using rule 93
	'H'            reduce using rule 93
	'ID'           reduce using rule 93
	'ISWAP'        reduce using rule 93
	'ROOT_SWAP'    reduce using rule 93
	'ROOT_SWAP_DAG'reduce using rule 93
	'ROOT_X'       reduce using rule 93
	'ROOT_X_DAG'   reduce using rule 93
	'ROOT_Y'       reduce using rule 93
	'ROOT_Y_DAG'   reduce using rule 93
	'ROOT_Z'       reduce using rule 93
	'ROOT_Z_DAG'   reduce using rule 93
	'RX'           reduce using rule 93
	'RY'           reduce using rule 93
	'RZ'           reduce using rule 93
	'S'            reduce using rule 93
	'SQRT_SWAP'    reduce using rule 93
	'SQRT_SWAP_DAG'reduce using rule 93
	'SQRT_X'       reduce using rule 93
	'SQRT_X_DAG'   reduce using rule 93
	'SQRT_Y'       reduce using rule 93
	'SQRT_Y_DAG'   reduce using rule 93
	'SWAP'         reduce using rule 93
	'SWAP_THETA'   reduce using rule 93
	'S_DAG'        reduce using rule 93
	'T'            reduce using rule 93
	'T_DAG'        reduce using rule 93
	'U1'           reduce using rule 93
	'U2'           reduce using rule 93
	'U3'           reduce using rule 93
	'X'            reduce using rule 93
	'Y'            reduce using rule 93
	'Z'            reduce using rule 93
	'['            shift, and enter state 131
	']'            reduce using rule 93
	'else'         reduce using rule 93
	'of'           reduce using rule 93
	'then'         reduce using rule 93
	'}'            reduce using rule 93
	L_GateIdent    reduce using rule 93
	L_Var          reduce using rule 93
	L_Bit          reduce using rule 93


State 40

	Term3 -> Var .                                      (rule 104)

	'$'            reduce using rule 104
	'('            reduce using rule 104
	'()'           reduce using rule 104
	')'            reduce using rule 104
	','            reduce using rule 104
	'->'           reduce using rule 104
	';'            reduce using rule 104
	'FSWAP'        reduce using rule 104
	'H'            reduce using rule 104
	'ID'           reduce using rule 104
	'ISWAP'        reduce using rule 104
	'ROOT_SWAP'    reduce using rule 104
	'ROOT_SWAP_DAG'reduce using rule 104
	'ROOT_X'       reduce using rule 104
	'ROOT_X_DAG'   reduce using rule 104
	'ROOT_Y'       reduce using rule 104
	'ROOT_Y_DAG'   reduce using rule 104
	'ROOT_Z'       reduce using rule 104
	'ROOT_Z_DAG'   reduce using rule 104
	'RX'           reduce using rule 104
	'RY'           reduce using rule 104
	'RZ'           reduce using rule 104
	'S'            reduce using rule 104
	'SQRT_SWAP'    reduce using rule 104
	'SQRT_SWAP_DAG'reduce using rule 104
	'SQRT_X'       reduce using rule 104
	'SQRT_X_DAG'   reduce using rule 104
	'SQRT_Y'       reduce using rule 104
	'SQRT_Y_DAG'   reduce using rule 104
	'SWAP'         reduce using rule 104
	'SWAP_THETA'   reduce using rule 104
	'S_DAG'        reduce using rule 104
	'T'            reduce using rule 104
	'T_DAG'        reduce using rule 104
	'U1'           reduce using rule 104
	'U2'           reduce using rule 104
	'U3'           reduce using rule 104
	'X'            reduce using rule 104
	'Y'            reduce using rule 104
	'Z'            reduce using rule 104
	']'            reduce using rule 104
	'else'         reduce using rule 104
	'of'           reduce using rule 104
	'then'         reduce using rule 104
	'}'            reduce using rule 104
	L_GateIdent    reduce using rule 104
	L_Var          reduce using rule 104
	L_Bit          reduce using rule 104


State 41

	Term1 -> Lambda . LambdaVariable ListLambdaVariable '->' Term    (rule 114)

	L_Var          shift, and enter state 8

	Var            goto state 129
	LambdaVariable goto state 130

State 42

	Term3 -> Bit .                                      (rule 105)

	'$'            reduce using rule 105
	'('            reduce using rule 105
	'()'           reduce using rule 105
	')'            reduce using rule 105
	','            reduce using rule 105
	'->'           reduce using rule 105
	';'            reduce using rule 105
	'FSWAP'        reduce using rule 105
	'H'            reduce using rule 105
	'ID'           reduce using rule 105
	'ISWAP'        reduce using rule 105
	'ROOT_SWAP'    reduce using rule 105
	'ROOT_SWAP_DAG'reduce using rule 105
	'ROOT_X'       reduce using rule 105
	'ROOT_X_DAG'   reduce using rule 105
	'ROOT_Y'       reduce using rule 105
	'ROOT_Y_DAG'   reduce using rule 105
	'ROOT_Z'       reduce using rule 105
	'ROOT_Z_DAG'   reduce using rule 105
	'RX'           reduce using rule 105
	'RY'           reduce using rule 105
	'RZ'           reduce using rule 105
	'S'            reduce using rule 105
	'SQRT_SWAP'    reduce using rule 105
	'SQRT_SWAP_DAG'reduce using rule 105
	'SQRT_X'       reduce using rule 105
	'SQRT_X_DAG'   reduce using rule 105
	'SQRT_Y'       reduce using rule 105
	'SQRT_Y_DAG'   reduce using rule 105
	'SWAP'         reduce using rule 105
	'SWAP_THETA'   reduce using rule 105
	'S_DAG'        reduce using rule 105
	'T'            reduce using rule 105
	'T_DAG'        reduce using rule 105
	'U1'           reduce using rule 105
	'U2'           reduce using rule 105
	'U3'           reduce using rule 105
	'X'            reduce using rule 105
	'Y'            reduce using rule 105
	'Z'            reduce using rule 105
	']'            reduce using rule 105
	'else'         reduce using rule 105
	'of'           reduce using rule 105
	'then'         reduce using rule 105
	'}'            reduce using rule 105
	L_GateIdent    reduce using rule 105
	L_Var          reduce using rule 105
	L_Bit          reduce using rule 105


State 43

	Term3 -> Gate .                                     (rule 106)

	'$'            reduce using rule 106
	'('            reduce using rule 106
	'()'           reduce using rule 106
	')'            reduce using rule 106
	','            reduce using rule 106
	'->'           reduce using rule 106
	';'            reduce using rule 106
	'FSWAP'        reduce using rule 106
	'H'            reduce using rule 106
	'ID'           reduce using rule 106
	'ISWAP'        reduce using rule 106
	'ROOT_SWAP'    reduce using rule 106
	'ROOT_SWAP_DAG'reduce using rule 106
	'ROOT_X'       reduce using rule 106
	'ROOT_X_DAG'   reduce using rule 106
	'ROOT_Y'       reduce using rule 106
	'ROOT_Y_DAG'   reduce using rule 106
	'ROOT_Z'       reduce using rule 106
	'ROOT_Z_DAG'   reduce using rule 106
	'RX'           reduce using rule 106
	'RY'           reduce using rule 106
	'RZ'           reduce using rule 106
	'S'            reduce using rule 106
	'SQRT_SWAP'    reduce using rule 106
	'SQRT_SWAP_DAG'reduce using rule 106
	'SQRT_X'       reduce using rule 106
	'SQRT_X_DAG'   reduce using rule 106
	'SQRT_Y'       reduce using rule 106
	'SQRT_Y_DAG'   reduce using rule 106
	'SWAP'         reduce using rule 106
	'SWAP_THETA'   reduce using rule 106
	'S_DAG'        reduce using rule 106
	'T'            reduce using rule 106
	'T_DAG'        reduce using rule 106
	'U1'           reduce using rule 106
	'U2'           reduce using rule 106
	'U3'           reduce using rule 106
	'X'            reduce using rule 106
	'Y'            reduce using rule 106
	'Z'            reduce using rule 106
	']'            reduce using rule 106
	'else'         reduce using rule 106
	'of'           reduce using rule 106
	'then'         reduce using rule 106
	'}'            reduce using rule 106
	L_GateIdent    reduce using rule 106
	L_Var          reduce using rule 106
	L_Bit          reduce using rule 106


State 44

	Term3 -> Tuple .                                    (rule 107)

	'$'            reduce using rule 107
	'('            reduce using rule 107
	'()'           reduce using rule 107
	')'            reduce using rule 107
	','            reduce using rule 107
	'->'           reduce using rule 107
	';'            reduce using rule 107
	'FSWAP'        reduce using rule 107
	'H'            reduce using rule 107
	'ID'           reduce using rule 107
	'ISWAP'        reduce using rule 107
	'ROOT_SWAP'    reduce using rule 107
	'ROOT_SWAP_DAG'reduce using rule 107
	'ROOT_X'       reduce using rule 107
	'ROOT_X_DAG'   reduce using rule 107
	'ROOT_Y'       reduce using rule 107
	'ROOT_Y_DAG'   reduce using rule 107
	'ROOT_Z'       reduce using rule 107
	'ROOT_Z_DAG'   reduce using rule 107
	'RX'           reduce using rule 107
	'RY'           reduce using rule 107
	'RZ'           reduce using rule 107
	'S'            reduce using rule 107
	'SQRT_SWAP'    reduce using rule 107
	'SQRT_SWAP_DAG'reduce using rule 107
	'SQRT_X'       reduce using rule 107
	'SQRT_X_DAG'   reduce using rule 107
	'SQRT_Y'       reduce using rule 107
	'SQRT_Y_DAG'   reduce using rule 107
	'SWAP'         reduce using rule 107
	'SWAP_THETA'   reduce using rule 107
	'S_DAG'        reduce using rule 107
	'T'            reduce using rule 107
	'T_DAG'        reduce using rule 107
	'U1'           reduce using rule 107
	'U2'           reduce using rule 107
	'U3'           reduce using rule 107
	'X'            reduce using rule 107
	'Y'            reduce using rule 107
	'Z'            reduce using rule 107
	']'            reduce using rule 107
	'else'         reduce using rule 107
	'of'           reduce using rule 107
	'then'         reduce using rule 107
	'}'            reduce using rule 107
	L_GateIdent    reduce using rule 107
	L_Var          reduce using rule 107
	L_Bit          reduce using rule 107


State 45

	Term2 -> Term3 .                                    (rule 118)

	'$'            reduce using rule 118
	'('            reduce using rule 118
	'()'           reduce using rule 118
	')'            reduce using rule 118
	','            reduce using rule 118
	'->'           reduce using rule 118
	';'            reduce using rule 118
	'FSWAP'        reduce using rule 118
	'H'            reduce using rule 118
	'ID'           reduce using rule 118
	'ISWAP'        reduce using rule 118
	'ROOT_SWAP'    reduce using rule 118
	'ROOT_SWAP_DAG'reduce using rule 118
	'ROOT_X'       reduce using rule 118
	'ROOT_X_DAG'   reduce using rule 118
	'ROOT_Y'       reduce using rule 118
	'ROOT_Y_DAG'   reduce using rule 118
	'ROOT_Z'       reduce using rule 118
	'ROOT_Z_DAG'   reduce using rule 118
	'RX'           reduce using rule 118
	'RY'           reduce using rule 118
	'RZ'           reduce using rule 118
	'S'            reduce using rule 118
	'SQRT_SWAP'    reduce using rule 118
	'SQRT_SWAP_DAG'reduce using rule 118
	'SQRT_X'       reduce using rule 118
	'SQRT_X_DAG'   reduce using rule 118
	'SQRT_Y'       reduce using rule 118
	'SQRT_Y_DAG'   reduce using rule 118
	'SWAP'         reduce using rule 118
	'SWAP_THETA'   reduce using rule 118
	'S_DAG'        reduce using rule 118
	'T'            reduce using rule 118
	'T_DAG'        reduce using rule 118
	'U1'           reduce using rule 118
	'U2'           reduce using rule 118
	'U3'           reduce using rule 118
	'X'            reduce using rule 118
	'Y'            reduce using rule 118
	'Z'            reduce using rule 118
	']'            reduce using rule 118
	'else'         reduce using rule 118
	'of'           reduce using rule 118
	'then'         reduce using rule 118
	'}'            reduce using rule 118
	L_GateIdent    reduce using rule 118
	L_Var          reduce using rule 118
	L_Bit          reduce using rule 118


State 46

	Term -> Term1 .                                     (rule 119)

	')'            reduce using rule 119
	','            reduce using rule 119
	'->'           reduce using rule 119
	';'            reduce using rule 119
	']'            reduce using rule 119
	'else'         reduce using rule 119
	'of'           reduce using rule 119
	'then'         reduce using rule 119
	'}'            reduce using rule 119


State 47

	Term1 -> Term2 . '$' Term1                          (rule 115)
	Term1 -> Term2 .                                    (rule 116)
	Term2 -> Term2 . Term3                              (rule 117)

	'$'            shift, and enter state 128
	'('            shift, and enter state 49
	'()'           shift, and enter state 50
	')'            reduce using rule 116
	','            reduce using rule 116
	'->'           reduce using rule 116
	';'            reduce using rule 116
	'FSWAP'        shift, and enter state 51
	'H'            shift, and enter state 52
	'ID'           shift, and enter state 53
	'ISWAP'        shift, and enter state 54
	'ROOT_SWAP'    shift, and enter state 55
	'ROOT_SWAP_DAG'shift, and enter state 56
	'ROOT_X'       shift, and enter state 57
	'ROOT_X_DAG'   shift, and enter state 58
	'ROOT_Y'       shift, and enter state 59
	'ROOT_Y_DAG'   shift, and enter state 60
	'ROOT_Z'       shift, and enter state 61
	'ROOT_Z_DAG'   shift, and enter state 62
	'RX'           shift, and enter state 63
	'RY'           shift, and enter state 64
	'RZ'           shift, and enter state 65
	'S'            shift, and enter state 66
	'SQRT_SWAP'    shift, and enter state 67
	'SQRT_SWAP_DAG'shift, and enter state 68
	'SQRT_X'       shift, and enter state 69
	'SQRT_X_DAG'   shift, and enter state 70
	'SQRT_Y'       shift, and enter state 71
	'SQRT_Y_DAG'   shift, and enter state 72
	'SWAP'         shift, and enter state 73
	'SWAP_THETA'   shift, and enter state 74
	'S_DAG'        shift, and enter state 75
	'T'            shift, and enter state 76
	'T_DAG'        shift, and enter state 77
	'U1'           shift, and enter state 78
	'U2'           shift, and enter state 79
	'U3'           shift, and enter state 80
	'X'            shift, and enter state 81
	'Y'            shift, and enter state 82
	'Z'            shift, and enter state 83
	']'            reduce using rule 116
	'else'         reduce using rule 116
	'of'           reduce using rule 116
	'then'         reduce using rule 116
	'}'            reduce using rule 116
	L_GateIdent    shift, and enter state 87
	L_Var          shift, and enter state 8
	L_Bit          shift, and enter state 89

	GateIdent      goto state 39
	Var            goto state 40
	Bit            goto state 42
	Gate           goto state 43
	Tuple          goto state 44
	Term3          goto state 127

State 48

	FunctionDefinition -> Var ListArg '=' Term .        (rule 126)

	';'            reduce using rule 126


State 49

	Tuple -> '(' . Term ',' ListTerm ')'                (rule 101)
	Term3 -> '(' . Term ')'                             (rule 109)

	'('            shift, and enter state 49
	'()'           shift, and enter state 50
	'FSWAP'        shift, and enter state 51
	'H'            shift, and enter state 52
	'ID'           shift, and enter state 53
	'ISWAP'        shift, and enter state 54
	'ROOT_SWAP'    shift, and enter state 55
	'ROOT_SWAP_DAG'shift, and enter state 56
	'ROOT_X'       shift, and enter state 57
	'ROOT_X_DAG'   shift, and enter state 58
	'ROOT_Y'       shift, and enter state 59
	'ROOT_Y_DAG'   shift, and enter state 60
	'ROOT_Z'       shift, and enter state 61
	'ROOT_Z_DAG'   shift, and enter state 62
	'RX'           shift, and enter state 63
	'RY'           shift, and enter state 64
	'RZ'           shift, and enter state 65
	'S'            shift, and enter state 66
	'SQRT_SWAP'    shift, and enter state 67
	'SQRT_SWAP_DAG'shift, and enter state 68
	'SQRT_X'       shift, and enter state 69
	'SQRT_X_DAG'   shift, and enter state 70
	'SQRT_Y'       shift, and enter state 71
	'SQRT_Y_DAG'   shift, and enter state 72
	'SWAP'         shift, and enter state 73
	'SWAP_THETA'   shift, and enter state 74
	'S_DAG'        shift, and enter state 75
	'T'            shift, and enter state 76
	'T_DAG'        shift, and enter state 77
	'U1'           shift, and enter state 78
	'U2'           shift, and enter state 79
	'U3'           shift, and enter state 80
	'X'            shift, and enter state 81
	'Y'            shift, and enter state 82
	'Z'            shift, and enter state 83
	'case'         shift, and enter state 84
	'if'           shift, and enter state 85
	'let'          shift, and enter state 86
	L_GateIdent    shift, and enter state 87
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 88
	L_Bit          shift, and enter state 89

	GateIdent      goto state 39
	Var            goto state 40
	Lambda         goto state 41
	Bit            goto state 42
	Gate           goto state 43
	Tuple          goto state 44
	Term3          goto state 45
	Term1          goto state 46
	Term2          goto state 47
	Term           goto state 126

State 50

	Term3 -> '()' .                                     (rule 108)

	'$'            reduce using rule 108
	'('            reduce using rule 108
	'()'           reduce using rule 108
	')'            reduce using rule 108
	','            reduce using rule 108
	'->'           reduce using rule 108
	';'            reduce using rule 108
	'FSWAP'        reduce using rule 108
	'H'            reduce using rule 108
	'ID'           reduce using rule 108
	'ISWAP'        reduce using rule 108
	'ROOT_SWAP'    reduce using rule 108
	'ROOT_SWAP_DAG'reduce using rule 108
	'ROOT_X'       reduce using rule 108
	'ROOT_X_DAG'   reduce using rule 108
	'ROOT_Y'       reduce using rule 108
	'ROOT_Y_DAG'   reduce using rule 108
	'ROOT_Z'       reduce using rule 108
	'ROOT_Z_DAG'   reduce using rule 108
	'RX'           reduce using rule 108
	'RY'           reduce using rule 108
	'RZ'           reduce using rule 108
	'S'            reduce using rule 108
	'SQRT_SWAP'    reduce using rule 108
	'SQRT_SWAP_DAG'reduce using rule 108
	'SQRT_X'       reduce using rule 108
	'SQRT_X_DAG'   reduce using rule 108
	'SQRT_Y'       reduce using rule 108
	'SQRT_Y_DAG'   reduce using rule 108
	'SWAP'         reduce using rule 108
	'SWAP_THETA'   reduce using rule 108
	'S_DAG'        reduce using rule 108
	'T'            reduce using rule 108
	'T_DAG'        reduce using rule 108
	'U1'           reduce using rule 108
	'U2'           reduce using rule 108
	'U3'           reduce using rule 108
	'X'            reduce using rule 108
	'Y'            reduce using rule 108
	'Z'            reduce using rule 108
	']'            reduce using rule 108
	'else'         reduce using rule 108
	'of'           reduce using rule 108
	'then'         reduce using rule 108
	'}'            reduce using rule 108
	L_GateIdent    reduce using rule 108
	L_Var          reduce using rule 108
	L_Bit          reduce using rule 108


State 51

	Gate -> 'FSWAP' .                                   (rule 86)
	Gate -> 'FSWAP' . '[' ListControl ']'               (rule 87)

	'$'            reduce using rule 86
	'('            reduce using rule 86
	'()'           reduce using rule 86
	')'            reduce using rule 86
	','            reduce using rule 86
	'->'           reduce using rule 86
	';'            reduce using rule 86
	'FSWAP'        reduce using rule 86
	'H'            reduce using rule 86
	'ID'           reduce using rule 86
	'ISWAP'        reduce using rule 86
	'ROOT_SWAP'    reduce using rule 86
	'ROOT_SWAP_DAG'reduce using rule 86
	'ROOT_X'       reduce using rule 86
	'ROOT_X_DAG'   reduce using rule 86
	'ROOT_Y'       reduce using rule 86
	'ROOT_Y_DAG'   reduce using rule 86
	'ROOT_Z'       reduce using rule 86
	'ROOT_Z_DAG'   reduce using rule 86
	'RX'           reduce using rule 86
	'RY'           reduce using rule 86
	'RZ'           reduce using rule 86
	'S'            reduce using rule 86
	'SQRT_SWAP'    reduce using rule 86
	'SQRT_SWAP_DAG'reduce using rule 86
	'SQRT_X'       reduce using rule 86
	'SQRT_X_DAG'   reduce using rule 86
	'SQRT_Y'       reduce using rule 86
	'SQRT_Y_DAG'   reduce using rule 86
	'SWAP'         reduce using rule 86
	'SWAP_THETA'   reduce using rule 86
	'S_DAG'        reduce using rule 86
	'T'            reduce using rule 86
	'T_DAG'        reduce using rule 86
	'U1'           reduce using rule 86
	'U2'           reduce using rule 86
	'U3'           reduce using rule 86
	'X'            reduce using rule 86
	'Y'            reduce using rule 86
	'Z'            reduce using rule 86
	'['            shift, and enter state 125
	']'            reduce using rule 86
	'else'         reduce using rule 86
	'of'           reduce using rule 86
	'then'         reduce using rule 86
	'}'            reduce using rule 86
	L_GateIdent    reduce using rule 86
	L_Var          reduce using rule 86
	L_Bit          reduce using rule 86


State 52

	Gate -> 'H' .                                       (rule 29)
	Gate -> 'H' . '[' ListControl ']'                   (rule 30)

	'$'            reduce using rule 29
	'('            reduce using rule 29
	'()'           reduce using rule 29
	')'            reduce using rule 29
	','            reduce using rule 29
	'->'           reduce using rule 29
	';'            reduce using rule 29
	'FSWAP'        reduce using rule 29
	'H'            reduce using rule 29
	'ID'           reduce using rule 29
	'ISWAP'        reduce using rule 29
	'ROOT_SWAP'    reduce using rule 29
	'ROOT_SWAP_DAG'reduce using rule 29
	'ROOT_X'       reduce using rule 29
	'ROOT_X_DAG'   reduce using rule 29
	'ROOT_Y'       reduce using rule 29
	'ROOT_Y_DAG'   reduce using rule 29
	'ROOT_Z'       reduce using rule 29
	'ROOT_Z_DAG'   reduce using rule 29
	'RX'           reduce using rule 29
	'RY'           reduce using rule 29
	'RZ'           reduce using rule 29
	'S'            reduce using rule 29
	'SQRT_SWAP'    reduce using rule 29
	'SQRT_SWAP_DAG'reduce using rule 29
	'SQRT_X'       reduce using rule 29
	'SQRT_X_DAG'   reduce using rule 29
	'SQRT_Y'       reduce using rule 29
	'SQRT_Y_DAG'   reduce using rule 29
	'SWAP'         reduce using rule 29
	'SWAP_THETA'   reduce using rule 29
	'S_DAG'        reduce using rule 29
	'T'            reduce using rule 29
	'T_DAG'        reduce using rule 29
	'U1'           reduce using rule 29
	'U2'           reduce using rule 29
	'U3'           reduce using rule 29
	'X'            reduce using rule 29
	'Y'            reduce using rule 29
	'Z'            reduce using rule 29
	'['            shift, and enter state 124
	']'            reduce using rule 29
	'else'         reduce using rule 29
	'of'           reduce using rule 29
	'then'         reduce using rule 29
	'}'            reduce using rule 29
	L_GateIdent    reduce using rule 29
	L_Var          reduce using rule 29
	L_Bit          reduce using rule 29


State 53

	Gate -> 'ID' .                                      (rule 37)

	'$'            reduce using rule 37
	'('            reduce using rule 37
	'()'           reduce using rule 37
	')'            reduce using rule 37
	','            reduce using rule 37
	'->'           reduce using rule 37
	';'            reduce using rule 37
	'FSWAP'        reduce using rule 37
	'H'            reduce using rule 37
	'ID'           reduce using rule 37
	'ISWAP'        reduce using rule 37
	'ROOT_SWAP'    reduce using rule 37
	'ROOT_SWAP_DAG'reduce using rule 37
	'ROOT_X'       reduce using rule 37
	'ROOT_X_DAG'   reduce using rule 37
	'ROOT_Y'       reduce using rule 37
	'ROOT_Y_DAG'   reduce using rule 37
	'ROOT_Z'       reduce using rule 37
	'ROOT_Z_DAG'   reduce using rule 37
	'RX'           reduce using rule 37
	'RY'           reduce using rule 37
	'RZ'           reduce using rule 37
	'S'            reduce using rule 37
	'SQRT_SWAP'    reduce using rule 37
	'SQRT_SWAP_DAG'reduce using rule 37
	'SQRT_X'       reduce using rule 37
	'SQRT_X_DAG'   reduce using rule 37
	'SQRT_Y'       reduce using rule 37
	'SQRT_Y_DAG'   reduce using rule 37
	'SWAP'         reduce using rule 37
	'SWAP_THETA'   reduce using rule 37
	'S_DAG'        reduce using rule 37
	'T'            reduce using rule 37
	'T_DAG'        reduce using rule 37
	'U1'           reduce using rule 37
	'U2'           reduce using rule 37
	'U3'           reduce using rule 37
	'X'            reduce using rule 37
	'Y'            reduce using rule 37
	'Z'            reduce using rule 37
	']'            reduce using rule 37
	'else'         reduce using rule 37
	'of'           reduce using rule 37
	'then'         reduce using rule 37
	'}'            reduce using rule 37
	L_GateIdent    reduce using rule 37
	L_Var          reduce using rule 37
	L_Bit          reduce using rule 37


State 54

	Gate -> 'ISWAP' .                                   (rule 84)
	Gate -> 'ISWAP' . '[' ListControl ']'               (rule 85)

	'$'            reduce using rule 84
	'('            reduce using rule 84
	'()'           reduce using rule 84
	')'            reduce using rule 84
	','            reduce using rule 84
	'->'           reduce using rule 84
	';'            reduce using rule 84
	'FSWAP'        reduce using rule 84
	'H'            reduce using rule 84
	'ID'           reduce using rule 84
	'ISWAP'        reduce using rule 84
	'ROOT_SWAP'    reduce using rule 84
	'ROOT_SWAP_DAG'reduce using rule 84
	'ROOT_X'       reduce using rule 84
	'ROOT_X_DAG'   reduce using rule 84
	'ROOT_Y'       reduce using rule 84
	'ROOT_Y_DAG'   reduce using rule 84
	'ROOT_Z'       reduce using rule 84
	'ROOT_Z_DAG'   reduce using rule 84
	'RX'           reduce using rule 84
	'RY'           reduce using rule 84
	'RZ'           reduce using rule 84
	'S'            reduce using rule 84
	'SQRT_SWAP'    reduce using rule 84
	'SQRT_SWAP_DAG'reduce using rule 84
	'SQRT_X'       reduce using rule 84
	'SQRT_X_DAG'   reduce using rule 84
	'SQRT_Y'       reduce using rule 84
	'SQRT_Y_DAG'   reduce using rule 84
	'SWAP'         reduce using rule 84
	'SWAP_THETA'   reduce using rule 84
	'S_DAG'        reduce using rule 84
	'T'            reduce using rule 84
	'T_DAG'        reduce using rule 84
	'U1'           reduce using rule 84
	'U2'           reduce using rule 84
	'U3'           reduce using rule 84
	'X'            reduce using rule 84
	'Y'            reduce using rule 84
	'Z'            reduce using rule 84
	'['            shift, and enter state 123
	']'            reduce using rule 84
	'else'         reduce using rule 84
	'of'           reduce using rule 84
	'then'         reduce using rule 84
	'}'            reduce using rule 84
	L_GateIdent    reduce using rule 84
	L_Var          reduce using rule 84
	L_Bit          reduce using rule 84


State 55

	Gate -> 'ROOT_SWAP' . Integer                       (rule 89)
	Gate -> 'ROOT_SWAP' . Integer '[' ListControl ']'    (rule 90)

	L_integ        shift, and enter state 33

	Integer        goto state 122

State 56

	Gate -> 'ROOT_SWAP_DAG' . Integer                   (rule 91)
	Gate -> 'ROOT_SWAP_DAG' . Integer '[' ListControl ']'    (rule 92)

	L_integ        shift, and enter state 33

	Integer        goto state 121

State 57

	Gate -> 'ROOT_X' . Integer                          (rule 38)
	Gate -> 'ROOT_X' . Integer '[' ListControl ']'      (rule 39)

	L_integ        shift, and enter state 33

	Integer        goto state 120

State 58

	Gate -> 'ROOT_X_DAG' . Integer                      (rule 40)
	Gate -> 'ROOT_X_DAG' . Integer '[' ListControl ']'    (rule 41)

	L_integ        shift, and enter state 33

	Integer        goto state 119

State 59

	Gate -> 'ROOT_Y' . Integer                          (rule 42)
	Gate -> 'ROOT_Y' . Integer '[' ListControl ']'      (rule 43)

	L_integ        shift, and enter state 33

	Integer        goto state 118

State 60

	Gate -> 'ROOT_Y_DAG' . Integer                      (rule 44)
	Gate -> 'ROOT_Y_DAG' . Integer '[' ListControl ']'    (rule 45)

	L_integ        shift, and enter state 33

	Integer        goto state 117

State 61

	Gate -> 'ROOT_Z' . Integer                          (rule 46)
	Gate -> 'ROOT_Z' . Integer '[' ListControl ']'      (rule 47)

	L_integ        shift, and enter state 33

	Integer        goto state 116

State 62

	Gate -> 'ROOT_Z_DAG' . Integer                      (rule 48)
	Gate -> 'ROOT_Z_DAG' . Integer '[' ListControl ']'    (rule 49)

	L_integ        shift, and enter state 33

	Integer        goto state 115

State 63

	Gate -> 'RX' . Angle                                (rule 66)
	Gate -> 'RX' . Angle '[' ListControl ']'            (rule 67)

	L_doubl        shift, and enter state 2

	Double         goto state 96
	Angle          goto state 114

State 64

	Gate -> 'RY' . Angle                                (rule 68)
	Gate -> 'RY' . Angle '[' ListControl ']'            (rule 69)

	L_doubl        shift, and enter state 2

	Double         goto state 96
	Angle          goto state 113

State 65

	Gate -> 'RZ' . Angle                                (rule 70)
	Gate -> 'RZ' . Angle '[' ListControl ']'            (rule 71)

	L_doubl        shift, and enter state 2

	Double         goto state 96
	Angle          goto state 112

State 66

	Gate -> 'S' .                                       (rule 50)
	Gate -> 'S' . '[' ListControl ']'                   (rule 51)

	'$'            reduce using rule 50
	'('            reduce using rule 50
	'()'           reduce using rule 50
	')'            reduce using rule 50
	','            reduce using rule 50
	'->'           reduce using rule 50
	';'            reduce using rule 50
	'FSWAP'        reduce using rule 50
	'H'            reduce using rule 50
	'ID'           reduce using rule 50
	'ISWAP'        reduce using rule 50
	'ROOT_SWAP'    reduce using rule 50
	'ROOT_SWAP_DAG'reduce using rule 50
	'ROOT_X'       reduce using rule 50
	'ROOT_X_DAG'   reduce using rule 50
	'ROOT_Y'       reduce using rule 50
	'ROOT_Y_DAG'   reduce using rule 50
	'ROOT_Z'       reduce using rule 50
	'ROOT_Z_DAG'   reduce using rule 50
	'RX'           reduce using rule 50
	'RY'           reduce using rule 50
	'RZ'           reduce using rule 50
	'S'            reduce using rule 50
	'SQRT_SWAP'    reduce using rule 50
	'SQRT_SWAP_DAG'reduce using rule 50
	'SQRT_X'       reduce using rule 50
	'SQRT_X_DAG'   reduce using rule 50
	'SQRT_Y'       reduce using rule 50
	'SQRT_Y_DAG'   reduce using rule 50
	'SWAP'         reduce using rule 50
	'SWAP_THETA'   reduce using rule 50
	'S_DAG'        reduce using rule 50
	'T'            reduce using rule 50
	'T_DAG'        reduce using rule 50
	'U1'           reduce using rule 50
	'U2'           reduce using rule 50
	'U3'           reduce using rule 50
	'X'            reduce using rule 50
	'Y'            reduce using rule 50
	'Z'            reduce using rule 50
	'['            shift, and enter state 111
	']'            reduce using rule 50
	'else'         reduce using rule 50
	'of'           reduce using rule 50
	'then'         reduce using rule 50
	'}'            reduce using rule 50
	L_GateIdent    reduce using rule 50
	L_Var          reduce using rule 50
	L_Bit          reduce using rule 50


State 67

	Gate -> 'SQRT_SWAP' .                               (rule 80)
	Gate -> 'SQRT_SWAP' . '[' ListControl ']'           (rule 81)

	'$'            reduce using rule 80
	'('            reduce using rule 80
	'()'           reduce using rule 80
	')'            reduce using rule 80
	','            reduce using rule 80
	'->'           reduce using rule 80
	';'            reduce using rule 80
	'FSWAP'        reduce using rule 80
	'H'            reduce using rule 80
	'ID'           reduce using rule 80
	'ISWAP'        reduce using rule 80
	'ROOT_SWAP'    reduce using rule 80
	'ROOT_SWAP_DAG'reduce using rule 80
	'ROOT_X'       reduce using rule 80
	'ROOT_X_DAG'   reduce using rule 80
	'ROOT_Y'       reduce using rule 80
	'ROOT_Y_DAG'   reduce using rule 80
	'ROOT_Z'       reduce using rule 80
	'ROOT_Z_DAG'   reduce using rule 80
	'RX'           reduce using rule 80
	'RY'           reduce using rule 80
	'RZ'           reduce using rule 80
	'S'            reduce using rule 80
	'SQRT_SWAP'    reduce using rule 80
	'SQRT_SWAP_DAG'reduce using rule 80
	'SQRT_X'       reduce using rule 80
	'SQRT_X_DAG'   reduce using rule 80
	'SQRT_Y'       reduce using rule 80
	'SQRT_Y_DAG'   reduce using rule 80
	'SWAP'         reduce using rule 80
	'SWAP_THETA'   reduce using rule 80
	'S_DAG'        reduce using rule 80
	'T'            reduce using rule 80
	'T_DAG'        reduce using rule 80
	'U1'           reduce using rule 80
	'U2'           reduce using rule 80
	'U3'           reduce using rule 80
	'X'            reduce using rule 80
	'Y'            reduce using rule 80
	'Z'            reduce using rule 80
	'['            shift, and enter state 110
	']'            reduce using rule 80
	'else'         reduce using rule 80
	'of'           reduce using rule 80
	'then'         reduce using rule 80
	'}'            reduce using rule 80
	L_GateIdent    reduce using rule 80
	L_Var          reduce using rule 80
	L_Bit          reduce using rule 80


State 68

	Gate -> 'SQRT_SWAP_DAG' .                           (rule 82)
	Gate -> 'SQRT_SWAP_DAG' . '[' ListControl ']'       (rule 83)

	'$'            reduce using rule 82
	'('            reduce using rule 82
	'()'           reduce using rule 82
	')'            reduce using rule 82
	','            reduce using rule 82
	'->'           reduce using rule 82
	';'            reduce using rule 82
	'FSWAP'        reduce using rule 82
	'H'            reduce using rule 82
	'ID'           reduce using rule 82
	'ISWAP'        reduce using rule 82
	'ROOT_SWAP'    reduce using rule 82
	'ROOT_SWAP_DAG'reduce using rule 82
	'ROOT_X'       reduce using rule 82
	'ROOT_X_DAG'   reduce using rule 82
	'ROOT_Y'       reduce using rule 82
	'ROOT_Y_DAG'   reduce using rule 82
	'ROOT_Z'       reduce using rule 82
	'ROOT_Z_DAG'   reduce using rule 82
	'RX'           reduce using rule 82
	'RY'           reduce using rule 82
	'RZ'           reduce using rule 82
	'S'            reduce using rule 82
	'SQRT_SWAP'    reduce using rule 82
	'SQRT_SWAP_DAG'reduce using rule 82
	'SQRT_X'       reduce using rule 82
	'SQRT_X_DAG'   reduce using rule 82
	'SQRT_Y'       reduce using rule 82
	'SQRT_Y_DAG'   reduce using rule 82
	'SWAP'         reduce using rule 82
	'SWAP_THETA'   reduce using rule 82
	'S_DAG'        reduce using rule 82
	'T'            reduce using rule 82
	'T_DAG'        reduce using rule 82
	'U1'           reduce using rule 82
	'U2'           reduce using rule 82
	'U3'           reduce using rule 82
	'X'            reduce using rule 82
	'Y'            reduce using rule 82
	'Z'            reduce using rule 82
	'['            shift, and enter state 109
	']'            reduce using rule 82
	'else'         reduce using rule 82
	'of'           reduce using rule 82
	'then'         reduce using rule 82
	'}'            reduce using rule 82
	L_GateIdent    reduce using rule 82
	L_Var          reduce using rule 82
	L_Bit          reduce using rule 82


State 69

	Gate -> 'SQRT_X' .                                  (rule 58)
	Gate -> 'SQRT_X' . '[' ListControl ']'              (rule 59)

	'$'            reduce using rule 58
	'('            reduce using rule 58
	'()'           reduce using rule 58
	')'            reduce using rule 58
	','            reduce using rule 58
	'->'           reduce using rule 58
	';'            reduce using rule 58
	'FSWAP'        reduce using rule 58
	'H'            reduce using rule 58
	'ID'           reduce using rule 58
	'ISWAP'        reduce using rule 58
	'ROOT_SWAP'    reduce using rule 58
	'ROOT_SWAP_DAG'reduce using rule 58
	'ROOT_X'       reduce using rule 58
	'ROOT_X_DAG'   reduce using rule 58
	'ROOT_Y'       reduce using rule 58
	'ROOT_Y_DAG'   reduce using rule 58
	'ROOT_Z'       reduce using rule 58
	'ROOT_Z_DAG'   reduce using rule 58
	'RX'           reduce using rule 58
	'RY'           reduce using rule 58
	'RZ'           reduce using rule 58
	'S'            reduce using rule 58
	'SQRT_SWAP'    reduce using rule 58
	'SQRT_SWAP_DAG'reduce using rule 58
	'SQRT_X'       reduce using rule 58
	'SQRT_X_DAG'   reduce using rule 58
	'SQRT_Y'       reduce using rule 58
	'SQRT_Y_DAG'   reduce using rule 58
	'SWAP'         reduce using rule 58
	'SWAP_THETA'   reduce using rule 58
	'S_DAG'        reduce using rule 58
	'T'            reduce using rule 58
	'T_DAG'        reduce using rule 58
	'U1'           reduce using rule 58
	'U2'           reduce using rule 58
	'U3'           reduce using rule 58
	'X'            reduce using rule 58
	'Y'            reduce using rule 58
	'Z'            reduce using rule 58
	'['            shift, and enter state 108
	']'            reduce using rule 58
	'else'         reduce using rule 58
	'of'           reduce using rule 58
	'then'         reduce using rule 58
	'}'            reduce using rule 58
	L_GateIdent    reduce using rule 58
	L_Var          reduce using rule 58
	L_Bit          reduce using rule 58


State 70

	Gate -> 'SQRT_X_DAG' .                              (rule 60)
	Gate -> 'SQRT_X_DAG' . '[' ListControl ']'          (rule 61)

	'$'            reduce using rule 60
	'('            reduce using rule 60
	'()'           reduce using rule 60
	')'            reduce using rule 60
	','            reduce using rule 60
	'->'           reduce using rule 60
	';'            reduce using rule 60
	'FSWAP'        reduce using rule 60
	'H'            reduce using rule 60
	'ID'           reduce using rule 60
	'ISWAP'        reduce using rule 60
	'ROOT_SWAP'    reduce using rule 60
	'ROOT_SWAP_DAG'reduce using rule 60
	'ROOT_X'       reduce using rule 60
	'ROOT_X_DAG'   reduce using rule 60
	'ROOT_Y'       reduce using rule 60
	'ROOT_Y_DAG'   reduce using rule 60
	'ROOT_Z'       reduce using rule 60
	'ROOT_Z_DAG'   reduce using rule 60
	'RX'           reduce using rule 60
	'RY'           reduce using rule 60
	'RZ'           reduce using rule 60
	'S'            reduce using rule 60
	'SQRT_SWAP'    reduce using rule 60
	'SQRT_SWAP_DAG'reduce using rule 60
	'SQRT_X'       reduce using rule 60
	'SQRT_X_DAG'   reduce using rule 60
	'SQRT_Y'       reduce using rule 60
	'SQRT_Y_DAG'   reduce using rule 60
	'SWAP'         reduce using rule 60
	'SWAP_THETA'   reduce using rule 60
	'S_DAG'        reduce using rule 60
	'T'            reduce using rule 60
	'T_DAG'        reduce using rule 60
	'U1'           reduce using rule 60
	'U2'           reduce using rule 60
	'U3'           reduce using rule 60
	'X'            reduce using rule 60
	'Y'            reduce using rule 60
	'Z'            reduce using rule 60
	'['            shift, and enter state 107
	']'            reduce using rule 60
	'else'         reduce using rule 60
	'of'           reduce using rule 60
	'then'         reduce using rule 60
	'}'            reduce using rule 60
	L_GateIdent    reduce using rule 60
	L_Var          reduce using rule 60
	L_Bit          reduce using rule 60


State 71

	Gate -> 'SQRT_Y' .                                  (rule 62)
	Gate -> 'SQRT_Y' . '[' ListControl ']'              (rule 63)

	'$'            reduce using rule 62
	'('            reduce using rule 62
	'()'           reduce using rule 62
	')'            reduce using rule 62
	','            reduce using rule 62
	'->'           reduce using rule 62
	';'            reduce using rule 62
	'FSWAP'        reduce using rule 62
	'H'            reduce using rule 62
	'ID'           reduce using rule 62
	'ISWAP'        reduce using rule 62
	'ROOT_SWAP'    reduce using rule 62
	'ROOT_SWAP_DAG'reduce using rule 62
	'ROOT_X'       reduce using rule 62
	'ROOT_X_DAG'   reduce using rule 62
	'ROOT_Y'       reduce using rule 62
	'ROOT_Y_DAG'   reduce using rule 62
	'ROOT_Z'       reduce using rule 62
	'ROOT_Z_DAG'   reduce using rule 62
	'RX'           reduce using rule 62
	'RY'           reduce using rule 62
	'RZ'           reduce using rule 62
	'S'            reduce using rule 62
	'SQRT_SWAP'    reduce using rule 62
	'SQRT_SWAP_DAG'reduce using rule 62
	'SQRT_X'       reduce using rule 62
	'SQRT_X_DAG'   reduce using rule 62
	'SQRT_Y'       reduce using rule 62
	'SQRT_Y_DAG'   reduce using rule 62
	'SWAP'         reduce using rule 62
	'SWAP_THETA'   reduce using rule 62
	'S_DAG'        reduce using rule 62
	'T'            reduce using rule 62
	'T_DAG'        reduce using rule 62
	'U1'           reduce using rule 62
	'U2'           reduce using rule 62
	'U3'           reduce using rule 62
	'X'            reduce using rule 62
	'Y'            reduce using rule 62
	'Z'            reduce using rule 62
	'['            shift, and enter state 106
	']'            reduce using rule 62
	'else'         reduce using rule 62
	'of'           reduce using rule 62
	'then'         reduce using rule 62
	'}'            reduce using rule 62
	L_GateIdent    reduce using rule 62
	L_Var          reduce using rule 62
	L_Bit          reduce using rule 62


State 72

	Gate -> 'SQRT_Y_DAG' .                              (rule 64)
	Gate -> 'SQRT_Y_DAG' . '[' ListControl ']'          (rule 65)

	'$'            reduce using rule 64
	'('            reduce using rule 64
	'()'           reduce using rule 64
	')'            reduce using rule 64
	','            reduce using rule 64
	'->'           reduce using rule 64
	';'            reduce using rule 64
	'FSWAP'        reduce using rule 64
	'H'            reduce using rule 64
	'ID'           reduce using rule 64
	'ISWAP'        reduce using rule 64
	'ROOT_SWAP'    reduce using rule 64
	'ROOT_SWAP_DAG'reduce using rule 64
	'ROOT_X'       reduce using rule 64
	'ROOT_X_DAG'   reduce using rule 64
	'ROOT_Y'       reduce using rule 64
	'ROOT_Y_DAG'   reduce using rule 64
	'ROOT_Z'       reduce using rule 64
	'ROOT_Z_DAG'   reduce using rule 64
	'RX'           reduce using rule 64
	'RY'           reduce using rule 64
	'RZ'           reduce using rule 64
	'S'            reduce using rule 64
	'SQRT_SWAP'    reduce using rule 64
	'SQRT_SWAP_DAG'reduce using rule 64
	'SQRT_X'       reduce using rule 64
	'SQRT_X_DAG'   reduce using rule 64
	'SQRT_Y'       reduce using rule 64
	'SQRT_Y_DAG'   reduce using rule 64
	'SWAP'         reduce using rule 64
	'SWAP_THETA'   reduce using rule 64
	'S_DAG'        reduce using rule 64
	'T'            reduce using rule 64
	'T_DAG'        reduce using rule 64
	'U1'           reduce using rule 64
	'U2'           reduce using rule 64
	'U3'           reduce using rule 64
	'X'            reduce using rule 64
	'Y'            reduce using rule 64
	'Z'            reduce using rule 64
	'['            shift, and enter state 105
	']'            reduce using rule 64
	'else'         reduce using rule 64
	'of'           reduce using rule 64
	'then'         reduce using rule 64
	'}'            reduce using rule 64
	L_GateIdent    reduce using rule 64
	L_Var          reduce using rule 64
	L_Bit          reduce using rule 64


State 73

	Gate -> 'SWAP' .                                    (rule 78)
	Gate -> 'SWAP' . '[' ListControl ']'                (rule 79)

	'$'            reduce using rule 78
	'('            reduce using rule 78
	'()'           reduce using rule 78
	')'            reduce using rule 78
	','            reduce using rule 78
	'->'           reduce using rule 78
	';'            reduce using rule 78
	'FSWAP'        reduce using rule 78
	'H'            reduce using rule 78
	'ID'           reduce using rule 78
	'ISWAP'        reduce using rule 78
	'ROOT_SWAP'    reduce using rule 78
	'ROOT_SWAP_DAG'reduce using rule 78
	'ROOT_X'       reduce using rule 78
	'ROOT_X_DAG'   reduce using rule 78
	'ROOT_Y'       reduce using rule 78
	'ROOT_Y_DAG'   reduce using rule 78
	'ROOT_Z'       reduce using rule 78
	'ROOT_Z_DAG'   reduce using rule 78
	'RX'           reduce using rule 78
	'RY'           reduce using rule 78
	'RZ'           reduce using rule 78
	'S'            reduce using rule 78
	'SQRT_SWAP'    reduce using rule 78
	'SQRT_SWAP_DAG'reduce using rule 78
	'SQRT_X'       reduce using rule 78
	'SQRT_X_DAG'   reduce using rule 78
	'SQRT_Y'       reduce using rule 78
	'SQRT_Y_DAG'   reduce using rule 78
	'SWAP'         reduce using rule 78
	'SWAP_THETA'   reduce using rule 78
	'S_DAG'        reduce using rule 78
	'T'            reduce using rule 78
	'T_DAG'        reduce using rule 78
	'U1'           reduce using rule 78
	'U2'           reduce using rule 78
	'U3'           reduce using rule 78
	'X'            reduce using rule 78
	'Y'            reduce using rule 78
	'Z'            reduce using rule 78
	'['            shift, and enter state 104
	']'            reduce using rule 78
	'else'         reduce using rule 78
	'of'           reduce using rule 78
	'then'         reduce using rule 78
	'}'            reduce using rule 78
	L_GateIdent    reduce using rule 78
	L_Var          reduce using rule 78
	L_Bit          reduce using rule 78


State 74

	Gate -> 'SWAP_THETA' . Angle                        (rule 88)

	L_doubl        shift, and enter state 2

	Double         goto state 96
	Angle          goto state 103

State 75

	Gate -> 'S_DAG' .                                   (rule 52)
	Gate -> 'S_DAG' . '[' ListControl ']'               (rule 53)

	'$'            reduce using rule 52
	'('            reduce using rule 52
	'()'           reduce using rule 52
	')'            reduce using rule 52
	','            reduce using rule 52
	'->'           reduce using rule 52
	';'            reduce using rule 52
	'FSWAP'        reduce using rule 52
	'H'            reduce using rule 52
	'ID'           reduce using rule 52
	'ISWAP'        reduce using rule 52
	'ROOT_SWAP'    reduce using rule 52
	'ROOT_SWAP_DAG'reduce using rule 52
	'ROOT_X'       reduce using rule 52
	'ROOT_X_DAG'   reduce using rule 52
	'ROOT_Y'       reduce using rule 52
	'ROOT_Y_DAG'   reduce using rule 52
	'ROOT_Z'       reduce using rule 52
	'ROOT_Z_DAG'   reduce using rule 52
	'RX'           reduce using rule 52
	'RY'           reduce using rule 52
	'RZ'           reduce using rule 52
	'S'            reduce using rule 52
	'SQRT_SWAP'    reduce using rule 52
	'SQRT_SWAP_DAG'reduce using rule 52
	'SQRT_X'       reduce using rule 52
	'SQRT_X_DAG'   reduce using rule 52
	'SQRT_Y'       reduce using rule 52
	'SQRT_Y_DAG'   reduce using rule 52
	'SWAP'         reduce using rule 52
	'SWAP_THETA'   reduce using rule 52
	'S_DAG'        reduce using rule 52
	'T'            reduce using rule 52
	'T_DAG'        reduce using rule 52
	'U1'           reduce using rule 52
	'U2'           reduce using rule 52
	'U3'           reduce using rule 52
	'X'            reduce using rule 52
	'Y'            reduce using rule 52
	'Z'            reduce using rule 52
	'['            shift, and enter state 102
	']'            reduce using rule 52
	'else'         reduce using rule 52
	'of'           reduce using rule 52
	'then'         reduce using rule 52
	'}'            reduce using rule 52
	L_GateIdent    reduce using rule 52
	L_Var          reduce using rule 52
	L_Bit          reduce using rule 52


State 76

	Gate -> 'T' .                                       (rule 54)
	Gate -> 'T' . '[' ListControl ']'                   (rule 55)

	'$'            reduce using rule 54
	'('            reduce using rule 54
	'()'           reduce using rule 54
	')'            reduce using rule 54
	','            reduce using rule 54
	'->'           reduce using rule 54
	';'            reduce using rule 54
	'FSWAP'        reduce using rule 54
	'H'            reduce using rule 54
	'ID'           reduce using rule 54
	'ISWAP'        reduce using rule 54
	'ROOT_SWAP'    reduce using rule 54
	'ROOT_SWAP_DAG'reduce using rule 54
	'ROOT_X'       reduce using rule 54
	'ROOT_X_DAG'   reduce using rule 54
	'ROOT_Y'       reduce using rule 54
	'ROOT_Y_DAG'   reduce using rule 54
	'ROOT_Z'       reduce using rule 54
	'ROOT_Z_DAG'   reduce using rule 54
	'RX'           reduce using rule 54
	'RY'           reduce using rule 54
	'RZ'           reduce using rule 54
	'S'            reduce using rule 54
	'SQRT_SWAP'    reduce using rule 54
	'SQRT_SWAP_DAG'reduce using rule 54
	'SQRT_X'       reduce using rule 54
	'SQRT_X_DAG'   reduce using rule 54
	'SQRT_Y'       reduce using rule 54
	'SQRT_Y_DAG'   reduce using rule 54
	'SWAP'         reduce using rule 54
	'SWAP_THETA'   reduce using rule 54
	'S_DAG'        reduce using rule 54
	'T'            reduce using rule 54
	'T_DAG'        reduce using rule 54
	'U1'           reduce using rule 54
	'U2'           reduce using rule 54
	'U3'           reduce using rule 54
	'X'            reduce using rule 54
	'Y'            reduce using rule 54
	'Z'            reduce using rule 54
	'['            shift, and enter state 101
	']'            reduce using rule 54
	'else'         reduce using rule 54
	'of'           reduce using rule 54
	'then'         reduce using rule 54
	'}'            reduce using rule 54
	L_GateIdent    reduce using rule 54
	L_Var          reduce using rule 54
	L_Bit          reduce using rule 54


State 77

	Gate -> 'T_DAG' .                                   (rule 56)
	Gate -> 'T_DAG' . '[' ListControl ']'               (rule 57)

	'$'            reduce using rule 56
	'('            reduce using rule 56
	'()'           reduce using rule 56
	')'            reduce using rule 56
	','            reduce using rule 56
	'->'           reduce using rule 56
	';'            reduce using rule 56
	'FSWAP'        reduce using rule 56
	'H'            reduce using rule 56
	'ID'           reduce using rule 56
	'ISWAP'        reduce using rule 56
	'ROOT_SWAP'    reduce using rule 56
	'ROOT_SWAP_DAG'reduce using rule 56
	'ROOT_X'       reduce using rule 56
	'ROOT_X_DAG'   reduce using rule 56
	'ROOT_Y'       reduce using rule 56
	'ROOT_Y_DAG'   reduce using rule 56
	'ROOT_Z'       reduce using rule 56
	'ROOT_Z_DAG'   reduce using rule 56
	'RX'           reduce using rule 56
	'RY'           reduce using rule 56
	'RZ'           reduce using rule 56
	'S'            reduce using rule 56
	'SQRT_SWAP'    reduce using rule 56
	'SQRT_SWAP_DAG'reduce using rule 56
	'SQRT_X'       reduce using rule 56
	'SQRT_X_DAG'   reduce using rule 56
	'SQRT_Y'       reduce using rule 56
	'SQRT_Y_DAG'   reduce using rule 56
	'SWAP'         reduce using rule 56
	'SWAP_THETA'   reduce using rule 56
	'S_DAG'        reduce using rule 56
	'T'            reduce using rule 56
	'T_DAG'        reduce using rule 56
	'U1'           reduce using rule 56
	'U2'           reduce using rule 56
	'U3'           reduce using rule 56
	'X'            reduce using rule 56
	'Y'            reduce using rule 56
	'Z'            reduce using rule 56
	'['            shift, and enter state 100
	']'            reduce using rule 56
	'else'         reduce using rule 56
	'of'           reduce using rule 56
	'then'         reduce using rule 56
	'}'            reduce using rule 56
	L_GateIdent    reduce using rule 56
	L_Var          reduce using rule 56
	L_Bit          reduce using rule 56


State 78

	Gate -> 'U1' . Angle                                (rule 72)
	Gate -> 'U1' . Angle '[' ListControl ']'            (rule 73)

	L_doubl        shift, and enter state 2

	Double         goto state 96
	Angle          goto state 99

State 79

	Gate -> 'U2' . Angle Angle                          (rule 74)
	Gate -> 'U2' . Angle Angle '[' ListControl ']'      (rule 75)

	L_doubl        shift, and enter state 2

	Double         goto state 96
	Angle          goto state 98

State 80

	Gate -> 'U3' . Angle Angle Angle                    (rule 76)
	Gate -> 'U3' . Angle Angle Angle '[' ListControl ']'    (rule 77)

	L_doubl        shift, and enter state 2

	Double         goto state 96
	Angle          goto state 97

State 81

	Gate -> 'X' .                                       (rule 31)
	Gate -> 'X' . '[' ListControl ']'                   (rule 32)

	'$'            reduce using rule 31
	'('            reduce using rule 31
	'()'           reduce using rule 31
	')'            reduce using rule 31
	','            reduce using rule 31
	'->'           reduce using rule 31
	';'            reduce using rule 31
	'FSWAP'        reduce using rule 31
	'H'            reduce using rule 31
	'ID'           reduce using rule 31
	'ISWAP'        reduce using rule 31
	'ROOT_SWAP'    reduce using rule 31
	'ROOT_SWAP_DAG'reduce using rule 31
	'ROOT_X'       reduce using rule 31
	'ROOT_X_DAG'   reduce using rule 31
	'ROOT_Y'       reduce using rule 31
	'ROOT_Y_DAG'   reduce using rule 31
	'ROOT_Z'       reduce using rule 31
	'ROOT_Z_DAG'   reduce using rule 31
	'RX'           reduce using rule 31
	'RY'           reduce using rule 31
	'RZ'           reduce using rule 31
	'S'            reduce using rule 31
	'SQRT_SWAP'    reduce using rule 31
	'SQRT_SWAP_DAG'reduce using rule 31
	'SQRT_X'       reduce using rule 31
	'SQRT_X_DAG'   reduce using rule 31
	'SQRT_Y'       reduce using rule 31
	'SQRT_Y_DAG'   reduce using rule 31
	'SWAP'         reduce using rule 31
	'SWAP_THETA'   reduce using rule 31
	'S_DAG'        reduce using rule 31
	'T'            reduce using rule 31
	'T_DAG'        reduce using rule 31
	'U1'           reduce using rule 31
	'U2'           reduce using rule 31
	'U3'           reduce using rule 31
	'X'            reduce using rule 31
	'Y'            reduce using rule 31
	'Z'            reduce using rule 31
	'['            shift, and enter state 95
	']'            reduce using rule 31
	'else'         reduce using rule 31
	'of'           reduce using rule 31
	'then'         reduce using rule 31
	'}'            reduce using rule 31
	L_GateIdent    reduce using rule 31
	L_Var          reduce using rule 31
	L_Bit          reduce using rule 31


State 82

	Gate -> 'Y' .                                       (rule 33)
	Gate -> 'Y' . '[' ListControl ']'                   (rule 34)

	'$'            reduce using rule 33
	'('            reduce using rule 33
	'()'           reduce using rule 33
	')'            reduce using rule 33
	','            reduce using rule 33
	'->'           reduce using rule 33
	';'            reduce using rule 33
	'FSWAP'        reduce using rule 33
	'H'            reduce using rule 33
	'ID'           reduce using rule 33
	'ISWAP'        reduce using rule 33
	'ROOT_SWAP'    reduce using rule 33
	'ROOT_SWAP_DAG'reduce using rule 33
	'ROOT_X'       reduce using rule 33
	'ROOT_X_DAG'   reduce using rule 33
	'ROOT_Y'       reduce using rule 33
	'ROOT_Y_DAG'   reduce using rule 33
	'ROOT_Z'       reduce using rule 33
	'ROOT_Z_DAG'   reduce using rule 33
	'RX'           reduce using rule 33
	'RY'           reduce using rule 33
	'RZ'           reduce using rule 33
	'S'            reduce using rule 33
	'SQRT_SWAP'    reduce using rule 33
	'SQRT_SWAP_DAG'reduce using rule 33
	'SQRT_X'       reduce using rule 33
	'SQRT_X_DAG'   reduce using rule 33
	'SQRT_Y'       reduce using rule 33
	'SQRT_Y_DAG'   reduce using rule 33
	'SWAP'         reduce using rule 33
	'SWAP_THETA'   reduce using rule 33
	'S_DAG'        reduce using rule 33
	'T'            reduce using rule 33
	'T_DAG'        reduce using rule 33
	'U1'           reduce using rule 33
	'U2'           reduce using rule 33
	'U3'           reduce using rule 33
	'X'            reduce using rule 33
	'Y'            reduce using rule 33
	'Z'            reduce using rule 33
	'['            shift, and enter state 94
	']'            reduce using rule 33
	'else'         reduce using rule 33
	'of'           reduce using rule 33
	'then'         reduce using rule 33
	'}'            reduce using rule 33
	L_GateIdent    reduce using rule 33
	L_Var          reduce using rule 33
	L_Bit          reduce using rule 33


State 83

	Gate -> 'Z' .                                       (rule 35)
	Gate -> 'Z' . '[' ListControl ']'                   (rule 36)

	'$'            reduce using rule 35
	'('            reduce using rule 35
	'()'           reduce using rule 35
	')'            reduce using rule 35
	','            reduce using rule 35
	'->'           reduce using rule 35
	';'            reduce using rule 35
	'FSWAP'        reduce using rule 35
	'H'            reduce using rule 35
	'ID'           reduce using rule 35
	'ISWAP'        reduce using rule 35
	'ROOT_SWAP'    reduce using rule 35
	'ROOT_SWAP_DAG'reduce using rule 35
	'ROOT_X'       reduce using rule 35
	'ROOT_X_DAG'   reduce using rule 35
	'ROOT_Y'       reduce using rule 35
	'ROOT_Y_DAG'   reduce using rule 35
	'ROOT_Z'       reduce using rule 35
	'ROOT_Z_DAG'   reduce using rule 35
	'RX'           reduce using rule 35
	'RY'           reduce using rule 35
	'RZ'           reduce using rule 35
	'S'            reduce using rule 35
	'SQRT_SWAP'    reduce using rule 35
	'SQRT_SWAP_DAG'reduce using rule 35
	'SQRT_X'       reduce using rule 35
	'SQRT_X_DAG'   reduce using rule 35
	'SQRT_Y'       reduce using rule 35
	'SQRT_Y_DAG'   reduce using rule 35
	'SWAP'         reduce using rule 35
	'SWAP_THETA'   reduce using rule 35
	'S_DAG'        reduce using rule 35
	'T'            reduce using rule 35
	'T_DAG'        reduce using rule 35
	'U1'           reduce using rule 35
	'U2'           reduce using rule 35
	'U3'           reduce using rule 35
	'X'            reduce using rule 35
	'Y'            reduce using rule 35
	'Z'            reduce using rule 35
	'['            shift, and enter state 93
	']'            reduce using rule 35
	'else'         reduce using rule 35
	'of'           reduce using rule 35
	'then'         reduce using rule 35
	'}'            reduce using rule 35
	L_GateIdent    reduce using rule 35
	L_Var          reduce using rule 35
	L_Bit          reduce using rule 35


State 84

	Term1 -> 'case' . Term 'of' CaseExpression ListCaseExpression    (rule 113)

	'('            shift, and enter state 49
	'()'           shift, and enter state 50
	'FSWAP'        shift, and enter state 51
	'H'            shift, and enter state 52
	'ID'           shift, and enter state 53
	'ISWAP'        shift, and enter state 54
	'ROOT_SWAP'    shift, and enter state 55
	'ROOT_SWAP_DAG'shift, and enter state 56
	'ROOT_X'       shift, and enter state 57
	'ROOT_X_DAG'   shift, and enter state 58
	'ROOT_Y'       shift, and enter state 59
	'ROOT_Y_DAG'   shift, and enter state 60
	'ROOT_Z'       shift, and enter state 61
	'ROOT_Z_DAG'   shift, and enter state 62
	'RX'           shift, and enter state 63
	'RY'           shift, and enter state 64
	'RZ'           shift, and enter state 65
	'S'            shift, and enter state 66
	'SQRT_SWAP'    shift, and enter state 67
	'SQRT_SWAP_DAG'shift, and enter state 68
	'SQRT_X'       shift, and enter state 69
	'SQRT_X_DAG'   shift, and enter state 70
	'SQRT_Y'       shift, and enter state 71
	'SQRT_Y_DAG'   shift, and enter state 72
	'SWAP'         shift, and enter state 73
	'SWAP_THETA'   shift, and enter state 74
	'S_DAG'        shift, and enter state 75
	'T'            shift, and enter state 76
	'T_DAG'        shift, and enter state 77
	'U1'           shift, and enter state 78
	'U2'           shift, and enter state 79
	'U3'           shift, and enter state 80
	'X'            shift, and enter state 81
	'Y'            shift, and enter state 82
	'Z'            shift, and enter state 83
	'case'         shift, and enter state 84
	'if'           shift, and enter state 85
	'let'          shift, and enter state 86
	L_GateIdent    shift, and enter state 87
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 88
	L_Bit          shift, and enter state 89

	GateIdent      goto state 39
	Var            goto state 40
	Lambda         goto state 41
	Bit            goto state 42
	Gate           goto state 43
	Tuple          goto state 44
	Term3          goto state 45
	Term1          goto state 46
	Term2          goto state 47
	Term           goto state 92

State 85

	Term1 -> 'if' . Term 'then' Term 'else' Term        (rule 110)

	'('            shift, and enter state 49
	'()'           shift, and enter state 50
	'FSWAP'        shift, and enter state 51
	'H'            shift, and enter state 52
	'ID'           shift, and enter state 53
	'ISWAP'        shift, and enter state 54
	'ROOT_SWAP'    shift, and enter state 55
	'ROOT_SWAP_DAG'shift, and enter state 56
	'ROOT_X'       shift, and enter state 57
	'ROOT_X_DAG'   shift, and enter state 58
	'ROOT_Y'       shift, and enter state 59
	'ROOT_Y_DAG'   shift, and enter state 60
	'ROOT_Z'       shift, and enter state 61
	'ROOT_Z_DAG'   shift, and enter state 62
	'RX'           shift, and enter state 63
	'RY'           shift, and enter state 64
	'RZ'           shift, and enter state 65
	'S'            shift, and enter state 66
	'SQRT_SWAP'    shift, and enter state 67
	'SQRT_SWAP_DAG'shift, and enter state 68
	'SQRT_X'       shift, and enter state 69
	'SQRT_X_DAG'   shift, and enter state 70
	'SQRT_Y'       shift, and enter state 71
	'SQRT_Y_DAG'   shift, and enter state 72
	'SWAP'         shift, and enter state 73
	'SWAP_THETA'   shift, and enter state 74
	'S_DAG'        shift, and enter state 75
	'T'            shift, and enter state 76
	'T_DAG'        shift, and enter state 77
	'U1'           shift, and enter state 78
	'U2'           shift, and enter state 79
	'U3'           shift, and enter state 80
	'X'            shift, and enter state 81
	'Y'            shift, and enter state 82
	'Z'            shift, and enter state 83
	'case'         shift, and enter state 84
	'if'           shift, and enter state 85
	'let'          shift, and enter state 86
	L_GateIdent    shift, and enter state 87
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 88
	L_Bit          shift, and enter state 89

	GateIdent      goto state 39
	Var            goto state 40
	Lambda         goto state 41
	Bit            goto state 42
	Gate           goto state 43
	Tuple          goto state 44
	Term3          goto state 45
	Term1          goto state 46
	Term2          goto state 47
	Term           goto state 91

State 86

	Term1 -> 'let' . '{' LetVariable '=' Term '}' 'in' Term    (rule 111)
	Term1 -> 'let' . '{' '(' LetVariable ',' ListLetVariable ')' '=' Term '}' 'in' Term    (rule 112)

	'{'            shift, and enter state 90


State 87

	GateIdent -> L_GateIdent .                          (rule 3)

	'$'            reduce using rule 3
	'('            reduce using rule 3
	'()'           reduce using rule 3
	')'            reduce using rule 3
	','            reduce using rule 3
	'->'           reduce using rule 3
	';'            reduce using rule 3
	'FSWAP'        reduce using rule 3
	'H'            reduce using rule 3
	'ID'           reduce using rule 3
	'ISWAP'        reduce using rule 3
	'ROOT_SWAP'    reduce using rule 3
	'ROOT_SWAP_DAG'reduce using rule 3
	'ROOT_X'       reduce using rule 3
	'ROOT_X_DAG'   reduce using rule 3
	'ROOT_Y'       reduce using rule 3
	'ROOT_Y_DAG'   reduce using rule 3
	'ROOT_Z'       reduce using rule 3
	'ROOT_Z_DAG'   reduce using rule 3
	'RX'           reduce using rule 3
	'RY'           reduce using rule 3
	'RZ'           reduce using rule 3
	'S'            reduce using rule 3
	'SQRT_SWAP'    reduce using rule 3
	'SQRT_SWAP_DAG'reduce using rule 3
	'SQRT_X'       reduce using rule 3
	'SQRT_X_DAG'   reduce using rule 3
	'SQRT_Y'       reduce using rule 3
	'SQRT_Y_DAG'   reduce using rule 3
	'SWAP'         reduce using rule 3
	'SWAP_THETA'   reduce using rule 3
	'S_DAG'        reduce using rule 3
	'T'            reduce using rule 3
	'T_DAG'        reduce using rule 3
	'U1'           reduce using rule 3
	'U2'           reduce using rule 3
	'U3'           reduce using rule 3
	'X'            reduce using rule 3
	'Y'            reduce using rule 3
	'Z'            reduce using rule 3
	'['            reduce using rule 3
	']'            reduce using rule 3
	'else'         reduce using rule 3
	'of'           reduce using rule 3
	'then'         reduce using rule 3
	'}'            reduce using rule 3
	L_GateIdent    reduce using rule 3
	L_Var          reduce using rule 3
	L_Bit          reduce using rule 3


State 88

	Lambda -> L_Lambda .                                (rule 5)

	L_Var          reduce using rule 5


State 89

	Bit -> L_Bit .                                      (rule 6)

	'$'            reduce using rule 6
	'('            reduce using rule 6
	'()'           reduce using rule 6
	')'            reduce using rule 6
	','            reduce using rule 6
	'->'           reduce using rule 6
	';'            reduce using rule 6
	'FSWAP'        reduce using rule 6
	'H'            reduce using rule 6
	'ID'           reduce using rule 6
	'ISWAP'        reduce using rule 6
	'ROOT_SWAP'    reduce using rule 6
	'ROOT_SWAP_DAG'reduce using rule 6
	'ROOT_X'       reduce using rule 6
	'ROOT_X_DAG'   reduce using rule 6
	'ROOT_Y'       reduce using rule 6
	'ROOT_Y_DAG'   reduce using rule 6
	'ROOT_Z'       reduce using rule 6
	'ROOT_Z_DAG'   reduce using rule 6
	'RX'           reduce using rule 6
	'RY'           reduce using rule 6
	'RZ'           reduce using rule 6
	'S'            reduce using rule 6
	'SQRT_SWAP'    reduce using rule 6
	'SQRT_SWAP_DAG'reduce using rule 6
	'SQRT_X'       reduce using rule 6
	'SQRT_X_DAG'   reduce using rule 6
	'SQRT_Y'       reduce using rule 6
	'SQRT_Y_DAG'   reduce using rule 6
	'SWAP'         reduce using rule 6
	'SWAP_THETA'   reduce using rule 6
	'S_DAG'        reduce using rule 6
	'T'            reduce using rule 6
	'T_DAG'        reduce using rule 6
	'U1'           reduce using rule 6
	'U2'           reduce using rule 6
	'U3'           reduce using rule 6
	'X'            reduce using rule 6
	'Y'            reduce using rule 6
	'Z'            reduce using rule 6
	']'            reduce using rule 6
	'else'         reduce using rule 6
	'of'           reduce using rule 6
	'then'         reduce using rule 6
	'}'            reduce using rule 6
	L_GateIdent    reduce using rule 6
	L_Var          reduce using rule 6
	L_Bit          reduce using rule 6


State 90

	Term1 -> 'let' '{' . LetVariable '=' Term '}' 'in' Term    (rule 111)
	Term1 -> 'let' '{' . '(' LetVariable ',' ListLetVariable ')' '=' Term '}' 'in' Term    (rule 112)

	'('            shift, and enter state 181
	L_Var          shift, and enter state 8

	Var            goto state 179
	LetVariable    goto state 180

State 91

	Term1 -> 'if' Term . 'then' Term 'else' Term        (rule 110)

	'then'         shift, and enter state 178


State 92

	Term1 -> 'case' Term . 'of' CaseExpression ListCaseExpression    (rule 113)

	'of'           shift, and enter state 177


State 93

	Gate -> 'Z' '[' . ListControl ']'                   (rule 36)

	'@+'           shift, and enter state 135
	'@+i'          shift, and enter state 136
	'@-'           shift, and enter state 137
	'@-i'          shift, and enter state 138
	'@0'           shift, and enter state 139
	'@1'           shift, and enter state 140

	ControlState   goto state 132
	Control        goto state 133
	ListControl    goto state 176

State 94

	Gate -> 'Y' '[' . ListControl ']'                   (rule 34)

	'@+'           shift, and enter state 135
	'@+i'          shift, and enter state 136
	'@-'           shift, and enter state 137
	'@-i'          shift, and enter state 138
	'@0'           shift, and enter state 139
	'@1'           shift, and enter state 140

	ControlState   goto state 132
	Control        goto state 133
	ListControl    goto state 175

State 95

	Gate -> 'X' '[' . ListControl ']'                   (rule 32)

	'@+'           shift, and enter state 135
	'@+i'          shift, and enter state 136
	'@-'           shift, and enter state 137
	'@-i'          shift, and enter state 138
	'@0'           shift, and enter state 139
	'@1'           shift, and enter state 140

	ControlState   goto state 132
	Control        goto state 133
	ListControl    goto state 174

State 96

	Angle -> Double .                                   (rule 19)

	'$'            reduce using rule 19
	'('            reduce using rule 19
	'()'           reduce using rule 19
	')'            reduce using rule 19
	','            reduce using rule 19
	'->'           reduce using rule 19
	';'            reduce using rule 19
	'FSWAP'        reduce using rule 19
	'H'            reduce using rule 19
	'ID'           reduce using rule 19
	'ISWAP'        reduce using rule 19
	'ROOT_SWAP'    reduce using rule 19
	'ROOT_SWAP_DAG'reduce using rule 19
	'ROOT_X'       reduce using rule 19
	'ROOT_X_DAG'   reduce using rule 19
	'ROOT_Y'       reduce using rule 19
	'ROOT_Y_DAG'   reduce using rule 19
	'ROOT_Z'       reduce using rule 19
	'ROOT_Z_DAG'   reduce using rule 19
	'RX'           reduce using rule 19
	'RY'           reduce using rule 19
	'RZ'           reduce using rule 19
	'S'            reduce using rule 19
	'SQRT_SWAP'    reduce using rule 19
	'SQRT_SWAP_DAG'reduce using rule 19
	'SQRT_X'       reduce using rule 19
	'SQRT_X_DAG'   reduce using rule 19
	'SQRT_Y'       reduce using rule 19
	'SQRT_Y_DAG'   reduce using rule 19
	'SWAP'         reduce using rule 19
	'SWAP_THETA'   reduce using rule 19
	'S_DAG'        reduce using rule 19
	'T'            reduce using rule 19
	'T_DAG'        reduce using rule 19
	'U1'           reduce using rule 19
	'U2'           reduce using rule 19
	'U3'           reduce using rule 19
	'X'            reduce using rule 19
	'Y'            reduce using rule 19
	'Z'            reduce using rule 19
	'['            reduce using rule 19
	']'            reduce using rule 19
	'else'         reduce using rule 19
	'of'           reduce using rule 19
	'then'         reduce using rule 19
	'}'            reduce using rule 19
	L_doubl        reduce using rule 19
	L_GateIdent    reduce using rule 19
	L_Var          reduce using rule 19
	L_Bit          reduce using rule 19


State 97

	Gate -> 'U3' Angle . Angle Angle                    (rule 76)
	Gate -> 'U3' Angle . Angle Angle '[' ListControl ']'    (rule 77)

	L_doubl        shift, and enter state 2

	Double         goto state 96
	Angle          goto state 173

State 98

	Gate -> 'U2' Angle . Angle                          (rule 74)
	Gate -> 'U2' Angle . Angle '[' ListControl ']'      (rule 75)

	L_doubl        shift, and enter state 2

	Double         goto state 96
	Angle          goto state 172

State 99

	Gate -> 'U1' Angle .                                (rule 72)
	Gate -> 'U1' Angle . '[' ListControl ']'            (rule 73)

	'$'            reduce using rule 72
	'('            reduce using rule 72
	'()'           reduce using rule 72
	')'            reduce using rule 72
	','            reduce using rule 72
	'->'           reduce using rule 72
	';'            reduce using rule 72
	'FSWAP'        reduce using rule 72
	'H'            reduce using rule 72
	'ID'           reduce using rule 72
	'ISWAP'        reduce using rule 72
	'ROOT_SWAP'    reduce using rule 72
	'ROOT_SWAP_DAG'reduce using rule 72
	'ROOT_X'       reduce using rule 72
	'ROOT_X_DAG'   reduce using rule 72
	'ROOT_Y'       reduce using rule 72
	'ROOT_Y_DAG'   reduce using rule 72
	'ROOT_Z'       reduce using rule 72
	'ROOT_Z_DAG'   reduce using rule 72
	'RX'           reduce using rule 72
	'RY'           reduce using rule 72
	'RZ'           reduce using rule 72
	'S'            reduce using rule 72
	'SQRT_SWAP'    reduce using rule 72
	'SQRT_SWAP_DAG'reduce using rule 72
	'SQRT_X'       reduce using rule 72
	'SQRT_X_DAG'   reduce using rule 72
	'SQRT_Y'       reduce using rule 72
	'SQRT_Y_DAG'   reduce using rule 72
	'SWAP'         reduce using rule 72
	'SWAP_THETA'   reduce using rule 72
	'S_DAG'        reduce using rule 72
	'T'            reduce using rule 72
	'T_DAG'        reduce using rule 72
	'U1'           reduce using rule 72
	'U2'           reduce using rule 72
	'U3'           reduce using rule 72
	'X'            reduce using rule 72
	'Y'            reduce using rule 72
	'Z'            reduce using rule 72
	'['            shift, and enter state 171
	']'            reduce using rule 72
	'else'         reduce using rule 72
	'of'           reduce using rule 72
	'then'         reduce using rule 72
	'}'            reduce using rule 72
	L_GateIdent    reduce using rule 72
	L_Var          reduce using rule 72
	L_Bit          reduce using rule 72


State 100

	Gate -> 'T_DAG' '[' . ListControl ']'               (rule 57)

	'@+'           shift, and enter state 135
	'@+i'          shift, and enter state 136
	'@-'           shift, and enter state 137
	'@-i'          shift, and enter state 138
	'@0'           shift, and enter state 139
	'@1'           shift, and enter state 140

	ControlState   goto state 132
	Control        goto state 133
	ListControl    goto state 170

State 101

	Gate -> 'T' '[' . ListControl ']'                   (rule 55)

	'@+'           shift, and enter state 135
	'@+i'          shift, and enter state 136
	'@-'           shift, and enter state 137
	'@-i'          shift, and enter state 138
	'@0'           shift, and enter state 139
	'@1'           shift, and enter state 140

	ControlState   goto state 132
	Control        goto state 133
	ListControl    goto state 169

State 102

	Gate -> 'S_DAG' '[' . ListControl ']'               (rule 53)

	'@+'           shift, and enter state 135
	'@+i'          shift, and enter state 136
	'@-'           shift, and enter state 137
	'@-i'          shift, and enter state 138
	'@0'           shift, and enter state 139
	'@1'           shift, and enter state 140

	ControlState   goto state 132
	Control        goto state 133
	ListControl    goto state 168

State 103

	Gate -> 'SWAP_THETA' Angle .                        (rule 88)

	'$'            reduce using rule 88
	'('            reduce using rule 88
	'()'           reduce using rule 88
	')'            reduce using rule 88
	','            reduce using rule 88
	'->'           reduce using rule 88
	';'            reduce using rule 88
	'FSWAP'        reduce using rule 88
	'H'            reduce using rule 88
	'ID'           reduce using rule 88
	'ISWAP'        reduce using rule 88
	'ROOT_SWAP'    reduce using rule 88
	'ROOT_SWAP_DAG'reduce using rule 88
	'ROOT_X'       reduce using rule 88
	'ROOT_X_DAG'   reduce using rule 88
	'ROOT_Y'       reduce using rule 88
	'ROOT_Y_DAG'   reduce using rule 88
	'ROOT_Z'       reduce using rule 88
	'ROOT_Z_DAG'   reduce using rule 88
	'RX'           reduce using rule 88
	'RY'           reduce using rule 88
	'RZ'           reduce using rule 88
	'S'            reduce using rule 88
	'SQRT_SWAP'    reduce using rule 88
	'SQRT_SWAP_DAG'reduce using rule 88
	'SQRT_X'       reduce using rule 88
	'SQRT_X_DAG'   reduce using rule 88
	'SQRT_Y'       reduce using rule 88
	'SQRT_Y_DAG'   reduce using rule 88
	'SWAP'         reduce using rule 88
	'SWAP_THETA'   reduce using rule 88
	'S_DAG'        reduce using rule 88
	'T'            reduce using rule 88
	'T_DAG'        reduce using rule 88
	'U1'           reduce using rule 88
	'U2'           reduce using rule 88
	'U3'           reduce using rule 88
	'X'            reduce using rule 88
	'Y'            reduce using rule 88
	'Z'            reduce using rule 88
	']'            reduce using rule 88
	'else'         reduce using rule 88
	'of'           reduce using rule 88
	'then'         reduce using rule 88
	'}'            reduce using rule 88
	L_GateIdent    reduce using rule 88
	L_Var          reduce using rule 88
	L_Bit          reduce using rule 88


State 104

	Gate -> 'SWAP' '[' . ListControl ']'                (rule 79)

	'@+'           shift, and enter state 135
	'@+i'          shift, and enter state 136
	'@-'           shift, and enter state 137
	'@-i'          shift, and enter state 138
	'@0'           shift, and enter state 139
	'@1'           shift, and enter state 140

	ControlState   goto state 132
	Control        goto state 133
	ListControl    goto state 167

State 105

	Gate -> 'SQRT_Y_DAG' '[' . ListControl ']'          (rule 65)

	'@+'           shift, and enter state 135
	'@+i'          shift, and enter state 136
	'@-'           shift, and enter state 137
	'@-i'          shift, and enter state 138
	'@0'           shift, and enter state 139
	'@1'           shift, and enter state 140

	ControlState   goto state 132
	Control        goto state 133
	ListControl    goto state 166

State 106

	Gate -> 'SQRT_Y' '[' . ListControl ']'              (rule 63)

	'@+'           shift, and enter state 135
	'@+i'          shift, and enter state 136
	'@-'           shift, and enter state 137
	'@-i'          shift, and enter state 138
	'@0'           shift, and enter state 139
	'@1'           shift, and enter state 140

	ControlState   goto state 132
	Control        goto state 133
	ListControl    goto state 165

State 107

	Gate -> 'SQRT_X_DAG' '[' . ListControl ']'          (rule 61)

	'@+'           shift, and enter state 135
	'@+i'          shift, and enter state 136
	'@-'           shift, and enter state 137
	'@-i'          shift, and enter state 138
	'@0'           shift, and enter state 139
	'@1'           shift, and enter state 140

	ControlState   goto state 132
	Control        goto state 133
	ListControl    goto state 164

State 108

	Gate -> 'SQRT_X' '[' . ListControl ']'              (rule 59)

	'@+'           shift, and enter state 135
	'@+i'          shift, and enter state 136
	'@-'           shift, and enter state 137
	'@-i'          shift, and enter state 138
	'@0'           shift, and enter state 139
	'@1'           shift, and enter state 140

	ControlState   goto state 132
	Control        goto state 133
	ListControl    goto state 163

State 109

	Gate -> 'SQRT_SWAP_DAG' '[' . ListControl ']'       (rule 83)

	'@+'           shift, and enter state 135
	'@+i'          shift, and enter state 136
	'@-'           shift, and enter state 137
	'@-i'          shift, and enter state 138
	'@0'           shift, and enter state 139
	'@1'           shift, and enter state 140

	ControlState   goto state 132
	Control        goto state 133
	ListControl    goto state 162

State 110

	Gate -> 'SQRT_SWAP' '[' . ListControl ']'           (rule 81)

	'@+'           shift, and enter state 135
	'@+i'          shift, and enter state 136
	'@-'           shift, and enter state 137
	'@-i'          shift, and enter state 138
	'@0'           shift, and enter state 139
	'@1'           shift, and enter state 140

	ControlState   goto state 132
	Control        goto state 133
	ListControl    goto state 161

State 111

	Gate -> 'S' '[' . ListControl ']'                   (rule 51)

	'@+'           shift, and enter state 135
	'@+i'          shift, and enter state 136
	'@-'           shift, and enter state 137
	'@-i'          shift, and enter state 138
	'@0'           shift, and enter state 139
	'@1'           shift, and enter state 140

	ControlState   goto state 132
	Control        goto state 133
	ListControl    goto state 160

State 112

	Gate -> 'RZ' Angle .                                (rule 70)
	Gate -> 'RZ' Angle . '[' ListControl ']'            (rule 71)

	'$'            reduce using rule 70
	'('            reduce using rule 70
	'()'           reduce using rule 70
	')'            reduce using rule 70
	','            reduce using rule 70
	'->'           reduce using rule 70
	';'            reduce using rule 70
	'FSWAP'        reduce using rule 70
	'H'            reduce using rule 70
	'ID'           reduce using rule 70
	'ISWAP'        reduce using rule 70
	'ROOT_SWAP'    reduce using rule 70
	'ROOT_SWAP_DAG'reduce using rule 70
	'ROOT_X'       reduce using rule 70
	'ROOT_X_DAG'   reduce using rule 70
	'ROOT_Y'       reduce using rule 70
	'ROOT_Y_DAG'   reduce using rule 70
	'ROOT_Z'       reduce using rule 70
	'ROOT_Z_DAG'   reduce using rule 70
	'RX'           reduce using rule 70
	'RY'           reduce using rule 70
	'RZ'           reduce using rule 70
	'S'            reduce using rule 70
	'SQRT_SWAP'    reduce using rule 70
	'SQRT_SWAP_DAG'reduce using rule 70
	'SQRT_X'       reduce using rule 70
	'SQRT_X_DAG'   reduce using rule 70
	'SQRT_Y'       reduce using rule 70
	'SQRT_Y_DAG'   reduce using rule 70
	'SWAP'         reduce using rule 70
	'SWAP_THETA'   reduce using rule 70
	'S_DAG'        reduce using rule 70
	'T'            reduce using rule 70
	'T_DAG'        reduce using rule 70
	'U1'           reduce using rule 70
	'U2'           reduce using rule 70
	'U3'           reduce using rule 70
	'X'            reduce using rule 70
	'Y'            reduce using rule 70
	'Z'            reduce using rule 70
	'['            shift, and enter state 159
	']'            reduce using rule 70
	'else'         reduce using rule 70
	'of'           reduce using rule 70
	'then'         reduce using rule 70
	'}'            reduce using rule 70
	L_GateIdent    reduce using rule 70
	L_Var          reduce using rule 70
	L_Bit          reduce using rule 70


State 113

	Gate -> 'RY' Angle .                                (rule 68)
	Gate -> 'RY' Angle . '[' ListControl ']'            (rule 69)

	'$'            reduce using rule 68
	'('            reduce using rule 68
	'()'           reduce using rule 68
	')'            reduce using rule 68
	','            reduce using rule 68
	'->'           reduce using rule 68
	';'            reduce using rule 68
	'FSWAP'        reduce using rule 68
	'H'            reduce using rule 68
	'ID'           reduce using rule 68
	'ISWAP'        reduce using rule 68
	'ROOT_SWAP'    reduce using rule 68
	'ROOT_SWAP_DAG'reduce using rule 68
	'ROOT_X'       reduce using rule 68
	'ROOT_X_DAG'   reduce using rule 68
	'ROOT_Y'       reduce using rule 68
	'ROOT_Y_DAG'   reduce using rule 68
	'ROOT_Z'       reduce using rule 68
	'ROOT_Z_DAG'   reduce using rule 68
	'RX'           reduce using rule 68
	'RY'           reduce using rule 68
	'RZ'           reduce using rule 68
	'S'            reduce using rule 68
	'SQRT_SWAP'    reduce using rule 68
	'SQRT_SWAP_DAG'reduce using rule 68
	'SQRT_X'       reduce using rule 68
	'SQRT_X_DAG'   reduce using rule 68
	'SQRT_Y'       reduce using rule 68
	'SQRT_Y_DAG'   reduce using rule 68
	'SWAP'         reduce using rule 68
	'SWAP_THETA'   reduce using rule 68
	'S_DAG'        reduce using rule 68
	'T'            reduce using rule 68
	'T_DAG'        reduce using rule 68
	'U1'           reduce using rule 68
	'U2'           reduce using rule 68
	'U3'           reduce using rule 68
	'X'            reduce using rule 68
	'Y'            reduce using rule 68
	'Z'            reduce using rule 68
	'['            shift, and enter state 158
	']'            reduce using rule 68
	'else'         reduce using rule 68
	'of'           reduce using rule 68
	'then'         reduce using rule 68
	'}'            reduce using rule 68
	L_GateIdent    reduce using rule 68
	L_Var          reduce using rule 68
	L_Bit          reduce using rule 68


State 114

	Gate -> 'RX' Angle .                                (rule 66)
	Gate -> 'RX' Angle . '[' ListControl ']'            (rule 67)

	'$'            reduce using rule 66
	'('            reduce using rule 66
	'()'           reduce using rule 66
	')'            reduce using rule 66
	','            reduce using rule 66
	'->'           reduce using rule 66
	';'            reduce using rule 66
	'FSWAP'        reduce using rule 66
	'H'            reduce using rule 66
	'ID'           reduce using rule 66
	'ISWAP'        reduce using rule 66
	'ROOT_SWAP'    reduce using rule 66
	'ROOT_SWAP_DAG'reduce using rule 66
	'ROOT_X'       reduce using rule 66
	'ROOT_X_DAG'   reduce using rule 66
	'ROOT_Y'       reduce using rule 66
	'ROOT_Y_DAG'   reduce using rule 66
	'ROOT_Z'       reduce using rule 66
	'ROOT_Z_DAG'   reduce using rule 66
	'RX'           reduce using rule 66
	'RY'           reduce using rule 66
	'RZ'           reduce using rule 66
	'S'            reduce using rule 66
	'SQRT_SWAP'    reduce using rule 66
	'SQRT_SWAP_DAG'reduce using rule 66
	'SQRT_X'       reduce using rule 66
	'SQRT_X_DAG'   reduce using rule 66
	'SQRT_Y'       reduce using rule 66
	'SQRT_Y_DAG'   reduce using rule 66
	'SWAP'         reduce using rule 66
	'SWAP_THETA'   reduce using rule 66
	'S_DAG'        reduce using rule 66
	'T'            reduce using rule 66
	'T_DAG'        reduce using rule 66
	'U1'           reduce using rule 66
	'U2'           reduce using rule 66
	'U3'           reduce using rule 66
	'X'            reduce using rule 66
	'Y'            reduce using rule 66
	'Z'            reduce using rule 66
	'['            shift, and enter state 157
	']'            reduce using rule 66
	'else'         reduce using rule 66
	'of'           reduce using rule 66
	'then'         reduce using rule 66
	'}'            reduce using rule 66
	L_GateIdent    reduce using rule 66
	L_Var          reduce using rule 66
	L_Bit          reduce using rule 66


State 115

	Gate -> 'ROOT_Z_DAG' Integer .                      (rule 48)
	Gate -> 'ROOT_Z_DAG' Integer . '[' ListControl ']'    (rule 49)

	'$'            reduce using rule 48
	'('            reduce using rule 48
	'()'           reduce using rule 48
	')'            reduce using rule 48
	','            reduce using rule 48
	'->'           reduce using rule 48
	';'            reduce using rule 48
	'FSWAP'        reduce using rule 48
	'H'            reduce using rule 48
	'ID'           reduce using rule 48
	'ISWAP'        reduce using rule 48
	'ROOT_SWAP'    reduce using rule 48
	'ROOT_SWAP_DAG'reduce using rule 48
	'ROOT_X'       reduce using rule 48
	'ROOT_X_DAG'   reduce using rule 48
	'ROOT_Y'       reduce using rule 48
	'ROOT_Y_DAG'   reduce using rule 48
	'ROOT_Z'       reduce using rule 48
	'ROOT_Z_DAG'   reduce using rule 48
	'RX'           reduce using rule 48
	'RY'           reduce using rule 48
	'RZ'           reduce using rule 48
	'S'            reduce using rule 48
	'SQRT_SWAP'    reduce using rule 48
	'SQRT_SWAP_DAG'reduce using rule 48
	'SQRT_X'       reduce using rule 48
	'SQRT_X_DAG'   reduce using rule 48
	'SQRT_Y'       reduce using rule 48
	'SQRT_Y_DAG'   reduce using rule 48
	'SWAP'         reduce using rule 48
	'SWAP_THETA'   reduce using rule 48
	'S_DAG'        reduce using rule 48
	'T'            reduce using rule 48
	'T_DAG'        reduce using rule 48
	'U1'           reduce using rule 48
	'U2'           reduce using rule 48
	'U3'           reduce using rule 48
	'X'            reduce using rule 48
	'Y'            reduce using rule 48
	'Z'            reduce using rule 48
	'['            shift, and enter state 156
	']'            reduce using rule 48
	'else'         reduce using rule 48
	'of'           reduce using rule 48
	'then'         reduce using rule 48
	'}'            reduce using rule 48
	L_GateIdent    reduce using rule 48
	L_Var          reduce using rule 48
	L_Bit          reduce using rule 48


State 116

	Gate -> 'ROOT_Z' Integer .                          (rule 46)
	Gate -> 'ROOT_Z' Integer . '[' ListControl ']'      (rule 47)

	'$'            reduce using rule 46
	'('            reduce using rule 46
	'()'           reduce using rule 46
	')'            reduce using rule 46
	','            reduce using rule 46
	'->'           reduce using rule 46
	';'            reduce using rule 46
	'FSWAP'        reduce using rule 46
	'H'            reduce using rule 46
	'ID'           reduce using rule 46
	'ISWAP'        reduce using rule 46
	'ROOT_SWAP'    reduce using rule 46
	'ROOT_SWAP_DAG'reduce using rule 46
	'ROOT_X'       reduce using rule 46
	'ROOT_X_DAG'   reduce using rule 46
	'ROOT_Y'       reduce using rule 46
	'ROOT_Y_DAG'   reduce using rule 46
	'ROOT_Z'       reduce using rule 46
	'ROOT_Z_DAG'   reduce using rule 46
	'RX'           reduce using rule 46
	'RY'           reduce using rule 46
	'RZ'           reduce using rule 46
	'S'            reduce using rule 46
	'SQRT_SWAP'    reduce using rule 46
	'SQRT_SWAP_DAG'reduce using rule 46
	'SQRT_X'       reduce using rule 46
	'SQRT_X_DAG'   reduce using rule 46
	'SQRT_Y'       reduce using rule 46
	'SQRT_Y_DAG'   reduce using rule 46
	'SWAP'         reduce using rule 46
	'SWAP_THETA'   reduce using rule 46
	'S_DAG'        reduce using rule 46
	'T'            reduce using rule 46
	'T_DAG'        reduce using rule 46
	'U1'           reduce using rule 46
	'U2'           reduce using rule 46
	'U3'           reduce using rule 46
	'X'            reduce using rule 46
	'Y'            reduce using rule 46
	'Z'            reduce using rule 46
	'['            shift, and enter state 155
	']'            reduce using rule 46
	'else'         reduce using rule 46
	'of'           reduce using rule 46
	'then'         reduce using rule 46
	'}'            reduce using rule 46
	L_GateIdent    reduce using rule 46
	L_Var          reduce using rule 46
	L_Bit          reduce using rule 46


State 117

	Gate -> 'ROOT_Y_DAG' Integer .                      (rule 44)
	Gate -> 'ROOT_Y_DAG' Integer . '[' ListControl ']'    (rule 45)

	'$'            reduce using rule 44
	'('            reduce using rule 44
	'()'           reduce using rule 44
	')'            reduce using rule 44
	','            reduce using rule 44
	'->'           reduce using rule 44
	';'            reduce using rule 44
	'FSWAP'        reduce using rule 44
	'H'            reduce using rule 44
	'ID'           reduce using rule 44
	'ISWAP'        reduce using rule 44
	'ROOT_SWAP'    reduce using rule 44
	'ROOT_SWAP_DAG'reduce using rule 44
	'ROOT_X'       reduce using rule 44
	'ROOT_X_DAG'   reduce using rule 44
	'ROOT_Y'       reduce using rule 44
	'ROOT_Y_DAG'   reduce using rule 44
	'ROOT_Z'       reduce using rule 44
	'ROOT_Z_DAG'   reduce using rule 44
	'RX'           reduce using rule 44
	'RY'           reduce using rule 44
	'RZ'           reduce using rule 44
	'S'            reduce using rule 44
	'SQRT_SWAP'    reduce using rule 44
	'SQRT_SWAP_DAG'reduce using rule 44
	'SQRT_X'       reduce using rule 44
	'SQRT_X_DAG'   reduce using rule 44
	'SQRT_Y'       reduce using rule 44
	'SQRT_Y_DAG'   reduce using rule 44
	'SWAP'         reduce using rule 44
	'SWAP_THETA'   reduce using rule 44
	'S_DAG'        reduce using rule 44
	'T'            reduce using rule 44
	'T_DAG'        reduce using rule 44
	'U1'           reduce using rule 44
	'U2'           reduce using rule 44
	'U3'           reduce using rule 44
	'X'            reduce using rule 44
	'Y'            reduce using rule 44
	'Z'            reduce using rule 44
	'['            shift, and enter state 154
	']'            reduce using rule 44
	'else'         reduce using rule 44
	'of'           reduce using rule 44
	'then'         reduce using rule 44
	'}'            reduce using rule 44
	L_GateIdent    reduce using rule 44
	L_Var          reduce using rule 44
	L_Bit          reduce using rule 44


State 118

	Gate -> 'ROOT_Y' Integer .                          (rule 42)
	Gate -> 'ROOT_Y' Integer . '[' ListControl ']'      (rule 43)

	'$'            reduce using rule 42
	'('            reduce using rule 42
	'()'           reduce using rule 42
	')'            reduce using rule 42
	','            reduce using rule 42
	'->'           reduce using rule 42
	';'            reduce using rule 42
	'FSWAP'        reduce using rule 42
	'H'            reduce using rule 42
	'ID'           reduce using rule 42
	'ISWAP'        reduce using rule 42
	'ROOT_SWAP'    reduce using rule 42
	'ROOT_SWAP_DAG'reduce using rule 42
	'ROOT_X'       reduce using rule 42
	'ROOT_X_DAG'   reduce using rule 42
	'ROOT_Y'       reduce using rule 42
	'ROOT_Y_DAG'   reduce using rule 42
	'ROOT_Z'       reduce using rule 42
	'ROOT_Z_DAG'   reduce using rule 42
	'RX'           reduce using rule 42
	'RY'           reduce using rule 42
	'RZ'           reduce using rule 42
	'S'            reduce using rule 42
	'SQRT_SWAP'    reduce using rule 42
	'SQRT_SWAP_DAG'reduce using rule 42
	'SQRT_X'       reduce using rule 42
	'SQRT_X_DAG'   reduce using rule 42
	'SQRT_Y'       reduce using rule 42
	'SQRT_Y_DAG'   reduce using rule 42
	'SWAP'         reduce using rule 42
	'SWAP_THETA'   reduce using rule 42
	'S_DAG'        reduce using rule 42
	'T'            reduce using rule 42
	'T_DAG'        reduce using rule 42
	'U1'           reduce using rule 42
	'U2'           reduce using rule 42
	'U3'           reduce using rule 42
	'X'            reduce using rule 42
	'Y'            reduce using rule 42
	'Z'            reduce using rule 42
	'['            shift, and enter state 153
	']'            reduce using rule 42
	'else'         reduce using rule 42
	'of'           reduce using rule 42
	'then'         reduce using rule 42
	'}'            reduce using rule 42
	L_GateIdent    reduce using rule 42
	L_Var          reduce using rule 42
	L_Bit          reduce using rule 42


State 119

	Gate -> 'ROOT_X_DAG' Integer .                      (rule 40)
	Gate -> 'ROOT_X_DAG' Integer . '[' ListControl ']'    (rule 41)

	'$'            reduce using rule 40
	'('            reduce using rule 40
	'()'           reduce using rule 40
	')'            reduce using rule 40
	','            reduce using rule 40
	'->'           reduce using rule 40
	';'            reduce using rule 40
	'FSWAP'        reduce using rule 40
	'H'            reduce using rule 40
	'ID'           reduce using rule 40
	'ISWAP'        reduce using rule 40
	'ROOT_SWAP'    reduce using rule 40
	'ROOT_SWAP_DAG'reduce using rule 40
	'ROOT_X'       reduce using rule 40
	'ROOT_X_DAG'   reduce using rule 40
	'ROOT_Y'       reduce using rule 40
	'ROOT_Y_DAG'   reduce using rule 40
	'ROOT_Z'       reduce using rule 40
	'ROOT_Z_DAG'   reduce using rule 40
	'RX'           reduce using rule 40
	'RY'           reduce using rule 40
	'RZ'           reduce using rule 40
	'S'            reduce using rule 40
	'SQRT_SWAP'    reduce using rule 40
	'SQRT_SWAP_DAG'reduce using rule 40
	'SQRT_X'       reduce using rule 40
	'SQRT_X_DAG'   reduce using rule 40
	'SQRT_Y'       reduce using rule 40
	'SQRT_Y_DAG'   reduce using rule 40
	'SWAP'         reduce using rule 40
	'SWAP_THETA'   reduce using rule 40
	'S_DAG'        reduce using rule 40
	'T'            reduce using rule 40
	'T_DAG'        reduce using rule 40
	'U1'           reduce using rule 40
	'U2'           reduce using rule 40
	'U3'           reduce using rule 40
	'X'            reduce using rule 40
	'Y'            reduce using rule 40
	'Z'            reduce using rule 40
	'['            shift, and enter state 152
	']'            reduce using rule 40
	'else'         reduce using rule 40
	'of'           reduce using rule 40
	'then'         reduce using rule 40
	'}'            reduce using rule 40
	L_GateIdent    reduce using rule 40
	L_Var          reduce using rule 40
	L_Bit          reduce using rule 40


State 120

	Gate -> 'ROOT_X' Integer .                          (rule 38)
	Gate -> 'ROOT_X' Integer . '[' ListControl ']'      (rule 39)

	'$'            reduce using rule 38
	'('            reduce using rule 38
	'()'           reduce using rule 38
	')'            reduce using rule 38
	','            reduce using rule 38
	'->'           reduce using rule 38
	';'            reduce using rule 38
	'FSWAP'        reduce using rule 38
	'H'            reduce using rule 38
	'ID'           reduce using rule 38
	'ISWAP'        reduce using rule 38
	'ROOT_SWAP'    reduce using rule 38
	'ROOT_SWAP_DAG'reduce using rule 38
	'ROOT_X'       reduce using rule 38
	'ROOT_X_DAG'   reduce using rule 38
	'ROOT_Y'       reduce using rule 38
	'ROOT_Y_DAG'   reduce using rule 38
	'ROOT_Z'       reduce using rule 38
	'ROOT_Z_DAG'   reduce using rule 38
	'RX'           reduce using rule 38
	'RY'           reduce using rule 38
	'RZ'           reduce using rule 38
	'S'            reduce using rule 38
	'SQRT_SWAP'    reduce using rule 38
	'SQRT_SWAP_DAG'reduce using rule 38
	'SQRT_X'       reduce using rule 38
	'SQRT_X_DAG'   reduce using rule 38
	'SQRT_Y'       reduce using rule 38
	'SQRT_Y_DAG'   reduce using rule 38
	'SWAP'         reduce using rule 38
	'SWAP_THETA'   reduce using rule 38
	'S_DAG'        reduce using rule 38
	'T'            reduce using rule 38
	'T_DAG'        reduce using rule 38
	'U1'           reduce using rule 38
	'U2'           reduce using rule 38
	'U3'           reduce using rule 38
	'X'            reduce using rule 38
	'Y'            reduce using rule 38
	'Z'            reduce using rule 38
	'['            shift, and enter state 151
	']'            reduce using rule 38
	'else'         reduce using rule 38
	'of'           reduce using rule 38
	'then'         reduce using rule 38
	'}'            reduce using rule 38
	L_GateIdent    reduce using rule 38
	L_Var          reduce using rule 38
	L_Bit          reduce using rule 38


State 121

	Gate -> 'ROOT_SWAP_DAG' Integer .                   (rule 91)
	Gate -> 'ROOT_SWAP_DAG' Integer . '[' ListControl ']'    (rule 92)

	'$'            reduce using rule 91
	'('            reduce using rule 91
	'()'           reduce using rule 91
	')'            reduce using rule 91
	','            reduce using rule 91
	'->'           reduce using rule 91
	';'            reduce using rule 91
	'FSWAP'        reduce using rule 91
	'H'            reduce using rule 91
	'ID'           reduce using rule 91
	'ISWAP'        reduce using rule 91
	'ROOT_SWAP'    reduce using rule 91
	'ROOT_SWAP_DAG'reduce using rule 91
	'ROOT_X'       reduce using rule 91
	'ROOT_X_DAG'   reduce using rule 91
	'ROOT_Y'       reduce using rule 91
	'ROOT_Y_DAG'   reduce using rule 91
	'ROOT_Z'       reduce using rule 91
	'ROOT_Z_DAG'   reduce using rule 91
	'RX'           reduce using rule 91
	'RY'           reduce using rule 91
	'RZ'           reduce using rule 91
	'S'            reduce using rule 91
	'SQRT_SWAP'    reduce using rule 91
	'SQRT_SWAP_DAG'reduce using rule 91
	'SQRT_X'       reduce using rule 91
	'SQRT_X_DAG'   reduce using rule 91
	'SQRT_Y'       reduce using rule 91
	'SQRT_Y_DAG'   reduce using rule 91
	'SWAP'         reduce using rule 91
	'SWAP_THETA'   reduce using rule 91
	'S_DAG'        reduce using rule 91
	'T'            reduce using rule 91
	'T_DAG'        reduce using rule 91
	'U1'           reduce using rule 91
	'U2'           reduce using rule 91
	'U3'           reduce using rule 91
	'X'            reduce using rule 91
	'Y'            reduce using rule 91
	'Z'            reduce using rule 91
	'['            shift, and enter state 150
	']'            reduce using rule 91
	'else'         reduce using rule 91
	'of'           reduce using rule 91
	'then'         reduce using rule 91
	'}'            reduce using rule 91
	L_GateIdent    reduce using rule 91
	L_Var          reduce using rule 91
	L_Bit          reduce using rule 91


State 122

	Gate -> 'ROOT_SWAP' Integer .                       (rule 89)
	Gate -> 'ROOT_SWAP' Integer . '[' ListControl ']'    (rule 90)

	'$'            reduce using rule 89
	'('            reduce using rule 89
	'()'           reduce using rule 89
	')'            reduce using rule 89
	','            reduce using rule 89
	'->'           reduce using rule 89
	';'            reduce using rule 89
	'FSWAP'        reduce using rule 89
	'H'            reduce using rule 89
	'ID'           reduce using rule 89
	'ISWAP'        reduce using rule 89
	'ROOT_SWAP'    reduce using rule 89
	'ROOT_SWAP_DAG'reduce using rule 89
	'ROOT_X'       reduce using rule 89
	'ROOT_X_DAG'   reduce using rule 89
	'ROOT_Y'       reduce using rule 89
	'ROOT_Y_DAG'   reduce using rule 89
	'ROOT_Z'       reduce using rule 89
	'ROOT_Z_DAG'   reduce using rule 89
	'RX'           reduce using rule 89
	'RY'           reduce using rule 89
	'RZ'           reduce using rule 89
	'S'            reduce using rule 89
	'SQRT_SWAP'    reduce using rule 89
	'SQRT_SWAP_DAG'reduce using rule 89
	'SQRT_X'       reduce using rule 89
	'SQRT_X_DAG'   reduce using rule 89
	'SQRT_Y'       reduce using rule 89
	'SQRT_Y_DAG'   reduce using rule 89
	'SWAP'         reduce using rule 89
	'SWAP_THETA'   reduce using rule 89
	'S_DAG'        reduce using rule 89
	'T'            reduce using rule 89
	'T_DAG'        reduce using rule 89
	'U1'           reduce using rule 89
	'U2'           reduce using rule 89
	'U3'           reduce using rule 89
	'X'            reduce using rule 89
	'Y'            reduce using rule 89
	'Z'            reduce using rule 89
	'['            shift, and enter state 149
	']'            reduce using rule 89
	'else'         reduce using rule 89
	'of'           reduce using rule 89
	'then'         reduce using rule 89
	'}'            reduce using rule 89
	L_GateIdent    reduce using rule 89
	L_Var          reduce using rule 89
	L_Bit          reduce using rule 89


State 123

	Gate -> 'ISWAP' '[' . ListControl ']'               (rule 85)

	'@+'           shift, and enter state 135
	'@+i'          shift, and enter state 136
	'@-'           shift, and enter state 137
	'@-i'          shift, and enter state 138
	'@0'           shift, and enter state 139
	'@1'           shift, and enter state 140

	ControlState   goto state 132
	Control        goto state 133
	ListControl    goto state 148

State 124

	Gate -> 'H' '[' . ListControl ']'                   (rule 30)

	'@+'           shift, and enter state 135
	'@+i'          shift, and enter state 136
	'@-'           shift, and enter state 137
	'@-i'          shift, and enter state 138
	'@0'           shift, and enter state 139
	'@1'           shift, and enter state 140

	ControlState   goto state 132
	Control        goto state 133
	ListControl    goto state 147

State 125

	Gate -> 'FSWAP' '[' . ListControl ']'               (rule 87)

	'@+'           shift, and enter state 135
	'@+i'          shift, and enter state 136
	'@-'           shift, and enter state 137
	'@-i'          shift, and enter state 138
	'@0'           shift, and enter state 139
	'@1'           shift, and enter state 140

	ControlState   goto state 132
	Control        goto state 133
	ListControl    goto state 146

State 126

	Tuple -> '(' Term . ',' ListTerm ')'                (rule 101)
	Term3 -> '(' Term . ')'                             (rule 109)

	')'            shift, and enter state 144
	','            shift, and enter state 145


State 127

	Term2 -> Term2 Term3 .                              (rule 117)

	'$'            reduce using rule 117
	'('            reduce using rule 117
	'()'           reduce using rule 117
	')'            reduce using rule 117
	','            reduce using rule 117
	'->'           reduce using rule 117
	';'            reduce using rule 117
	'FSWAP'        reduce using rule 117
	'H'            reduce using rule 117
	'ID'           reduce using rule 117
	'ISWAP'        reduce using rule 117
	'ROOT_SWAP'    reduce using rule 117
	'ROOT_SWAP_DAG'reduce using rule 117
	'ROOT_X'       reduce using rule 117
	'ROOT_X_DAG'   reduce using rule 117
	'ROOT_Y'       reduce using rule 117
	'ROOT_Y_DAG'   reduce using rule 117
	'ROOT_Z'       reduce using rule 117
	'ROOT_Z_DAG'   reduce using rule 117
	'RX'           reduce using rule 117
	'RY'           reduce using rule 117
	'RZ'           reduce using rule 117
	'S'            reduce using rule 117
	'SQRT_SWAP'    reduce using rule 117
	'SQRT_SWAP_DAG'reduce using rule 117
	'SQRT_X'       reduce using rule 117
	'SQRT_X_DAG'   reduce using rule 117
	'SQRT_Y'       reduce using rule 117
	'SQRT_Y_DAG'   reduce using rule 117
	'SWAP'         reduce using rule 117
	'SWAP_THETA'   reduce using rule 117
	'S_DAG'        reduce using rule 117
	'T'            reduce using rule 117
	'T_DAG'        reduce using rule 117
	'U1'           reduce using rule 117
	'U2'           reduce using rule 117
	'U3'           reduce using rule 117
	'X'            reduce using rule 117
	'Y'            reduce using rule 117
	'Z'            reduce using rule 117
	']'            reduce using rule 117
	'else'         reduce using rule 117
	'of'           reduce using rule 117
	'then'         reduce using rule 117
	'}'            reduce using rule 117
	L_GateIdent    reduce using rule 117
	L_Var          reduce using rule 117
	L_Bit          reduce using rule 117


State 128

	Term1 -> Term2 '$' . Term1                          (rule 115)

	'('            shift, and enter state 49
	'()'           shift, and enter state 50
	'FSWAP'        shift, and enter state 51
	'H'            shift, and enter state 52
	'ID'           shift, and enter state 53
	'ISWAP'        shift, and enter state 54
	'ROOT_SWAP'    shift, and enter state 55
	'ROOT_SWAP_DAG'shift, and enter state 56
	'ROOT_X'       shift, and enter state 57
	'ROOT_X_DAG'   shift, and enter state 58
	'ROOT_Y'       shift, and enter state 59
	'ROOT_Y_DAG'   shift, and enter state 60
	'ROOT_Z'       shift, and enter state 61
	'ROOT_Z_DAG'   shift, and enter state 62
	'RX'           shift, and enter state 63
	'RY'           shift, and enter state 64
	'RZ'           shift, and enter state 65
	'S'            shift, and enter state 66
	'SQRT_SWAP'    shift, and enter state 67
	'SQRT_SWAP_DAG'shift, and enter state 68
	'SQRT_X'       shift, and enter state 69
	'SQRT_X_DAG'   shift, and enter state 70
	'SQRT_Y'       shift, and enter state 71
	'SQRT_Y_DAG'   shift, and enter state 72
	'SWAP'         shift, and enter state 73
	'SWAP_THETA'   shift, and enter state 74
	'S_DAG'        shift, and enter state 75
	'T'            shift, and enter state 76
	'T_DAG'        shift, and enter state 77
	'U1'           shift, and enter state 78
	'U2'           shift, and enter state 79
	'U3'           shift, and enter state 80
	'X'            shift, and enter state 81
	'Y'            shift, and enter state 82
	'Z'            shift, and enter state 83
	'case'         shift, and enter state 84
	'if'           shift, and enter state 85
	'let'          shift, and enter state 86
	L_GateIdent    shift, and enter state 87
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 88
	L_Bit          shift, and enter state 89

	GateIdent      goto state 39
	Var            goto state 40
	Lambda         goto state 41
	Bit            goto state 42
	Gate           goto state 43
	Tuple          goto state 44
	Term3          goto state 45
	Term1          goto state 143
	Term2          goto state 47

State 129

	LambdaVariable -> Var .                             (rule 98)

	'->'           reduce using rule 98
	L_Var          reduce using rule 98


State 130

	Term1 -> Lambda LambdaVariable . ListLambdaVariable '->' Term    (rule 114)

	'->'           reduce using rule 99
	L_Var          shift, and enter state 8

	Var            goto state 129
	LambdaVariable goto state 141
	ListLambdaVariablegoto state 142

State 131

	Gate -> GateIdent '[' . ListControl ']'             (rule 94)

	'@+'           shift, and enter state 135
	'@+i'          shift, and enter state 136
	'@-'           shift, and enter state 137
	'@-i'          shift, and enter state 138
	'@0'           shift, and enter state 139
	'@1'           shift, and enter state 140

	ControlState   goto state 132
	Control        goto state 133
	ListControl    goto state 134

State 132

	Control -> ControlState . '->' Term                 (rule 26)

	'->'           shift, and enter state 224


State 133

	ListControl -> Control .                            (rule 27)
	ListControl -> Control . ',' ListControl            (rule 28)

	','            shift, and enter state 223
	']'            reduce using rule 27


State 134

	Gate -> GateIdent '[' ListControl . ']'             (rule 94)

	']'            shift, and enter state 222


State 135

	ControlState -> '@+' .                              (rule 22)

	'->'           reduce using rule 22


State 136

	ControlState -> '@+i' .                             (rule 24)

	'->'           reduce using rule 24


State 137

	ControlState -> '@-' .                              (rule 23)

	'->'           reduce using rule 23


State 138

	ControlState -> '@-i' .                             (rule 25)

	'->'           reduce using rule 25


State 139

	ControlState -> '@0' .                              (rule 20)

	'->'           reduce using rule 20


State 140

	ControlState -> '@1' .                              (rule 21)

	'->'           reduce using rule 21


State 141

	ListLambdaVariable -> LambdaVariable . ListLambdaVariable    (rule 100)

	'->'           reduce using rule 99
	L_Var          shift, and enter state 8

	Var            goto state 129
	LambdaVariable goto state 141
	ListLambdaVariablegoto state 221

State 142

	Term1 -> Lambda LambdaVariable ListLambdaVariable . '->' Term    (rule 114)

	'->'           shift, and enter state 220


State 143

	Term1 -> Term2 '$' Term1 .                          (rule 115)

	')'            reduce using rule 115
	','            reduce using rule 115
	'->'           reduce using rule 115
	';'            reduce using rule 115
	']'            reduce using rule 115
	'else'         reduce using rule 115
	'of'           reduce using rule 115
	'then'         reduce using rule 115
	'}'            reduce using rule 115


State 144

	Term3 -> '(' Term ')' .                             (rule 109)

	'$'            reduce using rule 109
	'('            reduce using rule 109
	'()'           reduce using rule 109
	')'            reduce using rule 109
	','            reduce using rule 109
	'->'           reduce using rule 109
	';'            reduce using rule 109
	'FSWAP'        reduce using rule 109
	'H'            reduce using rule 109
	'ID'           reduce using rule 109
	'ISWAP'        reduce using rule 109
	'ROOT_SWAP'    reduce using rule 109
	'ROOT_SWAP_DAG'reduce using rule 109
	'ROOT_X'       reduce using rule 109
	'ROOT_X_DAG'   reduce using rule 109
	'ROOT_Y'       reduce using rule 109
	'ROOT_Y_DAG'   reduce using rule 109
	'ROOT_Z'       reduce using rule 109
	'ROOT_Z_DAG'   reduce using rule 109
	'RX'           reduce using rule 109
	'RY'           reduce using rule 109
	'RZ'           reduce using rule 109
	'S'            reduce using rule 109
	'SQRT_SWAP'    reduce using rule 109
	'SQRT_SWAP_DAG'reduce using rule 109
	'SQRT_X'       reduce using rule 109
	'SQRT_X_DAG'   reduce using rule 109
	'SQRT_Y'       reduce using rule 109
	'SQRT_Y_DAG'   reduce using rule 109
	'SWAP'         reduce using rule 109
	'SWAP_THETA'   reduce using rule 109
	'S_DAG'        reduce using rule 109
	'T'            reduce using rule 109
	'T_DAG'        reduce using rule 109
	'U1'           reduce using rule 109
	'U2'           reduce using rule 109
	'U3'           reduce using rule 109
	'X'            reduce using rule 109
	'Y'            reduce using rule 109
	'Z'            reduce using rule 109
	']'            reduce using rule 109
	'else'         reduce using rule 109
	'of'           reduce using rule 109
	'then'         reduce using rule 109
	'}'            reduce using rule 109
	L_GateIdent    reduce using rule 109
	L_Var          reduce using rule 109
	L_Bit          reduce using rule 109


State 145

	Tuple -> '(' Term ',' . ListTerm ')'                (rule 101)

	'('            shift, and enter state 49
	'()'           shift, and enter state 50
	'FSWAP'        shift, and enter state 51
	'H'            shift, and enter state 52
	'ID'           shift, and enter state 53
	'ISWAP'        shift, and enter state 54
	'ROOT_SWAP'    shift, and enter state 55
	'ROOT_SWAP_DAG'shift, and enter state 56
	'ROOT_X'       shift, and enter state 57
	'ROOT_X_DAG'   shift, and enter state 58
	'ROOT_Y'       shift, and enter state 59
	'ROOT_Y_DAG'   shift, and enter state 60
	'ROOT_Z'       shift, and enter state 61
	'ROOT_Z_DAG'   shift, and enter state 62
	'RX'           shift, and enter state 63
	'RY'           shift, and enter state 64
	'RZ'           shift, and enter state 65
	'S'            shift, and enter state 66
	'SQRT_SWAP'    shift, and enter state 67
	'SQRT_SWAP_DAG'shift, and enter state 68
	'SQRT_X'       shift, and enter state 69
	'SQRT_X_DAG'   shift, and enter state 70
	'SQRT_Y'       shift, and enter state 71
	'SQRT_Y_DAG'   shift, and enter state 72
	'SWAP'         shift, and enter state 73
	'SWAP_THETA'   shift, and enter state 74
	'S_DAG'        shift, and enter state 75
	'T'            shift, and enter state 76
	'T_DAG'        shift, and enter state 77
	'U1'           shift, and enter state 78
	'U2'           shift, and enter state 79
	'U3'           shift, and enter state 80
	'X'            shift, and enter state 81
	'Y'            shift, and enter state 82
	'Z'            shift, and enter state 83
	'case'         shift, and enter state 84
	'if'           shift, and enter state 85
	'let'          shift, and enter state 86
	L_GateIdent    shift, and enter state 87
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 88
	L_Bit          shift, and enter state 89

	GateIdent      goto state 39
	Var            goto state 40
	Lambda         goto state 41
	Bit            goto state 42
	Gate           goto state 43
	Tuple          goto state 44
	ListTerm       goto state 218
	Term3          goto state 45
	Term1          goto state 46
	Term2          goto state 47
	Term           goto state 219

State 146

	Gate -> 'FSWAP' '[' ListControl . ']'               (rule 87)

	']'            shift, and enter state 217


State 147

	Gate -> 'H' '[' ListControl . ']'                   (rule 30)

	']'            shift, and enter state 216


State 148

	Gate -> 'ISWAP' '[' ListControl . ']'               (rule 85)

	']'            shift, and enter state 215


State 149

	Gate -> 'ROOT_SWAP' Integer '[' . ListControl ']'    (rule 90)

	'@+'           shift, and enter state 135
	'@+i'          shift, and enter state 136
	'@-'           shift, and enter state 137
	'@-i'          shift, and enter state 138
	'@0'           shift, and enter state 139
	'@1'           shift, and enter state 140

	ControlState   goto state 132
	Control        goto state 133
	ListControl    goto state 214

State 150

	Gate -> 'ROOT_SWAP_DAG' Integer '[' . ListControl ']'    (rule 92)

	'@+'           shift, and enter state 135
	'@+i'          shift, and enter state 136
	'@-'           shift, and enter state 137
	'@-i'          shift, and enter state 138
	'@0'           shift, and enter state 139
	'@1'           shift, and enter state 140

	ControlState   goto state 132
	Control        goto state 133
	ListControl    goto state 213

State 151

	Gate -> 'ROOT_X' Integer '[' . ListControl ']'      (rule 39)

	'@+'           shift, and enter state 135
	'@+i'          shift, and enter state 136
	'@-'           shift, and enter state 137
	'@-i'          shift, and enter state 138
	'@0'           shift, and enter state 139
	'@1'           shift, and enter state 140

	ControlState   goto state 132
	Control        goto state 133
	ListControl    goto state 212

State 152

	Gate -> 'ROOT_X_DAG' Integer '[' . ListControl ']'    (rule 41)

	'@+'           shift, and enter state 135
	'@+i'          shift, and enter state 136
	'@-'           shift, and enter state 137
	'@-i'          shift, and enter state 138
	'@0'           shift, and enter state 139
	'@1'           shift, and enter state 140

	ControlState   goto state 132
	Control        goto state 133
	ListControl    goto state 211

State 153

	Gate -> 'ROOT_Y' Integer '[' . ListControl ']'      (rule 43)

	'@+'           shift, and enter state 135
	'@+i'          shift, and enter state 136
	'@-'           shift, and enter state 137
	'@-i'          shift, and enter state 138
	'@0'           shift, and enter state 139
	'@1'           shift, and enter state 140

	ControlState   goto state 132
	Control        goto state 133
	ListControl    goto state 210

State 154

	Gate -> 'ROOT_Y_DAG' Integer '[' . ListControl ']'    (rule 45)

	'@+'           shift, and enter state 135
	'@+i'          shift, and enter state 136
	'@-'           shift, and enter state 137
	'@-i'          shift, and enter state 138
	'@0'           shift, and enter state 139
	'@1'           shift, and enter state 140

	ControlState   goto state 132
	Control        goto state 133
	ListControl    goto state 209

State 155

	Gate -> 'ROOT_Z' Integer '[' . ListControl ']'      (rule 47)

	'@+'           shift, and enter state 135
	'@+i'          shift, and enter state 136
	'@-'           shift, and enter state 137
	'@-i'          shift, and enter state 138
	'@0'           shift, and enter state 139
	'@1'           shift, and enter state 140

	ControlState   goto state 132
	Control        goto state 133
	ListControl    goto state 208

State 156

	Gate -> 'ROOT_Z_DAG' Integer '[' . ListControl ']'    (rule 49)

	'@+'           shift, and enter state 135
	'@+i'          shift, and enter state 136
	'@-'           shift, and enter state 137
	'@-i'          shift, and enter state 138
	'@0'           shift, and enter state 139
	'@1'           shift, and enter state 140

	ControlState   goto state 132
	Control        goto state 133
	ListControl    goto state 207

State 157

	Gate -> 'RX' Angle '[' . ListControl ']'            (rule 67)

	'@+'           shift, and enter state 135
	'@+i'          shift, and enter state 136
	'@-'           shift, and enter state 137
	'@-i'          shift, and enter state 138
	'@0'           shift, and enter state 139
	'@1'           shift, and enter state 140

	ControlState   goto state 132
	Control        goto state 133
	ListControl    goto state 206

State 158

	Gate -> 'RY' Angle '[' . ListControl ']'            (rule 69)

	'@+'           shift, and enter state 135
	'@+i'          shift, and enter state 136
	'@-'           shift, and enter state 137
	'@-i'          shift, and enter state 138
	'@0'           shift, and enter state 139
	'@1'           shift, and enter state 140

	ControlState   goto state 132
	Control        goto state 133
	ListControl    goto state 205

State 159

	Gate -> 'RZ' Angle '[' . ListControl ']'            (rule 71)

	'@+'           shift, and enter state 135
	'@+i'          shift, and enter state 136
	'@-'           shift, and enter state 137
	'@-i'          shift, and enter state 138
	'@0'           shift, and enter state 139
	'@1'           shift, and enter state 140

	ControlState   goto state 132
	Control        goto state 133
	ListControl    goto state 204

State 160

	Gate -> 'S' '[' ListControl . ']'                   (rule 51)

	']'            shift, and enter state 203


State 161

	Gate -> 'SQRT_SWAP' '[' ListControl . ']'           (rule 81)

	']'            shift, and enter state 202


State 162

	Gate -> 'SQRT_SWAP_DAG' '[' ListControl . ']'       (rule 83)

	']'            shift, and enter state 201


State 163

	Gate -> 'SQRT_X' '[' ListControl . ']'              (rule 59)

	']'            shift, and enter state 200


State 164

	Gate -> 'SQRT_X_DAG' '[' ListControl . ']'          (rule 61)

	']'            shift, and enter state 199


State 165

	Gate -> 'SQRT_Y' '[' ListControl . ']'              (rule 63)

	']'            shift, and enter state 198


State 166

	Gate -> 'SQRT_Y_DAG' '[' ListControl . ']'          (rule 65)

	']'            shift, and enter state 197


State 167

	Gate -> 'SWAP' '[' ListControl . ']'                (rule 79)

	']'            shift, and enter state 196


State 168

	Gate -> 'S_DAG' '[' ListControl . ']'               (rule 53)

	']'            shift, and enter state 195


State 169

	Gate -> 'T' '[' ListControl . ']'                   (rule 55)

	']'            shift, and enter state 194


State 170

	Gate -> 'T_DAG' '[' ListControl . ']'               (rule 57)

	']'            shift, and enter state 193


State 171

	Gate -> 'U1' Angle '[' . ListControl ']'            (rule 73)

	'@+'           shift, and enter state 135
	'@+i'          shift, and enter state 136
	'@-'           shift, and enter state 137
	'@-i'          shift, and enter state 138
	'@0'           shift, and enter state 139
	'@1'           shift, and enter state 140

	ControlState   goto state 132
	Control        goto state 133
	ListControl    goto state 192

State 172

	Gate -> 'U2' Angle Angle .                          (rule 74)
	Gate -> 'U2' Angle Angle . '[' ListControl ']'      (rule 75)

	'$'            reduce using rule 74
	'('            reduce using rule 74
	'()'           reduce using rule 74
	')'            reduce using rule 74
	','            reduce using rule 74
	'->'           reduce using rule 74
	';'            reduce using rule 74
	'FSWAP'        reduce using rule 74
	'H'            reduce using rule 74
	'ID'           reduce using rule 74
	'ISWAP'        reduce using rule 74
	'ROOT_SWAP'    reduce using rule 74
	'ROOT_SWAP_DAG'reduce using rule 74
	'ROOT_X'       reduce using rule 74
	'ROOT_X_DAG'   reduce using rule 74
	'ROOT_Y'       reduce using rule 74
	'ROOT_Y_DAG'   reduce using rule 74
	'ROOT_Z'       reduce using rule 74
	'ROOT_Z_DAG'   reduce using rule 74
	'RX'           reduce using rule 74
	'RY'           reduce using rule 74
	'RZ'           reduce using rule 74
	'S'            reduce using rule 74
	'SQRT_SWAP'    reduce using rule 74
	'SQRT_SWAP_DAG'reduce using rule 74
	'SQRT_X'       reduce using rule 74
	'SQRT_X_DAG'   reduce using rule 74
	'SQRT_Y'       reduce using rule 74
	'SQRT_Y_DAG'   reduce using rule 74
	'SWAP'         reduce using rule 74
	'SWAP_THETA'   reduce using rule 74
	'S_DAG'        reduce using rule 74
	'T'            reduce using rule 74
	'T_DAG'        reduce using rule 74
	'U1'           reduce using rule 74
	'U2'           reduce using rule 74
	'U3'           reduce using rule 74
	'X'            reduce using rule 74
	'Y'            reduce using rule 74
	'Z'            reduce using rule 74
	'['            shift, and enter state 191
	']'            reduce using rule 74
	'else'         reduce using rule 74
	'of'           reduce using rule 74
	'then'         reduce using rule 74
	'}'            reduce using rule 74
	L_GateIdent    reduce using rule 74
	L_Var          reduce using rule 74
	L_Bit          reduce using rule 74


State 173

	Gate -> 'U3' Angle Angle . Angle                    (rule 76)
	Gate -> 'U3' Angle Angle . Angle '[' ListControl ']'    (rule 77)

	L_doubl        shift, and enter state 2

	Double         goto state 96
	Angle          goto state 190

State 174

	Gate -> 'X' '[' ListControl . ']'                   (rule 32)

	']'            shift, and enter state 189


State 175

	Gate -> 'Y' '[' ListControl . ']'                   (rule 34)

	']'            shift, and enter state 188


State 176

	Gate -> 'Z' '[' ListControl . ']'                   (rule 36)

	']'            shift, and enter state 187


State 177

	Term1 -> 'case' Term 'of' . CaseExpression ListCaseExpression    (rule 113)

	'('            shift, and enter state 49
	'()'           shift, and enter state 50
	'FSWAP'        shift, and enter state 51
	'H'            shift, and enter state 52
	'ID'           shift, and enter state 53
	'ISWAP'        shift, and enter state 54
	'ROOT_SWAP'    shift, and enter state 55
	'ROOT_SWAP_DAG'shift, and enter state 56
	'ROOT_X'       shift, and enter state 57
	'ROOT_X_DAG'   shift, and enter state 58
	'ROOT_Y'       shift, and enter state 59
	'ROOT_Y_DAG'   shift, and enter state 60
	'ROOT_Z'       shift, and enter state 61
	'ROOT_Z_DAG'   shift, and enter state 62
	'RX'           shift, and enter state 63
	'RY'           shift, and enter state 64
	'RZ'           shift, and enter state 65
	'S'            shift, and enter state 66
	'SQRT_SWAP'    shift, and enter state 67
	'SQRT_SWAP_DAG'shift, and enter state 68
	'SQRT_X'       shift, and enter state 69
	'SQRT_X_DAG'   shift, and enter state 70
	'SQRT_Y'       shift, and enter state 71
	'SQRT_Y_DAG'   shift, and enter state 72
	'SWAP'         shift, and enter state 73
	'SWAP_THETA'   shift, and enter state 74
	'S_DAG'        shift, and enter state 75
	'T'            shift, and enter state 76
	'T_DAG'        shift, and enter state 77
	'U1'           shift, and enter state 78
	'U2'           shift, and enter state 79
	'U3'           shift, and enter state 80
	'X'            shift, and enter state 81
	'Y'            shift, and enter state 82
	'Z'            shift, and enter state 83
	'case'         shift, and enter state 84
	'if'           shift, and enter state 85
	'let'          shift, and enter state 86
	L_GateIdent    shift, and enter state 87
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 88
	L_Bit          shift, and enter state 89

	GateIdent      goto state 39
	Var            goto state 40
	Lambda         goto state 41
	Bit            goto state 42
	Gate           goto state 43
	Tuple          goto state 44
	Term3          goto state 45
	Term1          goto state 46
	Term2          goto state 47
	Term           goto state 185
	CaseExpression goto state 186

State 178

	Term1 -> 'if' Term 'then' . Term 'else' Term        (rule 110)

	'('            shift, and enter state 49
	'()'           shift, and enter state 50
	'FSWAP'        shift, and enter state 51
	'H'            shift, and enter state 52
	'ID'           shift, and enter state 53
	'ISWAP'        shift, and enter state 54
	'ROOT_SWAP'    shift, and enter state 55
	'ROOT_SWAP_DAG'shift, and enter state 56
	'ROOT_X'       shift, and enter state 57
	'ROOT_X_DAG'   shift, and enter state 58
	'ROOT_Y'       shift, and enter state 59
	'ROOT_Y_DAG'   shift, and enter state 60
	'ROOT_Z'       shift, and enter state 61
	'ROOT_Z_DAG'   shift, and enter state 62
	'RX'           shift, and enter state 63
	'RY'           shift, and enter state 64
	'RZ'           shift, and enter state 65
	'S'            shift, and enter state 66
	'SQRT_SWAP'    shift, and enter state 67
	'SQRT_SWAP_DAG'shift, and enter state 68
	'SQRT_X'       shift, and enter state 69
	'SQRT_X_DAG'   shift, and enter state 70
	'SQRT_Y'       shift, and enter state 71
	'SQRT_Y_DAG'   shift, and enter state 72
	'SWAP'         shift, and enter state 73
	'SWAP_THETA'   shift, and enter state 74
	'S_DAG'        shift, and enter state 75
	'T'            shift, and enter state 76
	'T_DAG'        shift, and enter state 77
	'U1'           shift, and enter state 78
	'U2'           shift, and enter state 79
	'U3'           shift, and enter state 80
	'X'            shift, and enter state 81
	'Y'            shift, and enter state 82
	'Z'            shift, and enter state 83
	'case'         shift, and enter state 84
	'if'           shift, and enter state 85
	'let'          shift, and enter state 86
	L_GateIdent    shift, and enter state 87
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 88
	L_Bit          shift, and enter state 89

	GateIdent      goto state 39
	Var            goto state 40
	Lambda         goto state 41
	Bit            goto state 42
	Gate           goto state 43
	Tuple          goto state 44
	Term3          goto state 45
	Term1          goto state 46
	Term2          goto state 47
	Term           goto state 184

State 179

	LetVariable -> Var .                                (rule 95)

	')'            reduce using rule 95
	','            reduce using rule 95
	'='            reduce using rule 95


State 180

	Term1 -> 'let' '{' LetVariable . '=' Term '}' 'in' Term    (rule 111)

	'='            shift, and enter state 183


State 181

	Term1 -> 'let' '{' '(' . LetVariable ',' ListLetVariable ')' '=' Term '}' 'in' Term    (rule 112)

	L_Var          shift, and enter state 8

	Var            goto state 179
	LetVariable    goto state 182

State 182

	Term1 -> 'let' '{' '(' LetVariable . ',' ListLetVariable ')' '=' Term '}' 'in' Term    (rule 112)

	','            shift, and enter state 249


State 183

	Term1 -> 'let' '{' LetVariable '=' . Term '}' 'in' Term    (rule 111)

	'('            shift, and enter state 49
	'()'           shift, and enter state 50
	'FSWAP'        shift, and enter state 51
	'H'            shift, and enter state 52
	'ID'           shift, and enter state 53
	'ISWAP'        shift, and enter state 54
	'ROOT_SWAP'    shift, and enter state 55
	'ROOT_SWAP_DAG'shift, and enter state 56
	'ROOT_X'       shift, and enter state 57
	'ROOT_X_DAG'   shift, and enter state 58
	'ROOT_Y'       shift, and enter state 59
	'ROOT_Y_DAG'   shift, and enter state 60
	'ROOT_Z'       shift, and enter state 61
	'ROOT_Z_DAG'   shift, and enter state 62
	'RX'           shift, and enter state 63
	'RY'           shift, and enter state 64
	'RZ'           shift, and enter state 65
	'S'            shift, and enter state 66
	'SQRT_SWAP'    shift, and enter state 67
	'SQRT_SWAP_DAG'shift, and enter state 68
	'SQRT_X'       shift, and enter state 69
	'SQRT_X_DAG'   shift, and enter state 70
	'SQRT_Y'       shift, and enter state 71
	'SQRT_Y_DAG'   shift, and enter state 72
	'SWAP'         shift, and enter state 73
	'SWAP_THETA'   shift, and enter state 74
	'S_DAG'        shift, and enter state 75
	'T'            shift, and enter state 76
	'T_DAG'        shift, and enter state 77
	'U1'           shift, and enter state 78
	'U2'           shift, and enter state 79
	'U3'           shift, and enter state 80
	'X'            shift, and enter state 81
	'Y'            shift, and enter state 82
	'Z'            shift, and enter state 83
	'case'         shift, and enter state 84
	'if'           shift, and enter state 85
	'let'          shift, and enter state 86
	L_GateIdent    shift, and enter state 87
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 88
	L_Bit          shift, and enter state 89

	GateIdent      goto state 39
	Var            goto state 40
	Lambda         goto state 41
	Bit            goto state 42
	Gate           goto state 43
	Tuple          goto state 44
	Term3          goto state 45
	Term1          goto state 46
	Term2          goto state 47
	Term           goto state 248

State 184

	Term1 -> 'if' Term 'then' Term . 'else' Term        (rule 110)

	'else'         shift, and enter state 247


State 185

	CaseExpression -> Term . '->' Var                   (rule 120)

	'->'           shift, and enter state 246


State 186

	Term1 -> 'case' Term 'of' CaseExpression . ListCaseExpression    (rule 113)

	'('            shift, and enter state 49
	'()'           shift, and enter state 50
	'FSWAP'        shift, and enter state 51
	'H'            shift, and enter state 52
	'ID'           shift, and enter state 53
	'ISWAP'        shift, and enter state 54
	'ROOT_SWAP'    shift, and enter state 55
	'ROOT_SWAP_DAG'shift, and enter state 56
	'ROOT_X'       shift, and enter state 57
	'ROOT_X_DAG'   shift, and enter state 58
	'ROOT_Y'       shift, and enter state 59
	'ROOT_Y_DAG'   shift, and enter state 60
	'ROOT_Z'       shift, and enter state 61
	'ROOT_Z_DAG'   shift, and enter state 62
	'RX'           shift, and enter state 63
	'RY'           shift, and enter state 64
	'RZ'           shift, and enter state 65
	'S'            shift, and enter state 66
	'SQRT_SWAP'    shift, and enter state 67
	'SQRT_SWAP_DAG'shift, and enter state 68
	'SQRT_X'       shift, and enter state 69
	'SQRT_X_DAG'   shift, and enter state 70
	'SQRT_Y'       shift, and enter state 71
	'SQRT_Y_DAG'   shift, and enter state 72
	'SWAP'         shift, and enter state 73
	'SWAP_THETA'   shift, and enter state 74
	'S_DAG'        shift, and enter state 75
	'T'            shift, and enter state 76
	'T_DAG'        shift, and enter state 77
	'U1'           shift, and enter state 78
	'U2'           shift, and enter state 79
	'U3'           shift, and enter state 80
	'X'            shift, and enter state 81
	'Y'            shift, and enter state 82
	'Z'            shift, and enter state 83
	'case'         shift, and enter state 84
	'if'           shift, and enter state 85
	'let'          shift, and enter state 86
	L_GateIdent    shift, and enter state 87
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 88
	L_Bit          shift, and enter state 89

	GateIdent      goto state 39
	Var            goto state 40
	Lambda         goto state 41
	Bit            goto state 42
	Gate           goto state 43
	Tuple          goto state 44
	Term3          goto state 45
	Term1          goto state 46
	Term2          goto state 47
	Term           goto state 185
	CaseExpression goto state 244
	ListCaseExpressiongoto state 245

State 187

	Gate -> 'Z' '[' ListControl ']' .                   (rule 36)

	'$'            reduce using rule 36
	'('            reduce using rule 36
	'()'           reduce using rule 36
	')'            reduce using rule 36
	','            reduce using rule 36
	'->'           reduce using rule 36
	';'            reduce using rule 36
	'FSWAP'        reduce using rule 36
	'H'            reduce using rule 36
	'ID'           reduce using rule 36
	'ISWAP'        reduce using rule 36
	'ROOT_SWAP'    reduce using rule 36
	'ROOT_SWAP_DAG'reduce using rule 36
	'ROOT_X'       reduce using rule 36
	'ROOT_X_DAG'   reduce using rule 36
	'ROOT_Y'       reduce using rule 36
	'ROOT_Y_DAG'   reduce using rule 36
	'ROOT_Z'       reduce using rule 36
	'ROOT_Z_DAG'   reduce using rule 36
	'RX'           reduce using rule 36
	'RY'           reduce using rule 36
	'RZ'           reduce using rule 36
	'S'            reduce using rule 36
	'SQRT_SWAP'    reduce using rule 36
	'SQRT_SWAP_DAG'reduce using rule 36
	'SQRT_X'       reduce using rule 36
	'SQRT_X_DAG'   reduce using rule 36
	'SQRT_Y'       reduce using rule 36
	'SQRT_Y_DAG'   reduce using rule 36
	'SWAP'         reduce using rule 36
	'SWAP_THETA'   reduce using rule 36
	'S_DAG'        reduce using rule 36
	'T'            reduce using rule 36
	'T_DAG'        reduce using rule 36
	'U1'           reduce using rule 36
	'U2'           reduce using rule 36
	'U3'           reduce using rule 36
	'X'            reduce using rule 36
	'Y'            reduce using rule 36
	'Z'            reduce using rule 36
	']'            reduce using rule 36
	'else'         reduce using rule 36
	'of'           reduce using rule 36
	'then'         reduce using rule 36
	'}'            reduce using rule 36
	L_GateIdent    reduce using rule 36
	L_Var          reduce using rule 36
	L_Bit          reduce using rule 36


State 188

	Gate -> 'Y' '[' ListControl ']' .                   (rule 34)

	'$'            reduce using rule 34
	'('            reduce using rule 34
	'()'           reduce using rule 34
	')'            reduce using rule 34
	','            reduce using rule 34
	'->'           reduce using rule 34
	';'            reduce using rule 34
	'FSWAP'        reduce using rule 34
	'H'            reduce using rule 34
	'ID'           reduce using rule 34
	'ISWAP'        reduce using rule 34
	'ROOT_SWAP'    reduce using rule 34
	'ROOT_SWAP_DAG'reduce using rule 34
	'ROOT_X'       reduce using rule 34
	'ROOT_X_DAG'   reduce using rule 34
	'ROOT_Y'       reduce using rule 34
	'ROOT_Y_DAG'   reduce using rule 34
	'ROOT_Z'       reduce using rule 34
	'ROOT_Z_DAG'   reduce using rule 34
	'RX'           reduce using rule 34
	'RY'           reduce using rule 34
	'RZ'           reduce using rule 34
	'S'            reduce using rule 34
	'SQRT_SWAP'    reduce using rule 34
	'SQRT_SWAP_DAG'reduce using rule 34
	'SQRT_X'       reduce using rule 34
	'SQRT_X_DAG'   reduce using rule 34
	'SQRT_Y'       reduce using rule 34
	'SQRT_Y_DAG'   reduce using rule 34
	'SWAP'         reduce using rule 34
	'SWAP_THETA'   reduce using rule 34
	'S_DAG'        reduce using rule 34
	'T'            reduce using rule 34
	'T_DAG'        reduce using rule 34
	'U1'           reduce using rule 34
	'U2'           reduce using rule 34
	'U3'           reduce using rule 34
	'X'            reduce using rule 34
	'Y'            reduce using rule 34
	'Z'            reduce using rule 34
	']'            reduce using rule 34
	'else'         reduce using rule 34
	'of'           reduce using rule 34
	'then'         reduce using rule 34
	'}'            reduce using rule 34
	L_GateIdent    reduce using rule 34
	L_Var          reduce using rule 34
	L_Bit          reduce using rule 34


State 189

	Gate -> 'X' '[' ListControl ']' .                   (rule 32)

	'$'            reduce using rule 32
	'('            reduce using rule 32
	'()'           reduce using rule 32
	')'            reduce using rule 32
	','            reduce using rule 32
	'->'           reduce using rule 32
	';'            reduce using rule 32
	'FSWAP'        reduce using rule 32
	'H'            reduce using rule 32
	'ID'           reduce using rule 32
	'ISWAP'        reduce using rule 32
	'ROOT_SWAP'    reduce using rule 32
	'ROOT_SWAP_DAG'reduce using rule 32
	'ROOT_X'       reduce using rule 32
	'ROOT_X_DAG'   reduce using rule 32
	'ROOT_Y'       reduce using rule 32
	'ROOT_Y_DAG'   reduce using rule 32
	'ROOT_Z'       reduce using rule 32
	'ROOT_Z_DAG'   reduce using rule 32
	'RX'           reduce using rule 32
	'RY'           reduce using rule 32
	'RZ'           reduce using rule 32
	'S'            reduce using rule 32
	'SQRT_SWAP'    reduce using rule 32
	'SQRT_SWAP_DAG'reduce using rule 32
	'SQRT_X'       reduce using rule 32
	'SQRT_X_DAG'   reduce using rule 32
	'SQRT_Y'       reduce using rule 32
	'SQRT_Y_DAG'   reduce using rule 32
	'SWAP'         reduce using rule 32
	'SWAP_THETA'   reduce using rule 32
	'S_DAG'        reduce using rule 32
	'T'            reduce using rule 32
	'T_DAG'        reduce using rule 32
	'U1'           reduce using rule 32
	'U2'           reduce using rule 32
	'U3'           reduce using rule 32
	'X'            reduce using rule 32
	'Y'            reduce using rule 32
	'Z'            reduce using rule 32
	']'            reduce using rule 32
	'else'         reduce using rule 32
	'of'           reduce using rule 32
	'then'         reduce using rule 32
	'}'            reduce using rule 32
	L_GateIdent    reduce using rule 32
	L_Var          reduce using rule 32
	L_Bit          reduce using rule 32


State 190

	Gate -> 'U3' Angle Angle Angle .                    (rule 76)
	Gate -> 'U3' Angle Angle Angle . '[' ListControl ']'    (rule 77)

	'$'            reduce using rule 76
	'('            reduce using rule 76
	'()'           reduce using rule 76
	')'            reduce using rule 76
	','            reduce using rule 76
	'->'           reduce using rule 76
	';'            reduce using rule 76
	'FSWAP'        reduce using rule 76
	'H'            reduce using rule 76
	'ID'           reduce using rule 76
	'ISWAP'        reduce using rule 76
	'ROOT_SWAP'    reduce using rule 76
	'ROOT_SWAP_DAG'reduce using rule 76
	'ROOT_X'       reduce using rule 76
	'ROOT_X_DAG'   reduce using rule 76
	'ROOT_Y'       reduce using rule 76
	'ROOT_Y_DAG'   reduce using rule 76
	'ROOT_Z'       reduce using rule 76
	'ROOT_Z_DAG'   reduce using rule 76
	'RX'           reduce using rule 76
	'RY'           reduce using rule 76
	'RZ'           reduce using rule 76
	'S'            reduce using rule 76
	'SQRT_SWAP'    reduce using rule 76
	'SQRT_SWAP_DAG'reduce using rule 76
	'SQRT_X'       reduce using rule 76
	'SQRT_X_DAG'   reduce using rule 76
	'SQRT_Y'       reduce using rule 76
	'SQRT_Y_DAG'   reduce using rule 76
	'SWAP'         reduce using rule 76
	'SWAP_THETA'   reduce using rule 76
	'S_DAG'        reduce using rule 76
	'T'            reduce using rule 76
	'T_DAG'        reduce using rule 76
	'U1'           reduce using rule 76
	'U2'           reduce using rule 76
	'U3'           reduce using rule 76
	'X'            reduce using rule 76
	'Y'            reduce using rule 76
	'Z'            reduce using rule 76
	'['            shift, and enter state 243
	']'            reduce using rule 76
	'else'         reduce using rule 76
	'of'           reduce using rule 76
	'then'         reduce using rule 76
	'}'            reduce using rule 76
	L_GateIdent    reduce using rule 76
	L_Var          reduce using rule 76
	L_Bit          reduce using rule 76


State 191

	Gate -> 'U2' Angle Angle '[' . ListControl ']'      (rule 75)

	'@+'           shift, and enter state 135
	'@+i'          shift, and enter state 136
	'@-'           shift, and enter state 137
	'@-i'          shift, and enter state 138
	'@0'           shift, and enter state 139
	'@1'           shift, and enter state 140

	ControlState   goto state 132
	Control        goto state 133
	ListControl    goto state 242

State 192

	Gate -> 'U1' Angle '[' ListControl . ']'            (rule 73)

	']'            shift, and enter state 241


State 193

	Gate -> 'T_DAG' '[' ListControl ']' .               (rule 57)

	'$'            reduce using rule 57
	'('            reduce using rule 57
	'()'           reduce using rule 57
	')'            reduce using rule 57
	','            reduce using rule 57
	'->'           reduce using rule 57
	';'            reduce using rule 57
	'FSWAP'        reduce using rule 57
	'H'            reduce using rule 57
	'ID'           reduce using rule 57
	'ISWAP'        reduce using rule 57
	'ROOT_SWAP'    reduce using rule 57
	'ROOT_SWAP_DAG'reduce using rule 57
	'ROOT_X'       reduce using rule 57
	'ROOT_X_DAG'   reduce using rule 57
	'ROOT_Y'       reduce using rule 57
	'ROOT_Y_DAG'   reduce using rule 57
	'ROOT_Z'       reduce using rule 57
	'ROOT_Z_DAG'   reduce using rule 57
	'RX'           reduce using rule 57
	'RY'           reduce using rule 57
	'RZ'           reduce using rule 57
	'S'            reduce using rule 57
	'SQRT_SWAP'    reduce using rule 57
	'SQRT_SWAP_DAG'reduce using rule 57
	'SQRT_X'       reduce using rule 57
	'SQRT_X_DAG'   reduce using rule 57
	'SQRT_Y'       reduce using rule 57
	'SQRT_Y_DAG'   reduce using rule 57
	'SWAP'         reduce using rule 57
	'SWAP_THETA'   reduce using rule 57
	'S_DAG'        reduce using rule 57
	'T'            reduce using rule 57
	'T_DAG'        reduce using rule 57
	'U1'           reduce using rule 57
	'U2'           reduce using rule 57
	'U3'           reduce using rule 57
	'X'            reduce using rule 57
	'Y'            reduce using rule 57
	'Z'            reduce using rule 57
	']'            reduce using rule 57
	'else'         reduce using rule 57
	'of'           reduce using rule 57
	'then'         reduce using rule 57
	'}'            reduce using rule 57
	L_GateIdent    reduce using rule 57
	L_Var          reduce using rule 57
	L_Bit          reduce using rule 57


State 194

	Gate -> 'T' '[' ListControl ']' .                   (rule 55)

	'$'            reduce using rule 55
	'('            reduce using rule 55
	'()'           reduce using rule 55
	')'            reduce using rule 55
	','            reduce using rule 55
	'->'           reduce using rule 55
	';'            reduce using rule 55
	'FSWAP'        reduce using rule 55
	'H'            reduce using rule 55
	'ID'           reduce using rule 55
	'ISWAP'        reduce using rule 55
	'ROOT_SWAP'    reduce using rule 55
	'ROOT_SWAP_DAG'reduce using rule 55
	'ROOT_X'       reduce using rule 55
	'ROOT_X_DAG'   reduce using rule 55
	'ROOT_Y'       reduce using rule 55
	'ROOT_Y_DAG'   reduce using rule 55
	'ROOT_Z'       reduce using rule 55
	'ROOT_Z_DAG'   reduce using rule 55
	'RX'           reduce using rule 55
	'RY'           reduce using rule 55
	'RZ'           reduce using rule 55
	'S'            reduce using rule 55
	'SQRT_SWAP'    reduce using rule 55
	'SQRT_SWAP_DAG'reduce using rule 55
	'SQRT_X'       reduce using rule 55
	'SQRT_X_DAG'   reduce using rule 55
	'SQRT_Y'       reduce using rule 55
	'SQRT_Y_DAG'   reduce using rule 55
	'SWAP'         reduce using rule 55
	'SWAP_THETA'   reduce using rule 55
	'S_DAG'        reduce using rule 55
	'T'            reduce using rule 55
	'T_DAG'        reduce using rule 55
	'U1'           reduce using rule 55
	'U2'           reduce using rule 55
	'U3'           reduce using rule 55
	'X'            reduce using rule 55
	'Y'            reduce using rule 55
	'Z'            reduce using rule 55
	']'            reduce using rule 55
	'else'         reduce using rule 55
	'of'           reduce using rule 55
	'then'         reduce using rule 55
	'}'            reduce using rule 55
	L_GateIdent    reduce using rule 55
	L_Var          reduce using rule 55
	L_Bit          reduce using rule 55


State 195

	Gate -> 'S_DAG' '[' ListControl ']' .               (rule 53)

	'$'            reduce using rule 53
	'('            reduce using rule 53
	'()'           reduce using rule 53
	')'            reduce using rule 53
	','            reduce using rule 53
	'->'           reduce using rule 53
	';'            reduce using rule 53
	'FSWAP'        reduce using rule 53
	'H'            reduce using rule 53
	'ID'           reduce using rule 53
	'ISWAP'        reduce using rule 53
	'ROOT_SWAP'    reduce using rule 53
	'ROOT_SWAP_DAG'reduce using rule 53
	'ROOT_X'       reduce using rule 53
	'ROOT_X_DAG'   reduce using rule 53
	'ROOT_Y'       reduce using rule 53
	'ROOT_Y_DAG'   reduce using rule 53
	'ROOT_Z'       reduce using rule 53
	'ROOT_Z_DAG'   reduce using rule 53
	'RX'           reduce using rule 53
	'RY'           reduce using rule 53
	'RZ'           reduce using rule 53
	'S'            reduce using rule 53
	'SQRT_SWAP'    reduce using rule 53
	'SQRT_SWAP_DAG'reduce using rule 53
	'SQRT_X'       reduce using rule 53
	'SQRT_X_DAG'   reduce using rule 53
	'SQRT_Y'       reduce using rule 53
	'SQRT_Y_DAG'   reduce using rule 53
	'SWAP'         reduce using rule 53
	'SWAP_THETA'   reduce using rule 53
	'S_DAG'        reduce using rule 53
	'T'            reduce using rule 53
	'T_DAG'        reduce using rule 53
	'U1'           reduce using rule 53
	'U2'           reduce using rule 53
	'U3'           reduce using rule 53
	'X'            reduce using rule 53
	'Y'            reduce using rule 53
	'Z'            reduce using rule 53
	']'            reduce using rule 53
	'else'         reduce using rule 53
	'of'           reduce using rule 53
	'then'         reduce using rule 53
	'}'            reduce using rule 53
	L_GateIdent    reduce using rule 53
	L_Var          reduce using rule 53
	L_Bit          reduce using rule 53


State 196

	Gate -> 'SWAP' '[' ListControl ']' .                (rule 79)

	'$'            reduce using rule 79
	'('            reduce using rule 79
	'()'           reduce using rule 79
	')'            reduce using rule 79
	','            reduce using rule 79
	'->'           reduce using rule 79
	';'            reduce using rule 79
	'FSWAP'        reduce using rule 79
	'H'            reduce using rule 79
	'ID'           reduce using rule 79
	'ISWAP'        reduce using rule 79
	'ROOT_SWAP'    reduce using rule 79
	'ROOT_SWAP_DAG'reduce using rule 79
	'ROOT_X'       reduce using rule 79
	'ROOT_X_DAG'   reduce using rule 79
	'ROOT_Y'       reduce using rule 79
	'ROOT_Y_DAG'   reduce using rule 79
	'ROOT_Z'       reduce using rule 79
	'ROOT_Z_DAG'   reduce using rule 79
	'RX'           reduce using rule 79
	'RY'           reduce using rule 79
	'RZ'           reduce using rule 79
	'S'            reduce using rule 79
	'SQRT_SWAP'    reduce using rule 79
	'SQRT_SWAP_DAG'reduce using rule 79
	'SQRT_X'       reduce using rule 79
	'SQRT_X_DAG'   reduce using rule 79
	'SQRT_Y'       reduce using rule 79
	'SQRT_Y_DAG'   reduce using rule 79
	'SWAP'         reduce using rule 79
	'SWAP_THETA'   reduce using rule 79
	'S_DAG'        reduce using rule 79
	'T'            reduce using rule 79
	'T_DAG'        reduce using rule 79
	'U1'           reduce using rule 79
	'U2'           reduce using rule 79
	'U3'           reduce using rule 79
	'X'            reduce using rule 79
	'Y'            reduce using rule 79
	'Z'            reduce using rule 79
	']'            reduce using rule 79
	'else'         reduce using rule 79
	'of'           reduce using rule 79
	'then'         reduce using rule 79
	'}'            reduce using rule 79
	L_GateIdent    reduce using rule 79
	L_Var          reduce using rule 79
	L_Bit          reduce using rule 79


State 197

	Gate -> 'SQRT_Y_DAG' '[' ListControl ']' .          (rule 65)

	'$'            reduce using rule 65
	'('            reduce using rule 65
	'()'           reduce using rule 65
	')'            reduce using rule 65
	','            reduce using rule 65
	'->'           reduce using rule 65
	';'            reduce using rule 65
	'FSWAP'        reduce using rule 65
	'H'            reduce using rule 65
	'ID'           reduce using rule 65
	'ISWAP'        reduce using rule 65
	'ROOT_SWAP'    reduce using rule 65
	'ROOT_SWAP_DAG'reduce using rule 65
	'ROOT_X'       reduce using rule 65
	'ROOT_X_DAG'   reduce using rule 65
	'ROOT_Y'       reduce using rule 65
	'ROOT_Y_DAG'   reduce using rule 65
	'ROOT_Z'       reduce using rule 65
	'ROOT_Z_DAG'   reduce using rule 65
	'RX'           reduce using rule 65
	'RY'           reduce using rule 65
	'RZ'           reduce using rule 65
	'S'            reduce using rule 65
	'SQRT_SWAP'    reduce using rule 65
	'SQRT_SWAP_DAG'reduce using rule 65
	'SQRT_X'       reduce using rule 65
	'SQRT_X_DAG'   reduce using rule 65
	'SQRT_Y'       reduce using rule 65
	'SQRT_Y_DAG'   reduce using rule 65
	'SWAP'         reduce using rule 65
	'SWAP_THETA'   reduce using rule 65
	'S_DAG'        reduce using rule 65
	'T'            reduce using rule 65
	'T_DAG'        reduce using rule 65
	'U1'           reduce using rule 65
	'U2'           reduce using rule 65
	'U3'           reduce using rule 65
	'X'            reduce using rule 65
	'Y'            reduce using rule 65
	'Z'            reduce using rule 65
	']'            reduce using rule 65
	'else'         reduce using rule 65
	'of'           reduce using rule 65
	'then'         reduce using rule 65
	'}'            reduce using rule 65
	L_GateIdent    reduce using rule 65
	L_Var          reduce using rule 65
	L_Bit          reduce using rule 65


State 198

	Gate -> 'SQRT_Y' '[' ListControl ']' .              (rule 63)

	'$'            reduce using rule 63
	'('            reduce using rule 63
	'()'           reduce using rule 63
	')'            reduce using rule 63
	','            reduce using rule 63
	'->'           reduce using rule 63
	';'            reduce using rule 63
	'FSWAP'        reduce using rule 63
	'H'            reduce using rule 63
	'ID'           reduce using rule 63
	'ISWAP'        reduce using rule 63
	'ROOT_SWAP'    reduce using rule 63
	'ROOT_SWAP_DAG'reduce using rule 63
	'ROOT_X'       reduce using rule 63
	'ROOT_X_DAG'   reduce using rule 63
	'ROOT_Y'       reduce using rule 63
	'ROOT_Y_DAG'   reduce using rule 63
	'ROOT_Z'       reduce using rule 63
	'ROOT_Z_DAG'   reduce using rule 63
	'RX'           reduce using rule 63
	'RY'           reduce using rule 63
	'RZ'           reduce using rule 63
	'S'            reduce using rule 63
	'SQRT_SWAP'    reduce using rule 63
	'SQRT_SWAP_DAG'reduce using rule 63
	'SQRT_X'       reduce using rule 63
	'SQRT_X_DAG'   reduce using rule 63
	'SQRT_Y'       reduce using rule 63
	'SQRT_Y_DAG'   reduce using rule 63
	'SWAP'         reduce using rule 63
	'SWAP_THETA'   reduce using rule 63
	'S_DAG'        reduce using rule 63
	'T'            reduce using rule 63
	'T_DAG'        reduce using rule 63
	'U1'           reduce using rule 63
	'U2'           reduce using rule 63
	'U3'           reduce using rule 63
	'X'            reduce using rule 63
	'Y'            reduce using rule 63
	'Z'            reduce using rule 63
	']'            reduce using rule 63
	'else'         reduce using rule 63
	'of'           reduce using rule 63
	'then'         reduce using rule 63
	'}'            reduce using rule 63
	L_GateIdent    reduce using rule 63
	L_Var          reduce using rule 63
	L_Bit          reduce using rule 63


State 199

	Gate -> 'SQRT_X_DAG' '[' ListControl ']' .          (rule 61)

	'$'            reduce using rule 61
	'('            reduce using rule 61
	'()'           reduce using rule 61
	')'            reduce using rule 61
	','            reduce using rule 61
	'->'           reduce using rule 61
	';'            reduce using rule 61
	'FSWAP'        reduce using rule 61
	'H'            reduce using rule 61
	'ID'           reduce using rule 61
	'ISWAP'        reduce using rule 61
	'ROOT_SWAP'    reduce using rule 61
	'ROOT_SWAP_DAG'reduce using rule 61
	'ROOT_X'       reduce using rule 61
	'ROOT_X_DAG'   reduce using rule 61
	'ROOT_Y'       reduce using rule 61
	'ROOT_Y_DAG'   reduce using rule 61
	'ROOT_Z'       reduce using rule 61
	'ROOT_Z_DAG'   reduce using rule 61
	'RX'           reduce using rule 61
	'RY'           reduce using rule 61
	'RZ'           reduce using rule 61
	'S'            reduce using rule 61
	'SQRT_SWAP'    reduce using rule 61
	'SQRT_SWAP_DAG'reduce using rule 61
	'SQRT_X'       reduce using rule 61
	'SQRT_X_DAG'   reduce using rule 61
	'SQRT_Y'       reduce using rule 61
	'SQRT_Y_DAG'   reduce using rule 61
	'SWAP'         reduce using rule 61
	'SWAP_THETA'   reduce using rule 61
	'S_DAG'        reduce using rule 61
	'T'            reduce using rule 61
	'T_DAG'        reduce using rule 61
	'U1'           reduce using rule 61
	'U2'           reduce using rule 61
	'U3'           reduce using rule 61
	'X'            reduce using rule 61
	'Y'            reduce using rule 61
	'Z'            reduce using rule 61
	']'            reduce using rule 61
	'else'         reduce using rule 61
	'of'           reduce using rule 61
	'then'         reduce using rule 61
	'}'            reduce using rule 61
	L_GateIdent    reduce using rule 61
	L_Var          reduce using rule 61
	L_Bit          reduce using rule 61


State 200

	Gate -> 'SQRT_X' '[' ListControl ']' .              (rule 59)

	'$'            reduce using rule 59
	'('            reduce using rule 59
	'()'           reduce using rule 59
	')'            reduce using rule 59
	','            reduce using rule 59
	'->'           reduce using rule 59
	';'            reduce using rule 59
	'FSWAP'        reduce using rule 59
	'H'            reduce using rule 59
	'ID'           reduce using rule 59
	'ISWAP'        reduce using rule 59
	'ROOT_SWAP'    reduce using rule 59
	'ROOT_SWAP_DAG'reduce using rule 59
	'ROOT_X'       reduce using rule 59
	'ROOT_X_DAG'   reduce using rule 59
	'ROOT_Y'       reduce using rule 59
	'ROOT_Y_DAG'   reduce using rule 59
	'ROOT_Z'       reduce using rule 59
	'ROOT_Z_DAG'   reduce using rule 59
	'RX'           reduce using rule 59
	'RY'           reduce using rule 59
	'RZ'           reduce using rule 59
	'S'            reduce using rule 59
	'SQRT_SWAP'    reduce using rule 59
	'SQRT_SWAP_DAG'reduce using rule 59
	'SQRT_X'       reduce using rule 59
	'SQRT_X_DAG'   reduce using rule 59
	'SQRT_Y'       reduce using rule 59
	'SQRT_Y_DAG'   reduce using rule 59
	'SWAP'         reduce using rule 59
	'SWAP_THETA'   reduce using rule 59
	'S_DAG'        reduce using rule 59
	'T'            reduce using rule 59
	'T_DAG'        reduce using rule 59
	'U1'           reduce using rule 59
	'U2'           reduce using rule 59
	'U3'           reduce using rule 59
	'X'            reduce using rule 59
	'Y'            reduce using rule 59
	'Z'            reduce using rule 59
	']'            reduce using rule 59
	'else'         reduce using rule 59
	'of'           reduce using rule 59
	'then'         reduce using rule 59
	'}'            reduce using rule 59
	L_GateIdent    reduce using rule 59
	L_Var          reduce using rule 59
	L_Bit          reduce using rule 59


State 201

	Gate -> 'SQRT_SWAP_DAG' '[' ListControl ']' .       (rule 83)

	'$'            reduce using rule 83
	'('            reduce using rule 83
	'()'           reduce using rule 83
	')'            reduce using rule 83
	','            reduce using rule 83
	'->'           reduce using rule 83
	';'            reduce using rule 83
	'FSWAP'        reduce using rule 83
	'H'            reduce using rule 83
	'ID'           reduce using rule 83
	'ISWAP'        reduce using rule 83
	'ROOT_SWAP'    reduce using rule 83
	'ROOT_SWAP_DAG'reduce using rule 83
	'ROOT_X'       reduce using rule 83
	'ROOT_X_DAG'   reduce using rule 83
	'ROOT_Y'       reduce using rule 83
	'ROOT_Y_DAG'   reduce using rule 83
	'ROOT_Z'       reduce using rule 83
	'ROOT_Z_DAG'   reduce using rule 83
	'RX'           reduce using rule 83
	'RY'           reduce using rule 83
	'RZ'           reduce using rule 83
	'S'            reduce using rule 83
	'SQRT_SWAP'    reduce using rule 83
	'SQRT_SWAP_DAG'reduce using rule 83
	'SQRT_X'       reduce using rule 83
	'SQRT_X_DAG'   reduce using rule 83
	'SQRT_Y'       reduce using rule 83
	'SQRT_Y_DAG'   reduce using rule 83
	'SWAP'         reduce using rule 83
	'SWAP_THETA'   reduce using rule 83
	'S_DAG'        reduce using rule 83
	'T'            reduce using rule 83
	'T_DAG'        reduce using rule 83
	'U1'           reduce using rule 83
	'U2'           reduce using rule 83
	'U3'           reduce using rule 83
	'X'            reduce using rule 83
	'Y'            reduce using rule 83
	'Z'            reduce using rule 83
	']'            reduce using rule 83
	'else'         reduce using rule 83
	'of'           reduce using rule 83
	'then'         reduce using rule 83
	'}'            reduce using rule 83
	L_GateIdent    reduce using rule 83
	L_Var          reduce using rule 83
	L_Bit          reduce using rule 83


State 202

	Gate -> 'SQRT_SWAP' '[' ListControl ']' .           (rule 81)

	'$'            reduce using rule 81
	'('            reduce using rule 81
	'()'           reduce using rule 81
	')'            reduce using rule 81
	','            reduce using rule 81
	'->'           reduce using rule 81
	';'            reduce using rule 81
	'FSWAP'        reduce using rule 81
	'H'            reduce using rule 81
	'ID'           reduce using rule 81
	'ISWAP'        reduce using rule 81
	'ROOT_SWAP'    reduce using rule 81
	'ROOT_SWAP_DAG'reduce using rule 81
	'ROOT_X'       reduce using rule 81
	'ROOT_X_DAG'   reduce using rule 81
	'ROOT_Y'       reduce using rule 81
	'ROOT_Y_DAG'   reduce using rule 81
	'ROOT_Z'       reduce using rule 81
	'ROOT_Z_DAG'   reduce using rule 81
	'RX'           reduce using rule 81
	'RY'           reduce using rule 81
	'RZ'           reduce using rule 81
	'S'            reduce using rule 81
	'SQRT_SWAP'    reduce using rule 81
	'SQRT_SWAP_DAG'reduce using rule 81
	'SQRT_X'       reduce using rule 81
	'SQRT_X_DAG'   reduce using rule 81
	'SQRT_Y'       reduce using rule 81
	'SQRT_Y_DAG'   reduce using rule 81
	'SWAP'         reduce using rule 81
	'SWAP_THETA'   reduce using rule 81
	'S_DAG'        reduce using rule 81
	'T'            reduce using rule 81
	'T_DAG'        reduce using rule 81
	'U1'           reduce using rule 81
	'U2'           reduce using rule 81
	'U3'           reduce using rule 81
	'X'            reduce using rule 81
	'Y'            reduce using rule 81
	'Z'            reduce using rule 81
	']'            reduce using rule 81
	'else'         reduce using rule 81
	'of'           reduce using rule 81
	'then'         reduce using rule 81
	'}'            reduce using rule 81
	L_GateIdent    reduce using rule 81
	L_Var          reduce using rule 81
	L_Bit          reduce using rule 81


State 203

	Gate -> 'S' '[' ListControl ']' .                   (rule 51)

	'$'            reduce using rule 51
	'('            reduce using rule 51
	'()'           reduce using rule 51
	')'            reduce using rule 51
	','            reduce using rule 51
	'->'           reduce using rule 51
	';'            reduce using rule 51
	'FSWAP'        reduce using rule 51
	'H'            reduce using rule 51
	'ID'           reduce using rule 51
	'ISWAP'        reduce using rule 51
	'ROOT_SWAP'    reduce using rule 51
	'ROOT_SWAP_DAG'reduce using rule 51
	'ROOT_X'       reduce using rule 51
	'ROOT_X_DAG'   reduce using rule 51
	'ROOT_Y'       reduce using rule 51
	'ROOT_Y_DAG'   reduce using rule 51
	'ROOT_Z'       reduce using rule 51
	'ROOT_Z_DAG'   reduce using rule 51
	'RX'           reduce using rule 51
	'RY'           reduce using rule 51
	'RZ'           reduce using rule 51
	'S'            reduce using rule 51
	'SQRT_SWAP'    reduce using rule 51
	'SQRT_SWAP_DAG'reduce using rule 51
	'SQRT_X'       reduce using rule 51
	'SQRT_X_DAG'   reduce using rule 51
	'SQRT_Y'       reduce using rule 51
	'SQRT_Y_DAG'   reduce using rule 51
	'SWAP'         reduce using rule 51
	'SWAP_THETA'   reduce using rule 51
	'S_DAG'        reduce using rule 51
	'T'            reduce using rule 51
	'T_DAG'        reduce using rule 51
	'U1'           reduce using rule 51
	'U2'           reduce using rule 51
	'U3'           reduce using rule 51
	'X'            reduce using rule 51
	'Y'            reduce using rule 51
	'Z'            reduce using rule 51
	']'            reduce using rule 51
	'else'         reduce using rule 51
	'of'           reduce using rule 51
	'then'         reduce using rule 51
	'}'            reduce using rule 51
	L_GateIdent    reduce using rule 51
	L_Var          reduce using rule 51
	L_Bit          reduce using rule 51


State 204

	Gate -> 'RZ' Angle '[' ListControl . ']'            (rule 71)

	']'            shift, and enter state 240


State 205

	Gate -> 'RY' Angle '[' ListControl . ']'            (rule 69)

	']'            shift, and enter state 239


State 206

	Gate -> 'RX' Angle '[' ListControl . ']'            (rule 67)

	']'            shift, and enter state 238


State 207

	Gate -> 'ROOT_Z_DAG' Integer '[' ListControl . ']'    (rule 49)

	']'            shift, and enter state 237


State 208

	Gate -> 'ROOT_Z' Integer '[' ListControl . ']'      (rule 47)

	']'            shift, and enter state 236


State 209

	Gate -> 'ROOT_Y_DAG' Integer '[' ListControl . ']'    (rule 45)

	']'            shift, and enter state 235


State 210

	Gate -> 'ROOT_Y' Integer '[' ListControl . ']'      (rule 43)

	']'            shift, and enter state 234


State 211

	Gate -> 'ROOT_X_DAG' Integer '[' ListControl . ']'    (rule 41)

	']'            shift, and enter state 233


State 212

	Gate -> 'ROOT_X' Integer '[' ListControl . ']'      (rule 39)

	']'            shift, and enter state 232


State 213

	Gate -> 'ROOT_SWAP_DAG' Integer '[' ListControl . ']'    (rule 92)

	']'            shift, and enter state 231


State 214

	Gate -> 'ROOT_SWAP' Integer '[' ListControl . ']'    (rule 90)

	']'            shift, and enter state 230


State 215

	Gate -> 'ISWAP' '[' ListControl ']' .               (rule 85)

	'$'            reduce using rule 85
	'('            reduce using rule 85
	'()'           reduce using rule 85
	')'            reduce using rule 85
	','            reduce using rule 85
	'->'           reduce using rule 85
	';'            reduce using rule 85
	'FSWAP'        reduce using rule 85
	'H'            reduce using rule 85
	'ID'           reduce using rule 85
	'ISWAP'        reduce using rule 85
	'ROOT_SWAP'    reduce using rule 85
	'ROOT_SWAP_DAG'reduce using rule 85
	'ROOT_X'       reduce using rule 85
	'ROOT_X_DAG'   reduce using rule 85
	'ROOT_Y'       reduce using rule 85
	'ROOT_Y_DAG'   reduce using rule 85
	'ROOT_Z'       reduce using rule 85
	'ROOT_Z_DAG'   reduce using rule 85
	'RX'           reduce using rule 85
	'RY'           reduce using rule 85
	'RZ'           reduce using rule 85
	'S'            reduce using rule 85
	'SQRT_SWAP'    reduce using rule 85
	'SQRT_SWAP_DAG'reduce using rule 85
	'SQRT_X'       reduce using rule 85
	'SQRT_X_DAG'   reduce using rule 85
	'SQRT_Y'       reduce using rule 85
	'SQRT_Y_DAG'   reduce using rule 85
	'SWAP'         reduce using rule 85
	'SWAP_THETA'   reduce using rule 85
	'S_DAG'        reduce using rule 85
	'T'            reduce using rule 85
	'T_DAG'        reduce using rule 85
	'U1'           reduce using rule 85
	'U2'           reduce using rule 85
	'U3'           reduce using rule 85
	'X'            reduce using rule 85
	'Y'            reduce using rule 85
	'Z'            reduce using rule 85
	']'            reduce using rule 85
	'else'         reduce using rule 85
	'of'           reduce using rule 85
	'then'         reduce using rule 85
	'}'            reduce using rule 85
	L_GateIdent    reduce using rule 85
	L_Var          reduce using rule 85
	L_Bit          reduce using rule 85


State 216

	Gate -> 'H' '[' ListControl ']' .                   (rule 30)

	'$'            reduce using rule 30
	'('            reduce using rule 30
	'()'           reduce using rule 30
	')'            reduce using rule 30
	','            reduce using rule 30
	'->'           reduce using rule 30
	';'            reduce using rule 30
	'FSWAP'        reduce using rule 30
	'H'            reduce using rule 30
	'ID'           reduce using rule 30
	'ISWAP'        reduce using rule 30
	'ROOT_SWAP'    reduce using rule 30
	'ROOT_SWAP_DAG'reduce using rule 30
	'ROOT_X'       reduce using rule 30
	'ROOT_X_DAG'   reduce using rule 30
	'ROOT_Y'       reduce using rule 30
	'ROOT_Y_DAG'   reduce using rule 30
	'ROOT_Z'       reduce using rule 30
	'ROOT_Z_DAG'   reduce using rule 30
	'RX'           reduce using rule 30
	'RY'           reduce using rule 30
	'RZ'           reduce using rule 30
	'S'            reduce using rule 30
	'SQRT_SWAP'    reduce using rule 30
	'SQRT_SWAP_DAG'reduce using rule 30
	'SQRT_X'       reduce using rule 30
	'SQRT_X_DAG'   reduce using rule 30
	'SQRT_Y'       reduce using rule 30
	'SQRT_Y_DAG'   reduce using rule 30
	'SWAP'         reduce using rule 30
	'SWAP_THETA'   reduce using rule 30
	'S_DAG'        reduce using rule 30
	'T'            reduce using rule 30
	'T_DAG'        reduce using rule 30
	'U1'           reduce using rule 30
	'U2'           reduce using rule 30
	'U3'           reduce using rule 30
	'X'            reduce using rule 30
	'Y'            reduce using rule 30
	'Z'            reduce using rule 30
	']'            reduce using rule 30
	'else'         reduce using rule 30
	'of'           reduce using rule 30
	'then'         reduce using rule 30
	'}'            reduce using rule 30
	L_GateIdent    reduce using rule 30
	L_Var          reduce using rule 30
	L_Bit          reduce using rule 30


State 217

	Gate -> 'FSWAP' '[' ListControl ']' .               (rule 87)

	'$'            reduce using rule 87
	'('            reduce using rule 87
	'()'           reduce using rule 87
	')'            reduce using rule 87
	','            reduce using rule 87
	'->'           reduce using rule 87
	';'            reduce using rule 87
	'FSWAP'        reduce using rule 87
	'H'            reduce using rule 87
	'ID'           reduce using rule 87
	'ISWAP'        reduce using rule 87
	'ROOT_SWAP'    reduce using rule 87
	'ROOT_SWAP_DAG'reduce using rule 87
	'ROOT_X'       reduce using rule 87
	'ROOT_X_DAG'   reduce using rule 87
	'ROOT_Y'       reduce using rule 87
	'ROOT_Y_DAG'   reduce using rule 87
	'ROOT_Z'       reduce using rule 87
	'ROOT_Z_DAG'   reduce using rule 87
	'RX'           reduce using rule 87
	'RY'           reduce using rule 87
	'RZ'           reduce using rule 87
	'S'            reduce using rule 87
	'SQRT_SWAP'    reduce using rule 87
	'SQRT_SWAP_DAG'reduce using rule 87
	'SQRT_X'       reduce using rule 87
	'SQRT_X_DAG'   reduce using rule 87
	'SQRT_Y'       reduce using rule 87
	'SQRT_Y_DAG'   reduce using rule 87
	'SWAP'         reduce using rule 87
	'SWAP_THETA'   reduce using rule 87
	'S_DAG'        reduce using rule 87
	'T'            reduce using rule 87
	'T_DAG'        reduce using rule 87
	'U1'           reduce using rule 87
	'U2'           reduce using rule 87
	'U3'           reduce using rule 87
	'X'            reduce using rule 87
	'Y'            reduce using rule 87
	'Z'            reduce using rule 87
	']'            reduce using rule 87
	'else'         reduce using rule 87
	'of'           reduce using rule 87
	'then'         reduce using rule 87
	'}'            reduce using rule 87
	L_GateIdent    reduce using rule 87
	L_Var          reduce using rule 87
	L_Bit          reduce using rule 87


State 218

	Tuple -> '(' Term ',' ListTerm . ')'                (rule 101)

	')'            shift, and enter state 229


State 219

	ListTerm -> Term .                                  (rule 102)
	ListTerm -> Term . ',' ListTerm                     (rule 103)

	')'            reduce using rule 102
	','            shift, and enter state 228


State 220

	Term1 -> Lambda LambdaVariable ListLambdaVariable '->' . Term    (rule 114)

	'('            shift, and enter state 49
	'()'           shift, and enter state 50
	'FSWAP'        shift, and enter state 51
	'H'            shift, and enter state 52
	'ID'           shift, and enter state 53
	'ISWAP'        shift, and enter state 54
	'ROOT_SWAP'    shift, and enter state 55
	'ROOT_SWAP_DAG'shift, and enter state 56
	'ROOT_X'       shift, and enter state 57
	'ROOT_X_DAG'   shift, and enter state 58
	'ROOT_Y'       shift, and enter state 59
	'ROOT_Y_DAG'   shift, and enter state 60
	'ROOT_Z'       shift, and enter state 61
	'ROOT_Z_DAG'   shift, and enter state 62
	'RX'           shift, and enter state 63
	'RY'           shift, and enter state 64
	'RZ'           shift, and enter state 65
	'S'            shift, and enter state 66
	'SQRT_SWAP'    shift, and enter state 67
	'SQRT_SWAP_DAG'shift, and enter state 68
	'SQRT_X'       shift, and enter state 69
	'SQRT_X_DAG'   shift, and enter state 70
	'SQRT_Y'       shift, and enter state 71
	'SQRT_Y_DAG'   shift, and enter state 72
	'SWAP'         shift, and enter state 73
	'SWAP_THETA'   shift, and enter state 74
	'S_DAG'        shift, and enter state 75
	'T'            shift, and enter state 76
	'T_DAG'        shift, and enter state 77
	'U1'           shift, and enter state 78
	'U2'           shift, and enter state 79
	'U3'           shift, and enter state 80
	'X'            shift, and enter state 81
	'Y'            shift, and enter state 82
	'Z'            shift, and enter state 83
	'case'         shift, and enter state 84
	'if'           shift, and enter state 85
	'let'          shift, and enter state 86
	L_GateIdent    shift, and enter state 87
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 88
	L_Bit          shift, and enter state 89

	GateIdent      goto state 39
	Var            goto state 40
	Lambda         goto state 41
	Bit            goto state 42
	Gate           goto state 43
	Tuple          goto state 44
	Term3          goto state 45
	Term1          goto state 46
	Term2          goto state 47
	Term           goto state 227

State 221

	ListLambdaVariable -> LambdaVariable ListLambdaVariable .    (rule 100)

	'->'           reduce using rule 100


State 222

	Gate -> GateIdent '[' ListControl ']' .             (rule 94)

	'$'            reduce using rule 94
	'('            reduce using rule 94
	'()'           reduce using rule 94
	')'            reduce using rule 94
	','            reduce using rule 94
	'->'           reduce using rule 94
	';'            reduce using rule 94
	'FSWAP'        reduce using rule 94
	'H'            reduce using rule 94
	'ID'           reduce using rule 94
	'ISWAP'        reduce using rule 94
	'ROOT_SWAP'    reduce using rule 94
	'ROOT_SWAP_DAG'reduce using rule 94
	'ROOT_X'       reduce using rule 94
	'ROOT_X_DAG'   reduce using rule 94
	'ROOT_Y'       reduce using rule 94
	'ROOT_Y_DAG'   reduce using rule 94
	'ROOT_Z'       reduce using rule 94
	'ROOT_Z_DAG'   reduce using rule 94
	'RX'           reduce using rule 94
	'RY'           reduce using rule 94
	'RZ'           reduce using rule 94
	'S'            reduce using rule 94
	'SQRT_SWAP'    reduce using rule 94
	'SQRT_SWAP_DAG'reduce using rule 94
	'SQRT_X'       reduce using rule 94
	'SQRT_X_DAG'   reduce using rule 94
	'SQRT_Y'       reduce using rule 94
	'SQRT_Y_DAG'   reduce using rule 94
	'SWAP'         reduce using rule 94
	'SWAP_THETA'   reduce using rule 94
	'S_DAG'        reduce using rule 94
	'T'            reduce using rule 94
	'T_DAG'        reduce using rule 94
	'U1'           reduce using rule 94
	'U2'           reduce using rule 94
	'U3'           reduce using rule 94
	'X'            reduce using rule 94
	'Y'            reduce using rule 94
	'Z'            reduce using rule 94
	']'            reduce using rule 94
	'else'         reduce using rule 94
	'of'           reduce using rule 94
	'then'         reduce using rule 94
	'}'            reduce using rule 94
	L_GateIdent    reduce using rule 94
	L_Var          reduce using rule 94
	L_Bit          reduce using rule 94


State 223

	ListControl -> Control ',' . ListControl            (rule 28)

	'@+'           shift, and enter state 135
	'@+i'          shift, and enter state 136
	'@-'           shift, and enter state 137
	'@-i'          shift, and enter state 138
	'@0'           shift, and enter state 139
	'@1'           shift, and enter state 140

	ControlState   goto state 132
	Control        goto state 133
	ListControl    goto state 226

State 224

	Control -> ControlState '->' . Term                 (rule 26)

	'('            shift, and enter state 49
	'()'           shift, and enter state 50
	'FSWAP'        shift, and enter state 51
	'H'            shift, and enter state 52
	'ID'           shift, and enter state 53
	'ISWAP'        shift, and enter state 54
	'ROOT_SWAP'    shift, and enter state 55
	'ROOT_SWAP_DAG'shift, and enter state 56
	'ROOT_X'       shift, and enter state 57
	'ROOT_X_DAG'   shift, and enter state 58
	'ROOT_Y'       shift, and enter state 59
	'ROOT_Y_DAG'   shift, and enter state 60
	'ROOT_Z'       shift, and enter state 61
	'ROOT_Z_DAG'   shift, and enter state 62
	'RX'           shift, and enter state 63
	'RY'           shift, and enter state 64
	'RZ'           shift, and enter state 65
	'S'            shift, and enter state 66
	'SQRT_SWAP'    shift, and enter state 67
	'SQRT_SWAP_DAG'shift, and enter state 68
	'SQRT_X'       shift, and enter state 69
	'SQRT_X_DAG'   shift, and enter state 70
	'SQRT_Y'       shift, and enter state 71
	'SQRT_Y_DAG'   shift, and enter state 72
	'SWAP'         shift, and enter state 73
	'SWAP_THETA'   shift, and enter state 74
	'S_DAG'        shift, and enter state 75
	'T'            shift, and enter state 76
	'T_DAG'        shift, and enter state 77
	'U1'           shift, and enter state 78
	'U2'           shift, and enter state 79
	'U3'           shift, and enter state 80
	'X'            shift, and enter state 81
	'Y'            shift, and enter state 82
	'Z'            shift, and enter state 83
	'case'         shift, and enter state 84
	'if'           shift, and enter state 85
	'let'          shift, and enter state 86
	L_GateIdent    shift, and enter state 87
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 88
	L_Bit          shift, and enter state 89

	GateIdent      goto state 39
	Var            goto state 40
	Lambda         goto state 41
	Bit            goto state 42
	Gate           goto state 43
	Tuple          goto state 44
	Term3          goto state 45
	Term1          goto state 46
	Term2          goto state 47
	Term           goto state 225

State 225

	Control -> ControlState '->' Term .                 (rule 26)

	','            reduce using rule 26
	']'            reduce using rule 26


State 226

	ListControl -> Control ',' ListControl .            (rule 28)

	']'            reduce using rule 28


State 227

	Term1 -> Lambda LambdaVariable ListLambdaVariable '->' Term .    (rule 114)

	')'            reduce using rule 114
	','            reduce using rule 114
	'->'           reduce using rule 114
	';'            reduce using rule 114
	']'            reduce using rule 114
	'else'         reduce using rule 114
	'of'           reduce using rule 114
	'then'         reduce using rule 114
	'}'            reduce using rule 114


State 228

	ListTerm -> Term ',' . ListTerm                     (rule 103)

	'('            shift, and enter state 49
	'()'           shift, and enter state 50
	'FSWAP'        shift, and enter state 51
	'H'            shift, and enter state 52
	'ID'           shift, and enter state 53
	'ISWAP'        shift, and enter state 54
	'ROOT_SWAP'    shift, and enter state 55
	'ROOT_SWAP_DAG'shift, and enter state 56
	'ROOT_X'       shift, and enter state 57
	'ROOT_X_DAG'   shift, and enter state 58
	'ROOT_Y'       shift, and enter state 59
	'ROOT_Y_DAG'   shift, and enter state 60
	'ROOT_Z'       shift, and enter state 61
	'ROOT_Z_DAG'   shift, and enter state 62
	'RX'           shift, and enter state 63
	'RY'           shift, and enter state 64
	'RZ'           shift, and enter state 65
	'S'            shift, and enter state 66
	'SQRT_SWAP'    shift, and enter state 67
	'SQRT_SWAP_DAG'shift, and enter state 68
	'SQRT_X'       shift, and enter state 69
	'SQRT_X_DAG'   shift, and enter state 70
	'SQRT_Y'       shift, and enter state 71
	'SQRT_Y_DAG'   shift, and enter state 72
	'SWAP'         shift, and enter state 73
	'SWAP_THETA'   shift, and enter state 74
	'S_DAG'        shift, and enter state 75
	'T'            shift, and enter state 76
	'T_DAG'        shift, and enter state 77
	'U1'           shift, and enter state 78
	'U2'           shift, and enter state 79
	'U3'           shift, and enter state 80
	'X'            shift, and enter state 81
	'Y'            shift, and enter state 82
	'Z'            shift, and enter state 83
	'case'         shift, and enter state 84
	'if'           shift, and enter state 85
	'let'          shift, and enter state 86
	L_GateIdent    shift, and enter state 87
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 88
	L_Bit          shift, and enter state 89

	GateIdent      goto state 39
	Var            goto state 40
	Lambda         goto state 41
	Bit            goto state 42
	Gate           goto state 43
	Tuple          goto state 44
	ListTerm       goto state 258
	Term3          goto state 45
	Term1          goto state 46
	Term2          goto state 47
	Term           goto state 219

State 229

	Tuple -> '(' Term ',' ListTerm ')' .                (rule 101)

	'$'            reduce using rule 101
	'('            reduce using rule 101
	'()'           reduce using rule 101
	')'            reduce using rule 101
	','            reduce using rule 101
	'->'           reduce using rule 101
	';'            reduce using rule 101
	'FSWAP'        reduce using rule 101
	'H'            reduce using rule 101
	'ID'           reduce using rule 101
	'ISWAP'        reduce using rule 101
	'ROOT_SWAP'    reduce using rule 101
	'ROOT_SWAP_DAG'reduce using rule 101
	'ROOT_X'       reduce using rule 101
	'ROOT_X_DAG'   reduce using rule 101
	'ROOT_Y'       reduce using rule 101
	'ROOT_Y_DAG'   reduce using rule 101
	'ROOT_Z'       reduce using rule 101
	'ROOT_Z_DAG'   reduce using rule 101
	'RX'           reduce using rule 101
	'RY'           reduce using rule 101
	'RZ'           reduce using rule 101
	'S'            reduce using rule 101
	'SQRT_SWAP'    reduce using rule 101
	'SQRT_SWAP_DAG'reduce using rule 101
	'SQRT_X'       reduce using rule 101
	'SQRT_X_DAG'   reduce using rule 101
	'SQRT_Y'       reduce using rule 101
	'SQRT_Y_DAG'   reduce using rule 101
	'SWAP'         reduce using rule 101
	'SWAP_THETA'   reduce using rule 101
	'S_DAG'        reduce using rule 101
	'T'            reduce using rule 101
	'T_DAG'        reduce using rule 101
	'U1'           reduce using rule 101
	'U2'           reduce using rule 101
	'U3'           reduce using rule 101
	'X'            reduce using rule 101
	'Y'            reduce using rule 101
	'Z'            reduce using rule 101
	']'            reduce using rule 101
	'else'         reduce using rule 101
	'of'           reduce using rule 101
	'then'         reduce using rule 101
	'}'            reduce using rule 101
	L_GateIdent    reduce using rule 101
	L_Var          reduce using rule 101
	L_Bit          reduce using rule 101


State 230

	Gate -> 'ROOT_SWAP' Integer '[' ListControl ']' .    (rule 90)

	'$'            reduce using rule 90
	'('            reduce using rule 90
	'()'           reduce using rule 90
	')'            reduce using rule 90
	','            reduce using rule 90
	'->'           reduce using rule 90
	';'            reduce using rule 90
	'FSWAP'        reduce using rule 90
	'H'            reduce using rule 90
	'ID'           reduce using rule 90
	'ISWAP'        reduce using rule 90
	'ROOT_SWAP'    reduce using rule 90
	'ROOT_SWAP_DAG'reduce using rule 90
	'ROOT_X'       reduce using rule 90
	'ROOT_X_DAG'   reduce using rule 90
	'ROOT_Y'       reduce using rule 90
	'ROOT_Y_DAG'   reduce using rule 90
	'ROOT_Z'       reduce using rule 90
	'ROOT_Z_DAG'   reduce using rule 90
	'RX'           reduce using rule 90
	'RY'           reduce using rule 90
	'RZ'           reduce using rule 90
	'S'            reduce using rule 90
	'SQRT_SWAP'    reduce using rule 90
	'SQRT_SWAP_DAG'reduce using rule 90
	'SQRT_X'       reduce using rule 90
	'SQRT_X_DAG'   reduce using rule 90
	'SQRT_Y'       reduce using rule 90
	'SQRT_Y_DAG'   reduce using rule 90
	'SWAP'         reduce using rule 90
	'SWAP_THETA'   reduce using rule 90
	'S_DAG'        reduce using rule 90
	'T'            reduce using rule 90
	'T_DAG'        reduce using rule 90
	'U1'           reduce using rule 90
	'U2'           reduce using rule 90
	'U3'           reduce using rule 90
	'X'            reduce using rule 90
	'Y'            reduce using rule 90
	'Z'            reduce using rule 90
	']'            reduce using rule 90
	'else'         reduce using rule 90
	'of'           reduce using rule 90
	'then'         reduce using rule 90
	'}'            reduce using rule 90
	L_GateIdent    reduce using rule 90
	L_Var          reduce using rule 90
	L_Bit          reduce using rule 90


State 231

	Gate -> 'ROOT_SWAP_DAG' Integer '[' ListControl ']' .    (rule 92)

	'$'            reduce using rule 92
	'('            reduce using rule 92
	'()'           reduce using rule 92
	')'            reduce using rule 92
	','            reduce using rule 92
	'->'           reduce using rule 92
	';'            reduce using rule 92
	'FSWAP'        reduce using rule 92
	'H'            reduce using rule 92
	'ID'           reduce using rule 92
	'ISWAP'        reduce using rule 92
	'ROOT_SWAP'    reduce using rule 92
	'ROOT_SWAP_DAG'reduce using rule 92
	'ROOT_X'       reduce using rule 92
	'ROOT_X_DAG'   reduce using rule 92
	'ROOT_Y'       reduce using rule 92
	'ROOT_Y_DAG'   reduce using rule 92
	'ROOT_Z'       reduce using rule 92
	'ROOT_Z_DAG'   reduce using rule 92
	'RX'           reduce using rule 92
	'RY'           reduce using rule 92
	'RZ'           reduce using rule 92
	'S'            reduce using rule 92
	'SQRT_SWAP'    reduce using rule 92
	'SQRT_SWAP_DAG'reduce using rule 92
	'SQRT_X'       reduce using rule 92
	'SQRT_X_DAG'   reduce using rule 92
	'SQRT_Y'       reduce using rule 92
	'SQRT_Y_DAG'   reduce using rule 92
	'SWAP'         reduce using rule 92
	'SWAP_THETA'   reduce using rule 92
	'S_DAG'        reduce using rule 92
	'T'            reduce using rule 92
	'T_DAG'        reduce using rule 92
	'U1'           reduce using rule 92
	'U2'           reduce using rule 92
	'U3'           reduce using rule 92
	'X'            reduce using rule 92
	'Y'            reduce using rule 92
	'Z'            reduce using rule 92
	']'            reduce using rule 92
	'else'         reduce using rule 92
	'of'           reduce using rule 92
	'then'         reduce using rule 92
	'}'            reduce using rule 92
	L_GateIdent    reduce using rule 92
	L_Var          reduce using rule 92
	L_Bit          reduce using rule 92


State 232

	Gate -> 'ROOT_X' Integer '[' ListControl ']' .      (rule 39)

	'$'            reduce using rule 39
	'('            reduce using rule 39
	'()'           reduce using rule 39
	')'            reduce using rule 39
	','            reduce using rule 39
	'->'           reduce using rule 39
	';'            reduce using rule 39
	'FSWAP'        reduce using rule 39
	'H'            reduce using rule 39
	'ID'           reduce using rule 39
	'ISWAP'        reduce using rule 39
	'ROOT_SWAP'    reduce using rule 39
	'ROOT_SWAP_DAG'reduce using rule 39
	'ROOT_X'       reduce using rule 39
	'ROOT_X_DAG'   reduce using rule 39
	'ROOT_Y'       reduce using rule 39
	'ROOT_Y_DAG'   reduce using rule 39
	'ROOT_Z'       reduce using rule 39
	'ROOT_Z_DAG'   reduce using rule 39
	'RX'           reduce using rule 39
	'RY'           reduce using rule 39
	'RZ'           reduce using rule 39
	'S'            reduce using rule 39
	'SQRT_SWAP'    reduce using rule 39
	'SQRT_SWAP_DAG'reduce using rule 39
	'SQRT_X'       reduce using rule 39
	'SQRT_X_DAG'   reduce using rule 39
	'SQRT_Y'       reduce using rule 39
	'SQRT_Y_DAG'   reduce using rule 39
	'SWAP'         reduce using rule 39
	'SWAP_THETA'   reduce using rule 39
	'S_DAG'        reduce using rule 39
	'T'            reduce using rule 39
	'T_DAG'        reduce using rule 39
	'U1'           reduce using rule 39
	'U2'           reduce using rule 39
	'U3'           reduce using rule 39
	'X'            reduce using rule 39
	'Y'            reduce using rule 39
	'Z'            reduce using rule 39
	']'            reduce using rule 39
	'else'         reduce using rule 39
	'of'           reduce using rule 39
	'then'         reduce using rule 39
	'}'            reduce using rule 39
	L_GateIdent    reduce using rule 39
	L_Var          reduce using rule 39
	L_Bit          reduce using rule 39


State 233

	Gate -> 'ROOT_X_DAG' Integer '[' ListControl ']' .    (rule 41)

	'$'            reduce using rule 41
	'('            reduce using rule 41
	'()'           reduce using rule 41
	')'            reduce using rule 41
	','            reduce using rule 41
	'->'           reduce using rule 41
	';'            reduce using rule 41
	'FSWAP'        reduce using rule 41
	'H'            reduce using rule 41
	'ID'           reduce using rule 41
	'ISWAP'        reduce using rule 41
	'ROOT_SWAP'    reduce using rule 41
	'ROOT_SWAP_DAG'reduce using rule 41
	'ROOT_X'       reduce using rule 41
	'ROOT_X_DAG'   reduce using rule 41
	'ROOT_Y'       reduce using rule 41
	'ROOT_Y_DAG'   reduce using rule 41
	'ROOT_Z'       reduce using rule 41
	'ROOT_Z_DAG'   reduce using rule 41
	'RX'           reduce using rule 41
	'RY'           reduce using rule 41
	'RZ'           reduce using rule 41
	'S'            reduce using rule 41
	'SQRT_SWAP'    reduce using rule 41
	'SQRT_SWAP_DAG'reduce using rule 41
	'SQRT_X'       reduce using rule 41
	'SQRT_X_DAG'   reduce using rule 41
	'SQRT_Y'       reduce using rule 41
	'SQRT_Y_DAG'   reduce using rule 41
	'SWAP'         reduce using rule 41
	'SWAP_THETA'   reduce using rule 41
	'S_DAG'        reduce using rule 41
	'T'            reduce using rule 41
	'T_DAG'        reduce using rule 41
	'U1'           reduce using rule 41
	'U2'           reduce using rule 41
	'U3'           reduce using rule 41
	'X'            reduce using rule 41
	'Y'            reduce using rule 41
	'Z'            reduce using rule 41
	']'            reduce using rule 41
	'else'         reduce using rule 41
	'of'           reduce using rule 41
	'then'         reduce using rule 41
	'}'            reduce using rule 41
	L_GateIdent    reduce using rule 41
	L_Var          reduce using rule 41
	L_Bit          reduce using rule 41


State 234

	Gate -> 'ROOT_Y' Integer '[' ListControl ']' .      (rule 43)

	'$'            reduce using rule 43
	'('            reduce using rule 43
	'()'           reduce using rule 43
	')'            reduce using rule 43
	','            reduce using rule 43
	'->'           reduce using rule 43
	';'            reduce using rule 43
	'FSWAP'        reduce using rule 43
	'H'            reduce using rule 43
	'ID'           reduce using rule 43
	'ISWAP'        reduce using rule 43
	'ROOT_SWAP'    reduce using rule 43
	'ROOT_SWAP_DAG'reduce using rule 43
	'ROOT_X'       reduce using rule 43
	'ROOT_X_DAG'   reduce using rule 43
	'ROOT_Y'       reduce using rule 43
	'ROOT_Y_DAG'   reduce using rule 43
	'ROOT_Z'       reduce using rule 43
	'ROOT_Z_DAG'   reduce using rule 43
	'RX'           reduce using rule 43
	'RY'           reduce using rule 43
	'RZ'           reduce using rule 43
	'S'            reduce using rule 43
	'SQRT_SWAP'    reduce using rule 43
	'SQRT_SWAP_DAG'reduce using rule 43
	'SQRT_X'       reduce using rule 43
	'SQRT_X_DAG'   reduce using rule 43
	'SQRT_Y'       reduce using rule 43
	'SQRT_Y_DAG'   reduce using rule 43
	'SWAP'         reduce using rule 43
	'SWAP_THETA'   reduce using rule 43
	'S_DAG'        reduce using rule 43
	'T'            reduce using rule 43
	'T_DAG'        reduce using rule 43
	'U1'           reduce using rule 43
	'U2'           reduce using rule 43
	'U3'           reduce using rule 43
	'X'            reduce using rule 43
	'Y'            reduce using rule 43
	'Z'            reduce using rule 43
	']'            reduce using rule 43
	'else'         reduce using rule 43
	'of'           reduce using rule 43
	'then'         reduce using rule 43
	'}'            reduce using rule 43
	L_GateIdent    reduce using rule 43
	L_Var          reduce using rule 43
	L_Bit          reduce using rule 43


State 235

	Gate -> 'ROOT_Y_DAG' Integer '[' ListControl ']' .    (rule 45)

	'$'            reduce using rule 45
	'('            reduce using rule 45
	'()'           reduce using rule 45
	')'            reduce using rule 45
	','            reduce using rule 45
	'->'           reduce using rule 45
	';'            reduce using rule 45
	'FSWAP'        reduce using rule 45
	'H'            reduce using rule 45
	'ID'           reduce using rule 45
	'ISWAP'        reduce using rule 45
	'ROOT_SWAP'    reduce using rule 45
	'ROOT_SWAP_DAG'reduce using rule 45
	'ROOT_X'       reduce using rule 45
	'ROOT_X_DAG'   reduce using rule 45
	'ROOT_Y'       reduce using rule 45
	'ROOT_Y_DAG'   reduce using rule 45
	'ROOT_Z'       reduce using rule 45
	'ROOT_Z_DAG'   reduce using rule 45
	'RX'           reduce using rule 45
	'RY'           reduce using rule 45
	'RZ'           reduce using rule 45
	'S'            reduce using rule 45
	'SQRT_SWAP'    reduce using rule 45
	'SQRT_SWAP_DAG'reduce using rule 45
	'SQRT_X'       reduce using rule 45
	'SQRT_X_DAG'   reduce using rule 45
	'SQRT_Y'       reduce using rule 45
	'SQRT_Y_DAG'   reduce using rule 45
	'SWAP'         reduce using rule 45
	'SWAP_THETA'   reduce using rule 45
	'S_DAG'        reduce using rule 45
	'T'            reduce using rule 45
	'T_DAG'        reduce using rule 45
	'U1'           reduce using rule 45
	'U2'           reduce using rule 45
	'U3'           reduce using rule 45
	'X'            reduce using rule 45
	'Y'            reduce using rule 45
	'Z'            reduce using rule 45
	']'            reduce using rule 45
	'else'         reduce using rule 45
	'of'           reduce using rule 45
	'then'         reduce using rule 45
	'}'            reduce using rule 45
	L_GateIdent    reduce using rule 45
	L_Var          reduce using rule 45
	L_Bit          reduce using rule 45


State 236

	Gate -> 'ROOT_Z' Integer '[' ListControl ']' .      (rule 47)

	'$'            reduce using rule 47
	'('            reduce using rule 47
	'()'           reduce using rule 47
	')'            reduce using rule 47
	','            reduce using rule 47
	'->'           reduce using rule 47
	';'            reduce using rule 47
	'FSWAP'        reduce using rule 47
	'H'            reduce using rule 47
	'ID'           reduce using rule 47
	'ISWAP'        reduce using rule 47
	'ROOT_SWAP'    reduce using rule 47
	'ROOT_SWAP_DAG'reduce using rule 47
	'ROOT_X'       reduce using rule 47
	'ROOT_X_DAG'   reduce using rule 47
	'ROOT_Y'       reduce using rule 47
	'ROOT_Y_DAG'   reduce using rule 47
	'ROOT_Z'       reduce using rule 47
	'ROOT_Z_DAG'   reduce using rule 47
	'RX'           reduce using rule 47
	'RY'           reduce using rule 47
	'RZ'           reduce using rule 47
	'S'            reduce using rule 47
	'SQRT_SWAP'    reduce using rule 47
	'SQRT_SWAP_DAG'reduce using rule 47
	'SQRT_X'       reduce using rule 47
	'SQRT_X_DAG'   reduce using rule 47
	'SQRT_Y'       reduce using rule 47
	'SQRT_Y_DAG'   reduce using rule 47
	'SWAP'         reduce using rule 47
	'SWAP_THETA'   reduce using rule 47
	'S_DAG'        reduce using rule 47
	'T'            reduce using rule 47
	'T_DAG'        reduce using rule 47
	'U1'           reduce using rule 47
	'U2'           reduce using rule 47
	'U3'           reduce using rule 47
	'X'            reduce using rule 47
	'Y'            reduce using rule 47
	'Z'            reduce using rule 47
	']'            reduce using rule 47
	'else'         reduce using rule 47
	'of'           reduce using rule 47
	'then'         reduce using rule 47
	'}'            reduce using rule 47
	L_GateIdent    reduce using rule 47
	L_Var          reduce using rule 47
	L_Bit          reduce using rule 47


State 237

	Gate -> 'ROOT_Z_DAG' Integer '[' ListControl ']' .    (rule 49)

	'$'            reduce using rule 49
	'('            reduce using rule 49
	'()'           reduce using rule 49
	')'            reduce using rule 49
	','            reduce using rule 49
	'->'           reduce using rule 49
	';'            reduce using rule 49
	'FSWAP'        reduce using rule 49
	'H'            reduce using rule 49
	'ID'           reduce using rule 49
	'ISWAP'        reduce using rule 49
	'ROOT_SWAP'    reduce using rule 49
	'ROOT_SWAP_DAG'reduce using rule 49
	'ROOT_X'       reduce using rule 49
	'ROOT_X_DAG'   reduce using rule 49
	'ROOT_Y'       reduce using rule 49
	'ROOT_Y_DAG'   reduce using rule 49
	'ROOT_Z'       reduce using rule 49
	'ROOT_Z_DAG'   reduce using rule 49
	'RX'           reduce using rule 49
	'RY'           reduce using rule 49
	'RZ'           reduce using rule 49
	'S'            reduce using rule 49
	'SQRT_SWAP'    reduce using rule 49
	'SQRT_SWAP_DAG'reduce using rule 49
	'SQRT_X'       reduce using rule 49
	'SQRT_X_DAG'   reduce using rule 49
	'SQRT_Y'       reduce using rule 49
	'SQRT_Y_DAG'   reduce using rule 49
	'SWAP'         reduce using rule 49
	'SWAP_THETA'   reduce using rule 49
	'S_DAG'        reduce using rule 49
	'T'            reduce using rule 49
	'T_DAG'        reduce using rule 49
	'U1'           reduce using rule 49
	'U2'           reduce using rule 49
	'U3'           reduce using rule 49
	'X'            reduce using rule 49
	'Y'            reduce using rule 49
	'Z'            reduce using rule 49
	']'            reduce using rule 49
	'else'         reduce using rule 49
	'of'           reduce using rule 49
	'then'         reduce using rule 49
	'}'            reduce using rule 49
	L_GateIdent    reduce using rule 49
	L_Var          reduce using rule 49
	L_Bit          reduce using rule 49


State 238

	Gate -> 'RX' Angle '[' ListControl ']' .            (rule 67)

	'$'            reduce using rule 67
	'('            reduce using rule 67
	'()'           reduce using rule 67
	')'            reduce using rule 67
	','            reduce using rule 67
	'->'           reduce using rule 67
	';'            reduce using rule 67
	'FSWAP'        reduce using rule 67
	'H'            reduce using rule 67
	'ID'           reduce using rule 67
	'ISWAP'        reduce using rule 67
	'ROOT_SWAP'    reduce using rule 67
	'ROOT_SWAP_DAG'reduce using rule 67
	'ROOT_X'       reduce using rule 67
	'ROOT_X_DAG'   reduce using rule 67
	'ROOT_Y'       reduce using rule 67
	'ROOT_Y_DAG'   reduce using rule 67
	'ROOT_Z'       reduce using rule 67
	'ROOT_Z_DAG'   reduce using rule 67
	'RX'           reduce using rule 67
	'RY'           reduce using rule 67
	'RZ'           reduce using rule 67
	'S'            reduce using rule 67
	'SQRT_SWAP'    reduce using rule 67
	'SQRT_SWAP_DAG'reduce using rule 67
	'SQRT_X'       reduce using rule 67
	'SQRT_X_DAG'   reduce using rule 67
	'SQRT_Y'       reduce using rule 67
	'SQRT_Y_DAG'   reduce using rule 67
	'SWAP'         reduce using rule 67
	'SWAP_THETA'   reduce using rule 67
	'S_DAG'        reduce using rule 67
	'T'            reduce using rule 67
	'T_DAG'        reduce using rule 67
	'U1'           reduce using rule 67
	'U2'           reduce using rule 67
	'U3'           reduce using rule 67
	'X'            reduce using rule 67
	'Y'            reduce using rule 67
	'Z'            reduce using rule 67
	']'            reduce using rule 67
	'else'         reduce using rule 67
	'of'           reduce using rule 67
	'then'         reduce using rule 67
	'}'            reduce using rule 67
	L_GateIdent    reduce using rule 67
	L_Var          reduce using rule 67
	L_Bit          reduce using rule 67


State 239

	Gate -> 'RY' Angle '[' ListControl ']' .            (rule 69)

	'$'            reduce using rule 69
	'('            reduce using rule 69
	'()'           reduce using rule 69
	')'            reduce using rule 69
	','            reduce using rule 69
	'->'           reduce using rule 69
	';'            reduce using rule 69
	'FSWAP'        reduce using rule 69
	'H'            reduce using rule 69
	'ID'           reduce using rule 69
	'ISWAP'        reduce using rule 69
	'ROOT_SWAP'    reduce using rule 69
	'ROOT_SWAP_DAG'reduce using rule 69
	'ROOT_X'       reduce using rule 69
	'ROOT_X_DAG'   reduce using rule 69
	'ROOT_Y'       reduce using rule 69
	'ROOT_Y_DAG'   reduce using rule 69
	'ROOT_Z'       reduce using rule 69
	'ROOT_Z_DAG'   reduce using rule 69
	'RX'           reduce using rule 69
	'RY'           reduce using rule 69
	'RZ'           reduce using rule 69
	'S'            reduce using rule 69
	'SQRT_SWAP'    reduce using rule 69
	'SQRT_SWAP_DAG'reduce using rule 69
	'SQRT_X'       reduce using rule 69
	'SQRT_X_DAG'   reduce using rule 69
	'SQRT_Y'       reduce using rule 69
	'SQRT_Y_DAG'   reduce using rule 69
	'SWAP'         reduce using rule 69
	'SWAP_THETA'   reduce using rule 69
	'S_DAG'        reduce using rule 69
	'T'            reduce using rule 69
	'T_DAG'        reduce using rule 69
	'U1'           reduce using rule 69
	'U2'           reduce using rule 69
	'U3'           reduce using rule 69
	'X'            reduce using rule 69
	'Y'            reduce using rule 69
	'Z'            reduce using rule 69
	']'            reduce using rule 69
	'else'         reduce using rule 69
	'of'           reduce using rule 69
	'then'         reduce using rule 69
	'}'            reduce using rule 69
	L_GateIdent    reduce using rule 69
	L_Var          reduce using rule 69
	L_Bit          reduce using rule 69


State 240

	Gate -> 'RZ' Angle '[' ListControl ']' .            (rule 71)

	'$'            reduce using rule 71
	'('            reduce using rule 71
	'()'           reduce using rule 71
	')'            reduce using rule 71
	','            reduce using rule 71
	'->'           reduce using rule 71
	';'            reduce using rule 71
	'FSWAP'        reduce using rule 71
	'H'            reduce using rule 71
	'ID'           reduce using rule 71
	'ISWAP'        reduce using rule 71
	'ROOT_SWAP'    reduce using rule 71
	'ROOT_SWAP_DAG'reduce using rule 71
	'ROOT_X'       reduce using rule 71
	'ROOT_X_DAG'   reduce using rule 71
	'ROOT_Y'       reduce using rule 71
	'ROOT_Y_DAG'   reduce using rule 71
	'ROOT_Z'       reduce using rule 71
	'ROOT_Z_DAG'   reduce using rule 71
	'RX'           reduce using rule 71
	'RY'           reduce using rule 71
	'RZ'           reduce using rule 71
	'S'            reduce using rule 71
	'SQRT_SWAP'    reduce using rule 71
	'SQRT_SWAP_DAG'reduce using rule 71
	'SQRT_X'       reduce using rule 71
	'SQRT_X_DAG'   reduce using rule 71
	'SQRT_Y'       reduce using rule 71
	'SQRT_Y_DAG'   reduce using rule 71
	'SWAP'         reduce using rule 71
	'SWAP_THETA'   reduce using rule 71
	'S_DAG'        reduce using rule 71
	'T'            reduce using rule 71
	'T_DAG'        reduce using rule 71
	'U1'           reduce using rule 71
	'U2'           reduce using rule 71
	'U3'           reduce using rule 71
	'X'            reduce using rule 71
	'Y'            reduce using rule 71
	'Z'            reduce using rule 71
	']'            reduce using rule 71
	'else'         reduce using rule 71
	'of'           reduce using rule 71
	'then'         reduce using rule 71
	'}'            reduce using rule 71
	L_GateIdent    reduce using rule 71
	L_Var          reduce using rule 71
	L_Bit          reduce using rule 71


State 241

	Gate -> 'U1' Angle '[' ListControl ']' .            (rule 73)

	'$'            reduce using rule 73
	'('            reduce using rule 73
	'()'           reduce using rule 73
	')'            reduce using rule 73
	','            reduce using rule 73
	'->'           reduce using rule 73
	';'            reduce using rule 73
	'FSWAP'        reduce using rule 73
	'H'            reduce using rule 73
	'ID'           reduce using rule 73
	'ISWAP'        reduce using rule 73
	'ROOT_SWAP'    reduce using rule 73
	'ROOT_SWAP_DAG'reduce using rule 73
	'ROOT_X'       reduce using rule 73
	'ROOT_X_DAG'   reduce using rule 73
	'ROOT_Y'       reduce using rule 73
	'ROOT_Y_DAG'   reduce using rule 73
	'ROOT_Z'       reduce using rule 73
	'ROOT_Z_DAG'   reduce using rule 73
	'RX'           reduce using rule 73
	'RY'           reduce using rule 73
	'RZ'           reduce using rule 73
	'S'            reduce using rule 73
	'SQRT_SWAP'    reduce using rule 73
	'SQRT_SWAP_DAG'reduce using rule 73
	'SQRT_X'       reduce using rule 73
	'SQRT_X_DAG'   reduce using rule 73
	'SQRT_Y'       reduce using rule 73
	'SQRT_Y_DAG'   reduce using rule 73
	'SWAP'         reduce using rule 73
	'SWAP_THETA'   reduce using rule 73
	'S_DAG'        reduce using rule 73
	'T'            reduce using rule 73
	'T_DAG'        reduce using rule 73
	'U1'           reduce using rule 73
	'U2'           reduce using rule 73
	'U3'           reduce using rule 73
	'X'            reduce using rule 73
	'Y'            reduce using rule 73
	'Z'            reduce using rule 73
	']'            reduce using rule 73
	'else'         reduce using rule 73
	'of'           reduce using rule 73
	'then'         reduce using rule 73
	'}'            reduce using rule 73
	L_GateIdent    reduce using rule 73
	L_Var          reduce using rule 73
	L_Bit          reduce using rule 73


State 242

	Gate -> 'U2' Angle Angle '[' ListControl . ']'      (rule 75)

	']'            shift, and enter state 257


State 243

	Gate -> 'U3' Angle Angle Angle '[' . ListControl ']'    (rule 77)

	'@+'           shift, and enter state 135
	'@+i'          shift, and enter state 136
	'@-'           shift, and enter state 137
	'@-i'          shift, and enter state 138
	'@0'           shift, and enter state 139
	'@1'           shift, and enter state 140

	ControlState   goto state 132
	Control        goto state 133
	ListControl    goto state 256

State 244

	ListCaseExpression -> CaseExpression .              (rule 121)
	ListCaseExpression -> CaseExpression . ListCaseExpression    (rule 122)

	'('            shift, and enter state 49
	'()'           shift, and enter state 50
	')'            reduce using rule 121
	','            reduce using rule 121
	'->'           reduce using rule 121
	';'            reduce using rule 121
	'FSWAP'        shift, and enter state 51
	'H'            shift, and enter state 52
	'ID'           shift, and enter state 53
	'ISWAP'        shift, and enter state 54
	'ROOT_SWAP'    shift, and enter state 55
	'ROOT_SWAP_DAG'shift, and enter state 56
	'ROOT_X'       shift, and enter state 57
	'ROOT_X_DAG'   shift, and enter state 58
	'ROOT_Y'       shift, and enter state 59
	'ROOT_Y_DAG'   shift, and enter state 60
	'ROOT_Z'       shift, and enter state 61
	'ROOT_Z_DAG'   shift, and enter state 62
	'RX'           shift, and enter state 63
	'RY'           shift, and enter state 64
	'RZ'           shift, and enter state 65
	'S'            shift, and enter state 66
	'SQRT_SWAP'    shift, and enter state 67
	'SQRT_SWAP_DAG'shift, and enter state 68
	'SQRT_X'       shift, and enter state 69
	'SQRT_X_DAG'   shift, and enter state 70
	'SQRT_Y'       shift, and enter state 71
	'SQRT_Y_DAG'   shift, and enter state 72
	'SWAP'         shift, and enter state 73
	'SWAP_THETA'   shift, and enter state 74
	'S_DAG'        shift, and enter state 75
	'T'            shift, and enter state 76
	'T_DAG'        shift, and enter state 77
	'U1'           shift, and enter state 78
	'U2'           shift, and enter state 79
	'U3'           shift, and enter state 80
	'X'            shift, and enter state 81
	'Y'            shift, and enter state 82
	'Z'            shift, and enter state 83
	']'            reduce using rule 121
	'case'         shift, and enter state 84
	'else'         reduce using rule 121
	'if'           shift, and enter state 85
	'let'          shift, and enter state 86
	'of'           reduce using rule 121
	'then'         reduce using rule 121
	'}'            reduce using rule 121
	L_GateIdent    shift, and enter state 87
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 88
	L_Bit          shift, and enter state 89

	GateIdent      goto state 39
	Var            goto state 40
	Lambda         goto state 41
	Bit            goto state 42
	Gate           goto state 43
	Tuple          goto state 44
	Term3          goto state 45
	Term1          goto state 46
	Term2          goto state 47
	Term           goto state 185
	CaseExpression goto state 244
	ListCaseExpressiongoto state 255

State 245

	Term1 -> 'case' Term 'of' CaseExpression ListCaseExpression .    (rule 113)

	')'            reduce using rule 113
	','            reduce using rule 113
	'->'           reduce using rule 113
	';'            reduce using rule 113
	']'            reduce using rule 113
	'else'         reduce using rule 113
	'of'           reduce using rule 113
	'then'         reduce using rule 113
	'}'            reduce using rule 113


State 246

	CaseExpression -> Term '->' . Var                   (rule 120)

	L_Var          shift, and enter state 8

	Var            goto state 254

State 247

	Term1 -> 'if' Term 'then' Term 'else' . Term        (rule 110)

	'('            shift, and enter state 49
	'()'           shift, and enter state 50
	'FSWAP'        shift, and enter state 51
	'H'            shift, and enter state 52
	'ID'           shift, and enter state 53
	'ISWAP'        shift, and enter state 54
	'ROOT_SWAP'    shift, and enter state 55
	'ROOT_SWAP_DAG'shift, and enter state 56
	'ROOT_X'       shift, and enter state 57
	'ROOT_X_DAG'   shift, and enter state 58
	'ROOT_Y'       shift, and enter state 59
	'ROOT_Y_DAG'   shift, and enter state 60
	'ROOT_Z'       shift, and enter state 61
	'ROOT_Z_DAG'   shift, and enter state 62
	'RX'           shift, and enter state 63
	'RY'           shift, and enter state 64
	'RZ'           shift, and enter state 65
	'S'            shift, and enter state 66
	'SQRT_SWAP'    shift, and enter state 67
	'SQRT_SWAP_DAG'shift, and enter state 68
	'SQRT_X'       shift, and enter state 69
	'SQRT_X_DAG'   shift, and enter state 70
	'SQRT_Y'       shift, and enter state 71
	'SQRT_Y_DAG'   shift, and enter state 72
	'SWAP'         shift, and enter state 73
	'SWAP_THETA'   shift, and enter state 74
	'S_DAG'        shift, and enter state 75
	'T'            shift, and enter state 76
	'T_DAG'        shift, and enter state 77
	'U1'           shift, and enter state 78
	'U2'           shift, and enter state 79
	'U3'           shift, and enter state 80
	'X'            shift, and enter state 81
	'Y'            shift, and enter state 82
	'Z'            shift, and enter state 83
	'case'         shift, and enter state 84
	'if'           shift, and enter state 85
	'let'          shift, and enter state 86
	L_GateIdent    shift, and enter state 87
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 88
	L_Bit          shift, and enter state 89

	GateIdent      goto state 39
	Var            goto state 40
	Lambda         goto state 41
	Bit            goto state 42
	Gate           goto state 43
	Tuple          goto state 44
	Term3          goto state 45
	Term1          goto state 46
	Term2          goto state 47
	Term           goto state 253

State 248

	Term1 -> 'let' '{' LetVariable '=' Term . '}' 'in' Term    (rule 111)

	'}'            shift, and enter state 252


State 249

	Term1 -> 'let' '{' '(' LetVariable ',' . ListLetVariable ')' '=' Term '}' 'in' Term    (rule 112)

	L_Var          shift, and enter state 8

	Var            goto state 179
	LetVariable    goto state 250
	ListLetVariablegoto state 251

State 250

	ListLetVariable -> LetVariable .                    (rule 96)
	ListLetVariable -> LetVariable . ',' ListLetVariable    (rule 97)

	')'            reduce using rule 96
	','            shift, and enter state 262


State 251

	Term1 -> 'let' '{' '(' LetVariable ',' ListLetVariable . ')' '=' Term '}' 'in' Term    (rule 112)

	')'            shift, and enter state 261


State 252

	Term1 -> 'let' '{' LetVariable '=' Term '}' . 'in' Term    (rule 111)

	'in'           shift, and enter state 260


State 253

	Term1 -> 'if' Term 'then' Term 'else' Term .        (rule 110)

	')'            reduce using rule 110
	','            reduce using rule 110
	'->'           reduce using rule 110
	';'            reduce using rule 110
	']'            reduce using rule 110
	'else'         reduce using rule 110
	'of'           reduce using rule 110
	'then'         reduce using rule 110
	'}'            reduce using rule 110


State 254

	CaseExpression -> Term '->' Var .                   (rule 120)

	'('            reduce using rule 120
	'()'           reduce using rule 120
	')'            reduce using rule 120
	','            reduce using rule 120
	'->'           reduce using rule 120
	';'            reduce using rule 120
	'FSWAP'        reduce using rule 120
	'H'            reduce using rule 120
	'ID'           reduce using rule 120
	'ISWAP'        reduce using rule 120
	'ROOT_SWAP'    reduce using rule 120
	'ROOT_SWAP_DAG'reduce using rule 120
	'ROOT_X'       reduce using rule 120
	'ROOT_X_DAG'   reduce using rule 120
	'ROOT_Y'       reduce using rule 120
	'ROOT_Y_DAG'   reduce using rule 120
	'ROOT_Z'       reduce using rule 120
	'ROOT_Z_DAG'   reduce using rule 120
	'RX'           reduce using rule 120
	'RY'           reduce using rule 120
	'RZ'           reduce using rule 120
	'S'            reduce using rule 120
	'SQRT_SWAP'    reduce using rule 120
	'SQRT_SWAP_DAG'reduce using rule 120
	'SQRT_X'       reduce using rule 120
	'SQRT_X_DAG'   reduce using rule 120
	'SQRT_Y'       reduce using rule 120
	'SQRT_Y_DAG'   reduce using rule 120
	'SWAP'         reduce using rule 120
	'SWAP_THETA'   reduce using rule 120
	'S_DAG'        reduce using rule 120
	'T'            reduce using rule 120
	'T_DAG'        reduce using rule 120
	'U1'           reduce using rule 120
	'U2'           reduce using rule 120
	'U3'           reduce using rule 120
	'X'            reduce using rule 120
	'Y'            reduce using rule 120
	'Z'            reduce using rule 120
	']'            reduce using rule 120
	'case'         reduce using rule 120
	'else'         reduce using rule 120
	'if'           reduce using rule 120
	'let'          reduce using rule 120
	'of'           reduce using rule 120
	'then'         reduce using rule 120
	'}'            reduce using rule 120
	L_GateIdent    reduce using rule 120
	L_Var          reduce using rule 120
	L_Lambda       reduce using rule 120
	L_Bit          reduce using rule 120


State 255

	ListCaseExpression -> CaseExpression ListCaseExpression .    (rule 122)

	')'            reduce using rule 122
	','            reduce using rule 122
	'->'           reduce using rule 122
	';'            reduce using rule 122
	']'            reduce using rule 122
	'else'         reduce using rule 122
	'of'           reduce using rule 122
	'then'         reduce using rule 122
	'}'            reduce using rule 122


State 256

	Gate -> 'U3' Angle Angle Angle '[' ListControl . ']'    (rule 77)

	']'            shift, and enter state 259


State 257

	Gate -> 'U2' Angle Angle '[' ListControl ']' .      (rule 75)

	'$'            reduce using rule 75
	'('            reduce using rule 75
	'()'           reduce using rule 75
	')'            reduce using rule 75
	','            reduce using rule 75
	'->'           reduce using rule 75
	';'            reduce using rule 75
	'FSWAP'        reduce using rule 75
	'H'            reduce using rule 75
	'ID'           reduce using rule 75
	'ISWAP'        reduce using rule 75
	'ROOT_SWAP'    reduce using rule 75
	'ROOT_SWAP_DAG'reduce using rule 75
	'ROOT_X'       reduce using rule 75
	'ROOT_X_DAG'   reduce using rule 75
	'ROOT_Y'       reduce using rule 75
	'ROOT_Y_DAG'   reduce using rule 75
	'ROOT_Z'       reduce using rule 75
	'ROOT_Z_DAG'   reduce using rule 75
	'RX'           reduce using rule 75
	'RY'           reduce using rule 75
	'RZ'           reduce using rule 75
	'S'            reduce using rule 75
	'SQRT_SWAP'    reduce using rule 75
	'SQRT_SWAP_DAG'reduce using rule 75
	'SQRT_X'       reduce using rule 75
	'SQRT_X_DAG'   reduce using rule 75
	'SQRT_Y'       reduce using rule 75
	'SQRT_Y_DAG'   reduce using rule 75
	'SWAP'         reduce using rule 75
	'SWAP_THETA'   reduce using rule 75
	'S_DAG'        reduce using rule 75
	'T'            reduce using rule 75
	'T_DAG'        reduce using rule 75
	'U1'           reduce using rule 75
	'U2'           reduce using rule 75
	'U3'           reduce using rule 75
	'X'            reduce using rule 75
	'Y'            reduce using rule 75
	'Z'            reduce using rule 75
	']'            reduce using rule 75
	'else'         reduce using rule 75
	'of'           reduce using rule 75
	'then'         reduce using rule 75
	'}'            reduce using rule 75
	L_GateIdent    reduce using rule 75
	L_Var          reduce using rule 75
	L_Bit          reduce using rule 75


State 258

	ListTerm -> Term ',' ListTerm .                     (rule 103)

	')'            reduce using rule 103


State 259

	Gate -> 'U3' Angle Angle Angle '[' ListControl ']' .    (rule 77)

	'$'            reduce using rule 77
	'('            reduce using rule 77
	'()'           reduce using rule 77
	')'            reduce using rule 77
	','            reduce using rule 77
	'->'           reduce using rule 77
	';'            reduce using rule 77
	'FSWAP'        reduce using rule 77
	'H'            reduce using rule 77
	'ID'           reduce using rule 77
	'ISWAP'        reduce using rule 77
	'ROOT_SWAP'    reduce using rule 77
	'ROOT_SWAP_DAG'reduce using rule 77
	'ROOT_X'       reduce using rule 77
	'ROOT_X_DAG'   reduce using rule 77
	'ROOT_Y'       reduce using rule 77
	'ROOT_Y_DAG'   reduce using rule 77
	'ROOT_Z'       reduce using rule 77
	'ROOT_Z_DAG'   reduce using rule 77
	'RX'           reduce using rule 77
	'RY'           reduce using rule 77
	'RZ'           reduce using rule 77
	'S'            reduce using rule 77
	'SQRT_SWAP'    reduce using rule 77
	'SQRT_SWAP_DAG'reduce using rule 77
	'SQRT_X'       reduce using rule 77
	'SQRT_X_DAG'   reduce using rule 77
	'SQRT_Y'       reduce using rule 77
	'SQRT_Y_DAG'   reduce using rule 77
	'SWAP'         reduce using rule 77
	'SWAP_THETA'   reduce using rule 77
	'S_DAG'        reduce using rule 77
	'T'            reduce using rule 77
	'T_DAG'        reduce using rule 77
	'U1'           reduce using rule 77
	'U2'           reduce using rule 77
	'U3'           reduce using rule 77
	'X'            reduce using rule 77
	'Y'            reduce using rule 77
	'Z'            reduce using rule 77
	']'            reduce using rule 77
	'else'         reduce using rule 77
	'of'           reduce using rule 77
	'then'         reduce using rule 77
	'}'            reduce using rule 77
	L_GateIdent    reduce using rule 77
	L_Var          reduce using rule 77
	L_Bit          reduce using rule 77


State 260

	Term1 -> 'let' '{' LetVariable '=' Term '}' 'in' . Term    (rule 111)

	'('            shift, and enter state 49
	'()'           shift, and enter state 50
	'FSWAP'        shift, and enter state 51
	'H'            shift, and enter state 52
	'ID'           shift, and enter state 53
	'ISWAP'        shift, and enter state 54
	'ROOT_SWAP'    shift, and enter state 55
	'ROOT_SWAP_DAG'shift, and enter state 56
	'ROOT_X'       shift, and enter state 57
	'ROOT_X_DAG'   shift, and enter state 58
	'ROOT_Y'       shift, and enter state 59
	'ROOT_Y_DAG'   shift, and enter state 60
	'ROOT_Z'       shift, and enter state 61
	'ROOT_Z_DAG'   shift, and enter state 62
	'RX'           shift, and enter state 63
	'RY'           shift, and enter state 64
	'RZ'           shift, and enter state 65
	'S'            shift, and enter state 66
	'SQRT_SWAP'    shift, and enter state 67
	'SQRT_SWAP_DAG'shift, and enter state 68
	'SQRT_X'       shift, and enter state 69
	'SQRT_X_DAG'   shift, and enter state 70
	'SQRT_Y'       shift, and enter state 71
	'SQRT_Y_DAG'   shift, and enter state 72
	'SWAP'         shift, and enter state 73
	'SWAP_THETA'   shift, and enter state 74
	'S_DAG'        shift, and enter state 75
	'T'            shift, and enter state 76
	'T_DAG'        shift, and enter state 77
	'U1'           shift, and enter state 78
	'U2'           shift, and enter state 79
	'U3'           shift, and enter state 80
	'X'            shift, and enter state 81
	'Y'            shift, and enter state 82
	'Z'            shift, and enter state 83
	'case'         shift, and enter state 84
	'if'           shift, and enter state 85
	'let'          shift, and enter state 86
	L_GateIdent    shift, and enter state 87
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 88
	L_Bit          shift, and enter state 89

	GateIdent      goto state 39
	Var            goto state 40
	Lambda         goto state 41
	Bit            goto state 42
	Gate           goto state 43
	Tuple          goto state 44
	Term3          goto state 45
	Term1          goto state 46
	Term2          goto state 47
	Term           goto state 265

State 261

	Term1 -> 'let' '{' '(' LetVariable ',' ListLetVariable ')' . '=' Term '}' 'in' Term    (rule 112)

	'='            shift, and enter state 264


State 262

	ListLetVariable -> LetVariable ',' . ListLetVariable    (rule 97)

	L_Var          shift, and enter state 8

	Var            goto state 179
	LetVariable    goto state 250
	ListLetVariablegoto state 263

State 263

	ListLetVariable -> LetVariable ',' ListLetVariable .    (rule 97)

	')'            reduce using rule 97


State 264

	Term1 -> 'let' '{' '(' LetVariable ',' ListLetVariable ')' '=' . Term '}' 'in' Term    (rule 112)

	'('            shift, and enter state 49
	'()'           shift, and enter state 50
	'FSWAP'        shift, and enter state 51
	'H'            shift, and enter state 52
	'ID'           shift, and enter state 53
	'ISWAP'        shift, and enter state 54
	'ROOT_SWAP'    shift, and enter state 55
	'ROOT_SWAP_DAG'shift, and enter state 56
	'ROOT_X'       shift, and enter state 57
	'ROOT_X_DAG'   shift, and enter state 58
	'ROOT_Y'       shift, and enter state 59
	'ROOT_Y_DAG'   shift, and enter state 60
	'ROOT_Z'       shift, and enter state 61
	'ROOT_Z_DAG'   shift, and enter state 62
	'RX'           shift, and enter state 63
	'RY'           shift, and enter state 64
	'RZ'           shift, and enter state 65
	'S'            shift, and enter state 66
	'SQRT_SWAP'    shift, and enter state 67
	'SQRT_SWAP_DAG'shift, and enter state 68
	'SQRT_X'       shift, and enter state 69
	'SQRT_X_DAG'   shift, and enter state 70
	'SQRT_Y'       shift, and enter state 71
	'SQRT_Y_DAG'   shift, and enter state 72
	'SWAP'         shift, and enter state 73
	'SWAP_THETA'   shift, and enter state 74
	'S_DAG'        shift, and enter state 75
	'T'            shift, and enter state 76
	'T_DAG'        shift, and enter state 77
	'U1'           shift, and enter state 78
	'U2'           shift, and enter state 79
	'U3'           shift, and enter state 80
	'X'            shift, and enter state 81
	'Y'            shift, and enter state 82
	'Z'            shift, and enter state 83
	'case'         shift, and enter state 84
	'if'           shift, and enter state 85
	'let'          shift, and enter state 86
	L_GateIdent    shift, and enter state 87
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 88
	L_Bit          shift, and enter state 89

	GateIdent      goto state 39
	Var            goto state 40
	Lambda         goto state 41
	Bit            goto state 42
	Gate           goto state 43
	Tuple          goto state 44
	Term3          goto state 45
	Term1          goto state 46
	Term2          goto state 47
	Term           goto state 266

State 265

	Term1 -> 'let' '{' LetVariable '=' Term '}' 'in' Term .    (rule 111)

	')'            reduce using rule 111
	','            reduce using rule 111
	'->'           reduce using rule 111
	';'            reduce using rule 111
	']'            reduce using rule 111
	'else'         reduce using rule 111
	'of'           reduce using rule 111
	'then'         reduce using rule 111
	'}'            reduce using rule 111


State 266

	Term1 -> 'let' '{' '(' LetVariable ',' ListLetVariable ')' '=' Term . '}' 'in' Term    (rule 112)

	'}'            shift, and enter state 267


State 267

	Term1 -> 'let' '{' '(' LetVariable ',' ListLetVariable ')' '=' Term '}' . 'in' Term    (rule 112)

	'in'           shift, and enter state 268


State 268

	Term1 -> 'let' '{' '(' LetVariable ',' ListLetVariable ')' '=' Term '}' 'in' . Term    (rule 112)

	'('            shift, and enter state 49
	'()'           shift, and enter state 50
	'FSWAP'        shift, and enter state 51
	'H'            shift, and enter state 52
	'ID'           shift, and enter state 53
	'ISWAP'        shift, and enter state 54
	'ROOT_SWAP'    shift, and enter state 55
	'ROOT_SWAP_DAG'shift, and enter state 56
	'ROOT_X'       shift, and enter state 57
	'ROOT_X_DAG'   shift, and enter state 58
	'ROOT_Y'       shift, and enter state 59
	'ROOT_Y_DAG'   shift, and enter state 60
	'ROOT_Z'       shift, and enter state 61
	'ROOT_Z_DAG'   shift, and enter state 62
	'RX'           shift, and enter state 63
	'RY'           shift, and enter state 64
	'RZ'           shift, and enter state 65
	'S'            shift, and enter state 66
	'SQRT_SWAP'    shift, and enter state 67
	'SQRT_SWAP_DAG'shift, and enter state 68
	'SQRT_X'       shift, and enter state 69
	'SQRT_X_DAG'   shift, and enter state 70
	'SQRT_Y'       shift, and enter state 71
	'SQRT_Y_DAG'   shift, and enter state 72
	'SWAP'         shift, and enter state 73
	'SWAP_THETA'   shift, and enter state 74
	'S_DAG'        shift, and enter state 75
	'T'            shift, and enter state 76
	'T_DAG'        shift, and enter state 77
	'U1'           shift, and enter state 78
	'U2'           shift, and enter state 79
	'U3'           shift, and enter state 80
	'X'            shift, and enter state 81
	'Y'            shift, and enter state 82
	'Z'            shift, and enter state 83
	'case'         shift, and enter state 84
	'if'           shift, and enter state 85
	'let'          shift, and enter state 86
	L_GateIdent    shift, and enter state 87
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 88
	L_Bit          shift, and enter state 89

	GateIdent      goto state 39
	Var            goto state 40
	Lambda         goto state 41
	Bit            goto state 42
	Gate           goto state 43
	Tuple          goto state 44
	Term3          goto state 45
	Term1          goto state 46
	Term2          goto state 47
	Term           goto state 269

State 269

	Term1 -> 'let' '{' '(' LetVariable ',' ListLetVariable ')' '=' Term '}' 'in' Term .    (rule 112)

	')'            reduce using rule 112
	','            reduce using rule 112
	'->'           reduce using rule 112
	';'            reduce using rule 112
	']'            reduce using rule 112
	'else'         reduce using rule 112
	'of'           reduce using rule 112
	'then'         reduce using rule 112
	'}'            reduce using rule 112


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 133
Number of terminals: 70
Number of non-terminals: 35
Number of states: 270
