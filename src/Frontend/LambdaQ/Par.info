-----------------------------------------------------------------------------
Info file generated by Happy Version 1.20.0 from Frontend/LambdaQ/Par.y
-----------------------------------------------------------------------------

state 121 contains 1 shift/reduce conflicts.

-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_pProgram -> Program                         (0)
	Double -> L_doubl                                  (1)
	Integer -> L_integ                                 (2)
	GateIdent -> L_GateIdent                           (3)
	Var -> L_Var                                       (4)
	Lambda -> L_Lambda                                 (5)
	Bit -> L_Bit                                       (6)
	Program -> ListFunctionDeclaration                 (7)
	Type3 -> 'Bit'                                     (8)
	Type3 -> 'Qbit'                                    (9)
	Type3 -> '()'                                      (10)
	Type3 -> '(' Type ')'                              (11)
	Type2 -> '!' Type3                                 (12)
	Type2 -> Type3                                     (13)
	Type1 -> Type2 '**' Integer                        (14)
	Type1 -> Type2 '*' Type1                           (15)
	Type1 -> Type2                                     (16)
	Type -> Type1 '->' Type                            (17)
	Type -> Type1                                      (18)
	Angle -> Double                                    (19)
	ControlState -> '@0'                               (20)
	ControlState -> '@1'                               (21)
	ControlState -> '@+'                               (22)
	ControlState -> '@-'                               (23)
	ControlState -> '@+i'                              (24)
	ControlState -> '@-i'                              (25)
	Control -> Term ControlState                       (26)
	ListControl -> Control                             (27)
	ListControl -> Control ',' ListControl             (28)
	Gate -> 'H'                                        (29)
	Gate -> 'X'                                        (30)
	Gate -> 'Y'                                        (31)
	Gate -> 'Z'                                        (32)
	Gate -> 'ID'                                       (33)
	Gate -> 'ROOT_X' Integer                           (34)
	Gate -> 'ROOT_X_DAG' Integer                       (35)
	Gate -> 'ROOT_Y' Integer                           (36)
	Gate -> 'ROOT_Y_DAG' Integer                       (37)
	Gate -> 'ROOT_Z' Integer                           (38)
	Gate -> 'ROOT_Z_DAG' Integer                       (39)
	Gate -> 'S'                                        (40)
	Gate -> 'S_DAG'                                    (41)
	Gate -> 'T'                                        (42)
	Gate -> 'T_DAG'                                    (43)
	Gate -> 'SQRT_X'                                   (44)
	Gate -> 'SQRT_X_DAG'                               (45)
	Gate -> 'SQRT_Y'                                   (46)
	Gate -> 'SQRT_Y_DAG'                               (47)
	Gate -> 'RX' Angle                                 (48)
	Gate -> 'RY' Angle                                 (49)
	Gate -> 'RZ' Angle                                 (50)
	Gate -> 'U1' Angle                                 (51)
	Gate -> 'U2' '(' Angle ',' Angle ')'               (52)
	Gate -> 'U3' '(' Angle ',' Angle ',' Angle ')'     (53)
	Gate -> 'SWAP'                                     (54)
	Gate -> 'SQRT_SWAP'                                (55)
	Gate -> 'SQRT_SWAP_DAG'                            (56)
	Gate -> 'ISWAP'                                    (57)
	Gate -> 'FSWAP'                                    (58)
	Gate -> 'SWAP_THETA' Angle                         (59)
	Gate -> 'ROOT_SWAP' Integer                        (60)
	Gate -> 'ROOT_SWAP_DAG' Integer                    (61)
	Gate -> GateIdent                                  (62)
	LetVariable -> Var                                 (63)
	ListLetVariable -> LetVariable                     (64)
	ListLetVariable -> LetVariable ',' ListLetVariable   (65)
	LambdaVariable -> Var                              (66)
	ListLambdaVariable ->                              (67)
	ListLambdaVariable -> LambdaVariable ListLambdaVariable   (68)
	Tuple -> '(' Term ',' ListTerm ')'                 (69)
	ListTerm -> Term                                   (70)
	ListTerm -> Term ',' ListTerm                      (71)
	Term3 -> Var                                       (72)
	Term3 -> Bit                                       (73)
	Term3 -> Tuple                                     (74)
	Term3 -> '()'                                      (75)
	Term3 -> '(' Term ')'                              (76)
	Term1 -> 'if' Term 'then' Term 'else' Term         (77)
	Term1 -> 'let' '{' LetVariable '=' Term '}' 'in' Term   (78)
	Term1 -> 'let' '{' '(' LetVariable ',' ListLetVariable ')' '=' Term '}' 'in' Term   (79)
	Term1 -> 'case' Term 'of' CaseExpression ListCaseExpression   (80)
	Term1 -> Lambda LambdaVariable ListLambdaVariable '->' Term   (81)
	Term1 -> Term2 '$' Term1                           (82)
	Term1 -> 'gate' Gate Term                          (83)
	Term1 -> 'gate' Gate Term 'with-ctrl' '[' ListControl ']'   (84)
	Term1 -> Term2                                     (85)
	Term2 -> Term2 Term3                               (86)
	Term2 -> Term3                                     (87)
	Term -> Term1                                      (88)
	CaseExpression -> Term '->' Var                    (89)
	ListCaseExpression -> CaseExpression               (90)
	ListCaseExpression -> CaseExpression ListCaseExpression   (91)
	Arg -> Var                                         (92)
	ListArg ->                                         (93)
	ListArg -> Arg ListArg                             (94)
	FunctionDefinition -> Var ListArg '=' Term         (95)
	FunctionDefinition -> FunctionDefinition ';'       (96)
	FunctionType -> Var '::' Type                      (97)
	FunctionType -> FunctionType ';'                   (98)
	FunctionDeclaration -> FunctionType ';' FunctionDefinition ';'   (99)
	ListFunctionDeclaration ->                         (100)
	ListFunctionDeclaration -> FunctionDeclaration ListFunctionDeclaration   (101)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	'!'            { PT _ (TS _ 1) }
	'$'            { PT _ (TS _ 2) }
	'('            { PT _ (TS _ 3) }
	'()'           { PT _ (TS _ 4) }
	')'            { PT _ (TS _ 5) }
	'*'            { PT _ (TS _ 6) }
	'**'           { PT _ (TS _ 7) }
	','            { PT _ (TS _ 8) }
	'->'           { PT _ (TS _ 9) }
	'::'           { PT _ (TS _ 10) }
	';'            { PT _ (TS _ 11) }
	'='            { PT _ (TS _ 12) }
	'@+'           { PT _ (TS _ 13) }
	'@+i'          { PT _ (TS _ 14) }
	'@-'           { PT _ (TS _ 15) }
	'@-i'          { PT _ (TS _ 16) }
	'@0'           { PT _ (TS _ 17) }
	'@1'           { PT _ (TS _ 18) }
	'Bit'          { PT _ (TS _ 19) }
	'FSWAP'        { PT _ (TS _ 20) }
	'H'            { PT _ (TS _ 21) }
	'ID'           { PT _ (TS _ 22) }
	'ISWAP'        { PT _ (TS _ 23) }
	'Qbit'         { PT _ (TS _ 24) }
	'ROOT_SWAP'    { PT _ (TS _ 25) }
	'ROOT_SWAP_DAG'{ PT _ (TS _ 26) }
	'ROOT_X'       { PT _ (TS _ 27) }
	'ROOT_X_DAG'   { PT _ (TS _ 28) }
	'ROOT_Y'       { PT _ (TS _ 29) }
	'ROOT_Y_DAG'   { PT _ (TS _ 30) }
	'ROOT_Z'       { PT _ (TS _ 31) }
	'ROOT_Z_DAG'   { PT _ (TS _ 32) }
	'RX'           { PT _ (TS _ 33) }
	'RY'           { PT _ (TS _ 34) }
	'RZ'           { PT _ (TS _ 35) }
	'S'            { PT _ (TS _ 36) }
	'SQRT_SWAP'    { PT _ (TS _ 37) }
	'SQRT_SWAP_DAG'{ PT _ (TS _ 38) }
	'SQRT_X'       { PT _ (TS _ 39) }
	'SQRT_X_DAG'   { PT _ (TS _ 40) }
	'SQRT_Y'       { PT _ (TS _ 41) }
	'SQRT_Y_DAG'   { PT _ (TS _ 42) }
	'SWAP'         { PT _ (TS _ 43) }
	'SWAP_THETA'   { PT _ (TS _ 44) }
	'S_DAG'        { PT _ (TS _ 45) }
	'T'            { PT _ (TS _ 46) }
	'T_DAG'        { PT _ (TS _ 47) }
	'U1'           { PT _ (TS _ 48) }
	'U2'           { PT _ (TS _ 49) }
	'U3'           { PT _ (TS _ 50) }
	'X'            { PT _ (TS _ 51) }
	'Y'            { PT _ (TS _ 52) }
	'Z'            { PT _ (TS _ 53) }
	'['            { PT _ (TS _ 54) }
	']'            { PT _ (TS _ 55) }
	'case'         { PT _ (TS _ 56) }
	'else'         { PT _ (TS _ 57) }
	'gate'         { PT _ (TS _ 58) }
	'if'           { PT _ (TS _ 59) }
	'in'           { PT _ (TS _ 60) }
	'let'          { PT _ (TS _ 61) }
	'of'           { PT _ (TS _ 62) }
	'then'         { PT _ (TS _ 63) }
	'with-ctrl'    { PT _ (TS _ 64) }
	'{'            { PT _ (TS _ 65) }
	'}'            { PT _ (TS _ 66) }
	L_doubl        { PT _ (TD $$) }
	L_integ        { PT _ (TI $$) }
	L_GateIdent    { PT _ (T_GateIdent _) }
	L_Var          { PT _ (T_Var _) }
	L_Lambda       { PT _ (T_Lambda $$) }
	L_Bit          { PT _ (T_Bit _) }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_pProgram rule  0
	Double          rule  1
	Integer         rule  2
	GateIdent       rule  3
	Var             rule  4
	Lambda          rule  5
	Bit             rule  6
	Program         rule  7
	Type3           rules 8, 9, 10, 11
	Type2           rules 12, 13
	Type1           rules 14, 15, 16
	Type            rules 17, 18
	Angle           rule  19
	ControlState    rules 20, 21, 22, 23, 24, 25
	Control         rule  26
	ListControl     rules 27, 28
	Gate            rules 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62
	LetVariable     rule  63
	ListLetVariable rules 64, 65
	LambdaVariable  rule  66
	ListLambdaVariable rules 67, 68
	Tuple           rule  69
	ListTerm        rules 70, 71
	Term3           rules 72, 73, 74, 75, 76
	Term1           rules 77, 78, 79, 80, 81, 82, 83, 84, 85
	Term2           rules 86, 87
	Term            rule  88
	CaseExpression  rule  89
	ListCaseExpression rules 90, 91
	Arg             rule  92
	ListArg         rules 93, 94
	FunctionDefinition rules 95, 96
	FunctionType    rules 97, 98
	FunctionDeclaration rule  99
	ListFunctionDeclaration rules 100, 101

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0

	%start_pProgram -> . Program                        (rule 0)

	L_Var          shift, and enter state 8
	%eof           reduce using rule 100

	Var            goto state 3
	Program        goto state 4
	FunctionType   goto state 5
	FunctionDeclarationgoto state 6
	ListFunctionDeclarationgoto state 7

State 1

	Double -> . L_doubl                                 (rule 1)

	L_doubl        shift, and enter state 2


State 2

	Double -> L_doubl .                                 (rule 1)

	'('            reduce using rule 1
	'()'           reduce using rule 1
	')'            reduce using rule 1
	','            reduce using rule 1
	'case'         reduce using rule 1
	'gate'         reduce using rule 1
	'if'           reduce using rule 1
	'let'          reduce using rule 1
	L_Var          reduce using rule 1
	L_Lambda       reduce using rule 1
	L_Bit          reduce using rule 1


State 3

	FunctionType -> Var . '::' Type                     (rule 97)

	'::'           shift, and enter state 11


State 4

	%start_pProgram -> Program .                        (rule 0)

	%eof           accept


State 5

	FunctionType -> FunctionType . ';'                  (rule 98)
	FunctionDeclaration -> FunctionType . ';' FunctionDefinition ';'    (rule 99)

	';'            shift, and enter state 10


State 6

	ListFunctionDeclaration -> FunctionDeclaration . ListFunctionDeclaration    (rule 101)

	L_Var          shift, and enter state 8
	%eof           reduce using rule 100

	Var            goto state 3
	FunctionType   goto state 5
	FunctionDeclarationgoto state 6
	ListFunctionDeclarationgoto state 9

State 7

	Program -> ListFunctionDeclaration .                (rule 7)

	%eof           reduce using rule 7


State 8

	Var -> L_Var .                                      (rule 4)

	'$'            reduce using rule 4
	'('            reduce using rule 4
	'()'           reduce using rule 4
	')'            reduce using rule 4
	','            reduce using rule 4
	'->'           reduce using rule 4
	'::'           reduce using rule 4
	';'            reduce using rule 4
	'='            reduce using rule 4
	'@+'           reduce using rule 4
	'@+i'          reduce using rule 4
	'@-'           reduce using rule 4
	'@-i'          reduce using rule 4
	'@0'           reduce using rule 4
	'@1'           reduce using rule 4
	'case'         reduce using rule 4
	'else'         reduce using rule 4
	'gate'         reduce using rule 4
	'if'           reduce using rule 4
	'let'          reduce using rule 4
	'of'           reduce using rule 4
	'then'         reduce using rule 4
	'with-ctrl'    reduce using rule 4
	'}'            reduce using rule 4
	L_Var          reduce using rule 4
	L_Lambda       reduce using rule 4
	L_Bit          reduce using rule 4


State 9

	ListFunctionDeclaration -> FunctionDeclaration ListFunctionDeclaration .    (rule 101)

	%eof           reduce using rule 101


State 10

	FunctionType -> FunctionType ';' .                  (rule 98)
	FunctionDeclaration -> FunctionType ';' . FunctionDefinition ';'    (rule 99)

	';'            reduce using rule 98
	L_Var          shift, and enter state 8

	Var            goto state 21
	FunctionDefinitiongoto state 22

State 11

	FunctionType -> Var '::' . Type                     (rule 97)

	'!'            shift, and enter state 16
	'('            shift, and enter state 17
	'()'           shift, and enter state 18
	'Bit'          shift, and enter state 19
	'Qbit'         shift, and enter state 20

	Type3          goto state 12
	Type2          goto state 13
	Type1          goto state 14
	Type           goto state 15

State 12

	Type2 -> Type3 .                                    (rule 13)

	')'            reduce using rule 13
	'*'            reduce using rule 13
	'**'           reduce using rule 13
	'->'           reduce using rule 13
	';'            reduce using rule 13


State 13

	Type1 -> Type2 . '**' Integer                       (rule 14)
	Type1 -> Type2 . '*' Type1                          (rule 15)
	Type1 -> Type2 .                                    (rule 16)

	')'            reduce using rule 16
	'*'            shift, and enter state 30
	'**'           shift, and enter state 31
	'->'           reduce using rule 16
	';'            reduce using rule 16


State 14

	Type -> Type1 . '->' Type                           (rule 17)
	Type -> Type1 .                                     (rule 18)

	')'            reduce using rule 18
	'->'           shift, and enter state 29
	';'            reduce using rule 18


State 15

	FunctionType -> Var '::' Type .                     (rule 97)

	';'            reduce using rule 97


State 16

	Type2 -> '!' . Type3                                (rule 12)

	'('            shift, and enter state 17
	'()'           shift, and enter state 18
	'Bit'          shift, and enter state 19
	'Qbit'         shift, and enter state 20

	Type3          goto state 28

State 17

	Type3 -> '(' . Type ')'                             (rule 11)

	'!'            shift, and enter state 16
	'('            shift, and enter state 17
	'()'           shift, and enter state 18
	'Bit'          shift, and enter state 19
	'Qbit'         shift, and enter state 20

	Type3          goto state 12
	Type2          goto state 13
	Type1          goto state 14
	Type           goto state 27

State 18

	Type3 -> '()' .                                     (rule 10)

	')'            reduce using rule 10
	'*'            reduce using rule 10
	'**'           reduce using rule 10
	'->'           reduce using rule 10
	';'            reduce using rule 10


State 19

	Type3 -> 'Bit' .                                    (rule 8)

	')'            reduce using rule 8
	'*'            reduce using rule 8
	'**'           reduce using rule 8
	'->'           reduce using rule 8
	';'            reduce using rule 8


State 20

	Type3 -> 'Qbit' .                                   (rule 9)

	')'            reduce using rule 9
	'*'            reduce using rule 9
	'**'           reduce using rule 9
	'->'           reduce using rule 9
	';'            reduce using rule 9


State 21

	FunctionDefinition -> Var . ListArg '=' Term        (rule 95)

	'='            reduce using rule 93
	L_Var          shift, and enter state 8

	Var            goto state 24
	Arg            goto state 25
	ListArg        goto state 26

State 22

	FunctionDefinition -> FunctionDefinition . ';'      (rule 96)
	FunctionDeclaration -> FunctionType ';' FunctionDefinition . ';'    (rule 99)

	';'            shift, and enter state 23


State 23

	FunctionDefinition -> FunctionDefinition ';' .      (rule 96)
	FunctionDeclaration -> FunctionType ';' FunctionDefinition ';' .    (rule 99)

	';'            reduce using rule 96
	L_Var          reduce using rule 99
	%eof           reduce using rule 99


State 24

	Arg -> Var .                                        (rule 92)

	'='            reduce using rule 92
	L_Var          reduce using rule 92


State 25

	ListArg -> Arg . ListArg                            (rule 94)

	'='            reduce using rule 93
	L_Var          shift, and enter state 8

	Var            goto state 24
	Arg            goto state 25
	ListArg        goto state 38

State 26

	FunctionDefinition -> Var ListArg . '=' Term        (rule 95)

	'='            shift, and enter state 37


State 27

	Type3 -> '(' Type . ')'                             (rule 11)

	')'            shift, and enter state 36


State 28

	Type2 -> '!' Type3 .                                (rule 12)

	')'            reduce using rule 12
	'*'            reduce using rule 12
	'**'           reduce using rule 12
	'->'           reduce using rule 12
	';'            reduce using rule 12


State 29

	Type -> Type1 '->' . Type                           (rule 17)

	'!'            shift, and enter state 16
	'('            shift, and enter state 17
	'()'           shift, and enter state 18
	'Bit'          shift, and enter state 19
	'Qbit'         shift, and enter state 20

	Type3          goto state 12
	Type2          goto state 13
	Type1          goto state 14
	Type           goto state 35

State 30

	Type1 -> Type2 '*' . Type1                          (rule 15)

	'!'            shift, and enter state 16
	'('            shift, and enter state 17
	'()'           shift, and enter state 18
	'Bit'          shift, and enter state 19
	'Qbit'         shift, and enter state 20

	Type3          goto state 12
	Type2          goto state 13
	Type1          goto state 34

State 31

	Type1 -> Type2 '**' . Integer                       (rule 14)

	L_integ        shift, and enter state 33

	Integer        goto state 32

State 32

	Type1 -> Type2 '**' Integer .                       (rule 14)

	')'            reduce using rule 14
	'->'           reduce using rule 14
	';'            reduce using rule 14


State 33

	Integer -> L_integ .                                (rule 2)

	'('            reduce using rule 2
	'()'           reduce using rule 2
	')'            reduce using rule 2
	'->'           reduce using rule 2
	';'            reduce using rule 2
	'case'         reduce using rule 2
	'gate'         reduce using rule 2
	'if'           reduce using rule 2
	'let'          reduce using rule 2
	L_Var          reduce using rule 2
	L_Lambda       reduce using rule 2
	L_Bit          reduce using rule 2


State 34

	Type1 -> Type2 '*' Type1 .                          (rule 15)

	')'            reduce using rule 15
	'->'           reduce using rule 15
	';'            reduce using rule 15


State 35

	Type -> Type1 '->' Type .                           (rule 17)

	')'            reduce using rule 17
	';'            reduce using rule 17


State 36

	Type3 -> '(' Type ')' .                             (rule 11)

	')'            reduce using rule 11
	'*'            reduce using rule 11
	'**'           reduce using rule 11
	'->'           reduce using rule 11
	';'            reduce using rule 11


State 37

	FunctionDefinition -> Var ListArg '=' . Term        (rule 95)

	'('            shift, and enter state 47
	'()'           shift, and enter state 48
	'case'         shift, and enter state 49
	'gate'         shift, and enter state 50
	'if'           shift, and enter state 51
	'let'          shift, and enter state 52
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 53
	L_Bit          shift, and enter state 54

	Var            goto state 39
	Lambda         goto state 40
	Bit            goto state 41
	Tuple          goto state 42
	Term3          goto state 43
	Term1          goto state 44
	Term2          goto state 45
	Term           goto state 46

State 38

	ListArg -> Arg ListArg .                            (rule 94)

	'='            reduce using rule 94


State 39

	Term3 -> Var .                                      (rule 72)

	'$'            reduce using rule 72
	'('            reduce using rule 72
	'()'           reduce using rule 72
	')'            reduce using rule 72
	','            reduce using rule 72
	'->'           reduce using rule 72
	';'            reduce using rule 72
	'@+'           reduce using rule 72
	'@+i'          reduce using rule 72
	'@-'           reduce using rule 72
	'@-i'          reduce using rule 72
	'@0'           reduce using rule 72
	'@1'           reduce using rule 72
	'else'         reduce using rule 72
	'of'           reduce using rule 72
	'then'         reduce using rule 72
	'with-ctrl'    reduce using rule 72
	'}'            reduce using rule 72
	L_Var          reduce using rule 72
	L_Bit          reduce using rule 72


State 40

	Term1 -> Lambda . LambdaVariable ListLambdaVariable '->' Term    (rule 81)

	L_Var          shift, and enter state 8

	Var            goto state 97
	LambdaVariable goto state 98

State 41

	Term3 -> Bit .                                      (rule 73)

	'$'            reduce using rule 73
	'('            reduce using rule 73
	'()'           reduce using rule 73
	')'            reduce using rule 73
	','            reduce using rule 73
	'->'           reduce using rule 73
	';'            reduce using rule 73
	'@+'           reduce using rule 73
	'@+i'          reduce using rule 73
	'@-'           reduce using rule 73
	'@-i'          reduce using rule 73
	'@0'           reduce using rule 73
	'@1'           reduce using rule 73
	'else'         reduce using rule 73
	'of'           reduce using rule 73
	'then'         reduce using rule 73
	'with-ctrl'    reduce using rule 73
	'}'            reduce using rule 73
	L_Var          reduce using rule 73
	L_Bit          reduce using rule 73


State 42

	Term3 -> Tuple .                                    (rule 74)

	'$'            reduce using rule 74
	'('            reduce using rule 74
	'()'           reduce using rule 74
	')'            reduce using rule 74
	','            reduce using rule 74
	'->'           reduce using rule 74
	';'            reduce using rule 74
	'@+'           reduce using rule 74
	'@+i'          reduce using rule 74
	'@-'           reduce using rule 74
	'@-i'          reduce using rule 74
	'@0'           reduce using rule 74
	'@1'           reduce using rule 74
	'else'         reduce using rule 74
	'of'           reduce using rule 74
	'then'         reduce using rule 74
	'with-ctrl'    reduce using rule 74
	'}'            reduce using rule 74
	L_Var          reduce using rule 74
	L_Bit          reduce using rule 74


State 43

	Term2 -> Term3 .                                    (rule 87)

	'$'            reduce using rule 87
	'('            reduce using rule 87
	'()'           reduce using rule 87
	')'            reduce using rule 87
	','            reduce using rule 87
	'->'           reduce using rule 87
	';'            reduce using rule 87
	'@+'           reduce using rule 87
	'@+i'          reduce using rule 87
	'@-'           reduce using rule 87
	'@-i'          reduce using rule 87
	'@0'           reduce using rule 87
	'@1'           reduce using rule 87
	'else'         reduce using rule 87
	'of'           reduce using rule 87
	'then'         reduce using rule 87
	'with-ctrl'    reduce using rule 87
	'}'            reduce using rule 87
	L_Var          reduce using rule 87
	L_Bit          reduce using rule 87


State 44

	Term -> Term1 .                                     (rule 88)

	')'            reduce using rule 88
	','            reduce using rule 88
	'->'           reduce using rule 88
	';'            reduce using rule 88
	'@+'           reduce using rule 88
	'@+i'          reduce using rule 88
	'@-'           reduce using rule 88
	'@-i'          reduce using rule 88
	'@0'           reduce using rule 88
	'@1'           reduce using rule 88
	'else'         reduce using rule 88
	'of'           reduce using rule 88
	'then'         reduce using rule 88
	'with-ctrl'    reduce using rule 88
	'}'            reduce using rule 88


State 45

	Term1 -> Term2 . '$' Term1                          (rule 82)
	Term1 -> Term2 .                                    (rule 85)
	Term2 -> Term2 . Term3                              (rule 86)

	'$'            shift, and enter state 96
	'('            shift, and enter state 47
	'()'           shift, and enter state 48
	')'            reduce using rule 85
	','            reduce using rule 85
	'->'           reduce using rule 85
	';'            reduce using rule 85
	'@+'           reduce using rule 85
	'@+i'          reduce using rule 85
	'@-'           reduce using rule 85
	'@-i'          reduce using rule 85
	'@0'           reduce using rule 85
	'@1'           reduce using rule 85
	'else'         reduce using rule 85
	'of'           reduce using rule 85
	'then'         reduce using rule 85
	'with-ctrl'    reduce using rule 85
	'}'            reduce using rule 85
	L_Var          shift, and enter state 8
	L_Bit          shift, and enter state 54

	Var            goto state 39
	Bit            goto state 41
	Tuple          goto state 42
	Term3          goto state 95

State 46

	FunctionDefinition -> Var ListArg '=' Term .        (rule 95)

	';'            reduce using rule 95


State 47

	Tuple -> '(' . Term ',' ListTerm ')'                (rule 69)
	Term3 -> '(' . Term ')'                             (rule 76)

	'('            shift, and enter state 47
	'()'           shift, and enter state 48
	'case'         shift, and enter state 49
	'gate'         shift, and enter state 50
	'if'           shift, and enter state 51
	'let'          shift, and enter state 52
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 53
	L_Bit          shift, and enter state 54

	Var            goto state 39
	Lambda         goto state 40
	Bit            goto state 41
	Tuple          goto state 42
	Term3          goto state 43
	Term1          goto state 44
	Term2          goto state 45
	Term           goto state 94

State 48

	Term3 -> '()' .                                     (rule 75)

	'$'            reduce using rule 75
	'('            reduce using rule 75
	'()'           reduce using rule 75
	')'            reduce using rule 75
	','            reduce using rule 75
	'->'           reduce using rule 75
	';'            reduce using rule 75
	'@+'           reduce using rule 75
	'@+i'          reduce using rule 75
	'@-'           reduce using rule 75
	'@-i'          reduce using rule 75
	'@0'           reduce using rule 75
	'@1'           reduce using rule 75
	'else'         reduce using rule 75
	'of'           reduce using rule 75
	'then'         reduce using rule 75
	'with-ctrl'    reduce using rule 75
	'}'            reduce using rule 75
	L_Var          reduce using rule 75
	L_Bit          reduce using rule 75


State 49

	Term1 -> 'case' . Term 'of' CaseExpression ListCaseExpression    (rule 80)

	'('            shift, and enter state 47
	'()'           shift, and enter state 48
	'case'         shift, and enter state 49
	'gate'         shift, and enter state 50
	'if'           shift, and enter state 51
	'let'          shift, and enter state 52
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 53
	L_Bit          shift, and enter state 54

	Var            goto state 39
	Lambda         goto state 40
	Bit            goto state 41
	Tuple          goto state 42
	Term3          goto state 43
	Term1          goto state 44
	Term2          goto state 45
	Term           goto state 93

State 50

	Term1 -> 'gate' . Gate Term                         (rule 83)
	Term1 -> 'gate' . Gate Term 'with-ctrl' '[' ListControl ']'    (rule 84)

	'FSWAP'        shift, and enter state 59
	'H'            shift, and enter state 60
	'ID'           shift, and enter state 61
	'ISWAP'        shift, and enter state 62
	'ROOT_SWAP'    shift, and enter state 63
	'ROOT_SWAP_DAG'shift, and enter state 64
	'ROOT_X'       shift, and enter state 65
	'ROOT_X_DAG'   shift, and enter state 66
	'ROOT_Y'       shift, and enter state 67
	'ROOT_Y_DAG'   shift, and enter state 68
	'ROOT_Z'       shift, and enter state 69
	'ROOT_Z_DAG'   shift, and enter state 70
	'RX'           shift, and enter state 71
	'RY'           shift, and enter state 72
	'RZ'           shift, and enter state 73
	'S'            shift, and enter state 74
	'SQRT_SWAP'    shift, and enter state 75
	'SQRT_SWAP_DAG'shift, and enter state 76
	'SQRT_X'       shift, and enter state 77
	'SQRT_X_DAG'   shift, and enter state 78
	'SQRT_Y'       shift, and enter state 79
	'SQRT_Y_DAG'   shift, and enter state 80
	'SWAP'         shift, and enter state 81
	'SWAP_THETA'   shift, and enter state 82
	'S_DAG'        shift, and enter state 83
	'T'            shift, and enter state 84
	'T_DAG'        shift, and enter state 85
	'U1'           shift, and enter state 86
	'U2'           shift, and enter state 87
	'U3'           shift, and enter state 88
	'X'            shift, and enter state 89
	'Y'            shift, and enter state 90
	'Z'            shift, and enter state 91
	L_GateIdent    shift, and enter state 92

	GateIdent      goto state 57
	Gate           goto state 58

State 51

	Term1 -> 'if' . Term 'then' Term 'else' Term        (rule 77)

	'('            shift, and enter state 47
	'()'           shift, and enter state 48
	'case'         shift, and enter state 49
	'gate'         shift, and enter state 50
	'if'           shift, and enter state 51
	'let'          shift, and enter state 52
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 53
	L_Bit          shift, and enter state 54

	Var            goto state 39
	Lambda         goto state 40
	Bit            goto state 41
	Tuple          goto state 42
	Term3          goto state 43
	Term1          goto state 44
	Term2          goto state 45
	Term           goto state 56

State 52

	Term1 -> 'let' . '{' LetVariable '=' Term '}' 'in' Term    (rule 78)
	Term1 -> 'let' . '{' '(' LetVariable ',' ListLetVariable ')' '=' Term '}' 'in' Term    (rule 79)

	'{'            shift, and enter state 55


State 53

	Lambda -> L_Lambda .                                (rule 5)

	L_Var          reduce using rule 5


State 54

	Bit -> L_Bit .                                      (rule 6)

	'$'            reduce using rule 6
	'('            reduce using rule 6
	'()'           reduce using rule 6
	')'            reduce using rule 6
	','            reduce using rule 6
	'->'           reduce using rule 6
	';'            reduce using rule 6
	'@+'           reduce using rule 6
	'@+i'          reduce using rule 6
	'@-'           reduce using rule 6
	'@-i'          reduce using rule 6
	'@0'           reduce using rule 6
	'@1'           reduce using rule 6
	'else'         reduce using rule 6
	'of'           reduce using rule 6
	'then'         reduce using rule 6
	'with-ctrl'    reduce using rule 6
	'}'            reduce using rule 6
	L_Var          reduce using rule 6
	L_Bit          reduce using rule 6


State 55

	Term1 -> 'let' '{' . LetVariable '=' Term '}' 'in' Term    (rule 78)
	Term1 -> 'let' '{' . '(' LetVariable ',' ListLetVariable ')' '=' Term '}' 'in' Term    (rule 79)

	'('            shift, and enter state 125
	L_Var          shift, and enter state 8

	Var            goto state 123
	LetVariable    goto state 124

State 56

	Term1 -> 'if' Term . 'then' Term 'else' Term        (rule 77)

	'then'         shift, and enter state 122


State 57

	Gate -> GateIdent .                                 (rule 62)

	'('            reduce using rule 62
	'()'           reduce using rule 62
	'case'         reduce using rule 62
	'gate'         reduce using rule 62
	'if'           reduce using rule 62
	'let'          reduce using rule 62
	L_Var          reduce using rule 62
	L_Lambda       reduce using rule 62
	L_Bit          reduce using rule 62


State 58

	Term1 -> 'gate' Gate . Term                         (rule 83)
	Term1 -> 'gate' Gate . Term 'with-ctrl' '[' ListControl ']'    (rule 84)

	'('            shift, and enter state 47
	'()'           shift, and enter state 48
	'case'         shift, and enter state 49
	'gate'         shift, and enter state 50
	'if'           shift, and enter state 51
	'let'          shift, and enter state 52
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 53
	L_Bit          shift, and enter state 54

	Var            goto state 39
	Lambda         goto state 40
	Bit            goto state 41
	Tuple          goto state 42
	Term3          goto state 43
	Term1          goto state 44
	Term2          goto state 45
	Term           goto state 121

State 59

	Gate -> 'FSWAP' .                                   (rule 58)

	'('            reduce using rule 58
	'()'           reduce using rule 58
	'case'         reduce using rule 58
	'gate'         reduce using rule 58
	'if'           reduce using rule 58
	'let'          reduce using rule 58
	L_Var          reduce using rule 58
	L_Lambda       reduce using rule 58
	L_Bit          reduce using rule 58


State 60

	Gate -> 'H' .                                       (rule 29)

	'('            reduce using rule 29
	'()'           reduce using rule 29
	'case'         reduce using rule 29
	'gate'         reduce using rule 29
	'if'           reduce using rule 29
	'let'          reduce using rule 29
	L_Var          reduce using rule 29
	L_Lambda       reduce using rule 29
	L_Bit          reduce using rule 29


State 61

	Gate -> 'ID' .                                      (rule 33)

	'('            reduce using rule 33
	'()'           reduce using rule 33
	'case'         reduce using rule 33
	'gate'         reduce using rule 33
	'if'           reduce using rule 33
	'let'          reduce using rule 33
	L_Var          reduce using rule 33
	L_Lambda       reduce using rule 33
	L_Bit          reduce using rule 33


State 62

	Gate -> 'ISWAP' .                                   (rule 57)

	'('            reduce using rule 57
	'()'           reduce using rule 57
	'case'         reduce using rule 57
	'gate'         reduce using rule 57
	'if'           reduce using rule 57
	'let'          reduce using rule 57
	L_Var          reduce using rule 57
	L_Lambda       reduce using rule 57
	L_Bit          reduce using rule 57


State 63

	Gate -> 'ROOT_SWAP' . Integer                       (rule 60)

	L_integ        shift, and enter state 33

	Integer        goto state 120

State 64

	Gate -> 'ROOT_SWAP_DAG' . Integer                   (rule 61)

	L_integ        shift, and enter state 33

	Integer        goto state 119

State 65

	Gate -> 'ROOT_X' . Integer                          (rule 34)

	L_integ        shift, and enter state 33

	Integer        goto state 118

State 66

	Gate -> 'ROOT_X_DAG' . Integer                      (rule 35)

	L_integ        shift, and enter state 33

	Integer        goto state 117

State 67

	Gate -> 'ROOT_Y' . Integer                          (rule 36)

	L_integ        shift, and enter state 33

	Integer        goto state 116

State 68

	Gate -> 'ROOT_Y_DAG' . Integer                      (rule 37)

	L_integ        shift, and enter state 33

	Integer        goto state 115

State 69

	Gate -> 'ROOT_Z' . Integer                          (rule 38)

	L_integ        shift, and enter state 33

	Integer        goto state 114

State 70

	Gate -> 'ROOT_Z_DAG' . Integer                      (rule 39)

	L_integ        shift, and enter state 33

	Integer        goto state 113

State 71

	Gate -> 'RX' . Angle                                (rule 48)

	L_doubl        shift, and enter state 2

	Double         goto state 107
	Angle          goto state 112

State 72

	Gate -> 'RY' . Angle                                (rule 49)

	L_doubl        shift, and enter state 2

	Double         goto state 107
	Angle          goto state 111

State 73

	Gate -> 'RZ' . Angle                                (rule 50)

	L_doubl        shift, and enter state 2

	Double         goto state 107
	Angle          goto state 110

State 74

	Gate -> 'S' .                                       (rule 40)

	'('            reduce using rule 40
	'()'           reduce using rule 40
	'case'         reduce using rule 40
	'gate'         reduce using rule 40
	'if'           reduce using rule 40
	'let'          reduce using rule 40
	L_Var          reduce using rule 40
	L_Lambda       reduce using rule 40
	L_Bit          reduce using rule 40


State 75

	Gate -> 'SQRT_SWAP' .                               (rule 55)

	'('            reduce using rule 55
	'()'           reduce using rule 55
	'case'         reduce using rule 55
	'gate'         reduce using rule 55
	'if'           reduce using rule 55
	'let'          reduce using rule 55
	L_Var          reduce using rule 55
	L_Lambda       reduce using rule 55
	L_Bit          reduce using rule 55


State 76

	Gate -> 'SQRT_SWAP_DAG' .                           (rule 56)

	'('            reduce using rule 56
	'()'           reduce using rule 56
	'case'         reduce using rule 56
	'gate'         reduce using rule 56
	'if'           reduce using rule 56
	'let'          reduce using rule 56
	L_Var          reduce using rule 56
	L_Lambda       reduce using rule 56
	L_Bit          reduce using rule 56


State 77

	Gate -> 'SQRT_X' .                                  (rule 44)

	'('            reduce using rule 44
	'()'           reduce using rule 44
	'case'         reduce using rule 44
	'gate'         reduce using rule 44
	'if'           reduce using rule 44
	'let'          reduce using rule 44
	L_Var          reduce using rule 44
	L_Lambda       reduce using rule 44
	L_Bit          reduce using rule 44


State 78

	Gate -> 'SQRT_X_DAG' .                              (rule 45)

	'('            reduce using rule 45
	'()'           reduce using rule 45
	'case'         reduce using rule 45
	'gate'         reduce using rule 45
	'if'           reduce using rule 45
	'let'          reduce using rule 45
	L_Var          reduce using rule 45
	L_Lambda       reduce using rule 45
	L_Bit          reduce using rule 45


State 79

	Gate -> 'SQRT_Y' .                                  (rule 46)

	'('            reduce using rule 46
	'()'           reduce using rule 46
	'case'         reduce using rule 46
	'gate'         reduce using rule 46
	'if'           reduce using rule 46
	'let'          reduce using rule 46
	L_Var          reduce using rule 46
	L_Lambda       reduce using rule 46
	L_Bit          reduce using rule 46


State 80

	Gate -> 'SQRT_Y_DAG' .                              (rule 47)

	'('            reduce using rule 47
	'()'           reduce using rule 47
	'case'         reduce using rule 47
	'gate'         reduce using rule 47
	'if'           reduce using rule 47
	'let'          reduce using rule 47
	L_Var          reduce using rule 47
	L_Lambda       reduce using rule 47
	L_Bit          reduce using rule 47


State 81

	Gate -> 'SWAP' .                                    (rule 54)

	'('            reduce using rule 54
	'()'           reduce using rule 54
	'case'         reduce using rule 54
	'gate'         reduce using rule 54
	'if'           reduce using rule 54
	'let'          reduce using rule 54
	L_Var          reduce using rule 54
	L_Lambda       reduce using rule 54
	L_Bit          reduce using rule 54


State 82

	Gate -> 'SWAP_THETA' . Angle                        (rule 59)

	L_doubl        shift, and enter state 2

	Double         goto state 107
	Angle          goto state 109

State 83

	Gate -> 'S_DAG' .                                   (rule 41)

	'('            reduce using rule 41
	'()'           reduce using rule 41
	'case'         reduce using rule 41
	'gate'         reduce using rule 41
	'if'           reduce using rule 41
	'let'          reduce using rule 41
	L_Var          reduce using rule 41
	L_Lambda       reduce using rule 41
	L_Bit          reduce using rule 41


State 84

	Gate -> 'T' .                                       (rule 42)

	'('            reduce using rule 42
	'()'           reduce using rule 42
	'case'         reduce using rule 42
	'gate'         reduce using rule 42
	'if'           reduce using rule 42
	'let'          reduce using rule 42
	L_Var          reduce using rule 42
	L_Lambda       reduce using rule 42
	L_Bit          reduce using rule 42


State 85

	Gate -> 'T_DAG' .                                   (rule 43)

	'('            reduce using rule 43
	'()'           reduce using rule 43
	'case'         reduce using rule 43
	'gate'         reduce using rule 43
	'if'           reduce using rule 43
	'let'          reduce using rule 43
	L_Var          reduce using rule 43
	L_Lambda       reduce using rule 43
	L_Bit          reduce using rule 43


State 86

	Gate -> 'U1' . Angle                                (rule 51)

	L_doubl        shift, and enter state 2

	Double         goto state 107
	Angle          goto state 108

State 87

	Gate -> 'U2' . '(' Angle ',' Angle ')'              (rule 52)

	'('            shift, and enter state 106


State 88

	Gate -> 'U3' . '(' Angle ',' Angle ',' Angle ')'    (rule 53)

	'('            shift, and enter state 105


State 89

	Gate -> 'X' .                                       (rule 30)

	'('            reduce using rule 30
	'()'           reduce using rule 30
	'case'         reduce using rule 30
	'gate'         reduce using rule 30
	'if'           reduce using rule 30
	'let'          reduce using rule 30
	L_Var          reduce using rule 30
	L_Lambda       reduce using rule 30
	L_Bit          reduce using rule 30


State 90

	Gate -> 'Y' .                                       (rule 31)

	'('            reduce using rule 31
	'()'           reduce using rule 31
	'case'         reduce using rule 31
	'gate'         reduce using rule 31
	'if'           reduce using rule 31
	'let'          reduce using rule 31
	L_Var          reduce using rule 31
	L_Lambda       reduce using rule 31
	L_Bit          reduce using rule 31


State 91

	Gate -> 'Z' .                                       (rule 32)

	'('            reduce using rule 32
	'()'           reduce using rule 32
	'case'         reduce using rule 32
	'gate'         reduce using rule 32
	'if'           reduce using rule 32
	'let'          reduce using rule 32
	L_Var          reduce using rule 32
	L_Lambda       reduce using rule 32
	L_Bit          reduce using rule 32


State 92

	GateIdent -> L_GateIdent .                          (rule 3)

	'('            reduce using rule 3
	'()'           reduce using rule 3
	'case'         reduce using rule 3
	'gate'         reduce using rule 3
	'if'           reduce using rule 3
	'let'          reduce using rule 3
	L_Var          reduce using rule 3
	L_Lambda       reduce using rule 3
	L_Bit          reduce using rule 3


State 93

	Term1 -> 'case' Term . 'of' CaseExpression ListCaseExpression    (rule 80)

	'of'           shift, and enter state 104


State 94

	Tuple -> '(' Term . ',' ListTerm ')'                (rule 69)
	Term3 -> '(' Term . ')'                             (rule 76)

	')'            shift, and enter state 102
	','            shift, and enter state 103


State 95

	Term2 -> Term2 Term3 .                              (rule 86)

	'$'            reduce using rule 86
	'('            reduce using rule 86
	'()'           reduce using rule 86
	')'            reduce using rule 86
	','            reduce using rule 86
	'->'           reduce using rule 86
	';'            reduce using rule 86
	'@+'           reduce using rule 86
	'@+i'          reduce using rule 86
	'@-'           reduce using rule 86
	'@-i'          reduce using rule 86
	'@0'           reduce using rule 86
	'@1'           reduce using rule 86
	'else'         reduce using rule 86
	'of'           reduce using rule 86
	'then'         reduce using rule 86
	'with-ctrl'    reduce using rule 86
	'}'            reduce using rule 86
	L_Var          reduce using rule 86
	L_Bit          reduce using rule 86


State 96

	Term1 -> Term2 '$' . Term1                          (rule 82)

	'('            shift, and enter state 47
	'()'           shift, and enter state 48
	'case'         shift, and enter state 49
	'gate'         shift, and enter state 50
	'if'           shift, and enter state 51
	'let'          shift, and enter state 52
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 53
	L_Bit          shift, and enter state 54

	Var            goto state 39
	Lambda         goto state 40
	Bit            goto state 41
	Tuple          goto state 42
	Term3          goto state 43
	Term1          goto state 101
	Term2          goto state 45

State 97

	LambdaVariable -> Var .                             (rule 66)

	'->'           reduce using rule 66
	L_Var          reduce using rule 66


State 98

	Term1 -> Lambda LambdaVariable . ListLambdaVariable '->' Term    (rule 81)

	'->'           reduce using rule 67
	L_Var          shift, and enter state 8

	Var            goto state 97
	LambdaVariable goto state 99
	ListLambdaVariablegoto state 100

State 99

	ListLambdaVariable -> LambdaVariable . ListLambdaVariable    (rule 68)

	'->'           reduce using rule 67
	L_Var          shift, and enter state 8

	Var            goto state 97
	LambdaVariable goto state 99
	ListLambdaVariablegoto state 137

State 100

	Term1 -> Lambda LambdaVariable ListLambdaVariable . '->' Term    (rule 81)

	'->'           shift, and enter state 136


State 101

	Term1 -> Term2 '$' Term1 .                          (rule 82)

	')'            reduce using rule 82
	','            reduce using rule 82
	'->'           reduce using rule 82
	';'            reduce using rule 82
	'@+'           reduce using rule 82
	'@+i'          reduce using rule 82
	'@-'           reduce using rule 82
	'@-i'          reduce using rule 82
	'@0'           reduce using rule 82
	'@1'           reduce using rule 82
	'else'         reduce using rule 82
	'of'           reduce using rule 82
	'then'         reduce using rule 82
	'with-ctrl'    reduce using rule 82
	'}'            reduce using rule 82


State 102

	Term3 -> '(' Term ')' .                             (rule 76)

	'$'            reduce using rule 76
	'('            reduce using rule 76
	'()'           reduce using rule 76
	')'            reduce using rule 76
	','            reduce using rule 76
	'->'           reduce using rule 76
	';'            reduce using rule 76
	'@+'           reduce using rule 76
	'@+i'          reduce using rule 76
	'@-'           reduce using rule 76
	'@-i'          reduce using rule 76
	'@0'           reduce using rule 76
	'@1'           reduce using rule 76
	'else'         reduce using rule 76
	'of'           reduce using rule 76
	'then'         reduce using rule 76
	'with-ctrl'    reduce using rule 76
	'}'            reduce using rule 76
	L_Var          reduce using rule 76
	L_Bit          reduce using rule 76


State 103

	Tuple -> '(' Term ',' . ListTerm ')'                (rule 69)

	'('            shift, and enter state 47
	'()'           shift, and enter state 48
	'case'         shift, and enter state 49
	'gate'         shift, and enter state 50
	'if'           shift, and enter state 51
	'let'          shift, and enter state 52
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 53
	L_Bit          shift, and enter state 54

	Var            goto state 39
	Lambda         goto state 40
	Bit            goto state 41
	Tuple          goto state 42
	ListTerm       goto state 134
	Term3          goto state 43
	Term1          goto state 44
	Term2          goto state 45
	Term           goto state 135

State 104

	Term1 -> 'case' Term 'of' . CaseExpression ListCaseExpression    (rule 80)

	'('            shift, and enter state 47
	'()'           shift, and enter state 48
	'case'         shift, and enter state 49
	'gate'         shift, and enter state 50
	'if'           shift, and enter state 51
	'let'          shift, and enter state 52
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 53
	L_Bit          shift, and enter state 54

	Var            goto state 39
	Lambda         goto state 40
	Bit            goto state 41
	Tuple          goto state 42
	Term3          goto state 43
	Term1          goto state 44
	Term2          goto state 45
	Term           goto state 132
	CaseExpression goto state 133

State 105

	Gate -> 'U3' '(' . Angle ',' Angle ',' Angle ')'    (rule 53)

	L_doubl        shift, and enter state 2

	Double         goto state 107
	Angle          goto state 131

State 106

	Gate -> 'U2' '(' . Angle ',' Angle ')'              (rule 52)

	L_doubl        shift, and enter state 2

	Double         goto state 107
	Angle          goto state 130

State 107

	Angle -> Double .                                   (rule 19)

	'('            reduce using rule 19
	'()'           reduce using rule 19
	')'            reduce using rule 19
	','            reduce using rule 19
	'case'         reduce using rule 19
	'gate'         reduce using rule 19
	'if'           reduce using rule 19
	'let'          reduce using rule 19
	L_Var          reduce using rule 19
	L_Lambda       reduce using rule 19
	L_Bit          reduce using rule 19


State 108

	Gate -> 'U1' Angle .                                (rule 51)

	'('            reduce using rule 51
	'()'           reduce using rule 51
	'case'         reduce using rule 51
	'gate'         reduce using rule 51
	'if'           reduce using rule 51
	'let'          reduce using rule 51
	L_Var          reduce using rule 51
	L_Lambda       reduce using rule 51
	L_Bit          reduce using rule 51


State 109

	Gate -> 'SWAP_THETA' Angle .                        (rule 59)

	'('            reduce using rule 59
	'()'           reduce using rule 59
	'case'         reduce using rule 59
	'gate'         reduce using rule 59
	'if'           reduce using rule 59
	'let'          reduce using rule 59
	L_Var          reduce using rule 59
	L_Lambda       reduce using rule 59
	L_Bit          reduce using rule 59


State 110

	Gate -> 'RZ' Angle .                                (rule 50)

	'('            reduce using rule 50
	'()'           reduce using rule 50
	'case'         reduce using rule 50
	'gate'         reduce using rule 50
	'if'           reduce using rule 50
	'let'          reduce using rule 50
	L_Var          reduce using rule 50
	L_Lambda       reduce using rule 50
	L_Bit          reduce using rule 50


State 111

	Gate -> 'RY' Angle .                                (rule 49)

	'('            reduce using rule 49
	'()'           reduce using rule 49
	'case'         reduce using rule 49
	'gate'         reduce using rule 49
	'if'           reduce using rule 49
	'let'          reduce using rule 49
	L_Var          reduce using rule 49
	L_Lambda       reduce using rule 49
	L_Bit          reduce using rule 49


State 112

	Gate -> 'RX' Angle .                                (rule 48)

	'('            reduce using rule 48
	'()'           reduce using rule 48
	'case'         reduce using rule 48
	'gate'         reduce using rule 48
	'if'           reduce using rule 48
	'let'          reduce using rule 48
	L_Var          reduce using rule 48
	L_Lambda       reduce using rule 48
	L_Bit          reduce using rule 48


State 113

	Gate -> 'ROOT_Z_DAG' Integer .                      (rule 39)

	'('            reduce using rule 39
	'()'           reduce using rule 39
	'case'         reduce using rule 39
	'gate'         reduce using rule 39
	'if'           reduce using rule 39
	'let'          reduce using rule 39
	L_Var          reduce using rule 39
	L_Lambda       reduce using rule 39
	L_Bit          reduce using rule 39


State 114

	Gate -> 'ROOT_Z' Integer .                          (rule 38)

	'('            reduce using rule 38
	'()'           reduce using rule 38
	'case'         reduce using rule 38
	'gate'         reduce using rule 38
	'if'           reduce using rule 38
	'let'          reduce using rule 38
	L_Var          reduce using rule 38
	L_Lambda       reduce using rule 38
	L_Bit          reduce using rule 38


State 115

	Gate -> 'ROOT_Y_DAG' Integer .                      (rule 37)

	'('            reduce using rule 37
	'()'           reduce using rule 37
	'case'         reduce using rule 37
	'gate'         reduce using rule 37
	'if'           reduce using rule 37
	'let'          reduce using rule 37
	L_Var          reduce using rule 37
	L_Lambda       reduce using rule 37
	L_Bit          reduce using rule 37


State 116

	Gate -> 'ROOT_Y' Integer .                          (rule 36)

	'('            reduce using rule 36
	'()'           reduce using rule 36
	'case'         reduce using rule 36
	'gate'         reduce using rule 36
	'if'           reduce using rule 36
	'let'          reduce using rule 36
	L_Var          reduce using rule 36
	L_Lambda       reduce using rule 36
	L_Bit          reduce using rule 36


State 117

	Gate -> 'ROOT_X_DAG' Integer .                      (rule 35)

	'('            reduce using rule 35
	'()'           reduce using rule 35
	'case'         reduce using rule 35
	'gate'         reduce using rule 35
	'if'           reduce using rule 35
	'let'          reduce using rule 35
	L_Var          reduce using rule 35
	L_Lambda       reduce using rule 35
	L_Bit          reduce using rule 35


State 118

	Gate -> 'ROOT_X' Integer .                          (rule 34)

	'('            reduce using rule 34
	'()'           reduce using rule 34
	'case'         reduce using rule 34
	'gate'         reduce using rule 34
	'if'           reduce using rule 34
	'let'          reduce using rule 34
	L_Var          reduce using rule 34
	L_Lambda       reduce using rule 34
	L_Bit          reduce using rule 34


State 119

	Gate -> 'ROOT_SWAP_DAG' Integer .                   (rule 61)

	'('            reduce using rule 61
	'()'           reduce using rule 61
	'case'         reduce using rule 61
	'gate'         reduce using rule 61
	'if'           reduce using rule 61
	'let'          reduce using rule 61
	L_Var          reduce using rule 61
	L_Lambda       reduce using rule 61
	L_Bit          reduce using rule 61


State 120

	Gate -> 'ROOT_SWAP' Integer .                       (rule 60)

	'('            reduce using rule 60
	'()'           reduce using rule 60
	'case'         reduce using rule 60
	'gate'         reduce using rule 60
	'if'           reduce using rule 60
	'let'          reduce using rule 60
	L_Var          reduce using rule 60
	L_Lambda       reduce using rule 60
	L_Bit          reduce using rule 60


State 121

	Term1 -> 'gate' Gate Term .                         (rule 83)
	Term1 -> 'gate' Gate Term . 'with-ctrl' '[' ListControl ']'    (rule 84)

	')'            reduce using rule 83
	','            reduce using rule 83
	'->'           reduce using rule 83
	';'            reduce using rule 83
	'@+'           reduce using rule 83
	'@+i'          reduce using rule 83
	'@-'           reduce using rule 83
	'@-i'          reduce using rule 83
	'@0'           reduce using rule 83
	'@1'           reduce using rule 83
	'else'         reduce using rule 83
	'of'           reduce using rule 83
	'then'         reduce using rule 83
	'with-ctrl'    shift, and enter state 129
			(reduce using rule 83)

	'}'            reduce using rule 83


State 122

	Term1 -> 'if' Term 'then' . Term 'else' Term        (rule 77)

	'('            shift, and enter state 47
	'()'           shift, and enter state 48
	'case'         shift, and enter state 49
	'gate'         shift, and enter state 50
	'if'           shift, and enter state 51
	'let'          shift, and enter state 52
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 53
	L_Bit          shift, and enter state 54

	Var            goto state 39
	Lambda         goto state 40
	Bit            goto state 41
	Tuple          goto state 42
	Term3          goto state 43
	Term1          goto state 44
	Term2          goto state 45
	Term           goto state 128

State 123

	LetVariable -> Var .                                (rule 63)

	')'            reduce using rule 63
	','            reduce using rule 63
	'='            reduce using rule 63


State 124

	Term1 -> 'let' '{' LetVariable . '=' Term '}' 'in' Term    (rule 78)

	'='            shift, and enter state 127


State 125

	Term1 -> 'let' '{' '(' . LetVariable ',' ListLetVariable ')' '=' Term '}' 'in' Term    (rule 79)

	L_Var          shift, and enter state 8

	Var            goto state 123
	LetVariable    goto state 126

State 126

	Term1 -> 'let' '{' '(' LetVariable . ',' ListLetVariable ')' '=' Term '}' 'in' Term    (rule 79)

	','            shift, and enter state 149


State 127

	Term1 -> 'let' '{' LetVariable '=' . Term '}' 'in' Term    (rule 78)

	'('            shift, and enter state 47
	'()'           shift, and enter state 48
	'case'         shift, and enter state 49
	'gate'         shift, and enter state 50
	'if'           shift, and enter state 51
	'let'          shift, and enter state 52
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 53
	L_Bit          shift, and enter state 54

	Var            goto state 39
	Lambda         goto state 40
	Bit            goto state 41
	Tuple          goto state 42
	Term3          goto state 43
	Term1          goto state 44
	Term2          goto state 45
	Term           goto state 148

State 128

	Term1 -> 'if' Term 'then' Term . 'else' Term        (rule 77)

	'else'         shift, and enter state 147


State 129

	Term1 -> 'gate' Gate Term 'with-ctrl' . '[' ListControl ']'    (rule 84)

	'['            shift, and enter state 146


State 130

	Gate -> 'U2' '(' Angle . ',' Angle ')'              (rule 52)

	','            shift, and enter state 145


State 131

	Gate -> 'U3' '(' Angle . ',' Angle ',' Angle ')'    (rule 53)

	','            shift, and enter state 144


State 132

	CaseExpression -> Term . '->' Var                   (rule 89)

	'->'           shift, and enter state 143


State 133

	Term1 -> 'case' Term 'of' CaseExpression . ListCaseExpression    (rule 80)

	'('            shift, and enter state 47
	'()'           shift, and enter state 48
	'case'         shift, and enter state 49
	'gate'         shift, and enter state 50
	'if'           shift, and enter state 51
	'let'          shift, and enter state 52
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 53
	L_Bit          shift, and enter state 54

	Var            goto state 39
	Lambda         goto state 40
	Bit            goto state 41
	Tuple          goto state 42
	Term3          goto state 43
	Term1          goto state 44
	Term2          goto state 45
	Term           goto state 132
	CaseExpression goto state 141
	ListCaseExpressiongoto state 142

State 134

	Tuple -> '(' Term ',' ListTerm . ')'                (rule 69)

	')'            shift, and enter state 140


State 135

	ListTerm -> Term .                                  (rule 70)
	ListTerm -> Term . ',' ListTerm                     (rule 71)

	')'            reduce using rule 70
	','            shift, and enter state 139


State 136

	Term1 -> Lambda LambdaVariable ListLambdaVariable '->' . Term    (rule 81)

	'('            shift, and enter state 47
	'()'           shift, and enter state 48
	'case'         shift, and enter state 49
	'gate'         shift, and enter state 50
	'if'           shift, and enter state 51
	'let'          shift, and enter state 52
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 53
	L_Bit          shift, and enter state 54

	Var            goto state 39
	Lambda         goto state 40
	Bit            goto state 41
	Tuple          goto state 42
	Term3          goto state 43
	Term1          goto state 44
	Term2          goto state 45
	Term           goto state 138

State 137

	ListLambdaVariable -> LambdaVariable ListLambdaVariable .    (rule 68)

	'->'           reduce using rule 68


State 138

	Term1 -> Lambda LambdaVariable ListLambdaVariable '->' Term .    (rule 81)

	')'            reduce using rule 81
	','            reduce using rule 81
	'->'           reduce using rule 81
	';'            reduce using rule 81
	'@+'           reduce using rule 81
	'@+i'          reduce using rule 81
	'@-'           reduce using rule 81
	'@-i'          reduce using rule 81
	'@0'           reduce using rule 81
	'@1'           reduce using rule 81
	'else'         reduce using rule 81
	'of'           reduce using rule 81
	'then'         reduce using rule 81
	'with-ctrl'    reduce using rule 81
	'}'            reduce using rule 81


State 139

	ListTerm -> Term ',' . ListTerm                     (rule 71)

	'('            shift, and enter state 47
	'()'           shift, and enter state 48
	'case'         shift, and enter state 49
	'gate'         shift, and enter state 50
	'if'           shift, and enter state 51
	'let'          shift, and enter state 52
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 53
	L_Bit          shift, and enter state 54

	Var            goto state 39
	Lambda         goto state 40
	Bit            goto state 41
	Tuple          goto state 42
	ListTerm       goto state 161
	Term3          goto state 43
	Term1          goto state 44
	Term2          goto state 45
	Term           goto state 135

State 140

	Tuple -> '(' Term ',' ListTerm ')' .                (rule 69)

	'$'            reduce using rule 69
	'('            reduce using rule 69
	'()'           reduce using rule 69
	')'            reduce using rule 69
	','            reduce using rule 69
	'->'           reduce using rule 69
	';'            reduce using rule 69
	'@+'           reduce using rule 69
	'@+i'          reduce using rule 69
	'@-'           reduce using rule 69
	'@-i'          reduce using rule 69
	'@0'           reduce using rule 69
	'@1'           reduce using rule 69
	'else'         reduce using rule 69
	'of'           reduce using rule 69
	'then'         reduce using rule 69
	'with-ctrl'    reduce using rule 69
	'}'            reduce using rule 69
	L_Var          reduce using rule 69
	L_Bit          reduce using rule 69


State 141

	ListCaseExpression -> CaseExpression .              (rule 90)
	ListCaseExpression -> CaseExpression . ListCaseExpression    (rule 91)

	'('            shift, and enter state 47
	'()'           shift, and enter state 48
	')'            reduce using rule 90
	','            reduce using rule 90
	'->'           reduce using rule 90
	';'            reduce using rule 90
	'@+'           reduce using rule 90
	'@+i'          reduce using rule 90
	'@-'           reduce using rule 90
	'@-i'          reduce using rule 90
	'@0'           reduce using rule 90
	'@1'           reduce using rule 90
	'case'         shift, and enter state 49
	'else'         reduce using rule 90
	'gate'         shift, and enter state 50
	'if'           shift, and enter state 51
	'let'          shift, and enter state 52
	'of'           reduce using rule 90
	'then'         reduce using rule 90
	'with-ctrl'    reduce using rule 90
	'}'            reduce using rule 90
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 53
	L_Bit          shift, and enter state 54

	Var            goto state 39
	Lambda         goto state 40
	Bit            goto state 41
	Tuple          goto state 42
	Term3          goto state 43
	Term1          goto state 44
	Term2          goto state 45
	Term           goto state 132
	CaseExpression goto state 141
	ListCaseExpressiongoto state 160

State 142

	Term1 -> 'case' Term 'of' CaseExpression ListCaseExpression .    (rule 80)

	')'            reduce using rule 80
	','            reduce using rule 80
	'->'           reduce using rule 80
	';'            reduce using rule 80
	'@+'           reduce using rule 80
	'@+i'          reduce using rule 80
	'@-'           reduce using rule 80
	'@-i'          reduce using rule 80
	'@0'           reduce using rule 80
	'@1'           reduce using rule 80
	'else'         reduce using rule 80
	'of'           reduce using rule 80
	'then'         reduce using rule 80
	'with-ctrl'    reduce using rule 80
	'}'            reduce using rule 80


State 143

	CaseExpression -> Term '->' . Var                   (rule 89)

	L_Var          shift, and enter state 8

	Var            goto state 159

State 144

	Gate -> 'U3' '(' Angle ',' . Angle ',' Angle ')'    (rule 53)

	L_doubl        shift, and enter state 2

	Double         goto state 107
	Angle          goto state 158

State 145

	Gate -> 'U2' '(' Angle ',' . Angle ')'              (rule 52)

	L_doubl        shift, and enter state 2

	Double         goto state 107
	Angle          goto state 157

State 146

	Term1 -> 'gate' Gate Term 'with-ctrl' '[' . ListControl ']'    (rule 84)

	'('            shift, and enter state 47
	'()'           shift, and enter state 48
	'case'         shift, and enter state 49
	'gate'         shift, and enter state 50
	'if'           shift, and enter state 51
	'let'          shift, and enter state 52
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 53
	L_Bit          shift, and enter state 54

	Var            goto state 39
	Lambda         goto state 40
	Bit            goto state 41
	Control        goto state 154
	ListControl    goto state 155
	Tuple          goto state 42
	Term3          goto state 43
	Term1          goto state 44
	Term2          goto state 45
	Term           goto state 156

State 147

	Term1 -> 'if' Term 'then' Term 'else' . Term        (rule 77)

	'('            shift, and enter state 47
	'()'           shift, and enter state 48
	'case'         shift, and enter state 49
	'gate'         shift, and enter state 50
	'if'           shift, and enter state 51
	'let'          shift, and enter state 52
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 53
	L_Bit          shift, and enter state 54

	Var            goto state 39
	Lambda         goto state 40
	Bit            goto state 41
	Tuple          goto state 42
	Term3          goto state 43
	Term1          goto state 44
	Term2          goto state 45
	Term           goto state 153

State 148

	Term1 -> 'let' '{' LetVariable '=' Term . '}' 'in' Term    (rule 78)

	'}'            shift, and enter state 152


State 149

	Term1 -> 'let' '{' '(' LetVariable ',' . ListLetVariable ')' '=' Term '}' 'in' Term    (rule 79)

	L_Var          shift, and enter state 8

	Var            goto state 123
	LetVariable    goto state 150
	ListLetVariablegoto state 151

State 150

	ListLetVariable -> LetVariable .                    (rule 64)
	ListLetVariable -> LetVariable . ',' ListLetVariable    (rule 65)

	')'            reduce using rule 64
	','            shift, and enter state 175


State 151

	Term1 -> 'let' '{' '(' LetVariable ',' ListLetVariable . ')' '=' Term '}' 'in' Term    (rule 79)

	')'            shift, and enter state 174


State 152

	Term1 -> 'let' '{' LetVariable '=' Term '}' . 'in' Term    (rule 78)

	'in'           shift, and enter state 173


State 153

	Term1 -> 'if' Term 'then' Term 'else' Term .        (rule 77)

	')'            reduce using rule 77
	','            reduce using rule 77
	'->'           reduce using rule 77
	';'            reduce using rule 77
	'@+'           reduce using rule 77
	'@+i'          reduce using rule 77
	'@-'           reduce using rule 77
	'@-i'          reduce using rule 77
	'@0'           reduce using rule 77
	'@1'           reduce using rule 77
	'else'         reduce using rule 77
	'of'           reduce using rule 77
	'then'         reduce using rule 77
	'with-ctrl'    reduce using rule 77
	'}'            reduce using rule 77


State 154

	ListControl -> Control .                            (rule 27)
	ListControl -> Control . ',' ListControl            (rule 28)

	','            shift, and enter state 172
	']'            reduce using rule 27


State 155

	Term1 -> 'gate' Gate Term 'with-ctrl' '[' ListControl . ']'    (rule 84)

	']'            shift, and enter state 171


State 156

	Control -> Term . ControlState                      (rule 26)

	'@+'           shift, and enter state 165
	'@+i'          shift, and enter state 166
	'@-'           shift, and enter state 167
	'@-i'          shift, and enter state 168
	'@0'           shift, and enter state 169
	'@1'           shift, and enter state 170

	ControlState   goto state 164

State 157

	Gate -> 'U2' '(' Angle ',' Angle . ')'              (rule 52)

	')'            shift, and enter state 163


State 158

	Gate -> 'U3' '(' Angle ',' Angle . ',' Angle ')'    (rule 53)

	','            shift, and enter state 162


State 159

	CaseExpression -> Term '->' Var .                   (rule 89)

	'('            reduce using rule 89
	'()'           reduce using rule 89
	')'            reduce using rule 89
	','            reduce using rule 89
	'->'           reduce using rule 89
	';'            reduce using rule 89
	'@+'           reduce using rule 89
	'@+i'          reduce using rule 89
	'@-'           reduce using rule 89
	'@-i'          reduce using rule 89
	'@0'           reduce using rule 89
	'@1'           reduce using rule 89
	'case'         reduce using rule 89
	'else'         reduce using rule 89
	'gate'         reduce using rule 89
	'if'           reduce using rule 89
	'let'          reduce using rule 89
	'of'           reduce using rule 89
	'then'         reduce using rule 89
	'with-ctrl'    reduce using rule 89
	'}'            reduce using rule 89
	L_Var          reduce using rule 89
	L_Lambda       reduce using rule 89
	L_Bit          reduce using rule 89


State 160

	ListCaseExpression -> CaseExpression ListCaseExpression .    (rule 91)

	')'            reduce using rule 91
	','            reduce using rule 91
	'->'           reduce using rule 91
	';'            reduce using rule 91
	'@+'           reduce using rule 91
	'@+i'          reduce using rule 91
	'@-'           reduce using rule 91
	'@-i'          reduce using rule 91
	'@0'           reduce using rule 91
	'@1'           reduce using rule 91
	'else'         reduce using rule 91
	'of'           reduce using rule 91
	'then'         reduce using rule 91
	'with-ctrl'    reduce using rule 91
	'}'            reduce using rule 91


State 161

	ListTerm -> Term ',' ListTerm .                     (rule 71)

	')'            reduce using rule 71


State 162

	Gate -> 'U3' '(' Angle ',' Angle ',' . Angle ')'    (rule 53)

	L_doubl        shift, and enter state 2

	Double         goto state 107
	Angle          goto state 180

State 163

	Gate -> 'U2' '(' Angle ',' Angle ')' .              (rule 52)

	'('            reduce using rule 52
	'()'           reduce using rule 52
	'case'         reduce using rule 52
	'gate'         reduce using rule 52
	'if'           reduce using rule 52
	'let'          reduce using rule 52
	L_Var          reduce using rule 52
	L_Lambda       reduce using rule 52
	L_Bit          reduce using rule 52


State 164

	Control -> Term ControlState .                      (rule 26)

	','            reduce using rule 26
	']'            reduce using rule 26


State 165

	ControlState -> '@+' .                              (rule 22)

	','            reduce using rule 22
	']'            reduce using rule 22


State 166

	ControlState -> '@+i' .                             (rule 24)

	','            reduce using rule 24
	']'            reduce using rule 24


State 167

	ControlState -> '@-' .                              (rule 23)

	','            reduce using rule 23
	']'            reduce using rule 23


State 168

	ControlState -> '@-i' .                             (rule 25)

	','            reduce using rule 25
	']'            reduce using rule 25


State 169

	ControlState -> '@0' .                              (rule 20)

	','            reduce using rule 20
	']'            reduce using rule 20


State 170

	ControlState -> '@1' .                              (rule 21)

	','            reduce using rule 21
	']'            reduce using rule 21


State 171

	Term1 -> 'gate' Gate Term 'with-ctrl' '[' ListControl ']' .    (rule 84)

	')'            reduce using rule 84
	','            reduce using rule 84
	'->'           reduce using rule 84
	';'            reduce using rule 84
	'@+'           reduce using rule 84
	'@+i'          reduce using rule 84
	'@-'           reduce using rule 84
	'@-i'          reduce using rule 84
	'@0'           reduce using rule 84
	'@1'           reduce using rule 84
	'else'         reduce using rule 84
	'of'           reduce using rule 84
	'then'         reduce using rule 84
	'with-ctrl'    reduce using rule 84
	'}'            reduce using rule 84


State 172

	ListControl -> Control ',' . ListControl            (rule 28)

	'('            shift, and enter state 47
	'()'           shift, and enter state 48
	'case'         shift, and enter state 49
	'gate'         shift, and enter state 50
	'if'           shift, and enter state 51
	'let'          shift, and enter state 52
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 53
	L_Bit          shift, and enter state 54

	Var            goto state 39
	Lambda         goto state 40
	Bit            goto state 41
	Control        goto state 154
	ListControl    goto state 179
	Tuple          goto state 42
	Term3          goto state 43
	Term1          goto state 44
	Term2          goto state 45
	Term           goto state 156

State 173

	Term1 -> 'let' '{' LetVariable '=' Term '}' 'in' . Term    (rule 78)

	'('            shift, and enter state 47
	'()'           shift, and enter state 48
	'case'         shift, and enter state 49
	'gate'         shift, and enter state 50
	'if'           shift, and enter state 51
	'let'          shift, and enter state 52
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 53
	L_Bit          shift, and enter state 54

	Var            goto state 39
	Lambda         goto state 40
	Bit            goto state 41
	Tuple          goto state 42
	Term3          goto state 43
	Term1          goto state 44
	Term2          goto state 45
	Term           goto state 178

State 174

	Term1 -> 'let' '{' '(' LetVariable ',' ListLetVariable ')' . '=' Term '}' 'in' Term    (rule 79)

	'='            shift, and enter state 177


State 175

	ListLetVariable -> LetVariable ',' . ListLetVariable    (rule 65)

	L_Var          shift, and enter state 8

	Var            goto state 123
	LetVariable    goto state 150
	ListLetVariablegoto state 176

State 176

	ListLetVariable -> LetVariable ',' ListLetVariable .    (rule 65)

	')'            reduce using rule 65


State 177

	Term1 -> 'let' '{' '(' LetVariable ',' ListLetVariable ')' '=' . Term '}' 'in' Term    (rule 79)

	'('            shift, and enter state 47
	'()'           shift, and enter state 48
	'case'         shift, and enter state 49
	'gate'         shift, and enter state 50
	'if'           shift, and enter state 51
	'let'          shift, and enter state 52
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 53
	L_Bit          shift, and enter state 54

	Var            goto state 39
	Lambda         goto state 40
	Bit            goto state 41
	Tuple          goto state 42
	Term3          goto state 43
	Term1          goto state 44
	Term2          goto state 45
	Term           goto state 182

State 178

	Term1 -> 'let' '{' LetVariable '=' Term '}' 'in' Term .    (rule 78)

	')'            reduce using rule 78
	','            reduce using rule 78
	'->'           reduce using rule 78
	';'            reduce using rule 78
	'@+'           reduce using rule 78
	'@+i'          reduce using rule 78
	'@-'           reduce using rule 78
	'@-i'          reduce using rule 78
	'@0'           reduce using rule 78
	'@1'           reduce using rule 78
	'else'         reduce using rule 78
	'of'           reduce using rule 78
	'then'         reduce using rule 78
	'with-ctrl'    reduce using rule 78
	'}'            reduce using rule 78


State 179

	ListControl -> Control ',' ListControl .            (rule 28)

	']'            reduce using rule 28


State 180

	Gate -> 'U3' '(' Angle ',' Angle ',' Angle . ')'    (rule 53)

	')'            shift, and enter state 181


State 181

	Gate -> 'U3' '(' Angle ',' Angle ',' Angle ')' .    (rule 53)

	'('            reduce using rule 53
	'()'           reduce using rule 53
	'case'         reduce using rule 53
	'gate'         reduce using rule 53
	'if'           reduce using rule 53
	'let'          reduce using rule 53
	L_Var          reduce using rule 53
	L_Lambda       reduce using rule 53
	L_Bit          reduce using rule 53


State 182

	Term1 -> 'let' '{' '(' LetVariable ',' ListLetVariable ')' '=' Term . '}' 'in' Term    (rule 79)

	'}'            shift, and enter state 183


State 183

	Term1 -> 'let' '{' '(' LetVariable ',' ListLetVariable ')' '=' Term '}' . 'in' Term    (rule 79)

	'in'           shift, and enter state 184


State 184

	Term1 -> 'let' '{' '(' LetVariable ',' ListLetVariable ')' '=' Term '}' 'in' . Term    (rule 79)

	'('            shift, and enter state 47
	'()'           shift, and enter state 48
	'case'         shift, and enter state 49
	'gate'         shift, and enter state 50
	'if'           shift, and enter state 51
	'let'          shift, and enter state 52
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 53
	L_Bit          shift, and enter state 54

	Var            goto state 39
	Lambda         goto state 40
	Bit            goto state 41
	Tuple          goto state 42
	Term3          goto state 43
	Term1          goto state 44
	Term2          goto state 45
	Term           goto state 185

State 185

	Term1 -> 'let' '{' '(' LetVariable ',' ListLetVariable ')' '=' Term '}' 'in' Term .    (rule 79)

	')'            reduce using rule 79
	','            reduce using rule 79
	'->'           reduce using rule 79
	';'            reduce using rule 79
	'@+'           reduce using rule 79
	'@+i'          reduce using rule 79
	'@-'           reduce using rule 79
	'@-i'          reduce using rule 79
	'@0'           reduce using rule 79
	'@1'           reduce using rule 79
	'else'         reduce using rule 79
	'of'           reduce using rule 79
	'then'         reduce using rule 79
	'with-ctrl'    reduce using rule 79
	'}'            reduce using rule 79


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 102
Number of terminals: 72
Number of non-terminals: 35
Number of states: 186
