-----------------------------------------------------------------------------
Info file generated by Happy Version 1.20.0 from Frontend/LambdaQ/Par.y
-----------------------------------------------------------------------------

state 39 contains 1 reduce/reduce conflicts.

-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_pProgram -> Program                         (0)
	Double -> L_doubl                                  (1)
	Integer -> L_integ                                 (2)
	GateIdent -> L_GateIdent                           (3)
	Var -> L_Var                                       (4)
	Lambda -> L_Lambda                                 (5)
	Program -> ListFunctionDeclaration                 (6)
	Type3 -> 'Bit'                                     (7)
	Type3 -> 'Qbit'                                    (8)
	Type3 -> '()'                                      (9)
	Type3 -> '(' Type ')'                              (10)
	Type2 -> '!' Type3                                 (11)
	Type2 -> Type3                                     (12)
	Type1 -> Type2 '**' Integer                        (13)
	Type1 -> Type2 '*' Type1                           (14)
	Type1 -> Type2                                     (15)
	Type -> Type1 '->' Type                            (16)
	Type -> Type1                                      (17)
	Angle -> Double                                    (18)
	BasisState -> '@0'                                 (19)
	BasisState -> '@1'                                 (20)
	BasisState -> '@+'                                 (21)
	BasisState -> '@-'                                 (22)
	BasisState -> '@+i'                                (23)
	BasisState -> '@-i'                                (24)
	Gate -> 'H'                                        (25)
	Gate -> 'X'                                        (26)
	Gate -> 'Y'                                        (27)
	Gate -> 'Z'                                        (28)
	Gate -> 'ID'                                       (29)
	Gate -> 'ROOT_X' Integer                           (30)
	Gate -> 'ROOT_X_DAG' Integer                       (31)
	Gate -> 'ROOT_Y' Integer                           (32)
	Gate -> 'ROOT_Y_DAG' Integer                       (33)
	Gate -> 'ROOT_Z' Integer                           (34)
	Gate -> 'ROOT_Z_DAG' Integer                       (35)
	Gate -> 'S'                                        (36)
	Gate -> 'S_DAG'                                    (37)
	Gate -> 'T'                                        (38)
	Gate -> 'T_DAG'                                    (39)
	Gate -> 'SQRT_X'                                   (40)
	Gate -> 'SQRT_X_DAG'                               (41)
	Gate -> 'SQRT_Y'                                   (42)
	Gate -> 'SQRT_Y_DAG'                               (43)
	Gate -> 'RX' Angle                                 (44)
	Gate -> 'RY' Angle                                 (45)
	Gate -> 'RZ' Angle                                 (46)
	Gate -> 'U1' Angle                                 (47)
	Gate -> 'U2' '(' Angle ',' Angle ')'               (48)
	Gate -> 'U3' '(' Angle ',' Angle ',' Angle ')'     (49)
	Gate -> 'SWAP'                                     (50)
	Gate -> 'SQRT_SWAP'                                (51)
	Gate -> 'SQRT_SWAP_DAG'                            (52)
	Gate -> 'ISWAP'                                    (53)
	Gate -> 'FSWAP'                                    (54)
	Gate -> 'SWAP_THETA' Angle                         (55)
	Gate -> 'ROOT_SWAP' Integer                        (56)
	Gate -> 'ROOT_SWAP_DAG' Integer                    (57)
	Gate -> GateIdent                                  (58)
	LetVariable -> Var                                 (59)
	ListLetVariable ->                                 (60)
	ListLetVariable -> LetVariable                     (61)
	ListLetVariable -> LetVariable ',' ListLetVariable   (62)
	Tuple -> '(' Term ',' ListTerm ')'                 (63)
	Controls -> '[' Term ',' ListTerm ']'              (64)
	ListTerm -> Term                                   (65)
	ListTerm -> Term ',' ListTerm                      (66)
	ControlBasisStates -> '[' BasisState ',' ListBasisState ']'   (67)
	ListBasisState -> BasisState                       (68)
	ListBasisState -> BasisState ',' ListBasisState    (69)
	Term3 -> 'new' BasisState                          (70)
	Term3 -> Var                                       (71)
	Term3 -> Tuple                                     (72)
	Term3 -> '()'                                      (73)
	Term3 -> '(' Term ')'                              (74)
	Term1 -> 'if' Term 'then' Term 'else' Term         (75)
	Term1 -> 'let' '{' '(' LetVariable ',' ListLetVariable ')' '=' Term '}' 'in' Term   (76)
	Term1 -> LetVariable ',' ListLetVariable '<-' Term ';' Term   (77)
	Term1 -> 'case' Term 'of' CaseExpression ListCaseExpression   (78)
	Term1 -> Lambda FunctionType '.' Term              (79)
	Term1 -> 'gate' Gate                               (80)
	Term1 -> 'with' Controls 'ctrl' ControlBasisStates 'gate' Gate   (81)
	Term1 -> Term2 '$' Term1                           (82)
	Term1 -> Term2                                     (83)
	Term2 -> Term2 Term3                               (84)
	Term2 -> Term2 '.' Term3                           (85)
	Term2 -> Term3                                     (86)
	Term -> Term1                                      (87)
	CaseExpression -> Term '->' Var                    (88)
	ListCaseExpression -> CaseExpression               (89)
	ListCaseExpression -> CaseExpression ListCaseExpression   (90)
	Arg -> Var                                         (91)
	ListArg ->                                         (92)
	ListArg -> Arg ListArg                             (93)
	FunctionDefinition -> Var ListArg '=' Term         (94)
	FunctionDefinition -> FunctionDefinition ';'       (95)
	FunctionType -> Var '::' Type                      (96)
	FunctionType -> FunctionType ';'                   (97)
	FunctionDeclaration -> FunctionType ';' FunctionDefinition ';'   (98)
	ListFunctionDeclaration ->                         (99)
	ListFunctionDeclaration -> FunctionDeclaration ListFunctionDeclaration   (100)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	'!'            { PT _ (TS _ 1) }
	'$'            { PT _ (TS _ 2) }
	'('            { PT _ (TS _ 3) }
	'()'           { PT _ (TS _ 4) }
	')'            { PT _ (TS _ 5) }
	'*'            { PT _ (TS _ 6) }
	'**'           { PT _ (TS _ 7) }
	','            { PT _ (TS _ 8) }
	'->'           { PT _ (TS _ 9) }
	'.'            { PT _ (TS _ 10) }
	'::'           { PT _ (TS _ 11) }
	';'            { PT _ (TS _ 12) }
	'<-'           { PT _ (TS _ 13) }
	'='            { PT _ (TS _ 14) }
	'@+'           { PT _ (TS _ 15) }
	'@+i'          { PT _ (TS _ 16) }
	'@-'           { PT _ (TS _ 17) }
	'@-i'          { PT _ (TS _ 18) }
	'@0'           { PT _ (TS _ 19) }
	'@1'           { PT _ (TS _ 20) }
	'Bit'          { PT _ (TS _ 21) }
	'FSWAP'        { PT _ (TS _ 22) }
	'H'            { PT _ (TS _ 23) }
	'ID'           { PT _ (TS _ 24) }
	'ISWAP'        { PT _ (TS _ 25) }
	'Qbit'         { PT _ (TS _ 26) }
	'ROOT_SWAP'    { PT _ (TS _ 27) }
	'ROOT_SWAP_DAG'{ PT _ (TS _ 28) }
	'ROOT_X'       { PT _ (TS _ 29) }
	'ROOT_X_DAG'   { PT _ (TS _ 30) }
	'ROOT_Y'       { PT _ (TS _ 31) }
	'ROOT_Y_DAG'   { PT _ (TS _ 32) }
	'ROOT_Z'       { PT _ (TS _ 33) }
	'ROOT_Z_DAG'   { PT _ (TS _ 34) }
	'RX'           { PT _ (TS _ 35) }
	'RY'           { PT _ (TS _ 36) }
	'RZ'           { PT _ (TS _ 37) }
	'S'            { PT _ (TS _ 38) }
	'SQRT_SWAP'    { PT _ (TS _ 39) }
	'SQRT_SWAP_DAG'{ PT _ (TS _ 40) }
	'SQRT_X'       { PT _ (TS _ 41) }
	'SQRT_X_DAG'   { PT _ (TS _ 42) }
	'SQRT_Y'       { PT _ (TS _ 43) }
	'SQRT_Y_DAG'   { PT _ (TS _ 44) }
	'SWAP'         { PT _ (TS _ 45) }
	'SWAP_THETA'   { PT _ (TS _ 46) }
	'S_DAG'        { PT _ (TS _ 47) }
	'T'            { PT _ (TS _ 48) }
	'T_DAG'        { PT _ (TS _ 49) }
	'U1'           { PT _ (TS _ 50) }
	'U2'           { PT _ (TS _ 51) }
	'U3'           { PT _ (TS _ 52) }
	'X'            { PT _ (TS _ 53) }
	'Y'            { PT _ (TS _ 54) }
	'Z'            { PT _ (TS _ 55) }
	'['            { PT _ (TS _ 56) }
	']'            { PT _ (TS _ 57) }
	'case'         { PT _ (TS _ 58) }
	'ctrl'         { PT _ (TS _ 59) }
	'else'         { PT _ (TS _ 60) }
	'gate'         { PT _ (TS _ 61) }
	'if'           { PT _ (TS _ 62) }
	'in'           { PT _ (TS _ 63) }
	'let'          { PT _ (TS _ 64) }
	'new'          { PT _ (TS _ 65) }
	'of'           { PT _ (TS _ 66) }
	'then'         { PT _ (TS _ 67) }
	'with'         { PT _ (TS _ 68) }
	'{'            { PT _ (TS _ 69) }
	'}'            { PT _ (TS _ 70) }
	L_doubl        { PT _ (TD $$) }
	L_integ        { PT _ (TI $$) }
	L_GateIdent    { PT _ (T_GateIdent _) }
	L_Var          { PT _ (T_Var _) }
	L_Lambda       { PT _ (T_Lambda $$) }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_pProgram rule  0
	Double          rule  1
	Integer         rule  2
	GateIdent       rule  3
	Var             rule  4
	Lambda          rule  5
	Program         rule  6
	Type3           rules 7, 8, 9, 10
	Type2           rules 11, 12
	Type1           rules 13, 14, 15
	Type            rules 16, 17
	Angle           rule  18
	BasisState      rules 19, 20, 21, 22, 23, 24
	Gate            rules 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58
	LetVariable     rule  59
	ListLetVariable rules 60, 61, 62
	Tuple           rule  63
	Controls        rule  64
	ListTerm        rules 65, 66
	ControlBasisStates rule  67
	ListBasisState  rules 68, 69
	Term3           rules 70, 71, 72, 73, 74
	Term1           rules 75, 76, 77, 78, 79, 80, 81, 82, 83
	Term2           rules 84, 85, 86
	Term            rule  87
	CaseExpression  rule  88
	ListCaseExpression rules 89, 90
	Arg             rule  91
	ListArg         rules 92, 93
	FunctionDefinition rules 94, 95
	FunctionType    rules 96, 97
	FunctionDeclaration rule  98
	ListFunctionDeclaration rules 99, 100

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0

	%start_pProgram -> . Program                        (rule 0)

	L_Var          shift, and enter state 8
	%eof           reduce using rule 99

	Var            goto state 3
	Program        goto state 4
	FunctionType   goto state 5
	FunctionDeclarationgoto state 6
	ListFunctionDeclarationgoto state 7

State 1

	Double -> . L_doubl                                 (rule 1)

	L_doubl        shift, and enter state 2


State 2

	Double -> L_doubl .                                 (rule 1)

	')'            reduce using rule 1
	','            reduce using rule 1
	'->'           reduce using rule 1
	';'            reduce using rule 1
	']'            reduce using rule 1
	'else'         reduce using rule 1
	'of'           reduce using rule 1
	'then'         reduce using rule 1
	'}'            reduce using rule 1


State 3

	FunctionType -> Var . '::' Type                     (rule 96)

	'::'           shift, and enter state 11


State 4

	%start_pProgram -> Program .                        (rule 0)

	%eof           accept


State 5

	FunctionType -> FunctionType . ';'                  (rule 97)
	FunctionDeclaration -> FunctionType . ';' FunctionDefinition ';'    (rule 98)

	';'            shift, and enter state 10


State 6

	ListFunctionDeclaration -> FunctionDeclaration . ListFunctionDeclaration    (rule 100)

	L_Var          shift, and enter state 8
	%eof           reduce using rule 99

	Var            goto state 3
	FunctionType   goto state 5
	FunctionDeclarationgoto state 6
	ListFunctionDeclarationgoto state 9

State 7

	Program -> ListFunctionDeclaration .                (rule 6)

	%eof           reduce using rule 6


State 8

	Var -> L_Var .                                      (rule 4)

	'$'            reduce using rule 4
	'('            reduce using rule 4
	'()'           reduce using rule 4
	')'            reduce using rule 4
	','            reduce using rule 4
	'->'           reduce using rule 4
	'.'            reduce using rule 4
	'::'           reduce using rule 4
	';'            reduce using rule 4
	'<-'           reduce using rule 4
	'='            reduce using rule 4
	']'            reduce using rule 4
	'case'         reduce using rule 4
	'else'         reduce using rule 4
	'gate'         reduce using rule 4
	'if'           reduce using rule 4
	'let'          reduce using rule 4
	'new'          reduce using rule 4
	'of'           reduce using rule 4
	'then'         reduce using rule 4
	'with'         reduce using rule 4
	'}'            reduce using rule 4
	L_Var          reduce using rule 4
	L_Lambda       reduce using rule 4


State 9

	ListFunctionDeclaration -> FunctionDeclaration ListFunctionDeclaration .    (rule 100)

	%eof           reduce using rule 100


State 10

	FunctionType -> FunctionType ';' .                  (rule 97)
	FunctionDeclaration -> FunctionType ';' . FunctionDefinition ';'    (rule 98)

	';'            reduce using rule 97
	L_Var          shift, and enter state 8

	Var            goto state 21
	FunctionDefinitiongoto state 22

State 11

	FunctionType -> Var '::' . Type                     (rule 96)

	'!'            shift, and enter state 16
	'('            shift, and enter state 17
	'()'           shift, and enter state 18
	'Bit'          shift, and enter state 19
	'Qbit'         shift, and enter state 20

	Type3          goto state 12
	Type2          goto state 13
	Type1          goto state 14
	Type           goto state 15

State 12

	Type2 -> Type3 .                                    (rule 12)

	')'            reduce using rule 12
	'*'            reduce using rule 12
	'**'           reduce using rule 12
	'->'           reduce using rule 12
	'.'            reduce using rule 12
	';'            reduce using rule 12


State 13

	Type1 -> Type2 . '**' Integer                       (rule 13)
	Type1 -> Type2 . '*' Type1                          (rule 14)
	Type1 -> Type2 .                                    (rule 15)

	')'            reduce using rule 15
	'*'            shift, and enter state 30
	'**'           shift, and enter state 31
	'->'           reduce using rule 15
	'.'            reduce using rule 15
	';'            reduce using rule 15


State 14

	Type -> Type1 . '->' Type                           (rule 16)
	Type -> Type1 .                                     (rule 17)

	')'            reduce using rule 17
	'->'           shift, and enter state 29
	'.'            reduce using rule 17
	';'            reduce using rule 17


State 15

	FunctionType -> Var '::' Type .                     (rule 96)

	'.'            reduce using rule 96
	';'            reduce using rule 96


State 16

	Type2 -> '!' . Type3                                (rule 11)

	'('            shift, and enter state 17
	'()'           shift, and enter state 18
	'Bit'          shift, and enter state 19
	'Qbit'         shift, and enter state 20

	Type3          goto state 28

State 17

	Type3 -> '(' . Type ')'                             (rule 10)

	'!'            shift, and enter state 16
	'('            shift, and enter state 17
	'()'           shift, and enter state 18
	'Bit'          shift, and enter state 19
	'Qbit'         shift, and enter state 20

	Type3          goto state 12
	Type2          goto state 13
	Type1          goto state 14
	Type           goto state 27

State 18

	Type3 -> '()' .                                     (rule 9)

	')'            reduce using rule 9
	'*'            reduce using rule 9
	'**'           reduce using rule 9
	'->'           reduce using rule 9
	'.'            reduce using rule 9
	';'            reduce using rule 9


State 19

	Type3 -> 'Bit' .                                    (rule 7)

	')'            reduce using rule 7
	'*'            reduce using rule 7
	'**'           reduce using rule 7
	'->'           reduce using rule 7
	'.'            reduce using rule 7
	';'            reduce using rule 7


State 20

	Type3 -> 'Qbit' .                                   (rule 8)

	')'            reduce using rule 8
	'*'            reduce using rule 8
	'**'           reduce using rule 8
	'->'           reduce using rule 8
	'.'            reduce using rule 8
	';'            reduce using rule 8


State 21

	FunctionDefinition -> Var . ListArg '=' Term        (rule 94)

	'='            reduce using rule 92
	L_Var          shift, and enter state 8

	Var            goto state 24
	Arg            goto state 25
	ListArg        goto state 26

State 22

	FunctionDefinition -> FunctionDefinition . ';'      (rule 95)
	FunctionDeclaration -> FunctionType ';' FunctionDefinition . ';'    (rule 98)

	';'            shift, and enter state 23


State 23

	FunctionDefinition -> FunctionDefinition ';' .      (rule 95)
	FunctionDeclaration -> FunctionType ';' FunctionDefinition ';' .    (rule 98)

	';'            reduce using rule 95
	L_Var          reduce using rule 98
	%eof           reduce using rule 98


State 24

	Arg -> Var .                                        (rule 91)

	'='            reduce using rule 91
	L_Var          reduce using rule 91


State 25

	ListArg -> Arg . ListArg                            (rule 93)

	'='            reduce using rule 92
	L_Var          shift, and enter state 8

	Var            goto state 24
	Arg            goto state 25
	ListArg        goto state 38

State 26

	FunctionDefinition -> Var ListArg . '=' Term        (rule 94)

	'='            shift, and enter state 37


State 27

	Type3 -> '(' Type . ')'                             (rule 10)

	')'            shift, and enter state 36


State 28

	Type2 -> '!' Type3 .                                (rule 11)

	')'            reduce using rule 11
	'*'            reduce using rule 11
	'**'           reduce using rule 11
	'->'           reduce using rule 11
	'.'            reduce using rule 11
	';'            reduce using rule 11


State 29

	Type -> Type1 '->' . Type                           (rule 16)

	'!'            shift, and enter state 16
	'('            shift, and enter state 17
	'()'           shift, and enter state 18
	'Bit'          shift, and enter state 19
	'Qbit'         shift, and enter state 20

	Type3          goto state 12
	Type2          goto state 13
	Type1          goto state 14
	Type           goto state 35

State 30

	Type1 -> Type2 '*' . Type1                          (rule 14)

	'!'            shift, and enter state 16
	'('            shift, and enter state 17
	'()'           shift, and enter state 18
	'Bit'          shift, and enter state 19
	'Qbit'         shift, and enter state 20

	Type3          goto state 12
	Type2          goto state 13
	Type1          goto state 34

State 31

	Type1 -> Type2 '**' . Integer                       (rule 13)

	L_integ        shift, and enter state 33

	Integer        goto state 32

State 32

	Type1 -> Type2 '**' Integer .                       (rule 13)

	')'            reduce using rule 13
	'->'           reduce using rule 13
	'.'            reduce using rule 13
	';'            reduce using rule 13


State 33

	Integer -> L_integ .                                (rule 2)

	')'            reduce using rule 2
	','            reduce using rule 2
	'->'           reduce using rule 2
	'.'            reduce using rule 2
	';'            reduce using rule 2
	']'            reduce using rule 2
	'else'         reduce using rule 2
	'of'           reduce using rule 2
	'then'         reduce using rule 2
	'}'            reduce using rule 2


State 34

	Type1 -> Type2 '*' Type1 .                          (rule 14)

	')'            reduce using rule 14
	'->'           reduce using rule 14
	'.'            reduce using rule 14
	';'            reduce using rule 14


State 35

	Type -> Type1 '->' Type .                           (rule 16)

	')'            reduce using rule 16
	'.'            reduce using rule 16
	';'            reduce using rule 16


State 36

	Type3 -> '(' Type ')' .                             (rule 10)

	')'            reduce using rule 10
	'*'            reduce using rule 10
	'**'           reduce using rule 10
	'->'           reduce using rule 10
	'.'            reduce using rule 10
	';'            reduce using rule 10


State 37

	FunctionDefinition -> Var ListArg '=' . Term        (rule 94)

	'('            shift, and enter state 47
	'()'           shift, and enter state 48
	'case'         shift, and enter state 49
	'gate'         shift, and enter state 50
	'if'           shift, and enter state 51
	'let'          shift, and enter state 52
	'new'          shift, and enter state 53
	'with'         shift, and enter state 54
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 55

	Var            goto state 39
	Lambda         goto state 40
	LetVariable    goto state 41
	Tuple          goto state 42
	Term3          goto state 43
	Term1          goto state 44
	Term2          goto state 45
	Term           goto state 46

State 38

	ListArg -> Arg ListArg .                            (rule 93)

	'='            reduce using rule 93


State 39

	LetVariable -> Var .                                (rule 59)
	Term3 -> Var .                                      (rule 71)

	'$'            reduce using rule 71
	'('            reduce using rule 71
	'()'           reduce using rule 71
	')'            reduce using rule 71
	','            reduce using rule 71
			(reduce using rule 59)

	'->'           reduce using rule 71
	'.'            reduce using rule 71
	';'            reduce using rule 71
	']'            reduce using rule 71
	'else'         reduce using rule 71
	'new'          reduce using rule 71
	'of'           reduce using rule 71
	'then'         reduce using rule 71
	'}'            reduce using rule 71
	L_Var          reduce using rule 71


State 40

	Term1 -> Lambda . FunctionType '.' Term             (rule 79)

	L_Var          shift, and enter state 8

	Var            goto state 3
	FunctionType   goto state 110

State 41

	Term1 -> LetVariable . ',' ListLetVariable '<-' Term ';' Term    (rule 77)

	','            shift, and enter state 109


State 42

	Term3 -> Tuple .                                    (rule 72)

	'$'            reduce using rule 72
	'('            reduce using rule 72
	'()'           reduce using rule 72
	')'            reduce using rule 72
	','            reduce using rule 72
	'->'           reduce using rule 72
	'.'            reduce using rule 72
	';'            reduce using rule 72
	']'            reduce using rule 72
	'else'         reduce using rule 72
	'new'          reduce using rule 72
	'of'           reduce using rule 72
	'then'         reduce using rule 72
	'}'            reduce using rule 72
	L_Var          reduce using rule 72


State 43

	Term2 -> Term3 .                                    (rule 86)

	'$'            reduce using rule 86
	'('            reduce using rule 86
	'()'           reduce using rule 86
	')'            reduce using rule 86
	','            reduce using rule 86
	'->'           reduce using rule 86
	'.'            reduce using rule 86
	';'            reduce using rule 86
	']'            reduce using rule 86
	'else'         reduce using rule 86
	'new'          reduce using rule 86
	'of'           reduce using rule 86
	'then'         reduce using rule 86
	'}'            reduce using rule 86
	L_Var          reduce using rule 86


State 44

	Term -> Term1 .                                     (rule 87)

	')'            reduce using rule 87
	','            reduce using rule 87
	'->'           reduce using rule 87
	';'            reduce using rule 87
	']'            reduce using rule 87
	'else'         reduce using rule 87
	'of'           reduce using rule 87
	'then'         reduce using rule 87
	'}'            reduce using rule 87


State 45

	Term1 -> Term2 . '$' Term1                          (rule 82)
	Term1 -> Term2 .                                    (rule 83)
	Term2 -> Term2 . Term3                              (rule 84)
	Term2 -> Term2 . '.' Term3                          (rule 85)

	'$'            shift, and enter state 107
	'('            shift, and enter state 47
	'()'           shift, and enter state 48
	')'            reduce using rule 83
	','            reduce using rule 83
	'->'           reduce using rule 83
	'.'            shift, and enter state 108
	';'            reduce using rule 83
	']'            reduce using rule 83
	'else'         reduce using rule 83
	'new'          shift, and enter state 53
	'of'           reduce using rule 83
	'then'         reduce using rule 83
	'}'            reduce using rule 83
	L_Var          shift, and enter state 8

	Var            goto state 105
	Tuple          goto state 42
	Term3          goto state 106

State 46

	FunctionDefinition -> Var ListArg '=' Term .        (rule 94)

	';'            reduce using rule 94


State 47

	Tuple -> '(' . Term ',' ListTerm ')'                (rule 63)
	Term3 -> '(' . Term ')'                             (rule 74)

	'('            shift, and enter state 47
	'()'           shift, and enter state 48
	'case'         shift, and enter state 49
	'gate'         shift, and enter state 50
	'if'           shift, and enter state 51
	'let'          shift, and enter state 52
	'new'          shift, and enter state 53
	'with'         shift, and enter state 54
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 55

	Var            goto state 39
	Lambda         goto state 40
	LetVariable    goto state 41
	Tuple          goto state 42
	Term3          goto state 43
	Term1          goto state 44
	Term2          goto state 45
	Term           goto state 104

State 48

	Term3 -> '()' .                                     (rule 73)

	'$'            reduce using rule 73
	'('            reduce using rule 73
	'()'           reduce using rule 73
	')'            reduce using rule 73
	','            reduce using rule 73
	'->'           reduce using rule 73
	'.'            reduce using rule 73
	';'            reduce using rule 73
	']'            reduce using rule 73
	'else'         reduce using rule 73
	'new'          reduce using rule 73
	'of'           reduce using rule 73
	'then'         reduce using rule 73
	'}'            reduce using rule 73
	L_Var          reduce using rule 73


State 49

	Term1 -> 'case' . Term 'of' CaseExpression ListCaseExpression    (rule 78)

	'('            shift, and enter state 47
	'()'           shift, and enter state 48
	'case'         shift, and enter state 49
	'gate'         shift, and enter state 50
	'if'           shift, and enter state 51
	'let'          shift, and enter state 52
	'new'          shift, and enter state 53
	'with'         shift, and enter state 54
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 55

	Var            goto state 39
	Lambda         goto state 40
	LetVariable    goto state 41
	Tuple          goto state 42
	Term3          goto state 43
	Term1          goto state 44
	Term2          goto state 45
	Term           goto state 103

State 50

	Term1 -> 'gate' . Gate                              (rule 80)

	'FSWAP'        shift, and enter state 69
	'H'            shift, and enter state 70
	'ID'           shift, and enter state 71
	'ISWAP'        shift, and enter state 72
	'ROOT_SWAP'    shift, and enter state 73
	'ROOT_SWAP_DAG'shift, and enter state 74
	'ROOT_X'       shift, and enter state 75
	'ROOT_X_DAG'   shift, and enter state 76
	'ROOT_Y'       shift, and enter state 77
	'ROOT_Y_DAG'   shift, and enter state 78
	'ROOT_Z'       shift, and enter state 79
	'ROOT_Z_DAG'   shift, and enter state 80
	'RX'           shift, and enter state 81
	'RY'           shift, and enter state 82
	'RZ'           shift, and enter state 83
	'S'            shift, and enter state 84
	'SQRT_SWAP'    shift, and enter state 85
	'SQRT_SWAP_DAG'shift, and enter state 86
	'SQRT_X'       shift, and enter state 87
	'SQRT_X_DAG'   shift, and enter state 88
	'SQRT_Y'       shift, and enter state 89
	'SQRT_Y_DAG'   shift, and enter state 90
	'SWAP'         shift, and enter state 91
	'SWAP_THETA'   shift, and enter state 92
	'S_DAG'        shift, and enter state 93
	'T'            shift, and enter state 94
	'T_DAG'        shift, and enter state 95
	'U1'           shift, and enter state 96
	'U2'           shift, and enter state 97
	'U3'           shift, and enter state 98
	'X'            shift, and enter state 99
	'Y'            shift, and enter state 100
	'Z'            shift, and enter state 101
	L_GateIdent    shift, and enter state 102

	GateIdent      goto state 67
	Gate           goto state 68

State 51

	Term1 -> 'if' . Term 'then' Term 'else' Term        (rule 75)

	'('            shift, and enter state 47
	'()'           shift, and enter state 48
	'case'         shift, and enter state 49
	'gate'         shift, and enter state 50
	'if'           shift, and enter state 51
	'let'          shift, and enter state 52
	'new'          shift, and enter state 53
	'with'         shift, and enter state 54
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 55

	Var            goto state 39
	Lambda         goto state 40
	LetVariable    goto state 41
	Tuple          goto state 42
	Term3          goto state 43
	Term1          goto state 44
	Term2          goto state 45
	Term           goto state 66

State 52

	Term1 -> 'let' . '{' '(' LetVariable ',' ListLetVariable ')' '=' Term '}' 'in' Term    (rule 76)

	'{'            shift, and enter state 65


State 53

	Term3 -> 'new' . BasisState                         (rule 70)

	'@+'           shift, and enter state 59
	'@+i'          shift, and enter state 60
	'@-'           shift, and enter state 61
	'@-i'          shift, and enter state 62
	'@0'           shift, and enter state 63
	'@1'           shift, and enter state 64

	BasisState     goto state 58

State 54

	Term1 -> 'with' . Controls 'ctrl' ControlBasisStates 'gate' Gate    (rule 81)

	'['            shift, and enter state 57

	Controls       goto state 56

State 55

	Lambda -> L_Lambda .                                (rule 5)

	L_Var          reduce using rule 5


State 56

	Term1 -> 'with' Controls . 'ctrl' ControlBasisStates 'gate' Gate    (rule 81)

	'ctrl'         shift, and enter state 140


State 57

	Controls -> '[' . Term ',' ListTerm ']'             (rule 64)

	'('            shift, and enter state 47
	'()'           shift, and enter state 48
	'case'         shift, and enter state 49
	'gate'         shift, and enter state 50
	'if'           shift, and enter state 51
	'let'          shift, and enter state 52
	'new'          shift, and enter state 53
	'with'         shift, and enter state 54
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 55

	Var            goto state 39
	Lambda         goto state 40
	LetVariable    goto state 41
	Tuple          goto state 42
	Term3          goto state 43
	Term1          goto state 44
	Term2          goto state 45
	Term           goto state 139

State 58

	Term3 -> 'new' BasisState .                         (rule 70)

	'$'            reduce using rule 70
	'('            reduce using rule 70
	'()'           reduce using rule 70
	')'            reduce using rule 70
	','            reduce using rule 70
	'->'           reduce using rule 70
	'.'            reduce using rule 70
	';'            reduce using rule 70
	']'            reduce using rule 70
	'else'         reduce using rule 70
	'new'          reduce using rule 70
	'of'           reduce using rule 70
	'then'         reduce using rule 70
	'}'            reduce using rule 70
	L_Var          reduce using rule 70


State 59

	BasisState -> '@+' .                                (rule 21)

	'$'            reduce using rule 21
	'('            reduce using rule 21
	'()'           reduce using rule 21
	')'            reduce using rule 21
	','            reduce using rule 21
	'->'           reduce using rule 21
	'.'            reduce using rule 21
	';'            reduce using rule 21
	']'            reduce using rule 21
	'else'         reduce using rule 21
	'new'          reduce using rule 21
	'of'           reduce using rule 21
	'then'         reduce using rule 21
	'}'            reduce using rule 21
	L_Var          reduce using rule 21


State 60

	BasisState -> '@+i' .                               (rule 23)

	'$'            reduce using rule 23
	'('            reduce using rule 23
	'()'           reduce using rule 23
	')'            reduce using rule 23
	','            reduce using rule 23
	'->'           reduce using rule 23
	'.'            reduce using rule 23
	';'            reduce using rule 23
	']'            reduce using rule 23
	'else'         reduce using rule 23
	'new'          reduce using rule 23
	'of'           reduce using rule 23
	'then'         reduce using rule 23
	'}'            reduce using rule 23
	L_Var          reduce using rule 23


State 61

	BasisState -> '@-' .                                (rule 22)

	'$'            reduce using rule 22
	'('            reduce using rule 22
	'()'           reduce using rule 22
	')'            reduce using rule 22
	','            reduce using rule 22
	'->'           reduce using rule 22
	'.'            reduce using rule 22
	';'            reduce using rule 22
	']'            reduce using rule 22
	'else'         reduce using rule 22
	'new'          reduce using rule 22
	'of'           reduce using rule 22
	'then'         reduce using rule 22
	'}'            reduce using rule 22
	L_Var          reduce using rule 22


State 62

	BasisState -> '@-i' .                               (rule 24)

	'$'            reduce using rule 24
	'('            reduce using rule 24
	'()'           reduce using rule 24
	')'            reduce using rule 24
	','            reduce using rule 24
	'->'           reduce using rule 24
	'.'            reduce using rule 24
	';'            reduce using rule 24
	']'            reduce using rule 24
	'else'         reduce using rule 24
	'new'          reduce using rule 24
	'of'           reduce using rule 24
	'then'         reduce using rule 24
	'}'            reduce using rule 24
	L_Var          reduce using rule 24


State 63

	BasisState -> '@0' .                                (rule 19)

	'$'            reduce using rule 19
	'('            reduce using rule 19
	'()'           reduce using rule 19
	')'            reduce using rule 19
	','            reduce using rule 19
	'->'           reduce using rule 19
	'.'            reduce using rule 19
	';'            reduce using rule 19
	']'            reduce using rule 19
	'else'         reduce using rule 19
	'new'          reduce using rule 19
	'of'           reduce using rule 19
	'then'         reduce using rule 19
	'}'            reduce using rule 19
	L_Var          reduce using rule 19


State 64

	BasisState -> '@1' .                                (rule 20)

	'$'            reduce using rule 20
	'('            reduce using rule 20
	'()'           reduce using rule 20
	')'            reduce using rule 20
	','            reduce using rule 20
	'->'           reduce using rule 20
	'.'            reduce using rule 20
	';'            reduce using rule 20
	']'            reduce using rule 20
	'else'         reduce using rule 20
	'new'          reduce using rule 20
	'of'           reduce using rule 20
	'then'         reduce using rule 20
	'}'            reduce using rule 20
	L_Var          reduce using rule 20


State 65

	Term1 -> 'let' '{' . '(' LetVariable ',' ListLetVariable ')' '=' Term '}' 'in' Term    (rule 76)

	'('            shift, and enter state 138


State 66

	Term1 -> 'if' Term . 'then' Term 'else' Term        (rule 75)

	'then'         shift, and enter state 137


State 67

	Gate -> GateIdent .                                 (rule 58)

	')'            reduce using rule 58
	','            reduce using rule 58
	'->'           reduce using rule 58
	';'            reduce using rule 58
	']'            reduce using rule 58
	'else'         reduce using rule 58
	'of'           reduce using rule 58
	'then'         reduce using rule 58
	'}'            reduce using rule 58


State 68

	Term1 -> 'gate' Gate .                              (rule 80)

	')'            reduce using rule 80
	','            reduce using rule 80
	'->'           reduce using rule 80
	';'            reduce using rule 80
	']'            reduce using rule 80
	'else'         reduce using rule 80
	'of'           reduce using rule 80
	'then'         reduce using rule 80
	'}'            reduce using rule 80


State 69

	Gate -> 'FSWAP' .                                   (rule 54)

	')'            reduce using rule 54
	','            reduce using rule 54
	'->'           reduce using rule 54
	';'            reduce using rule 54
	']'            reduce using rule 54
	'else'         reduce using rule 54
	'of'           reduce using rule 54
	'then'         reduce using rule 54
	'}'            reduce using rule 54


State 70

	Gate -> 'H' .                                       (rule 25)

	')'            reduce using rule 25
	','            reduce using rule 25
	'->'           reduce using rule 25
	';'            reduce using rule 25
	']'            reduce using rule 25
	'else'         reduce using rule 25
	'of'           reduce using rule 25
	'then'         reduce using rule 25
	'}'            reduce using rule 25


State 71

	Gate -> 'ID' .                                      (rule 29)

	')'            reduce using rule 29
	','            reduce using rule 29
	'->'           reduce using rule 29
	';'            reduce using rule 29
	']'            reduce using rule 29
	'else'         reduce using rule 29
	'of'           reduce using rule 29
	'then'         reduce using rule 29
	'}'            reduce using rule 29


State 72

	Gate -> 'ISWAP' .                                   (rule 53)

	')'            reduce using rule 53
	','            reduce using rule 53
	'->'           reduce using rule 53
	';'            reduce using rule 53
	']'            reduce using rule 53
	'else'         reduce using rule 53
	'of'           reduce using rule 53
	'then'         reduce using rule 53
	'}'            reduce using rule 53


State 73

	Gate -> 'ROOT_SWAP' . Integer                       (rule 56)

	L_integ        shift, and enter state 33

	Integer        goto state 136

State 74

	Gate -> 'ROOT_SWAP_DAG' . Integer                   (rule 57)

	L_integ        shift, and enter state 33

	Integer        goto state 135

State 75

	Gate -> 'ROOT_X' . Integer                          (rule 30)

	L_integ        shift, and enter state 33

	Integer        goto state 134

State 76

	Gate -> 'ROOT_X_DAG' . Integer                      (rule 31)

	L_integ        shift, and enter state 33

	Integer        goto state 133

State 77

	Gate -> 'ROOT_Y' . Integer                          (rule 32)

	L_integ        shift, and enter state 33

	Integer        goto state 132

State 78

	Gate -> 'ROOT_Y_DAG' . Integer                      (rule 33)

	L_integ        shift, and enter state 33

	Integer        goto state 131

State 79

	Gate -> 'ROOT_Z' . Integer                          (rule 34)

	L_integ        shift, and enter state 33

	Integer        goto state 130

State 80

	Gate -> 'ROOT_Z_DAG' . Integer                      (rule 35)

	L_integ        shift, and enter state 33

	Integer        goto state 129

State 81

	Gate -> 'RX' . Angle                                (rule 44)

	L_doubl        shift, and enter state 2

	Double         goto state 123
	Angle          goto state 128

State 82

	Gate -> 'RY' . Angle                                (rule 45)

	L_doubl        shift, and enter state 2

	Double         goto state 123
	Angle          goto state 127

State 83

	Gate -> 'RZ' . Angle                                (rule 46)

	L_doubl        shift, and enter state 2

	Double         goto state 123
	Angle          goto state 126

State 84

	Gate -> 'S' .                                       (rule 36)

	')'            reduce using rule 36
	','            reduce using rule 36
	'->'           reduce using rule 36
	';'            reduce using rule 36
	']'            reduce using rule 36
	'else'         reduce using rule 36
	'of'           reduce using rule 36
	'then'         reduce using rule 36
	'}'            reduce using rule 36


State 85

	Gate -> 'SQRT_SWAP' .                               (rule 51)

	')'            reduce using rule 51
	','            reduce using rule 51
	'->'           reduce using rule 51
	';'            reduce using rule 51
	']'            reduce using rule 51
	'else'         reduce using rule 51
	'of'           reduce using rule 51
	'then'         reduce using rule 51
	'}'            reduce using rule 51


State 86

	Gate -> 'SQRT_SWAP_DAG' .                           (rule 52)

	')'            reduce using rule 52
	','            reduce using rule 52
	'->'           reduce using rule 52
	';'            reduce using rule 52
	']'            reduce using rule 52
	'else'         reduce using rule 52
	'of'           reduce using rule 52
	'then'         reduce using rule 52
	'}'            reduce using rule 52


State 87

	Gate -> 'SQRT_X' .                                  (rule 40)

	')'            reduce using rule 40
	','            reduce using rule 40
	'->'           reduce using rule 40
	';'            reduce using rule 40
	']'            reduce using rule 40
	'else'         reduce using rule 40
	'of'           reduce using rule 40
	'then'         reduce using rule 40
	'}'            reduce using rule 40


State 88

	Gate -> 'SQRT_X_DAG' .                              (rule 41)

	')'            reduce using rule 41
	','            reduce using rule 41
	'->'           reduce using rule 41
	';'            reduce using rule 41
	']'            reduce using rule 41
	'else'         reduce using rule 41
	'of'           reduce using rule 41
	'then'         reduce using rule 41
	'}'            reduce using rule 41


State 89

	Gate -> 'SQRT_Y' .                                  (rule 42)

	')'            reduce using rule 42
	','            reduce using rule 42
	'->'           reduce using rule 42
	';'            reduce using rule 42
	']'            reduce using rule 42
	'else'         reduce using rule 42
	'of'           reduce using rule 42
	'then'         reduce using rule 42
	'}'            reduce using rule 42


State 90

	Gate -> 'SQRT_Y_DAG' .                              (rule 43)

	')'            reduce using rule 43
	','            reduce using rule 43
	'->'           reduce using rule 43
	';'            reduce using rule 43
	']'            reduce using rule 43
	'else'         reduce using rule 43
	'of'           reduce using rule 43
	'then'         reduce using rule 43
	'}'            reduce using rule 43


State 91

	Gate -> 'SWAP' .                                    (rule 50)

	')'            reduce using rule 50
	','            reduce using rule 50
	'->'           reduce using rule 50
	';'            reduce using rule 50
	']'            reduce using rule 50
	'else'         reduce using rule 50
	'of'           reduce using rule 50
	'then'         reduce using rule 50
	'}'            reduce using rule 50


State 92

	Gate -> 'SWAP_THETA' . Angle                        (rule 55)

	L_doubl        shift, and enter state 2

	Double         goto state 123
	Angle          goto state 125

State 93

	Gate -> 'S_DAG' .                                   (rule 37)

	')'            reduce using rule 37
	','            reduce using rule 37
	'->'           reduce using rule 37
	';'            reduce using rule 37
	']'            reduce using rule 37
	'else'         reduce using rule 37
	'of'           reduce using rule 37
	'then'         reduce using rule 37
	'}'            reduce using rule 37


State 94

	Gate -> 'T' .                                       (rule 38)

	')'            reduce using rule 38
	','            reduce using rule 38
	'->'           reduce using rule 38
	';'            reduce using rule 38
	']'            reduce using rule 38
	'else'         reduce using rule 38
	'of'           reduce using rule 38
	'then'         reduce using rule 38
	'}'            reduce using rule 38


State 95

	Gate -> 'T_DAG' .                                   (rule 39)

	')'            reduce using rule 39
	','            reduce using rule 39
	'->'           reduce using rule 39
	';'            reduce using rule 39
	']'            reduce using rule 39
	'else'         reduce using rule 39
	'of'           reduce using rule 39
	'then'         reduce using rule 39
	'}'            reduce using rule 39


State 96

	Gate -> 'U1' . Angle                                (rule 47)

	L_doubl        shift, and enter state 2

	Double         goto state 123
	Angle          goto state 124

State 97

	Gate -> 'U2' . '(' Angle ',' Angle ')'              (rule 48)

	'('            shift, and enter state 122


State 98

	Gate -> 'U3' . '(' Angle ',' Angle ',' Angle ')'    (rule 49)

	'('            shift, and enter state 121


State 99

	Gate -> 'X' .                                       (rule 26)

	')'            reduce using rule 26
	','            reduce using rule 26
	'->'           reduce using rule 26
	';'            reduce using rule 26
	']'            reduce using rule 26
	'else'         reduce using rule 26
	'of'           reduce using rule 26
	'then'         reduce using rule 26
	'}'            reduce using rule 26


State 100

	Gate -> 'Y' .                                       (rule 27)

	')'            reduce using rule 27
	','            reduce using rule 27
	'->'           reduce using rule 27
	';'            reduce using rule 27
	']'            reduce using rule 27
	'else'         reduce using rule 27
	'of'           reduce using rule 27
	'then'         reduce using rule 27
	'}'            reduce using rule 27


State 101

	Gate -> 'Z' .                                       (rule 28)

	')'            reduce using rule 28
	','            reduce using rule 28
	'->'           reduce using rule 28
	';'            reduce using rule 28
	']'            reduce using rule 28
	'else'         reduce using rule 28
	'of'           reduce using rule 28
	'then'         reduce using rule 28
	'}'            reduce using rule 28


State 102

	GateIdent -> L_GateIdent .                          (rule 3)

	')'            reduce using rule 3
	','            reduce using rule 3
	'->'           reduce using rule 3
	';'            reduce using rule 3
	']'            reduce using rule 3
	'else'         reduce using rule 3
	'of'           reduce using rule 3
	'then'         reduce using rule 3
	'}'            reduce using rule 3


State 103

	Term1 -> 'case' Term . 'of' CaseExpression ListCaseExpression    (rule 78)

	'of'           shift, and enter state 120


State 104

	Tuple -> '(' Term . ',' ListTerm ')'                (rule 63)
	Term3 -> '(' Term . ')'                             (rule 74)

	')'            shift, and enter state 118
	','            shift, and enter state 119


State 105

	Term3 -> Var .                                      (rule 71)

	'$'            reduce using rule 71
	'('            reduce using rule 71
	'()'           reduce using rule 71
	')'            reduce using rule 71
	','            reduce using rule 71
	'->'           reduce using rule 71
	'.'            reduce using rule 71
	';'            reduce using rule 71
	']'            reduce using rule 71
	'else'         reduce using rule 71
	'new'          reduce using rule 71
	'of'           reduce using rule 71
	'then'         reduce using rule 71
	'}'            reduce using rule 71
	L_Var          reduce using rule 71


State 106

	Term2 -> Term2 Term3 .                              (rule 84)

	'$'            reduce using rule 84
	'('            reduce using rule 84
	'()'           reduce using rule 84
	')'            reduce using rule 84
	','            reduce using rule 84
	'->'           reduce using rule 84
	'.'            reduce using rule 84
	';'            reduce using rule 84
	']'            reduce using rule 84
	'else'         reduce using rule 84
	'new'          reduce using rule 84
	'of'           reduce using rule 84
	'then'         reduce using rule 84
	'}'            reduce using rule 84
	L_Var          reduce using rule 84


State 107

	Term1 -> Term2 '$' . Term1                          (rule 82)

	'('            shift, and enter state 47
	'()'           shift, and enter state 48
	'case'         shift, and enter state 49
	'gate'         shift, and enter state 50
	'if'           shift, and enter state 51
	'let'          shift, and enter state 52
	'new'          shift, and enter state 53
	'with'         shift, and enter state 54
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 55

	Var            goto state 39
	Lambda         goto state 40
	LetVariable    goto state 41
	Tuple          goto state 42
	Term3          goto state 43
	Term1          goto state 117
	Term2          goto state 45

State 108

	Term2 -> Term2 '.' . Term3                          (rule 85)

	'('            shift, and enter state 47
	'()'           shift, and enter state 48
	'new'          shift, and enter state 53
	L_Var          shift, and enter state 8

	Var            goto state 105
	Tuple          goto state 42
	Term3          goto state 116

State 109

	Term1 -> LetVariable ',' . ListLetVariable '<-' Term ';' Term    (rule 77)

	'<-'           reduce using rule 60
	L_Var          shift, and enter state 8

	Var            goto state 113
	LetVariable    goto state 114
	ListLetVariablegoto state 115

State 110

	Term1 -> Lambda FunctionType . '.' Term             (rule 79)
	FunctionType -> FunctionType . ';'                  (rule 97)

	'.'            shift, and enter state 111
	';'            shift, and enter state 112


State 111

	Term1 -> Lambda FunctionType '.' . Term             (rule 79)

	'('            shift, and enter state 47
	'()'           shift, and enter state 48
	'case'         shift, and enter state 49
	'gate'         shift, and enter state 50
	'if'           shift, and enter state 51
	'let'          shift, and enter state 52
	'new'          shift, and enter state 53
	'with'         shift, and enter state 54
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 55

	Var            goto state 39
	Lambda         goto state 40
	LetVariable    goto state 41
	Tuple          goto state 42
	Term3          goto state 43
	Term1          goto state 44
	Term2          goto state 45
	Term           goto state 154

State 112

	FunctionType -> FunctionType ';' .                  (rule 97)

	'.'            reduce using rule 97
	';'            reduce using rule 97


State 113

	LetVariable -> Var .                                (rule 59)

	')'            reduce using rule 59
	','            reduce using rule 59
	'<-'           reduce using rule 59


State 114

	ListLetVariable -> LetVariable .                    (rule 61)
	ListLetVariable -> LetVariable . ',' ListLetVariable    (rule 62)

	')'            reduce using rule 61
	','            shift, and enter state 153
	'<-'           reduce using rule 61


State 115

	Term1 -> LetVariable ',' ListLetVariable . '<-' Term ';' Term    (rule 77)

	'<-'           shift, and enter state 152


State 116

	Term2 -> Term2 '.' Term3 .                          (rule 85)

	'$'            reduce using rule 85
	'('            reduce using rule 85
	'()'           reduce using rule 85
	')'            reduce using rule 85
	','            reduce using rule 85
	'->'           reduce using rule 85
	'.'            reduce using rule 85
	';'            reduce using rule 85
	']'            reduce using rule 85
	'else'         reduce using rule 85
	'new'          reduce using rule 85
	'of'           reduce using rule 85
	'then'         reduce using rule 85
	'}'            reduce using rule 85
	L_Var          reduce using rule 85


State 117

	Term1 -> Term2 '$' Term1 .                          (rule 82)

	')'            reduce using rule 82
	','            reduce using rule 82
	'->'           reduce using rule 82
	';'            reduce using rule 82
	']'            reduce using rule 82
	'else'         reduce using rule 82
	'of'           reduce using rule 82
	'then'         reduce using rule 82
	'}'            reduce using rule 82


State 118

	Term3 -> '(' Term ')' .                             (rule 74)

	'$'            reduce using rule 74
	'('            reduce using rule 74
	'()'           reduce using rule 74
	')'            reduce using rule 74
	','            reduce using rule 74
	'->'           reduce using rule 74
	'.'            reduce using rule 74
	';'            reduce using rule 74
	']'            reduce using rule 74
	'else'         reduce using rule 74
	'new'          reduce using rule 74
	'of'           reduce using rule 74
	'then'         reduce using rule 74
	'}'            reduce using rule 74
	L_Var          reduce using rule 74


State 119

	Tuple -> '(' Term ',' . ListTerm ')'                (rule 63)

	'('            shift, and enter state 47
	'()'           shift, and enter state 48
	'case'         shift, and enter state 49
	'gate'         shift, and enter state 50
	'if'           shift, and enter state 51
	'let'          shift, and enter state 52
	'new'          shift, and enter state 53
	'with'         shift, and enter state 54
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 55

	Var            goto state 39
	Lambda         goto state 40
	LetVariable    goto state 41
	Tuple          goto state 42
	ListTerm       goto state 150
	Term3          goto state 43
	Term1          goto state 44
	Term2          goto state 45
	Term           goto state 151

State 120

	Term1 -> 'case' Term 'of' . CaseExpression ListCaseExpression    (rule 78)

	'('            shift, and enter state 47
	'()'           shift, and enter state 48
	'case'         shift, and enter state 49
	'gate'         shift, and enter state 50
	'if'           shift, and enter state 51
	'let'          shift, and enter state 52
	'new'          shift, and enter state 53
	'with'         shift, and enter state 54
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 55

	Var            goto state 39
	Lambda         goto state 40
	LetVariable    goto state 41
	Tuple          goto state 42
	Term3          goto state 43
	Term1          goto state 44
	Term2          goto state 45
	Term           goto state 148
	CaseExpression goto state 149

State 121

	Gate -> 'U3' '(' . Angle ',' Angle ',' Angle ')'    (rule 49)

	L_doubl        shift, and enter state 2

	Double         goto state 123
	Angle          goto state 147

State 122

	Gate -> 'U2' '(' . Angle ',' Angle ')'              (rule 48)

	L_doubl        shift, and enter state 2

	Double         goto state 123
	Angle          goto state 146

State 123

	Angle -> Double .                                   (rule 18)

	')'            reduce using rule 18
	','            reduce using rule 18
	'->'           reduce using rule 18
	';'            reduce using rule 18
	']'            reduce using rule 18
	'else'         reduce using rule 18
	'of'           reduce using rule 18
	'then'         reduce using rule 18
	'}'            reduce using rule 18


State 124

	Gate -> 'U1' Angle .                                (rule 47)

	')'            reduce using rule 47
	','            reduce using rule 47
	'->'           reduce using rule 47
	';'            reduce using rule 47
	']'            reduce using rule 47
	'else'         reduce using rule 47
	'of'           reduce using rule 47
	'then'         reduce using rule 47
	'}'            reduce using rule 47


State 125

	Gate -> 'SWAP_THETA' Angle .                        (rule 55)

	')'            reduce using rule 55
	','            reduce using rule 55
	'->'           reduce using rule 55
	';'            reduce using rule 55
	']'            reduce using rule 55
	'else'         reduce using rule 55
	'of'           reduce using rule 55
	'then'         reduce using rule 55
	'}'            reduce using rule 55


State 126

	Gate -> 'RZ' Angle .                                (rule 46)

	')'            reduce using rule 46
	','            reduce using rule 46
	'->'           reduce using rule 46
	';'            reduce using rule 46
	']'            reduce using rule 46
	'else'         reduce using rule 46
	'of'           reduce using rule 46
	'then'         reduce using rule 46
	'}'            reduce using rule 46


State 127

	Gate -> 'RY' Angle .                                (rule 45)

	')'            reduce using rule 45
	','            reduce using rule 45
	'->'           reduce using rule 45
	';'            reduce using rule 45
	']'            reduce using rule 45
	'else'         reduce using rule 45
	'of'           reduce using rule 45
	'then'         reduce using rule 45
	'}'            reduce using rule 45


State 128

	Gate -> 'RX' Angle .                                (rule 44)

	')'            reduce using rule 44
	','            reduce using rule 44
	'->'           reduce using rule 44
	';'            reduce using rule 44
	']'            reduce using rule 44
	'else'         reduce using rule 44
	'of'           reduce using rule 44
	'then'         reduce using rule 44
	'}'            reduce using rule 44


State 129

	Gate -> 'ROOT_Z_DAG' Integer .                      (rule 35)

	')'            reduce using rule 35
	','            reduce using rule 35
	'->'           reduce using rule 35
	';'            reduce using rule 35
	']'            reduce using rule 35
	'else'         reduce using rule 35
	'of'           reduce using rule 35
	'then'         reduce using rule 35
	'}'            reduce using rule 35


State 130

	Gate -> 'ROOT_Z' Integer .                          (rule 34)

	')'            reduce using rule 34
	','            reduce using rule 34
	'->'           reduce using rule 34
	';'            reduce using rule 34
	']'            reduce using rule 34
	'else'         reduce using rule 34
	'of'           reduce using rule 34
	'then'         reduce using rule 34
	'}'            reduce using rule 34


State 131

	Gate -> 'ROOT_Y_DAG' Integer .                      (rule 33)

	')'            reduce using rule 33
	','            reduce using rule 33
	'->'           reduce using rule 33
	';'            reduce using rule 33
	']'            reduce using rule 33
	'else'         reduce using rule 33
	'of'           reduce using rule 33
	'then'         reduce using rule 33
	'}'            reduce using rule 33


State 132

	Gate -> 'ROOT_Y' Integer .                          (rule 32)

	')'            reduce using rule 32
	','            reduce using rule 32
	'->'           reduce using rule 32
	';'            reduce using rule 32
	']'            reduce using rule 32
	'else'         reduce using rule 32
	'of'           reduce using rule 32
	'then'         reduce using rule 32
	'}'            reduce using rule 32


State 133

	Gate -> 'ROOT_X_DAG' Integer .                      (rule 31)

	')'            reduce using rule 31
	','            reduce using rule 31
	'->'           reduce using rule 31
	';'            reduce using rule 31
	']'            reduce using rule 31
	'else'         reduce using rule 31
	'of'           reduce using rule 31
	'then'         reduce using rule 31
	'}'            reduce using rule 31


State 134

	Gate -> 'ROOT_X' Integer .                          (rule 30)

	')'            reduce using rule 30
	','            reduce using rule 30
	'->'           reduce using rule 30
	';'            reduce using rule 30
	']'            reduce using rule 30
	'else'         reduce using rule 30
	'of'           reduce using rule 30
	'then'         reduce using rule 30
	'}'            reduce using rule 30


State 135

	Gate -> 'ROOT_SWAP_DAG' Integer .                   (rule 57)

	')'            reduce using rule 57
	','            reduce using rule 57
	'->'           reduce using rule 57
	';'            reduce using rule 57
	']'            reduce using rule 57
	'else'         reduce using rule 57
	'of'           reduce using rule 57
	'then'         reduce using rule 57
	'}'            reduce using rule 57


State 136

	Gate -> 'ROOT_SWAP' Integer .                       (rule 56)

	')'            reduce using rule 56
	','            reduce using rule 56
	'->'           reduce using rule 56
	';'            reduce using rule 56
	']'            reduce using rule 56
	'else'         reduce using rule 56
	'of'           reduce using rule 56
	'then'         reduce using rule 56
	'}'            reduce using rule 56


State 137

	Term1 -> 'if' Term 'then' . Term 'else' Term        (rule 75)

	'('            shift, and enter state 47
	'()'           shift, and enter state 48
	'case'         shift, and enter state 49
	'gate'         shift, and enter state 50
	'if'           shift, and enter state 51
	'let'          shift, and enter state 52
	'new'          shift, and enter state 53
	'with'         shift, and enter state 54
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 55

	Var            goto state 39
	Lambda         goto state 40
	LetVariable    goto state 41
	Tuple          goto state 42
	Term3          goto state 43
	Term1          goto state 44
	Term2          goto state 45
	Term           goto state 145

State 138

	Term1 -> 'let' '{' '(' . LetVariable ',' ListLetVariable ')' '=' Term '}' 'in' Term    (rule 76)

	L_Var          shift, and enter state 8

	Var            goto state 113
	LetVariable    goto state 144

State 139

	Controls -> '[' Term . ',' ListTerm ']'             (rule 64)

	','            shift, and enter state 143


State 140

	Term1 -> 'with' Controls 'ctrl' . ControlBasisStates 'gate' Gate    (rule 81)

	'['            shift, and enter state 142

	ControlBasisStatesgoto state 141

State 141

	Term1 -> 'with' Controls 'ctrl' ControlBasisStates . 'gate' Gate    (rule 81)

	'gate'         shift, and enter state 168


State 142

	ControlBasisStates -> '[' . BasisState ',' ListBasisState ']'    (rule 67)

	'@+'           shift, and enter state 59
	'@+i'          shift, and enter state 60
	'@-'           shift, and enter state 61
	'@-i'          shift, and enter state 62
	'@0'           shift, and enter state 63
	'@1'           shift, and enter state 64

	BasisState     goto state 167

State 143

	Controls -> '[' Term ',' . ListTerm ']'             (rule 64)

	'('            shift, and enter state 47
	'()'           shift, and enter state 48
	'case'         shift, and enter state 49
	'gate'         shift, and enter state 50
	'if'           shift, and enter state 51
	'let'          shift, and enter state 52
	'new'          shift, and enter state 53
	'with'         shift, and enter state 54
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 55

	Var            goto state 39
	Lambda         goto state 40
	LetVariable    goto state 41
	Tuple          goto state 42
	ListTerm       goto state 166
	Term3          goto state 43
	Term1          goto state 44
	Term2          goto state 45
	Term           goto state 151

State 144

	Term1 -> 'let' '{' '(' LetVariable . ',' ListLetVariable ')' '=' Term '}' 'in' Term    (rule 76)

	','            shift, and enter state 165


State 145

	Term1 -> 'if' Term 'then' Term . 'else' Term        (rule 75)

	'else'         shift, and enter state 164


State 146

	Gate -> 'U2' '(' Angle . ',' Angle ')'              (rule 48)

	','            shift, and enter state 163


State 147

	Gate -> 'U3' '(' Angle . ',' Angle ',' Angle ')'    (rule 49)

	','            shift, and enter state 162


State 148

	CaseExpression -> Term . '->' Var                   (rule 88)

	'->'           shift, and enter state 161


State 149

	Term1 -> 'case' Term 'of' CaseExpression . ListCaseExpression    (rule 78)

	'('            shift, and enter state 47
	'()'           shift, and enter state 48
	'case'         shift, and enter state 49
	'gate'         shift, and enter state 50
	'if'           shift, and enter state 51
	'let'          shift, and enter state 52
	'new'          shift, and enter state 53
	'with'         shift, and enter state 54
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 55

	Var            goto state 39
	Lambda         goto state 40
	LetVariable    goto state 41
	Tuple          goto state 42
	Term3          goto state 43
	Term1          goto state 44
	Term2          goto state 45
	Term           goto state 148
	CaseExpression goto state 159
	ListCaseExpressiongoto state 160

State 150

	Tuple -> '(' Term ',' ListTerm . ')'                (rule 63)

	')'            shift, and enter state 158


State 151

	ListTerm -> Term .                                  (rule 65)
	ListTerm -> Term . ',' ListTerm                     (rule 66)

	')'            reduce using rule 65
	','            shift, and enter state 157
	']'            reduce using rule 65


State 152

	Term1 -> LetVariable ',' ListLetVariable '<-' . Term ';' Term    (rule 77)

	'('            shift, and enter state 47
	'()'           shift, and enter state 48
	'case'         shift, and enter state 49
	'gate'         shift, and enter state 50
	'if'           shift, and enter state 51
	'let'          shift, and enter state 52
	'new'          shift, and enter state 53
	'with'         shift, and enter state 54
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 55

	Var            goto state 39
	Lambda         goto state 40
	LetVariable    goto state 41
	Tuple          goto state 42
	Term3          goto state 43
	Term1          goto state 44
	Term2          goto state 45
	Term           goto state 156

State 153

	ListLetVariable -> LetVariable ',' . ListLetVariable    (rule 62)

	')'            reduce using rule 60
	'<-'           reduce using rule 60
	L_Var          shift, and enter state 8

	Var            goto state 113
	LetVariable    goto state 114
	ListLetVariablegoto state 155

State 154

	Term1 -> Lambda FunctionType '.' Term .             (rule 79)

	')'            reduce using rule 79
	','            reduce using rule 79
	'->'           reduce using rule 79
	';'            reduce using rule 79
	']'            reduce using rule 79
	'else'         reduce using rule 79
	'of'           reduce using rule 79
	'then'         reduce using rule 79
	'}'            reduce using rule 79


State 155

	ListLetVariable -> LetVariable ',' ListLetVariable .    (rule 62)

	')'            reduce using rule 62
	'<-'           reduce using rule 62


State 156

	Term1 -> LetVariable ',' ListLetVariable '<-' Term . ';' Term    (rule 77)

	';'            shift, and enter state 179


State 157

	ListTerm -> Term ',' . ListTerm                     (rule 66)

	'('            shift, and enter state 47
	'()'           shift, and enter state 48
	'case'         shift, and enter state 49
	'gate'         shift, and enter state 50
	'if'           shift, and enter state 51
	'let'          shift, and enter state 52
	'new'          shift, and enter state 53
	'with'         shift, and enter state 54
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 55

	Var            goto state 39
	Lambda         goto state 40
	LetVariable    goto state 41
	Tuple          goto state 42
	ListTerm       goto state 178
	Term3          goto state 43
	Term1          goto state 44
	Term2          goto state 45
	Term           goto state 151

State 158

	Tuple -> '(' Term ',' ListTerm ')' .                (rule 63)

	'$'            reduce using rule 63
	'('            reduce using rule 63
	'()'           reduce using rule 63
	')'            reduce using rule 63
	','            reduce using rule 63
	'->'           reduce using rule 63
	'.'            reduce using rule 63
	';'            reduce using rule 63
	']'            reduce using rule 63
	'else'         reduce using rule 63
	'new'          reduce using rule 63
	'of'           reduce using rule 63
	'then'         reduce using rule 63
	'}'            reduce using rule 63
	L_Var          reduce using rule 63


State 159

	ListCaseExpression -> CaseExpression .              (rule 89)
	ListCaseExpression -> CaseExpression . ListCaseExpression    (rule 90)

	'('            shift, and enter state 47
	'()'           shift, and enter state 48
	')'            reduce using rule 89
	','            reduce using rule 89
	'->'           reduce using rule 89
	';'            reduce using rule 89
	']'            reduce using rule 89
	'case'         shift, and enter state 49
	'else'         reduce using rule 89
	'gate'         shift, and enter state 50
	'if'           shift, and enter state 51
	'let'          shift, and enter state 52
	'new'          shift, and enter state 53
	'of'           reduce using rule 89
	'then'         reduce using rule 89
	'with'         shift, and enter state 54
	'}'            reduce using rule 89
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 55

	Var            goto state 39
	Lambda         goto state 40
	LetVariable    goto state 41
	Tuple          goto state 42
	Term3          goto state 43
	Term1          goto state 44
	Term2          goto state 45
	Term           goto state 148
	CaseExpression goto state 159
	ListCaseExpressiongoto state 177

State 160

	Term1 -> 'case' Term 'of' CaseExpression ListCaseExpression .    (rule 78)

	')'            reduce using rule 78
	','            reduce using rule 78
	'->'           reduce using rule 78
	';'            reduce using rule 78
	']'            reduce using rule 78
	'else'         reduce using rule 78
	'of'           reduce using rule 78
	'then'         reduce using rule 78
	'}'            reduce using rule 78


State 161

	CaseExpression -> Term '->' . Var                   (rule 88)

	L_Var          shift, and enter state 8

	Var            goto state 176

State 162

	Gate -> 'U3' '(' Angle ',' . Angle ',' Angle ')'    (rule 49)

	L_doubl        shift, and enter state 2

	Double         goto state 123
	Angle          goto state 175

State 163

	Gate -> 'U2' '(' Angle ',' . Angle ')'              (rule 48)

	L_doubl        shift, and enter state 2

	Double         goto state 123
	Angle          goto state 174

State 164

	Term1 -> 'if' Term 'then' Term 'else' . Term        (rule 75)

	'('            shift, and enter state 47
	'()'           shift, and enter state 48
	'case'         shift, and enter state 49
	'gate'         shift, and enter state 50
	'if'           shift, and enter state 51
	'let'          shift, and enter state 52
	'new'          shift, and enter state 53
	'with'         shift, and enter state 54
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 55

	Var            goto state 39
	Lambda         goto state 40
	LetVariable    goto state 41
	Tuple          goto state 42
	Term3          goto state 43
	Term1          goto state 44
	Term2          goto state 45
	Term           goto state 173

State 165

	Term1 -> 'let' '{' '(' LetVariable ',' . ListLetVariable ')' '=' Term '}' 'in' Term    (rule 76)

	')'            reduce using rule 60
	L_Var          shift, and enter state 8

	Var            goto state 113
	LetVariable    goto state 114
	ListLetVariablegoto state 172

State 166

	Controls -> '[' Term ',' ListTerm . ']'             (rule 64)

	']'            shift, and enter state 171


State 167

	ControlBasisStates -> '[' BasisState . ',' ListBasisState ']'    (rule 67)

	','            shift, and enter state 170


State 168

	Term1 -> 'with' Controls 'ctrl' ControlBasisStates 'gate' . Gate    (rule 81)

	'FSWAP'        shift, and enter state 69
	'H'            shift, and enter state 70
	'ID'           shift, and enter state 71
	'ISWAP'        shift, and enter state 72
	'ROOT_SWAP'    shift, and enter state 73
	'ROOT_SWAP_DAG'shift, and enter state 74
	'ROOT_X'       shift, and enter state 75
	'ROOT_X_DAG'   shift, and enter state 76
	'ROOT_Y'       shift, and enter state 77
	'ROOT_Y_DAG'   shift, and enter state 78
	'ROOT_Z'       shift, and enter state 79
	'ROOT_Z_DAG'   shift, and enter state 80
	'RX'           shift, and enter state 81
	'RY'           shift, and enter state 82
	'RZ'           shift, and enter state 83
	'S'            shift, and enter state 84
	'SQRT_SWAP'    shift, and enter state 85
	'SQRT_SWAP_DAG'shift, and enter state 86
	'SQRT_X'       shift, and enter state 87
	'SQRT_X_DAG'   shift, and enter state 88
	'SQRT_Y'       shift, and enter state 89
	'SQRT_Y_DAG'   shift, and enter state 90
	'SWAP'         shift, and enter state 91
	'SWAP_THETA'   shift, and enter state 92
	'S_DAG'        shift, and enter state 93
	'T'            shift, and enter state 94
	'T_DAG'        shift, and enter state 95
	'U1'           shift, and enter state 96
	'U2'           shift, and enter state 97
	'U3'           shift, and enter state 98
	'X'            shift, and enter state 99
	'Y'            shift, and enter state 100
	'Z'            shift, and enter state 101
	L_GateIdent    shift, and enter state 102

	GateIdent      goto state 67
	Gate           goto state 169

State 169

	Term1 -> 'with' Controls 'ctrl' ControlBasisStates 'gate' Gate .    (rule 81)

	')'            reduce using rule 81
	','            reduce using rule 81
	'->'           reduce using rule 81
	';'            reduce using rule 81
	']'            reduce using rule 81
	'else'         reduce using rule 81
	'of'           reduce using rule 81
	'then'         reduce using rule 81
	'}'            reduce using rule 81


State 170

	ControlBasisStates -> '[' BasisState ',' . ListBasisState ']'    (rule 67)

	'@+'           shift, and enter state 59
	'@+i'          shift, and enter state 60
	'@-'           shift, and enter state 61
	'@-i'          shift, and enter state 62
	'@0'           shift, and enter state 63
	'@1'           shift, and enter state 64

	BasisState     goto state 184
	ListBasisState goto state 185

State 171

	Controls -> '[' Term ',' ListTerm ']' .             (rule 64)

	'ctrl'         reduce using rule 64


State 172

	Term1 -> 'let' '{' '(' LetVariable ',' ListLetVariable . ')' '=' Term '}' 'in' Term    (rule 76)

	')'            shift, and enter state 183


State 173

	Term1 -> 'if' Term 'then' Term 'else' Term .        (rule 75)

	')'            reduce using rule 75
	','            reduce using rule 75
	'->'           reduce using rule 75
	';'            reduce using rule 75
	']'            reduce using rule 75
	'else'         reduce using rule 75
	'of'           reduce using rule 75
	'then'         reduce using rule 75
	'}'            reduce using rule 75


State 174

	Gate -> 'U2' '(' Angle ',' Angle . ')'              (rule 48)

	')'            shift, and enter state 182


State 175

	Gate -> 'U3' '(' Angle ',' Angle . ',' Angle ')'    (rule 49)

	','            shift, and enter state 181


State 176

	CaseExpression -> Term '->' Var .                   (rule 88)

	'('            reduce using rule 88
	'()'           reduce using rule 88
	')'            reduce using rule 88
	','            reduce using rule 88
	'->'           reduce using rule 88
	';'            reduce using rule 88
	']'            reduce using rule 88
	'case'         reduce using rule 88
	'else'         reduce using rule 88
	'gate'         reduce using rule 88
	'if'           reduce using rule 88
	'let'          reduce using rule 88
	'new'          reduce using rule 88
	'of'           reduce using rule 88
	'then'         reduce using rule 88
	'with'         reduce using rule 88
	'}'            reduce using rule 88
	L_Var          reduce using rule 88
	L_Lambda       reduce using rule 88


State 177

	ListCaseExpression -> CaseExpression ListCaseExpression .    (rule 90)

	')'            reduce using rule 90
	','            reduce using rule 90
	'->'           reduce using rule 90
	';'            reduce using rule 90
	']'            reduce using rule 90
	'else'         reduce using rule 90
	'of'           reduce using rule 90
	'then'         reduce using rule 90
	'}'            reduce using rule 90


State 178

	ListTerm -> Term ',' ListTerm .                     (rule 66)

	')'            reduce using rule 66
	']'            reduce using rule 66


State 179

	Term1 -> LetVariable ',' ListLetVariable '<-' Term ';' . Term    (rule 77)

	'('            shift, and enter state 47
	'()'           shift, and enter state 48
	'case'         shift, and enter state 49
	'gate'         shift, and enter state 50
	'if'           shift, and enter state 51
	'let'          shift, and enter state 52
	'new'          shift, and enter state 53
	'with'         shift, and enter state 54
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 55

	Var            goto state 39
	Lambda         goto state 40
	LetVariable    goto state 41
	Tuple          goto state 42
	Term3          goto state 43
	Term1          goto state 44
	Term2          goto state 45
	Term           goto state 180

State 180

	Term1 -> LetVariable ',' ListLetVariable '<-' Term ';' Term .    (rule 77)

	')'            reduce using rule 77
	','            reduce using rule 77
	'->'           reduce using rule 77
	';'            reduce using rule 77
	']'            reduce using rule 77
	'else'         reduce using rule 77
	'of'           reduce using rule 77
	'then'         reduce using rule 77
	'}'            reduce using rule 77


State 181

	Gate -> 'U3' '(' Angle ',' Angle ',' . Angle ')'    (rule 49)

	L_doubl        shift, and enter state 2

	Double         goto state 123
	Angle          goto state 189

State 182

	Gate -> 'U2' '(' Angle ',' Angle ')' .              (rule 48)

	')'            reduce using rule 48
	','            reduce using rule 48
	'->'           reduce using rule 48
	';'            reduce using rule 48
	']'            reduce using rule 48
	'else'         reduce using rule 48
	'of'           reduce using rule 48
	'then'         reduce using rule 48
	'}'            reduce using rule 48


State 183

	Term1 -> 'let' '{' '(' LetVariable ',' ListLetVariable ')' . '=' Term '}' 'in' Term    (rule 76)

	'='            shift, and enter state 188


State 184

	ListBasisState -> BasisState .                      (rule 68)
	ListBasisState -> BasisState . ',' ListBasisState    (rule 69)

	','            shift, and enter state 187
	']'            reduce using rule 68


State 185

	ControlBasisStates -> '[' BasisState ',' ListBasisState . ']'    (rule 67)

	']'            shift, and enter state 186


State 186

	ControlBasisStates -> '[' BasisState ',' ListBasisState ']' .    (rule 67)

	'gate'         reduce using rule 67


State 187

	ListBasisState -> BasisState ',' . ListBasisState    (rule 69)

	'@+'           shift, and enter state 59
	'@+i'          shift, and enter state 60
	'@-'           shift, and enter state 61
	'@-i'          shift, and enter state 62
	'@0'           shift, and enter state 63
	'@1'           shift, and enter state 64

	BasisState     goto state 184
	ListBasisState goto state 192

State 188

	Term1 -> 'let' '{' '(' LetVariable ',' ListLetVariable ')' '=' . Term '}' 'in' Term    (rule 76)

	'('            shift, and enter state 47
	'()'           shift, and enter state 48
	'case'         shift, and enter state 49
	'gate'         shift, and enter state 50
	'if'           shift, and enter state 51
	'let'          shift, and enter state 52
	'new'          shift, and enter state 53
	'with'         shift, and enter state 54
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 55

	Var            goto state 39
	Lambda         goto state 40
	LetVariable    goto state 41
	Tuple          goto state 42
	Term3          goto state 43
	Term1          goto state 44
	Term2          goto state 45
	Term           goto state 191

State 189

	Gate -> 'U3' '(' Angle ',' Angle ',' Angle . ')'    (rule 49)

	')'            shift, and enter state 190


State 190

	Gate -> 'U3' '(' Angle ',' Angle ',' Angle ')' .    (rule 49)

	')'            reduce using rule 49
	','            reduce using rule 49
	'->'           reduce using rule 49
	';'            reduce using rule 49
	']'            reduce using rule 49
	'else'         reduce using rule 49
	'of'           reduce using rule 49
	'then'         reduce using rule 49
	'}'            reduce using rule 49


State 191

	Term1 -> 'let' '{' '(' LetVariable ',' ListLetVariable ')' '=' Term . '}' 'in' Term    (rule 76)

	'}'            shift, and enter state 193


State 192

	ListBasisState -> BasisState ',' ListBasisState .    (rule 69)

	']'            reduce using rule 69


State 193

	Term1 -> 'let' '{' '(' LetVariable ',' ListLetVariable ')' '=' Term '}' . 'in' Term    (rule 76)

	'in'           shift, and enter state 194


State 194

	Term1 -> 'let' '{' '(' LetVariable ',' ListLetVariable ')' '=' Term '}' 'in' . Term    (rule 76)

	'('            shift, and enter state 47
	'()'           shift, and enter state 48
	'case'         shift, and enter state 49
	'gate'         shift, and enter state 50
	'if'           shift, and enter state 51
	'let'          shift, and enter state 52
	'new'          shift, and enter state 53
	'with'         shift, and enter state 54
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 55

	Var            goto state 39
	Lambda         goto state 40
	LetVariable    goto state 41
	Tuple          goto state 42
	Term3          goto state 43
	Term1          goto state 44
	Term2          goto state 45
	Term           goto state 195

State 195

	Term1 -> 'let' '{' '(' LetVariable ',' ListLetVariable ')' '=' Term '}' 'in' Term .    (rule 76)

	')'            reduce using rule 76
	','            reduce using rule 76
	'->'           reduce using rule 76
	';'            reduce using rule 76
	']'            reduce using rule 76
	'else'         reduce using rule 76
	'of'           reduce using rule 76
	'then'         reduce using rule 76
	'}'            reduce using rule 76


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 101
Number of terminals: 75
Number of non-terminals: 33
Number of states: 196
