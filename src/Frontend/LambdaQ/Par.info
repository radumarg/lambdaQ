-----------------------------------------------------------------------------
Info file generated by Happy Version 1.20.0 from Frontend/LambdaQ/Par.y
-----------------------------------------------------------------------------


-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_pProgram -> Program                         (0)
	Double -> L_doubl                                  (1)
	Integer -> L_integ                                 (2)
	Bit -> L_Bit                                       (3)
	GateIdent -> L_GateIdent                           (4)
	Var -> L_Var                                       (5)
	Lambda -> L_Lambda                                 (6)
	Program -> ListFunctionDeclaration                 (7)
	Type3 -> 'Bit'                                     (8)
	Type3 -> 'Qbit'                                    (9)
	Type3 -> '()'                                      (10)
	Type3 -> '(' Type ')'                              (11)
	Type2 -> '!' Type3                                 (12)
	Type2 -> Type3                                     (13)
	Type1 -> Type2 '**' Integer                        (14)
	Type1 -> Type2 '*' Type1                           (15)
	Type1 -> Type2                                     (16)
	Type -> Type1 '->' Type                            (17)
	Type -> Type1                                      (18)
	Angle -> Double                                    (19)
	ControlState -> '@0'                               (20)
	ControlState -> '@1'                               (21)
	ControlState -> '@+'                               (22)
	ControlState -> '@-'                               (23)
	ControlState -> '@+i'                              (24)
	ControlState -> '@-i'                              (25)
	Gate -> 'H'                                        (26)
	Gate -> 'X'                                        (27)
	Gate -> 'Y'                                        (28)
	Gate -> 'Z'                                        (29)
	Gate -> 'ID'                                       (30)
	Gate -> 'ROOT_X' Integer                           (31)
	Gate -> 'ROOT_X_DAG' Integer                       (32)
	Gate -> 'ROOT_Y' Integer                           (33)
	Gate -> 'ROOT_Y_DAG' Integer                       (34)
	Gate -> 'ROOT_Z' Integer                           (35)
	Gate -> 'ROOT_Z_DAG' Integer                       (36)
	Gate -> 'S'                                        (37)
	Gate -> 'S_DAG'                                    (38)
	Gate -> 'T'                                        (39)
	Gate -> 'T_DAG'                                    (40)
	Gate -> 'SQRT_X'                                   (41)
	Gate -> 'SQRT_X_DAG'                               (42)
	Gate -> 'SQRT_Y'                                   (43)
	Gate -> 'SQRT_Y_DAG'                               (44)
	Gate -> 'RX' Angle                                 (45)
	Gate -> 'RY' Angle                                 (46)
	Gate -> 'RZ' Angle                                 (47)
	Gate -> 'U1' Angle                                 (48)
	Gate -> 'U2' '(' Angle ',' Angle ')'               (49)
	Gate -> 'U3' '(' Angle ',' Angle ',' Angle ')'     (50)
	Gate -> 'SWAP'                                     (51)
	Gate -> 'SQRT_SWAP'                                (52)
	Gate -> 'SQRT_SWAP_DAG'                            (53)
	Gate -> 'ISWAP'                                    (54)
	Gate -> 'FSWAP'                                    (55)
	Gate -> 'SWAP_THETA' Angle                         (56)
	Gate -> 'ROOT_SWAP' Integer                        (57)
	Gate -> 'ROOT_SWAP_DAG' Integer                    (58)
	Gate -> GateIdent                                  (59)
	LetVariable -> Var                                 (60)
	ListLetVariable ->                                 (61)
	ListLetVariable -> LetVariable                     (62)
	ListLetVariable -> LetVariable ',' ListLetVariable   (63)
	Tuple -> '(' Term ',' ListTerm ')'                 (64)
	Controls -> '[' Term ',' ListTerm ']'              (65)
	ListTerm -> Term                                   (66)
	ListTerm -> Term ',' ListTerm                      (67)
	ControlStates -> '[' ControlState ',' ListControlState ']'   (68)
	ListControlState -> ControlState                   (69)
	ListControlState -> ControlState ',' ListControlState   (70)
	Term3 -> Var                                       (71)
	Term3 -> Bit                                       (72)
	Term3 -> Tuple                                     (73)
	Term3 -> '()'                                      (74)
	Term3 -> '(' Term ')'                              (75)
	Term1 -> 'if' Term 'then' Term 'else' Term         (76)
	Term1 -> 'let' '{' '(' LetVariable ',' ListLetVariable ')' '=' Term '}' 'in' Term   (77)
	Term1 -> 'case' Term 'of' CaseExpression ListCaseExpression   (78)
	Term1 -> Lambda FunctionType '.' Term              (79)
	Term1 -> 'gate' Gate                               (80)
	Term1 -> 'with' Controls 'ctrl' ControlStates      (81)
	Term1 -> Term2 '$' Term1                           (82)
	Term1 -> Term2                                     (83)
	Term2 -> Term2 Term3                               (84)
	Term2 -> Term3                                     (85)
	Term -> Term1                                      (86)
	CaseExpression -> Term '->' Var                    (87)
	ListCaseExpression -> CaseExpression               (88)
	ListCaseExpression -> CaseExpression ListCaseExpression   (89)
	Arg -> Var                                         (90)
	ListArg ->                                         (91)
	ListArg -> Arg ListArg                             (92)
	FunctionDefinition -> Var ListArg '=' Term         (93)
	FunctionDefinition -> FunctionDefinition ';'       (94)
	FunctionType -> Var '::' Type                      (95)
	FunctionType -> FunctionType ';'                   (96)
	FunctionDeclaration -> FunctionType ';' FunctionDefinition ';'   (97)
	ListFunctionDeclaration ->                         (98)
	ListFunctionDeclaration -> FunctionDeclaration ListFunctionDeclaration   (99)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	'!'            { PT _ (TS _ 1) }
	'$'            { PT _ (TS _ 2) }
	'('            { PT _ (TS _ 3) }
	'()'           { PT _ (TS _ 4) }
	')'            { PT _ (TS _ 5) }
	'*'            { PT _ (TS _ 6) }
	'**'           { PT _ (TS _ 7) }
	','            { PT _ (TS _ 8) }
	'->'           { PT _ (TS _ 9) }
	'.'            { PT _ (TS _ 10) }
	'::'           { PT _ (TS _ 11) }
	';'            { PT _ (TS _ 12) }
	'='            { PT _ (TS _ 13) }
	'@+'           { PT _ (TS _ 14) }
	'@+i'          { PT _ (TS _ 15) }
	'@-'           { PT _ (TS _ 16) }
	'@-i'          { PT _ (TS _ 17) }
	'@0'           { PT _ (TS _ 18) }
	'@1'           { PT _ (TS _ 19) }
	'Bit'          { PT _ (TS _ 20) }
	'FSWAP'        { PT _ (TS _ 21) }
	'H'            { PT _ (TS _ 22) }
	'ID'           { PT _ (TS _ 23) }
	'ISWAP'        { PT _ (TS _ 24) }
	'Qbit'         { PT _ (TS _ 25) }
	'ROOT_SWAP'    { PT _ (TS _ 26) }
	'ROOT_SWAP_DAG'{ PT _ (TS _ 27) }
	'ROOT_X'       { PT _ (TS _ 28) }
	'ROOT_X_DAG'   { PT _ (TS _ 29) }
	'ROOT_Y'       { PT _ (TS _ 30) }
	'ROOT_Y_DAG'   { PT _ (TS _ 31) }
	'ROOT_Z'       { PT _ (TS _ 32) }
	'ROOT_Z_DAG'   { PT _ (TS _ 33) }
	'RX'           { PT _ (TS _ 34) }
	'RY'           { PT _ (TS _ 35) }
	'RZ'           { PT _ (TS _ 36) }
	'S'            { PT _ (TS _ 37) }
	'SQRT_SWAP'    { PT _ (TS _ 38) }
	'SQRT_SWAP_DAG'{ PT _ (TS _ 39) }
	'SQRT_X'       { PT _ (TS _ 40) }
	'SQRT_X_DAG'   { PT _ (TS _ 41) }
	'SQRT_Y'       { PT _ (TS _ 42) }
	'SQRT_Y_DAG'   { PT _ (TS _ 43) }
	'SWAP'         { PT _ (TS _ 44) }
	'SWAP_THETA'   { PT _ (TS _ 45) }
	'S_DAG'        { PT _ (TS _ 46) }
	'T'            { PT _ (TS _ 47) }
	'T_DAG'        { PT _ (TS _ 48) }
	'U1'           { PT _ (TS _ 49) }
	'U2'           { PT _ (TS _ 50) }
	'U3'           { PT _ (TS _ 51) }
	'X'            { PT _ (TS _ 52) }
	'Y'            { PT _ (TS _ 53) }
	'Z'            { PT _ (TS _ 54) }
	'['            { PT _ (TS _ 55) }
	']'            { PT _ (TS _ 56) }
	'case'         { PT _ (TS _ 57) }
	'ctrl'         { PT _ (TS _ 58) }
	'else'         { PT _ (TS _ 59) }
	'gate'         { PT _ (TS _ 60) }
	'if'           { PT _ (TS _ 61) }
	'in'           { PT _ (TS _ 62) }
	'let'          { PT _ (TS _ 63) }
	'of'           { PT _ (TS _ 64) }
	'then'         { PT _ (TS _ 65) }
	'with'         { PT _ (TS _ 66) }
	'{'            { PT _ (TS _ 67) }
	'}'            { PT _ (TS _ 68) }
	L_doubl        { PT _ (TD $$) }
	L_integ        { PT _ (TI $$) }
	L_Bit          { PT _ (T_Bit _) }
	L_GateIdent    { PT _ (T_GateIdent _) }
	L_Var          { PT _ (T_Var _) }
	L_Lambda       { PT _ (T_Lambda $$) }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_pProgram rule  0
	Double          rule  1
	Integer         rule  2
	Bit             rule  3
	GateIdent       rule  4
	Var             rule  5
	Lambda          rule  6
	Program         rule  7
	Type3           rules 8, 9, 10, 11
	Type2           rules 12, 13
	Type1           rules 14, 15, 16
	Type            rules 17, 18
	Angle           rule  19
	ControlState    rules 20, 21, 22, 23, 24, 25
	Gate            rules 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59
	LetVariable     rule  60
	ListLetVariable rules 61, 62, 63
	Tuple           rule  64
	Controls        rule  65
	ListTerm        rules 66, 67
	ControlStates   rule  68
	ListControlState rules 69, 70
	Term3           rules 71, 72, 73, 74, 75
	Term1           rules 76, 77, 78, 79, 80, 81, 82, 83
	Term2           rules 84, 85
	Term            rule  86
	CaseExpression  rule  87
	ListCaseExpression rules 88, 89
	Arg             rule  90
	ListArg         rules 91, 92
	FunctionDefinition rules 93, 94
	FunctionType    rules 95, 96
	FunctionDeclaration rule  97
	ListFunctionDeclaration rules 98, 99

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0

	%start_pProgram -> . Program                        (rule 0)

	L_Var          shift, and enter state 8
	%eof           reduce using rule 98

	Var            goto state 3
	Program        goto state 4
	FunctionType   goto state 5
	FunctionDeclarationgoto state 6
	ListFunctionDeclarationgoto state 7

State 1

	Double -> . L_doubl                                 (rule 1)

	L_doubl        shift, and enter state 2


State 2

	Double -> L_doubl .                                 (rule 1)

	')'            reduce using rule 1
	','            reduce using rule 1
	'->'           reduce using rule 1
	';'            reduce using rule 1
	']'            reduce using rule 1
	'else'         reduce using rule 1
	'of'           reduce using rule 1
	'then'         reduce using rule 1
	'}'            reduce using rule 1


State 3

	FunctionType -> Var . '::' Type                     (rule 95)

	'::'           shift, and enter state 11


State 4

	%start_pProgram -> Program .                        (rule 0)

	%eof           accept


State 5

	FunctionType -> FunctionType . ';'                  (rule 96)
	FunctionDeclaration -> FunctionType . ';' FunctionDefinition ';'    (rule 97)

	';'            shift, and enter state 10


State 6

	ListFunctionDeclaration -> FunctionDeclaration . ListFunctionDeclaration    (rule 99)

	L_Var          shift, and enter state 8
	%eof           reduce using rule 98

	Var            goto state 3
	FunctionType   goto state 5
	FunctionDeclarationgoto state 6
	ListFunctionDeclarationgoto state 9

State 7

	Program -> ListFunctionDeclaration .                (rule 7)

	%eof           reduce using rule 7


State 8

	Var -> L_Var .                                      (rule 5)

	'$'            reduce using rule 5
	'('            reduce using rule 5
	'()'           reduce using rule 5
	')'            reduce using rule 5
	','            reduce using rule 5
	'->'           reduce using rule 5
	'::'           reduce using rule 5
	';'            reduce using rule 5
	'='            reduce using rule 5
	']'            reduce using rule 5
	'case'         reduce using rule 5
	'else'         reduce using rule 5
	'gate'         reduce using rule 5
	'if'           reduce using rule 5
	'let'          reduce using rule 5
	'of'           reduce using rule 5
	'then'         reduce using rule 5
	'with'         reduce using rule 5
	'}'            reduce using rule 5
	L_Bit          reduce using rule 5
	L_Var          reduce using rule 5
	L_Lambda       reduce using rule 5


State 9

	ListFunctionDeclaration -> FunctionDeclaration ListFunctionDeclaration .    (rule 99)

	%eof           reduce using rule 99


State 10

	FunctionType -> FunctionType ';' .                  (rule 96)
	FunctionDeclaration -> FunctionType ';' . FunctionDefinition ';'    (rule 97)

	';'            reduce using rule 96
	L_Var          shift, and enter state 8

	Var            goto state 21
	FunctionDefinitiongoto state 22

State 11

	FunctionType -> Var '::' . Type                     (rule 95)

	'!'            shift, and enter state 16
	'('            shift, and enter state 17
	'()'           shift, and enter state 18
	'Bit'          shift, and enter state 19
	'Qbit'         shift, and enter state 20

	Type3          goto state 12
	Type2          goto state 13
	Type1          goto state 14
	Type           goto state 15

State 12

	Type2 -> Type3 .                                    (rule 13)

	')'            reduce using rule 13
	'*'            reduce using rule 13
	'**'           reduce using rule 13
	'->'           reduce using rule 13
	'.'            reduce using rule 13
	';'            reduce using rule 13


State 13

	Type1 -> Type2 . '**' Integer                       (rule 14)
	Type1 -> Type2 . '*' Type1                          (rule 15)
	Type1 -> Type2 .                                    (rule 16)

	')'            reduce using rule 16
	'*'            shift, and enter state 30
	'**'           shift, and enter state 31
	'->'           reduce using rule 16
	'.'            reduce using rule 16
	';'            reduce using rule 16


State 14

	Type -> Type1 . '->' Type                           (rule 17)
	Type -> Type1 .                                     (rule 18)

	')'            reduce using rule 18
	'->'           shift, and enter state 29
	'.'            reduce using rule 18
	';'            reduce using rule 18


State 15

	FunctionType -> Var '::' Type .                     (rule 95)

	'.'            reduce using rule 95
	';'            reduce using rule 95


State 16

	Type2 -> '!' . Type3                                (rule 12)

	'('            shift, and enter state 17
	'()'           shift, and enter state 18
	'Bit'          shift, and enter state 19
	'Qbit'         shift, and enter state 20

	Type3          goto state 28

State 17

	Type3 -> '(' . Type ')'                             (rule 11)

	'!'            shift, and enter state 16
	'('            shift, and enter state 17
	'()'           shift, and enter state 18
	'Bit'          shift, and enter state 19
	'Qbit'         shift, and enter state 20

	Type3          goto state 12
	Type2          goto state 13
	Type1          goto state 14
	Type           goto state 27

State 18

	Type3 -> '()' .                                     (rule 10)

	')'            reduce using rule 10
	'*'            reduce using rule 10
	'**'           reduce using rule 10
	'->'           reduce using rule 10
	'.'            reduce using rule 10
	';'            reduce using rule 10


State 19

	Type3 -> 'Bit' .                                    (rule 8)

	')'            reduce using rule 8
	'*'            reduce using rule 8
	'**'           reduce using rule 8
	'->'           reduce using rule 8
	'.'            reduce using rule 8
	';'            reduce using rule 8


State 20

	Type3 -> 'Qbit' .                                   (rule 9)

	')'            reduce using rule 9
	'*'            reduce using rule 9
	'**'           reduce using rule 9
	'->'           reduce using rule 9
	'.'            reduce using rule 9
	';'            reduce using rule 9


State 21

	FunctionDefinition -> Var . ListArg '=' Term        (rule 93)

	'='            reduce using rule 91
	L_Var          shift, and enter state 8

	Var            goto state 24
	Arg            goto state 25
	ListArg        goto state 26

State 22

	FunctionDefinition -> FunctionDefinition . ';'      (rule 94)
	FunctionDeclaration -> FunctionType ';' FunctionDefinition . ';'    (rule 97)

	';'            shift, and enter state 23


State 23

	FunctionDefinition -> FunctionDefinition ';' .      (rule 94)
	FunctionDeclaration -> FunctionType ';' FunctionDefinition ';' .    (rule 97)

	';'            reduce using rule 94
	L_Var          reduce using rule 97
	%eof           reduce using rule 97


State 24

	Arg -> Var .                                        (rule 90)

	'='            reduce using rule 90
	L_Var          reduce using rule 90


State 25

	ListArg -> Arg . ListArg                            (rule 92)

	'='            reduce using rule 91
	L_Var          shift, and enter state 8

	Var            goto state 24
	Arg            goto state 25
	ListArg        goto state 38

State 26

	FunctionDefinition -> Var ListArg . '=' Term        (rule 93)

	'='            shift, and enter state 37


State 27

	Type3 -> '(' Type . ')'                             (rule 11)

	')'            shift, and enter state 36


State 28

	Type2 -> '!' Type3 .                                (rule 12)

	')'            reduce using rule 12
	'*'            reduce using rule 12
	'**'           reduce using rule 12
	'->'           reduce using rule 12
	'.'            reduce using rule 12
	';'            reduce using rule 12


State 29

	Type -> Type1 '->' . Type                           (rule 17)

	'!'            shift, and enter state 16
	'('            shift, and enter state 17
	'()'           shift, and enter state 18
	'Bit'          shift, and enter state 19
	'Qbit'         shift, and enter state 20

	Type3          goto state 12
	Type2          goto state 13
	Type1          goto state 14
	Type           goto state 35

State 30

	Type1 -> Type2 '*' . Type1                          (rule 15)

	'!'            shift, and enter state 16
	'('            shift, and enter state 17
	'()'           shift, and enter state 18
	'Bit'          shift, and enter state 19
	'Qbit'         shift, and enter state 20

	Type3          goto state 12
	Type2          goto state 13
	Type1          goto state 34

State 31

	Type1 -> Type2 '**' . Integer                       (rule 14)

	L_integ        shift, and enter state 33

	Integer        goto state 32

State 32

	Type1 -> Type2 '**' Integer .                       (rule 14)

	')'            reduce using rule 14
	'->'           reduce using rule 14
	'.'            reduce using rule 14
	';'            reduce using rule 14


State 33

	Integer -> L_integ .                                (rule 2)

	')'            reduce using rule 2
	','            reduce using rule 2
	'->'           reduce using rule 2
	'.'            reduce using rule 2
	';'            reduce using rule 2
	']'            reduce using rule 2
	'else'         reduce using rule 2
	'of'           reduce using rule 2
	'then'         reduce using rule 2
	'}'            reduce using rule 2


State 34

	Type1 -> Type2 '*' Type1 .                          (rule 15)

	')'            reduce using rule 15
	'->'           reduce using rule 15
	'.'            reduce using rule 15
	';'            reduce using rule 15


State 35

	Type -> Type1 '->' Type .                           (rule 17)

	')'            reduce using rule 17
	'.'            reduce using rule 17
	';'            reduce using rule 17


State 36

	Type3 -> '(' Type ')' .                             (rule 11)

	')'            reduce using rule 11
	'*'            reduce using rule 11
	'**'           reduce using rule 11
	'->'           reduce using rule 11
	'.'            reduce using rule 11
	';'            reduce using rule 11


State 37

	FunctionDefinition -> Var ListArg '=' . Term        (rule 93)

	'('            shift, and enter state 47
	'()'           shift, and enter state 48
	'case'         shift, and enter state 49
	'gate'         shift, and enter state 50
	'if'           shift, and enter state 51
	'let'          shift, and enter state 52
	'with'         shift, and enter state 53
	L_Bit          shift, and enter state 54
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 55

	Bit            goto state 39
	Var            goto state 40
	Lambda         goto state 41
	Tuple          goto state 42
	Term3          goto state 43
	Term1          goto state 44
	Term2          goto state 45
	Term           goto state 46

State 38

	ListArg -> Arg ListArg .                            (rule 92)

	'='            reduce using rule 92


State 39

	Term3 -> Bit .                                      (rule 72)

	'$'            reduce using rule 72
	'('            reduce using rule 72
	'()'           reduce using rule 72
	')'            reduce using rule 72
	','            reduce using rule 72
	'->'           reduce using rule 72
	';'            reduce using rule 72
	']'            reduce using rule 72
	'else'         reduce using rule 72
	'of'           reduce using rule 72
	'then'         reduce using rule 72
	'}'            reduce using rule 72
	L_Bit          reduce using rule 72
	L_Var          reduce using rule 72


State 40

	Term3 -> Var .                                      (rule 71)

	'$'            reduce using rule 71
	'('            reduce using rule 71
	'()'           reduce using rule 71
	')'            reduce using rule 71
	','            reduce using rule 71
	'->'           reduce using rule 71
	';'            reduce using rule 71
	']'            reduce using rule 71
	'else'         reduce using rule 71
	'of'           reduce using rule 71
	'then'         reduce using rule 71
	'}'            reduce using rule 71
	L_Bit          reduce using rule 71
	L_Var          reduce using rule 71


State 41

	Term1 -> Lambda . FunctionType '.' Term             (rule 79)

	L_Var          shift, and enter state 8

	Var            goto state 3
	FunctionType   goto state 100

State 42

	Term3 -> Tuple .                                    (rule 73)

	'$'            reduce using rule 73
	'('            reduce using rule 73
	'()'           reduce using rule 73
	')'            reduce using rule 73
	','            reduce using rule 73
	'->'           reduce using rule 73
	';'            reduce using rule 73
	']'            reduce using rule 73
	'else'         reduce using rule 73
	'of'           reduce using rule 73
	'then'         reduce using rule 73
	'}'            reduce using rule 73
	L_Bit          reduce using rule 73
	L_Var          reduce using rule 73


State 43

	Term2 -> Term3 .                                    (rule 85)

	'$'            reduce using rule 85
	'('            reduce using rule 85
	'()'           reduce using rule 85
	')'            reduce using rule 85
	','            reduce using rule 85
	'->'           reduce using rule 85
	';'            reduce using rule 85
	']'            reduce using rule 85
	'else'         reduce using rule 85
	'of'           reduce using rule 85
	'then'         reduce using rule 85
	'}'            reduce using rule 85
	L_Bit          reduce using rule 85
	L_Var          reduce using rule 85


State 44

	Term -> Term1 .                                     (rule 86)

	')'            reduce using rule 86
	','            reduce using rule 86
	'->'           reduce using rule 86
	';'            reduce using rule 86
	']'            reduce using rule 86
	'else'         reduce using rule 86
	'of'           reduce using rule 86
	'then'         reduce using rule 86
	'}'            reduce using rule 86


State 45

	Term1 -> Term2 . '$' Term1                          (rule 82)
	Term1 -> Term2 .                                    (rule 83)
	Term2 -> Term2 . Term3                              (rule 84)

	'$'            shift, and enter state 99
	'('            shift, and enter state 47
	'()'           shift, and enter state 48
	')'            reduce using rule 83
	','            reduce using rule 83
	'->'           reduce using rule 83
	';'            reduce using rule 83
	']'            reduce using rule 83
	'else'         reduce using rule 83
	'of'           reduce using rule 83
	'then'         reduce using rule 83
	'}'            reduce using rule 83
	L_Bit          shift, and enter state 54
	L_Var          shift, and enter state 8

	Bit            goto state 39
	Var            goto state 40
	Tuple          goto state 42
	Term3          goto state 98

State 46

	FunctionDefinition -> Var ListArg '=' Term .        (rule 93)

	';'            reduce using rule 93


State 47

	Tuple -> '(' . Term ',' ListTerm ')'                (rule 64)
	Term3 -> '(' . Term ')'                             (rule 75)

	'('            shift, and enter state 47
	'()'           shift, and enter state 48
	'case'         shift, and enter state 49
	'gate'         shift, and enter state 50
	'if'           shift, and enter state 51
	'let'          shift, and enter state 52
	'with'         shift, and enter state 53
	L_Bit          shift, and enter state 54
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 55

	Bit            goto state 39
	Var            goto state 40
	Lambda         goto state 41
	Tuple          goto state 42
	Term3          goto state 43
	Term1          goto state 44
	Term2          goto state 45
	Term           goto state 97

State 48

	Term3 -> '()' .                                     (rule 74)

	'$'            reduce using rule 74
	'('            reduce using rule 74
	'()'           reduce using rule 74
	')'            reduce using rule 74
	','            reduce using rule 74
	'->'           reduce using rule 74
	';'            reduce using rule 74
	']'            reduce using rule 74
	'else'         reduce using rule 74
	'of'           reduce using rule 74
	'then'         reduce using rule 74
	'}'            reduce using rule 74
	L_Bit          reduce using rule 74
	L_Var          reduce using rule 74


State 49

	Term1 -> 'case' . Term 'of' CaseExpression ListCaseExpression    (rule 78)

	'('            shift, and enter state 47
	'()'           shift, and enter state 48
	'case'         shift, and enter state 49
	'gate'         shift, and enter state 50
	'if'           shift, and enter state 51
	'let'          shift, and enter state 52
	'with'         shift, and enter state 53
	L_Bit          shift, and enter state 54
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 55

	Bit            goto state 39
	Var            goto state 40
	Lambda         goto state 41
	Tuple          goto state 42
	Term3          goto state 43
	Term1          goto state 44
	Term2          goto state 45
	Term           goto state 96

State 50

	Term1 -> 'gate' . Gate                              (rule 80)

	'FSWAP'        shift, and enter state 62
	'H'            shift, and enter state 63
	'ID'           shift, and enter state 64
	'ISWAP'        shift, and enter state 65
	'ROOT_SWAP'    shift, and enter state 66
	'ROOT_SWAP_DAG'shift, and enter state 67
	'ROOT_X'       shift, and enter state 68
	'ROOT_X_DAG'   shift, and enter state 69
	'ROOT_Y'       shift, and enter state 70
	'ROOT_Y_DAG'   shift, and enter state 71
	'ROOT_Z'       shift, and enter state 72
	'ROOT_Z_DAG'   shift, and enter state 73
	'RX'           shift, and enter state 74
	'RY'           shift, and enter state 75
	'RZ'           shift, and enter state 76
	'S'            shift, and enter state 77
	'SQRT_SWAP'    shift, and enter state 78
	'SQRT_SWAP_DAG'shift, and enter state 79
	'SQRT_X'       shift, and enter state 80
	'SQRT_X_DAG'   shift, and enter state 81
	'SQRT_Y'       shift, and enter state 82
	'SQRT_Y_DAG'   shift, and enter state 83
	'SWAP'         shift, and enter state 84
	'SWAP_THETA'   shift, and enter state 85
	'S_DAG'        shift, and enter state 86
	'T'            shift, and enter state 87
	'T_DAG'        shift, and enter state 88
	'U1'           shift, and enter state 89
	'U2'           shift, and enter state 90
	'U3'           shift, and enter state 91
	'X'            shift, and enter state 92
	'Y'            shift, and enter state 93
	'Z'            shift, and enter state 94
	L_GateIdent    shift, and enter state 95

	GateIdent      goto state 60
	Gate           goto state 61

State 51

	Term1 -> 'if' . Term 'then' Term 'else' Term        (rule 76)

	'('            shift, and enter state 47
	'()'           shift, and enter state 48
	'case'         shift, and enter state 49
	'gate'         shift, and enter state 50
	'if'           shift, and enter state 51
	'let'          shift, and enter state 52
	'with'         shift, and enter state 53
	L_Bit          shift, and enter state 54
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 55

	Bit            goto state 39
	Var            goto state 40
	Lambda         goto state 41
	Tuple          goto state 42
	Term3          goto state 43
	Term1          goto state 44
	Term2          goto state 45
	Term           goto state 59

State 52

	Term1 -> 'let' . '{' '(' LetVariable ',' ListLetVariable ')' '=' Term '}' 'in' Term    (rule 77)

	'{'            shift, and enter state 58


State 53

	Term1 -> 'with' . Controls 'ctrl' ControlStates     (rule 81)

	'['            shift, and enter state 57

	Controls       goto state 56

State 54

	Bit -> L_Bit .                                      (rule 3)

	'$'            reduce using rule 3
	'('            reduce using rule 3
	'()'           reduce using rule 3
	')'            reduce using rule 3
	','            reduce using rule 3
	'->'           reduce using rule 3
	';'            reduce using rule 3
	']'            reduce using rule 3
	'else'         reduce using rule 3
	'of'           reduce using rule 3
	'then'         reduce using rule 3
	'}'            reduce using rule 3
	L_Bit          reduce using rule 3
	L_Var          reduce using rule 3


State 55

	Lambda -> L_Lambda .                                (rule 6)

	L_Var          reduce using rule 6


State 56

	Term1 -> 'with' Controls . 'ctrl' ControlStates     (rule 81)

	'ctrl'         shift, and enter state 126


State 57

	Controls -> '[' . Term ',' ListTerm ']'             (rule 65)

	'('            shift, and enter state 47
	'()'           shift, and enter state 48
	'case'         shift, and enter state 49
	'gate'         shift, and enter state 50
	'if'           shift, and enter state 51
	'let'          shift, and enter state 52
	'with'         shift, and enter state 53
	L_Bit          shift, and enter state 54
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 55

	Bit            goto state 39
	Var            goto state 40
	Lambda         goto state 41
	Tuple          goto state 42
	Term3          goto state 43
	Term1          goto state 44
	Term2          goto state 45
	Term           goto state 125

State 58

	Term1 -> 'let' '{' . '(' LetVariable ',' ListLetVariable ')' '=' Term '}' 'in' Term    (rule 77)

	'('            shift, and enter state 124


State 59

	Term1 -> 'if' Term . 'then' Term 'else' Term        (rule 76)

	'then'         shift, and enter state 123


State 60

	Gate -> GateIdent .                                 (rule 59)

	')'            reduce using rule 59
	','            reduce using rule 59
	'->'           reduce using rule 59
	';'            reduce using rule 59
	']'            reduce using rule 59
	'else'         reduce using rule 59
	'of'           reduce using rule 59
	'then'         reduce using rule 59
	'}'            reduce using rule 59


State 61

	Term1 -> 'gate' Gate .                              (rule 80)

	')'            reduce using rule 80
	','            reduce using rule 80
	'->'           reduce using rule 80
	';'            reduce using rule 80
	']'            reduce using rule 80
	'else'         reduce using rule 80
	'of'           reduce using rule 80
	'then'         reduce using rule 80
	'}'            reduce using rule 80


State 62

	Gate -> 'FSWAP' .                                   (rule 55)

	')'            reduce using rule 55
	','            reduce using rule 55
	'->'           reduce using rule 55
	';'            reduce using rule 55
	']'            reduce using rule 55
	'else'         reduce using rule 55
	'of'           reduce using rule 55
	'then'         reduce using rule 55
	'}'            reduce using rule 55


State 63

	Gate -> 'H' .                                       (rule 26)

	')'            reduce using rule 26
	','            reduce using rule 26
	'->'           reduce using rule 26
	';'            reduce using rule 26
	']'            reduce using rule 26
	'else'         reduce using rule 26
	'of'           reduce using rule 26
	'then'         reduce using rule 26
	'}'            reduce using rule 26


State 64

	Gate -> 'ID' .                                      (rule 30)

	')'            reduce using rule 30
	','            reduce using rule 30
	'->'           reduce using rule 30
	';'            reduce using rule 30
	']'            reduce using rule 30
	'else'         reduce using rule 30
	'of'           reduce using rule 30
	'then'         reduce using rule 30
	'}'            reduce using rule 30


State 65

	Gate -> 'ISWAP' .                                   (rule 54)

	')'            reduce using rule 54
	','            reduce using rule 54
	'->'           reduce using rule 54
	';'            reduce using rule 54
	']'            reduce using rule 54
	'else'         reduce using rule 54
	'of'           reduce using rule 54
	'then'         reduce using rule 54
	'}'            reduce using rule 54


State 66

	Gate -> 'ROOT_SWAP' . Integer                       (rule 57)

	L_integ        shift, and enter state 33

	Integer        goto state 122

State 67

	Gate -> 'ROOT_SWAP_DAG' . Integer                   (rule 58)

	L_integ        shift, and enter state 33

	Integer        goto state 121

State 68

	Gate -> 'ROOT_X' . Integer                          (rule 31)

	L_integ        shift, and enter state 33

	Integer        goto state 120

State 69

	Gate -> 'ROOT_X_DAG' . Integer                      (rule 32)

	L_integ        shift, and enter state 33

	Integer        goto state 119

State 70

	Gate -> 'ROOT_Y' . Integer                          (rule 33)

	L_integ        shift, and enter state 33

	Integer        goto state 118

State 71

	Gate -> 'ROOT_Y_DAG' . Integer                      (rule 34)

	L_integ        shift, and enter state 33

	Integer        goto state 117

State 72

	Gate -> 'ROOT_Z' . Integer                          (rule 35)

	L_integ        shift, and enter state 33

	Integer        goto state 116

State 73

	Gate -> 'ROOT_Z_DAG' . Integer                      (rule 36)

	L_integ        shift, and enter state 33

	Integer        goto state 115

State 74

	Gate -> 'RX' . Angle                                (rule 45)

	L_doubl        shift, and enter state 2

	Double         goto state 109
	Angle          goto state 114

State 75

	Gate -> 'RY' . Angle                                (rule 46)

	L_doubl        shift, and enter state 2

	Double         goto state 109
	Angle          goto state 113

State 76

	Gate -> 'RZ' . Angle                                (rule 47)

	L_doubl        shift, and enter state 2

	Double         goto state 109
	Angle          goto state 112

State 77

	Gate -> 'S' .                                       (rule 37)

	')'            reduce using rule 37
	','            reduce using rule 37
	'->'           reduce using rule 37
	';'            reduce using rule 37
	']'            reduce using rule 37
	'else'         reduce using rule 37
	'of'           reduce using rule 37
	'then'         reduce using rule 37
	'}'            reduce using rule 37


State 78

	Gate -> 'SQRT_SWAP' .                               (rule 52)

	')'            reduce using rule 52
	','            reduce using rule 52
	'->'           reduce using rule 52
	';'            reduce using rule 52
	']'            reduce using rule 52
	'else'         reduce using rule 52
	'of'           reduce using rule 52
	'then'         reduce using rule 52
	'}'            reduce using rule 52


State 79

	Gate -> 'SQRT_SWAP_DAG' .                           (rule 53)

	')'            reduce using rule 53
	','            reduce using rule 53
	'->'           reduce using rule 53
	';'            reduce using rule 53
	']'            reduce using rule 53
	'else'         reduce using rule 53
	'of'           reduce using rule 53
	'then'         reduce using rule 53
	'}'            reduce using rule 53


State 80

	Gate -> 'SQRT_X' .                                  (rule 41)

	')'            reduce using rule 41
	','            reduce using rule 41
	'->'           reduce using rule 41
	';'            reduce using rule 41
	']'            reduce using rule 41
	'else'         reduce using rule 41
	'of'           reduce using rule 41
	'then'         reduce using rule 41
	'}'            reduce using rule 41


State 81

	Gate -> 'SQRT_X_DAG' .                              (rule 42)

	')'            reduce using rule 42
	','            reduce using rule 42
	'->'           reduce using rule 42
	';'            reduce using rule 42
	']'            reduce using rule 42
	'else'         reduce using rule 42
	'of'           reduce using rule 42
	'then'         reduce using rule 42
	'}'            reduce using rule 42


State 82

	Gate -> 'SQRT_Y' .                                  (rule 43)

	')'            reduce using rule 43
	','            reduce using rule 43
	'->'           reduce using rule 43
	';'            reduce using rule 43
	']'            reduce using rule 43
	'else'         reduce using rule 43
	'of'           reduce using rule 43
	'then'         reduce using rule 43
	'}'            reduce using rule 43


State 83

	Gate -> 'SQRT_Y_DAG' .                              (rule 44)

	')'            reduce using rule 44
	','            reduce using rule 44
	'->'           reduce using rule 44
	';'            reduce using rule 44
	']'            reduce using rule 44
	'else'         reduce using rule 44
	'of'           reduce using rule 44
	'then'         reduce using rule 44
	'}'            reduce using rule 44


State 84

	Gate -> 'SWAP' .                                    (rule 51)

	')'            reduce using rule 51
	','            reduce using rule 51
	'->'           reduce using rule 51
	';'            reduce using rule 51
	']'            reduce using rule 51
	'else'         reduce using rule 51
	'of'           reduce using rule 51
	'then'         reduce using rule 51
	'}'            reduce using rule 51


State 85

	Gate -> 'SWAP_THETA' . Angle                        (rule 56)

	L_doubl        shift, and enter state 2

	Double         goto state 109
	Angle          goto state 111

State 86

	Gate -> 'S_DAG' .                                   (rule 38)

	')'            reduce using rule 38
	','            reduce using rule 38
	'->'           reduce using rule 38
	';'            reduce using rule 38
	']'            reduce using rule 38
	'else'         reduce using rule 38
	'of'           reduce using rule 38
	'then'         reduce using rule 38
	'}'            reduce using rule 38


State 87

	Gate -> 'T' .                                       (rule 39)

	')'            reduce using rule 39
	','            reduce using rule 39
	'->'           reduce using rule 39
	';'            reduce using rule 39
	']'            reduce using rule 39
	'else'         reduce using rule 39
	'of'           reduce using rule 39
	'then'         reduce using rule 39
	'}'            reduce using rule 39


State 88

	Gate -> 'T_DAG' .                                   (rule 40)

	')'            reduce using rule 40
	','            reduce using rule 40
	'->'           reduce using rule 40
	';'            reduce using rule 40
	']'            reduce using rule 40
	'else'         reduce using rule 40
	'of'           reduce using rule 40
	'then'         reduce using rule 40
	'}'            reduce using rule 40


State 89

	Gate -> 'U1' . Angle                                (rule 48)

	L_doubl        shift, and enter state 2

	Double         goto state 109
	Angle          goto state 110

State 90

	Gate -> 'U2' . '(' Angle ',' Angle ')'              (rule 49)

	'('            shift, and enter state 108


State 91

	Gate -> 'U3' . '(' Angle ',' Angle ',' Angle ')'    (rule 50)

	'('            shift, and enter state 107


State 92

	Gate -> 'X' .                                       (rule 27)

	')'            reduce using rule 27
	','            reduce using rule 27
	'->'           reduce using rule 27
	';'            reduce using rule 27
	']'            reduce using rule 27
	'else'         reduce using rule 27
	'of'           reduce using rule 27
	'then'         reduce using rule 27
	'}'            reduce using rule 27


State 93

	Gate -> 'Y' .                                       (rule 28)

	')'            reduce using rule 28
	','            reduce using rule 28
	'->'           reduce using rule 28
	';'            reduce using rule 28
	']'            reduce using rule 28
	'else'         reduce using rule 28
	'of'           reduce using rule 28
	'then'         reduce using rule 28
	'}'            reduce using rule 28


State 94

	Gate -> 'Z' .                                       (rule 29)

	')'            reduce using rule 29
	','            reduce using rule 29
	'->'           reduce using rule 29
	';'            reduce using rule 29
	']'            reduce using rule 29
	'else'         reduce using rule 29
	'of'           reduce using rule 29
	'then'         reduce using rule 29
	'}'            reduce using rule 29


State 95

	GateIdent -> L_GateIdent .                          (rule 4)

	')'            reduce using rule 4
	','            reduce using rule 4
	'->'           reduce using rule 4
	';'            reduce using rule 4
	']'            reduce using rule 4
	'else'         reduce using rule 4
	'of'           reduce using rule 4
	'then'         reduce using rule 4
	'}'            reduce using rule 4


State 96

	Term1 -> 'case' Term . 'of' CaseExpression ListCaseExpression    (rule 78)

	'of'           shift, and enter state 106


State 97

	Tuple -> '(' Term . ',' ListTerm ')'                (rule 64)
	Term3 -> '(' Term . ')'                             (rule 75)

	')'            shift, and enter state 104
	','            shift, and enter state 105


State 98

	Term2 -> Term2 Term3 .                              (rule 84)

	'$'            reduce using rule 84
	'('            reduce using rule 84
	'()'           reduce using rule 84
	')'            reduce using rule 84
	','            reduce using rule 84
	'->'           reduce using rule 84
	';'            reduce using rule 84
	']'            reduce using rule 84
	'else'         reduce using rule 84
	'of'           reduce using rule 84
	'then'         reduce using rule 84
	'}'            reduce using rule 84
	L_Bit          reduce using rule 84
	L_Var          reduce using rule 84


State 99

	Term1 -> Term2 '$' . Term1                          (rule 82)

	'('            shift, and enter state 47
	'()'           shift, and enter state 48
	'case'         shift, and enter state 49
	'gate'         shift, and enter state 50
	'if'           shift, and enter state 51
	'let'          shift, and enter state 52
	'with'         shift, and enter state 53
	L_Bit          shift, and enter state 54
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 55

	Bit            goto state 39
	Var            goto state 40
	Lambda         goto state 41
	Tuple          goto state 42
	Term3          goto state 43
	Term1          goto state 103
	Term2          goto state 45

State 100

	Term1 -> Lambda FunctionType . '.' Term             (rule 79)
	FunctionType -> FunctionType . ';'                  (rule 96)

	'.'            shift, and enter state 101
	';'            shift, and enter state 102


State 101

	Term1 -> Lambda FunctionType '.' . Term             (rule 79)

	'('            shift, and enter state 47
	'()'           shift, and enter state 48
	'case'         shift, and enter state 49
	'gate'         shift, and enter state 50
	'if'           shift, and enter state 51
	'let'          shift, and enter state 52
	'with'         shift, and enter state 53
	L_Bit          shift, and enter state 54
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 55

	Bit            goto state 39
	Var            goto state 40
	Lambda         goto state 41
	Tuple          goto state 42
	Term3          goto state 43
	Term1          goto state 44
	Term2          goto state 45
	Term           goto state 139

State 102

	FunctionType -> FunctionType ';' .                  (rule 96)

	'.'            reduce using rule 96
	';'            reduce using rule 96


State 103

	Term1 -> Term2 '$' Term1 .                          (rule 82)

	')'            reduce using rule 82
	','            reduce using rule 82
	'->'           reduce using rule 82
	';'            reduce using rule 82
	']'            reduce using rule 82
	'else'         reduce using rule 82
	'of'           reduce using rule 82
	'then'         reduce using rule 82
	'}'            reduce using rule 82


State 104

	Term3 -> '(' Term ')' .                             (rule 75)

	'$'            reduce using rule 75
	'('            reduce using rule 75
	'()'           reduce using rule 75
	')'            reduce using rule 75
	','            reduce using rule 75
	'->'           reduce using rule 75
	';'            reduce using rule 75
	']'            reduce using rule 75
	'else'         reduce using rule 75
	'of'           reduce using rule 75
	'then'         reduce using rule 75
	'}'            reduce using rule 75
	L_Bit          reduce using rule 75
	L_Var          reduce using rule 75


State 105

	Tuple -> '(' Term ',' . ListTerm ')'                (rule 64)

	'('            shift, and enter state 47
	'()'           shift, and enter state 48
	'case'         shift, and enter state 49
	'gate'         shift, and enter state 50
	'if'           shift, and enter state 51
	'let'          shift, and enter state 52
	'with'         shift, and enter state 53
	L_Bit          shift, and enter state 54
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 55

	Bit            goto state 39
	Var            goto state 40
	Lambda         goto state 41
	Tuple          goto state 42
	ListTerm       goto state 137
	Term3          goto state 43
	Term1          goto state 44
	Term2          goto state 45
	Term           goto state 138

State 106

	Term1 -> 'case' Term 'of' . CaseExpression ListCaseExpression    (rule 78)

	'('            shift, and enter state 47
	'()'           shift, and enter state 48
	'case'         shift, and enter state 49
	'gate'         shift, and enter state 50
	'if'           shift, and enter state 51
	'let'          shift, and enter state 52
	'with'         shift, and enter state 53
	L_Bit          shift, and enter state 54
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 55

	Bit            goto state 39
	Var            goto state 40
	Lambda         goto state 41
	Tuple          goto state 42
	Term3          goto state 43
	Term1          goto state 44
	Term2          goto state 45
	Term           goto state 135
	CaseExpression goto state 136

State 107

	Gate -> 'U3' '(' . Angle ',' Angle ',' Angle ')'    (rule 50)

	L_doubl        shift, and enter state 2

	Double         goto state 109
	Angle          goto state 134

State 108

	Gate -> 'U2' '(' . Angle ',' Angle ')'              (rule 49)

	L_doubl        shift, and enter state 2

	Double         goto state 109
	Angle          goto state 133

State 109

	Angle -> Double .                                   (rule 19)

	')'            reduce using rule 19
	','            reduce using rule 19
	'->'           reduce using rule 19
	';'            reduce using rule 19
	']'            reduce using rule 19
	'else'         reduce using rule 19
	'of'           reduce using rule 19
	'then'         reduce using rule 19
	'}'            reduce using rule 19


State 110

	Gate -> 'U1' Angle .                                (rule 48)

	')'            reduce using rule 48
	','            reduce using rule 48
	'->'           reduce using rule 48
	';'            reduce using rule 48
	']'            reduce using rule 48
	'else'         reduce using rule 48
	'of'           reduce using rule 48
	'then'         reduce using rule 48
	'}'            reduce using rule 48


State 111

	Gate -> 'SWAP_THETA' Angle .                        (rule 56)

	')'            reduce using rule 56
	','            reduce using rule 56
	'->'           reduce using rule 56
	';'            reduce using rule 56
	']'            reduce using rule 56
	'else'         reduce using rule 56
	'of'           reduce using rule 56
	'then'         reduce using rule 56
	'}'            reduce using rule 56


State 112

	Gate -> 'RZ' Angle .                                (rule 47)

	')'            reduce using rule 47
	','            reduce using rule 47
	'->'           reduce using rule 47
	';'            reduce using rule 47
	']'            reduce using rule 47
	'else'         reduce using rule 47
	'of'           reduce using rule 47
	'then'         reduce using rule 47
	'}'            reduce using rule 47


State 113

	Gate -> 'RY' Angle .                                (rule 46)

	')'            reduce using rule 46
	','            reduce using rule 46
	'->'           reduce using rule 46
	';'            reduce using rule 46
	']'            reduce using rule 46
	'else'         reduce using rule 46
	'of'           reduce using rule 46
	'then'         reduce using rule 46
	'}'            reduce using rule 46


State 114

	Gate -> 'RX' Angle .                                (rule 45)

	')'            reduce using rule 45
	','            reduce using rule 45
	'->'           reduce using rule 45
	';'            reduce using rule 45
	']'            reduce using rule 45
	'else'         reduce using rule 45
	'of'           reduce using rule 45
	'then'         reduce using rule 45
	'}'            reduce using rule 45


State 115

	Gate -> 'ROOT_Z_DAG' Integer .                      (rule 36)

	')'            reduce using rule 36
	','            reduce using rule 36
	'->'           reduce using rule 36
	';'            reduce using rule 36
	']'            reduce using rule 36
	'else'         reduce using rule 36
	'of'           reduce using rule 36
	'then'         reduce using rule 36
	'}'            reduce using rule 36


State 116

	Gate -> 'ROOT_Z' Integer .                          (rule 35)

	')'            reduce using rule 35
	','            reduce using rule 35
	'->'           reduce using rule 35
	';'            reduce using rule 35
	']'            reduce using rule 35
	'else'         reduce using rule 35
	'of'           reduce using rule 35
	'then'         reduce using rule 35
	'}'            reduce using rule 35


State 117

	Gate -> 'ROOT_Y_DAG' Integer .                      (rule 34)

	')'            reduce using rule 34
	','            reduce using rule 34
	'->'           reduce using rule 34
	';'            reduce using rule 34
	']'            reduce using rule 34
	'else'         reduce using rule 34
	'of'           reduce using rule 34
	'then'         reduce using rule 34
	'}'            reduce using rule 34


State 118

	Gate -> 'ROOT_Y' Integer .                          (rule 33)

	')'            reduce using rule 33
	','            reduce using rule 33
	'->'           reduce using rule 33
	';'            reduce using rule 33
	']'            reduce using rule 33
	'else'         reduce using rule 33
	'of'           reduce using rule 33
	'then'         reduce using rule 33
	'}'            reduce using rule 33


State 119

	Gate -> 'ROOT_X_DAG' Integer .                      (rule 32)

	')'            reduce using rule 32
	','            reduce using rule 32
	'->'           reduce using rule 32
	';'            reduce using rule 32
	']'            reduce using rule 32
	'else'         reduce using rule 32
	'of'           reduce using rule 32
	'then'         reduce using rule 32
	'}'            reduce using rule 32


State 120

	Gate -> 'ROOT_X' Integer .                          (rule 31)

	')'            reduce using rule 31
	','            reduce using rule 31
	'->'           reduce using rule 31
	';'            reduce using rule 31
	']'            reduce using rule 31
	'else'         reduce using rule 31
	'of'           reduce using rule 31
	'then'         reduce using rule 31
	'}'            reduce using rule 31


State 121

	Gate -> 'ROOT_SWAP_DAG' Integer .                   (rule 58)

	')'            reduce using rule 58
	','            reduce using rule 58
	'->'           reduce using rule 58
	';'            reduce using rule 58
	']'            reduce using rule 58
	'else'         reduce using rule 58
	'of'           reduce using rule 58
	'then'         reduce using rule 58
	'}'            reduce using rule 58


State 122

	Gate -> 'ROOT_SWAP' Integer .                       (rule 57)

	')'            reduce using rule 57
	','            reduce using rule 57
	'->'           reduce using rule 57
	';'            reduce using rule 57
	']'            reduce using rule 57
	'else'         reduce using rule 57
	'of'           reduce using rule 57
	'then'         reduce using rule 57
	'}'            reduce using rule 57


State 123

	Term1 -> 'if' Term 'then' . Term 'else' Term        (rule 76)

	'('            shift, and enter state 47
	'()'           shift, and enter state 48
	'case'         shift, and enter state 49
	'gate'         shift, and enter state 50
	'if'           shift, and enter state 51
	'let'          shift, and enter state 52
	'with'         shift, and enter state 53
	L_Bit          shift, and enter state 54
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 55

	Bit            goto state 39
	Var            goto state 40
	Lambda         goto state 41
	Tuple          goto state 42
	Term3          goto state 43
	Term1          goto state 44
	Term2          goto state 45
	Term           goto state 132

State 124

	Term1 -> 'let' '{' '(' . LetVariable ',' ListLetVariable ')' '=' Term '}' 'in' Term    (rule 77)

	L_Var          shift, and enter state 8

	Var            goto state 130
	LetVariable    goto state 131

State 125

	Controls -> '[' Term . ',' ListTerm ']'             (rule 65)

	','            shift, and enter state 129


State 126

	Term1 -> 'with' Controls 'ctrl' . ControlStates     (rule 81)

	'['            shift, and enter state 128

	ControlStates  goto state 127

State 127

	Term1 -> 'with' Controls 'ctrl' ControlStates .     (rule 81)

	')'            reduce using rule 81
	','            reduce using rule 81
	'->'           reduce using rule 81
	';'            reduce using rule 81
	']'            reduce using rule 81
	'else'         reduce using rule 81
	'of'           reduce using rule 81
	'then'         reduce using rule 81
	'}'            reduce using rule 81


State 128

	ControlStates -> '[' . ControlState ',' ListControlState ']'    (rule 68)

	'@+'           shift, and enter state 151
	'@+i'          shift, and enter state 152
	'@-'           shift, and enter state 153
	'@-i'          shift, and enter state 154
	'@0'           shift, and enter state 155
	'@1'           shift, and enter state 156

	ControlState   goto state 150

State 129

	Controls -> '[' Term ',' . ListTerm ']'             (rule 65)

	'('            shift, and enter state 47
	'()'           shift, and enter state 48
	'case'         shift, and enter state 49
	'gate'         shift, and enter state 50
	'if'           shift, and enter state 51
	'let'          shift, and enter state 52
	'with'         shift, and enter state 53
	L_Bit          shift, and enter state 54
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 55

	Bit            goto state 39
	Var            goto state 40
	Lambda         goto state 41
	Tuple          goto state 42
	ListTerm       goto state 149
	Term3          goto state 43
	Term1          goto state 44
	Term2          goto state 45
	Term           goto state 138

State 130

	LetVariable -> Var .                                (rule 60)

	')'            reduce using rule 60
	','            reduce using rule 60


State 131

	Term1 -> 'let' '{' '(' LetVariable . ',' ListLetVariable ')' '=' Term '}' 'in' Term    (rule 77)

	','            shift, and enter state 148


State 132

	Term1 -> 'if' Term 'then' Term . 'else' Term        (rule 76)

	'else'         shift, and enter state 147


State 133

	Gate -> 'U2' '(' Angle . ',' Angle ')'              (rule 49)

	','            shift, and enter state 146


State 134

	Gate -> 'U3' '(' Angle . ',' Angle ',' Angle ')'    (rule 50)

	','            shift, and enter state 145


State 135

	CaseExpression -> Term . '->' Var                   (rule 87)

	'->'           shift, and enter state 144


State 136

	Term1 -> 'case' Term 'of' CaseExpression . ListCaseExpression    (rule 78)

	'('            shift, and enter state 47
	'()'           shift, and enter state 48
	'case'         shift, and enter state 49
	'gate'         shift, and enter state 50
	'if'           shift, and enter state 51
	'let'          shift, and enter state 52
	'with'         shift, and enter state 53
	L_Bit          shift, and enter state 54
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 55

	Bit            goto state 39
	Var            goto state 40
	Lambda         goto state 41
	Tuple          goto state 42
	Term3          goto state 43
	Term1          goto state 44
	Term2          goto state 45
	Term           goto state 135
	CaseExpression goto state 142
	ListCaseExpressiongoto state 143

State 137

	Tuple -> '(' Term ',' ListTerm . ')'                (rule 64)

	')'            shift, and enter state 141


State 138

	ListTerm -> Term .                                  (rule 66)
	ListTerm -> Term . ',' ListTerm                     (rule 67)

	')'            reduce using rule 66
	','            shift, and enter state 140
	']'            reduce using rule 66


State 139

	Term1 -> Lambda FunctionType '.' Term .             (rule 79)

	')'            reduce using rule 79
	','            reduce using rule 79
	'->'           reduce using rule 79
	';'            reduce using rule 79
	']'            reduce using rule 79
	'else'         reduce using rule 79
	'of'           reduce using rule 79
	'then'         reduce using rule 79
	'}'            reduce using rule 79


State 140

	ListTerm -> Term ',' . ListTerm                     (rule 67)

	'('            shift, and enter state 47
	'()'           shift, and enter state 48
	'case'         shift, and enter state 49
	'gate'         shift, and enter state 50
	'if'           shift, and enter state 51
	'let'          shift, and enter state 52
	'with'         shift, and enter state 53
	L_Bit          shift, and enter state 54
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 55

	Bit            goto state 39
	Var            goto state 40
	Lambda         goto state 41
	Tuple          goto state 42
	ListTerm       goto state 166
	Term3          goto state 43
	Term1          goto state 44
	Term2          goto state 45
	Term           goto state 138

State 141

	Tuple -> '(' Term ',' ListTerm ')' .                (rule 64)

	'$'            reduce using rule 64
	'('            reduce using rule 64
	'()'           reduce using rule 64
	')'            reduce using rule 64
	','            reduce using rule 64
	'->'           reduce using rule 64
	';'            reduce using rule 64
	']'            reduce using rule 64
	'else'         reduce using rule 64
	'of'           reduce using rule 64
	'then'         reduce using rule 64
	'}'            reduce using rule 64
	L_Bit          reduce using rule 64
	L_Var          reduce using rule 64


State 142

	ListCaseExpression -> CaseExpression .              (rule 88)
	ListCaseExpression -> CaseExpression . ListCaseExpression    (rule 89)

	'('            shift, and enter state 47
	'()'           shift, and enter state 48
	')'            reduce using rule 88
	','            reduce using rule 88
	'->'           reduce using rule 88
	';'            reduce using rule 88
	']'            reduce using rule 88
	'case'         shift, and enter state 49
	'else'         reduce using rule 88
	'gate'         shift, and enter state 50
	'if'           shift, and enter state 51
	'let'          shift, and enter state 52
	'of'           reduce using rule 88
	'then'         reduce using rule 88
	'with'         shift, and enter state 53
	'}'            reduce using rule 88
	L_Bit          shift, and enter state 54
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 55

	Bit            goto state 39
	Var            goto state 40
	Lambda         goto state 41
	Tuple          goto state 42
	Term3          goto state 43
	Term1          goto state 44
	Term2          goto state 45
	Term           goto state 135
	CaseExpression goto state 142
	ListCaseExpressiongoto state 165

State 143

	Term1 -> 'case' Term 'of' CaseExpression ListCaseExpression .    (rule 78)

	')'            reduce using rule 78
	','            reduce using rule 78
	'->'           reduce using rule 78
	';'            reduce using rule 78
	']'            reduce using rule 78
	'else'         reduce using rule 78
	'of'           reduce using rule 78
	'then'         reduce using rule 78
	'}'            reduce using rule 78


State 144

	CaseExpression -> Term '->' . Var                   (rule 87)

	L_Var          shift, and enter state 8

	Var            goto state 164

State 145

	Gate -> 'U3' '(' Angle ',' . Angle ',' Angle ')'    (rule 50)

	L_doubl        shift, and enter state 2

	Double         goto state 109
	Angle          goto state 163

State 146

	Gate -> 'U2' '(' Angle ',' . Angle ')'              (rule 49)

	L_doubl        shift, and enter state 2

	Double         goto state 109
	Angle          goto state 162

State 147

	Term1 -> 'if' Term 'then' Term 'else' . Term        (rule 76)

	'('            shift, and enter state 47
	'()'           shift, and enter state 48
	'case'         shift, and enter state 49
	'gate'         shift, and enter state 50
	'if'           shift, and enter state 51
	'let'          shift, and enter state 52
	'with'         shift, and enter state 53
	L_Bit          shift, and enter state 54
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 55

	Bit            goto state 39
	Var            goto state 40
	Lambda         goto state 41
	Tuple          goto state 42
	Term3          goto state 43
	Term1          goto state 44
	Term2          goto state 45
	Term           goto state 161

State 148

	Term1 -> 'let' '{' '(' LetVariable ',' . ListLetVariable ')' '=' Term '}' 'in' Term    (rule 77)

	')'            reduce using rule 61
	L_Var          shift, and enter state 8

	Var            goto state 130
	LetVariable    goto state 159
	ListLetVariablegoto state 160

State 149

	Controls -> '[' Term ',' ListTerm . ']'             (rule 65)

	']'            shift, and enter state 158


State 150

	ControlStates -> '[' ControlState . ',' ListControlState ']'    (rule 68)

	','            shift, and enter state 157


State 151

	ControlState -> '@+' .                              (rule 22)

	','            reduce using rule 22
	']'            reduce using rule 22


State 152

	ControlState -> '@+i' .                             (rule 24)

	','            reduce using rule 24
	']'            reduce using rule 24


State 153

	ControlState -> '@-' .                              (rule 23)

	','            reduce using rule 23
	']'            reduce using rule 23


State 154

	ControlState -> '@-i' .                             (rule 25)

	','            reduce using rule 25
	']'            reduce using rule 25


State 155

	ControlState -> '@0' .                              (rule 20)

	','            reduce using rule 20
	']'            reduce using rule 20


State 156

	ControlState -> '@1' .                              (rule 21)

	','            reduce using rule 21
	']'            reduce using rule 21


State 157

	ControlStates -> '[' ControlState ',' . ListControlState ']'    (rule 68)

	'@+'           shift, and enter state 151
	'@+i'          shift, and enter state 152
	'@-'           shift, and enter state 153
	'@-i'          shift, and enter state 154
	'@0'           shift, and enter state 155
	'@1'           shift, and enter state 156

	ControlState   goto state 171
	ListControlStategoto state 172

State 158

	Controls -> '[' Term ',' ListTerm ']' .             (rule 65)

	'ctrl'         reduce using rule 65


State 159

	ListLetVariable -> LetVariable .                    (rule 62)
	ListLetVariable -> LetVariable . ',' ListLetVariable    (rule 63)

	')'            reduce using rule 62
	','            shift, and enter state 170


State 160

	Term1 -> 'let' '{' '(' LetVariable ',' ListLetVariable . ')' '=' Term '}' 'in' Term    (rule 77)

	')'            shift, and enter state 169


State 161

	Term1 -> 'if' Term 'then' Term 'else' Term .        (rule 76)

	')'            reduce using rule 76
	','            reduce using rule 76
	'->'           reduce using rule 76
	';'            reduce using rule 76
	']'            reduce using rule 76
	'else'         reduce using rule 76
	'of'           reduce using rule 76
	'then'         reduce using rule 76
	'}'            reduce using rule 76


State 162

	Gate -> 'U2' '(' Angle ',' Angle . ')'              (rule 49)

	')'            shift, and enter state 168


State 163

	Gate -> 'U3' '(' Angle ',' Angle . ',' Angle ')'    (rule 50)

	','            shift, and enter state 167


State 164

	CaseExpression -> Term '->' Var .                   (rule 87)

	'('            reduce using rule 87
	'()'           reduce using rule 87
	')'            reduce using rule 87
	','            reduce using rule 87
	'->'           reduce using rule 87
	';'            reduce using rule 87
	']'            reduce using rule 87
	'case'         reduce using rule 87
	'else'         reduce using rule 87
	'gate'         reduce using rule 87
	'if'           reduce using rule 87
	'let'          reduce using rule 87
	'of'           reduce using rule 87
	'then'         reduce using rule 87
	'with'         reduce using rule 87
	'}'            reduce using rule 87
	L_Bit          reduce using rule 87
	L_Var          reduce using rule 87
	L_Lambda       reduce using rule 87


State 165

	ListCaseExpression -> CaseExpression ListCaseExpression .    (rule 89)

	')'            reduce using rule 89
	','            reduce using rule 89
	'->'           reduce using rule 89
	';'            reduce using rule 89
	']'            reduce using rule 89
	'else'         reduce using rule 89
	'of'           reduce using rule 89
	'then'         reduce using rule 89
	'}'            reduce using rule 89


State 166

	ListTerm -> Term ',' ListTerm .                     (rule 67)

	')'            reduce using rule 67
	']'            reduce using rule 67


State 167

	Gate -> 'U3' '(' Angle ',' Angle ',' . Angle ')'    (rule 50)

	L_doubl        shift, and enter state 2

	Double         goto state 109
	Angle          goto state 177

State 168

	Gate -> 'U2' '(' Angle ',' Angle ')' .              (rule 49)

	')'            reduce using rule 49
	','            reduce using rule 49
	'->'           reduce using rule 49
	';'            reduce using rule 49
	']'            reduce using rule 49
	'else'         reduce using rule 49
	'of'           reduce using rule 49
	'then'         reduce using rule 49
	'}'            reduce using rule 49


State 169

	Term1 -> 'let' '{' '(' LetVariable ',' ListLetVariable ')' . '=' Term '}' 'in' Term    (rule 77)

	'='            shift, and enter state 176


State 170

	ListLetVariable -> LetVariable ',' . ListLetVariable    (rule 63)

	')'            reduce using rule 61
	L_Var          shift, and enter state 8

	Var            goto state 130
	LetVariable    goto state 159
	ListLetVariablegoto state 175

State 171

	ListControlState -> ControlState .                  (rule 69)
	ListControlState -> ControlState . ',' ListControlState    (rule 70)

	','            shift, and enter state 174
	']'            reduce using rule 69


State 172

	ControlStates -> '[' ControlState ',' ListControlState . ']'    (rule 68)

	']'            shift, and enter state 173


State 173

	ControlStates -> '[' ControlState ',' ListControlState ']' .    (rule 68)

	')'            reduce using rule 68
	','            reduce using rule 68
	'->'           reduce using rule 68
	';'            reduce using rule 68
	']'            reduce using rule 68
	'else'         reduce using rule 68
	'of'           reduce using rule 68
	'then'         reduce using rule 68
	'}'            reduce using rule 68


State 174

	ListControlState -> ControlState ',' . ListControlState    (rule 70)

	'@+'           shift, and enter state 151
	'@+i'          shift, and enter state 152
	'@-'           shift, and enter state 153
	'@-i'          shift, and enter state 154
	'@0'           shift, and enter state 155
	'@1'           shift, and enter state 156

	ControlState   goto state 171
	ListControlStategoto state 180

State 175

	ListLetVariable -> LetVariable ',' ListLetVariable .    (rule 63)

	')'            reduce using rule 63


State 176

	Term1 -> 'let' '{' '(' LetVariable ',' ListLetVariable ')' '=' . Term '}' 'in' Term    (rule 77)

	'('            shift, and enter state 47
	'()'           shift, and enter state 48
	'case'         shift, and enter state 49
	'gate'         shift, and enter state 50
	'if'           shift, and enter state 51
	'let'          shift, and enter state 52
	'with'         shift, and enter state 53
	L_Bit          shift, and enter state 54
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 55

	Bit            goto state 39
	Var            goto state 40
	Lambda         goto state 41
	Tuple          goto state 42
	Term3          goto state 43
	Term1          goto state 44
	Term2          goto state 45
	Term           goto state 179

State 177

	Gate -> 'U3' '(' Angle ',' Angle ',' Angle . ')'    (rule 50)

	')'            shift, and enter state 178


State 178

	Gate -> 'U3' '(' Angle ',' Angle ',' Angle ')' .    (rule 50)

	')'            reduce using rule 50
	','            reduce using rule 50
	'->'           reduce using rule 50
	';'            reduce using rule 50
	']'            reduce using rule 50
	'else'         reduce using rule 50
	'of'           reduce using rule 50
	'then'         reduce using rule 50
	'}'            reduce using rule 50


State 179

	Term1 -> 'let' '{' '(' LetVariable ',' ListLetVariable ')' '=' Term . '}' 'in' Term    (rule 77)

	'}'            shift, and enter state 181


State 180

	ListControlState -> ControlState ',' ListControlState .    (rule 70)

	']'            reduce using rule 70


State 181

	Term1 -> 'let' '{' '(' LetVariable ',' ListLetVariable ')' '=' Term '}' . 'in' Term    (rule 77)

	'in'           shift, and enter state 182


State 182

	Term1 -> 'let' '{' '(' LetVariable ',' ListLetVariable ')' '=' Term '}' 'in' . Term    (rule 77)

	'('            shift, and enter state 47
	'()'           shift, and enter state 48
	'case'         shift, and enter state 49
	'gate'         shift, and enter state 50
	'if'           shift, and enter state 51
	'let'          shift, and enter state 52
	'with'         shift, and enter state 53
	L_Bit          shift, and enter state 54
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 55

	Bit            goto state 39
	Var            goto state 40
	Lambda         goto state 41
	Tuple          goto state 42
	Term3          goto state 43
	Term1          goto state 44
	Term2          goto state 45
	Term           goto state 183

State 183

	Term1 -> 'let' '{' '(' LetVariable ',' ListLetVariable ')' '=' Term '}' 'in' Term .    (rule 77)

	')'            reduce using rule 77
	','            reduce using rule 77
	'->'           reduce using rule 77
	';'            reduce using rule 77
	']'            reduce using rule 77
	'else'         reduce using rule 77
	'of'           reduce using rule 77
	'then'         reduce using rule 77
	'}'            reduce using rule 77


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 100
Number of terminals: 74
Number of non-terminals: 34
Number of states: 184
