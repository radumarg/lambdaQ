-----------------------------------------------------------------------------
Info file generated by Happy Version 1.20.0 from Frontend/LambdaQ/Par.y
-----------------------------------------------------------------------------

state 46 contains 1 shift/reduce conflicts.
state 55 contains 12 shift/reduce conflicts.
state 115 contains 1 shift/reduce conflicts.
state 195 contains 17 shift/reduce conflicts.

-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_pProgram -> Program                         (0)
	Double -> L_doubl                                  (1)
	Integer -> L_integ                                 (2)
	BitVariable -> L_BitVariable                       (3)
	Var -> L_Var                                       (4)
	Lambda -> L_Lambda                                 (5)
	IntegerExpr -> IntegerExpr '+' IntegerExpr1        (6)
	IntegerExpr -> IntegerExpr '-' IntegerExpr1        (7)
	IntegerExpr -> IntegerExpr1                        (8)
	IntegerExpr1 -> IntegerExpr1 '*' IntegerExpr2      (9)
	IntegerExpr1 -> IntegerExpr1 '/' IntegerExpr2      (10)
	IntegerExpr1 -> IntegerExpr2                       (11)
	IntegerExpr2 -> Integer                            (12)
	IntegerExpr2 -> '(' IntegerExpr ')'                (13)
	Program -> ListFunctionDeclaration                 (14)
	Type -> Type '->' Type1                            (15)
	Type -> Type1                                      (16)
	Type1 -> Type1 '+' Type2                           (17)
	Type1 -> Type2                                     (18)
	Type2 -> Type2 '*' Type3                           (19)
	Type2 -> Type3                                     (20)
	Type3 -> Type4 '**' Integer                        (21)
	Type3 -> '!' Type4                                 (22)
	Type3 -> Type4                                     (23)
	Type5 -> 'Bit'                                     (24)
	Type5 -> 'Int'                                     (25)
	Type5 -> 'Qbit'                                    (26)
	Type5 -> '()'                                      (27)
	Type5 -> '(' Type ')'                              (28)
	Type4 -> Type5                                     (29)
	Angle -> Double                                    (30)
	BasisState -> '@0'                                 (31)
	BasisState -> '@1'                                 (32)
	BasisState -> '@+'                                 (33)
	BasisState -> '@-'                                 (34)
	BasisState -> '@+i'                                (35)
	BasisState -> '@-i'                                (36)
	Bit -> BitVariable                                 (37)
	Gate -> 'H'                                        (38)
	Gate -> 'X'                                        (39)
	Gate -> 'Y'                                        (40)
	Gate -> 'Z'                                        (41)
	Gate -> 'ID'                                       (42)
	Gate -> 'ROOT_X' Integer                           (43)
	Gate -> 'ROOT_X_DAG' Integer                       (44)
	Gate -> 'ROOT_Y' Integer                           (45)
	Gate -> 'ROOT_Y_DAG' Integer                       (46)
	Gate -> 'ROOT_Z' Integer                           (47)
	Gate -> 'ROOT_Z_DAG' Integer                       (48)
	Gate -> 'S'                                        (49)
	Gate -> 'S_DAG'                                    (50)
	Gate -> 'T'                                        (51)
	Gate -> 'T_DAG'                                    (52)
	Gate -> 'SQRT_X'                                   (53)
	Gate -> 'SQRT_X_DAG'                               (54)
	Gate -> 'SQRT_Y'                                   (55)
	Gate -> 'SQRT_Y_DAG'                               (56)
	Gate -> 'RX' Angle                                 (57)
	Gate -> 'RY' Angle                                 (58)
	Gate -> 'RZ' Angle                                 (59)
	Gate -> 'U1' Angle                                 (60)
	Gate -> 'U2' '(' Angle ',' Angle ')'               (61)
	Gate -> 'U3' '(' Angle ',' Angle ',' Angle ')'     (62)
	Gate -> 'SWAP'                                     (63)
	Gate -> 'SQRT_SWAP'                                (64)
	Gate -> 'SQRT_SWAP_DAG'                            (65)
	Gate -> 'ISWAP'                                    (66)
	Gate -> 'FSWAP'                                    (67)
	Gate -> 'SWAP_THETA' Angle                         (68)
	Gate -> 'ROOT_SWAP' Integer                        (69)
	Gate -> 'ROOT_SWAP_DAG' Integer                    (70)
	Gate -> 'QFT' Integer                              (71)
	Gate -> 'QFT_DAG' Integer                          (72)
	ListVar -> Var                                     (73)
	ListVar -> Var ',' ListVar                         (74)
	ControlBasisState -> '[' BasisState ']'            (75)
	ControlBasisStates -> '[' BasisState ',' ListBasisState ']'   (76)
	ListBasisState -> BasisState                       (77)
	ListBasisState -> BasisState ',' ListBasisState    (78)
	ControlBit -> '[' Integer ']'                      (79)
	ControlBits -> '[' Integer ',' ListInteger ']'     (80)
	ListInteger -> Integer                             (81)
	ListInteger -> Integer ',' ListInteger             (82)
	Tuple -> '(' Term ',' ListTerm ')'                 (83)
	ControlTerm -> '[' Term ']'                        (84)
	ControlTerms -> '[' Term ',' ListTerm ']'          (85)
	ListTerm -> Term                                   (86)
	ListTerm -> Term ',' ListTerm                      (87)
	Term1 -> 'if' Term 'then' Term 'else' Term         (88)
	Term1 -> 'let' '{' Var '=' Term '}' 'in' Term      (89)
	Term1 -> 'let' '{' '(' Var ',' ListVar ')' '=' Term '}' 'in' Term   (90)
	Term1 -> Var '<-' Term ';' Term                    (91)
	Term1 -> Var ',' ListVar '<-' Term ';' Term        (92)
	Term1 -> 'case' Term 'of' CaseExpression ListCaseExpression   (93)
	Term1 -> Lambda Var Type '.' Term                  (94)
	Term1 -> Term2 '$' Term1                           (95)
	Term1 -> Term2                                     (96)
	Term2 -> 'with' ControlTerm 'ctrl' ControlBasisState   (97)
	Term2 -> 'with' ControlTerms 'ctrl' ControlBasisStates   (98)
	Term2 -> 'with' ControlTerm 'ctrl' ControlBit      (99)
	Term2 -> 'with' ControlTerms 'ctrl' ControlBits    (100)
	Term2 -> Term2 Term3                               (101)
	Term2 -> Term2 '.' Term3                           (102)
	Term2 -> Term3                                     (103)
	Term3 -> Var                                       (104)
	Term3 -> BasisState                                (105)
	Term3 -> IntegerExpr                               (106)
	Term3 -> 'gate' Gate                               (107)
	Term3 -> Tuple                                     (108)
	Term3 -> Bit                                       (109)
	Term3 -> '()'                                      (110)
	Term3 -> '(' Term ')'                              (111)
	Term -> Term1                                      (112)
	CaseExpression -> Term '->' Term                   (113)
	ListCaseExpression -> CaseExpression               (114)
	ListCaseExpression -> CaseExpression ListCaseExpression   (115)
	Arg -> Var                                         (116)
	ListArg ->                                         (117)
	ListArg -> Arg ListArg                             (118)
	FunctionDefinition -> Var ListArg '=' Term         (119)
	FunctionDefinition -> FunctionDefinition ';'       (120)
	FunctionType -> Var '::' Type                      (121)
	FunctionType -> FunctionType ';'                   (122)
	FunctionDeclaration -> FunctionType ';' FunctionDefinition ';'   (123)
	ListFunctionDeclaration ->                         (124)
	ListFunctionDeclaration -> FunctionDeclaration ListFunctionDeclaration   (125)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	'!'            { PT _ (TS _ 1) }
	'$'            { PT _ (TS _ 2) }
	'('            { PT _ (TS _ 3) }
	'()'           { PT _ (TS _ 4) }
	')'            { PT _ (TS _ 5) }
	'*'            { PT _ (TS _ 6) }
	'**'           { PT _ (TS _ 7) }
	'+'            { PT _ (TS _ 8) }
	','            { PT _ (TS _ 9) }
	'-'            { PT _ (TS _ 10) }
	'->'           { PT _ (TS _ 11) }
	'.'            { PT _ (TS _ 12) }
	'/'            { PT _ (TS _ 13) }
	'::'           { PT _ (TS _ 14) }
	';'            { PT _ (TS _ 15) }
	'<-'           { PT _ (TS _ 16) }
	'='            { PT _ (TS _ 17) }
	'@+'           { PT _ (TS _ 18) }
	'@+i'          { PT _ (TS _ 19) }
	'@-'           { PT _ (TS _ 20) }
	'@-i'          { PT _ (TS _ 21) }
	'@0'           { PT _ (TS _ 22) }
	'@1'           { PT _ (TS _ 23) }
	'Bit'          { PT _ (TS _ 24) }
	'FSWAP'        { PT _ (TS _ 25) }
	'H'            { PT _ (TS _ 26) }
	'ID'           { PT _ (TS _ 27) }
	'ISWAP'        { PT _ (TS _ 28) }
	'Int'          { PT _ (TS _ 29) }
	'QFT'          { PT _ (TS _ 30) }
	'QFT_DAG'      { PT _ (TS _ 31) }
	'Qbit'         { PT _ (TS _ 32) }
	'ROOT_SWAP'    { PT _ (TS _ 33) }
	'ROOT_SWAP_DAG'{ PT _ (TS _ 34) }
	'ROOT_X'       { PT _ (TS _ 35) }
	'ROOT_X_DAG'   { PT _ (TS _ 36) }
	'ROOT_Y'       { PT _ (TS _ 37) }
	'ROOT_Y_DAG'   { PT _ (TS _ 38) }
	'ROOT_Z'       { PT _ (TS _ 39) }
	'ROOT_Z_DAG'   { PT _ (TS _ 40) }
	'RX'           { PT _ (TS _ 41) }
	'RY'           { PT _ (TS _ 42) }
	'RZ'           { PT _ (TS _ 43) }
	'S'            { PT _ (TS _ 44) }
	'SQRT_SWAP'    { PT _ (TS _ 45) }
	'SQRT_SWAP_DAG'{ PT _ (TS _ 46) }
	'SQRT_X'       { PT _ (TS _ 47) }
	'SQRT_X_DAG'   { PT _ (TS _ 48) }
	'SQRT_Y'       { PT _ (TS _ 49) }
	'SQRT_Y_DAG'   { PT _ (TS _ 50) }
	'SWAP'         { PT _ (TS _ 51) }
	'SWAP_THETA'   { PT _ (TS _ 52) }
	'S_DAG'        { PT _ (TS _ 53) }
	'T'            { PT _ (TS _ 54) }
	'T_DAG'        { PT _ (TS _ 55) }
	'U1'           { PT _ (TS _ 56) }
	'U2'           { PT _ (TS _ 57) }
	'U3'           { PT _ (TS _ 58) }
	'X'            { PT _ (TS _ 59) }
	'Y'            { PT _ (TS _ 60) }
	'Z'            { PT _ (TS _ 61) }
	'['            { PT _ (TS _ 62) }
	']'            { PT _ (TS _ 63) }
	'case'         { PT _ (TS _ 64) }
	'ctrl'         { PT _ (TS _ 65) }
	'else'         { PT _ (TS _ 66) }
	'gate'         { PT _ (TS _ 67) }
	'if'           { PT _ (TS _ 68) }
	'in'           { PT _ (TS _ 69) }
	'let'          { PT _ (TS _ 70) }
	'of'           { PT _ (TS _ 71) }
	'then'         { PT _ (TS _ 72) }
	'with'         { PT _ (TS _ 73) }
	'{'            { PT _ (TS _ 74) }
	'}'            { PT _ (TS _ 75) }
	L_doubl        { PT _ (TD $$) }
	L_integ        { PT _ (TI $$) }
	L_BitVariable  { PT _ (T_BitVariable $$) }
	L_Var          { PT _ (T_Var _) }
	L_Lambda       { PT _ (T_Lambda $$) }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_pProgram rule  0
	Double          rule  1
	Integer         rule  2
	BitVariable     rule  3
	Var             rule  4
	Lambda          rule  5
	IntegerExpr     rules 6, 7, 8
	IntegerExpr1    rules 9, 10, 11
	IntegerExpr2    rules 12, 13
	Program         rule  14
	Type            rules 15, 16
	Type1           rules 17, 18
	Type2           rules 19, 20
	Type3           rules 21, 22, 23
	Type5           rules 24, 25, 26, 27, 28
	Type4           rule  29
	Angle           rule  30
	BasisState      rules 31, 32, 33, 34, 35, 36
	Bit             rule  37
	Gate            rules 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72
	ListVar         rules 73, 74
	ControlBasisState rule  75
	ControlBasisStates rule  76
	ListBasisState  rules 77, 78
	ControlBit      rule  79
	ControlBits     rule  80
	ListInteger     rules 81, 82
	Tuple           rule  83
	ControlTerm     rule  84
	ControlTerms    rule  85
	ListTerm        rules 86, 87
	Term1           rules 88, 89, 90, 91, 92, 93, 94, 95, 96
	Term2           rules 97, 98, 99, 100, 101, 102, 103
	Term3           rules 104, 105, 106, 107, 108, 109, 110, 111
	Term            rule  112
	CaseExpression  rule  113
	ListCaseExpression rules 114, 115
	Arg             rule  116
	ListArg         rules 117, 118
	FunctionDefinition rules 119, 120
	FunctionType    rules 121, 122
	FunctionDeclaration rule  123
	ListFunctionDeclaration rules 124, 125

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0

	%start_pProgram -> . Program                        (rule 0)

	L_Var          shift, and enter state 8
	%eof           reduce using rule 124

	Var            goto state 3
	Program        goto state 4
	FunctionType   goto state 5
	FunctionDeclarationgoto state 6
	ListFunctionDeclarationgoto state 7

State 1

	Double -> . L_doubl                                 (rule 1)

	L_doubl        shift, and enter state 2


State 2

	Double -> L_doubl .                                 (rule 1)

	'$'            reduce using rule 1
	'('            reduce using rule 1
	'()'           reduce using rule 1
	')'            reduce using rule 1
	','            reduce using rule 1
	'->'           reduce using rule 1
	'.'            reduce using rule 1
	';'            reduce using rule 1
	'@+'           reduce using rule 1
	'@+i'          reduce using rule 1
	'@-'           reduce using rule 1
	'@-i'          reduce using rule 1
	'@0'           reduce using rule 1
	'@1'           reduce using rule 1
	']'            reduce using rule 1
	'case'         reduce using rule 1
	'else'         reduce using rule 1
	'gate'         reduce using rule 1
	'if'           reduce using rule 1
	'let'          reduce using rule 1
	'of'           reduce using rule 1
	'then'         reduce using rule 1
	'with'         reduce using rule 1
	'}'            reduce using rule 1
	L_integ        reduce using rule 1
	L_BitVariable  reduce using rule 1
	L_Var          reduce using rule 1
	L_Lambda       reduce using rule 1


State 3

	FunctionType -> Var . '::' Type                     (rule 121)

	'::'           shift, and enter state 11


State 4

	%start_pProgram -> Program .                        (rule 0)

	%eof           accept


State 5

	FunctionType -> FunctionType . ';'                  (rule 122)
	FunctionDeclaration -> FunctionType . ';' FunctionDefinition ';'    (rule 123)

	';'            shift, and enter state 10


State 6

	ListFunctionDeclaration -> FunctionDeclaration . ListFunctionDeclaration    (rule 125)

	L_Var          shift, and enter state 8
	%eof           reduce using rule 124

	Var            goto state 3
	FunctionType   goto state 5
	FunctionDeclarationgoto state 6
	ListFunctionDeclarationgoto state 9

State 7

	Program -> ListFunctionDeclaration .                (rule 14)

	%eof           reduce using rule 14


State 8

	Var -> L_Var .                                      (rule 4)

	'!'            reduce using rule 4
	'$'            reduce using rule 4
	'('            reduce using rule 4
	'()'           reduce using rule 4
	')'            reduce using rule 4
	','            reduce using rule 4
	'->'           reduce using rule 4
	'.'            reduce using rule 4
	'::'           reduce using rule 4
	';'            reduce using rule 4
	'<-'           reduce using rule 4
	'='            reduce using rule 4
	'@+'           reduce using rule 4
	'@+i'          reduce using rule 4
	'@-'           reduce using rule 4
	'@-i'          reduce using rule 4
	'@0'           reduce using rule 4
	'@1'           reduce using rule 4
	'Bit'          reduce using rule 4
	'Int'          reduce using rule 4
	'Qbit'         reduce using rule 4
	']'            reduce using rule 4
	'case'         reduce using rule 4
	'else'         reduce using rule 4
	'gate'         reduce using rule 4
	'if'           reduce using rule 4
	'let'          reduce using rule 4
	'of'           reduce using rule 4
	'then'         reduce using rule 4
	'with'         reduce using rule 4
	'}'            reduce using rule 4
	L_integ        reduce using rule 4
	L_BitVariable  reduce using rule 4
	L_Var          reduce using rule 4
	L_Lambda       reduce using rule 4


State 9

	ListFunctionDeclaration -> FunctionDeclaration ListFunctionDeclaration .    (rule 125)

	%eof           reduce using rule 125


State 10

	FunctionType -> FunctionType ';' .                  (rule 122)
	FunctionDeclaration -> FunctionType ';' . FunctionDefinition ';'    (rule 123)

	';'            reduce using rule 122
	L_Var          shift, and enter state 8

	Var            goto state 24
	FunctionDefinitiongoto state 25

State 11

	FunctionType -> Var '::' . Type                     (rule 121)

	'!'            shift, and enter state 18
	'('            shift, and enter state 19
	'()'           shift, and enter state 20
	'Bit'          shift, and enter state 21
	'Int'          shift, and enter state 22
	'Qbit'         shift, and enter state 23

	Type           goto state 12
	Type1          goto state 13
	Type2          goto state 14
	Type3          goto state 15
	Type5          goto state 16
	Type4          goto state 17

State 12

	Type -> Type . '->' Type1                           (rule 15)
	FunctionType -> Var '::' Type .                     (rule 121)

	'->'           shift, and enter state 35
	';'            reduce using rule 121


State 13

	Type -> Type1 .                                     (rule 16)
	Type1 -> Type1 . '+' Type2                          (rule 17)

	')'            reduce using rule 16
	'+'            shift, and enter state 34
	'->'           reduce using rule 16
	'.'            reduce using rule 16
	';'            reduce using rule 16


State 14

	Type1 -> Type2 .                                    (rule 18)
	Type2 -> Type2 . '*' Type3                          (rule 19)

	')'            reduce using rule 18
	'*'            shift, and enter state 33
	'+'            reduce using rule 18
	'->'           reduce using rule 18
	'.'            reduce using rule 18
	';'            reduce using rule 18


State 15

	Type2 -> Type3 .                                    (rule 20)

	')'            reduce using rule 20
	'*'            reduce using rule 20
	'+'            reduce using rule 20
	'->'           reduce using rule 20
	'.'            reduce using rule 20
	';'            reduce using rule 20


State 16

	Type4 -> Type5 .                                    (rule 29)

	')'            reduce using rule 29
	'*'            reduce using rule 29
	'**'           reduce using rule 29
	'+'            reduce using rule 29
	'->'           reduce using rule 29
	'.'            reduce using rule 29
	';'            reduce using rule 29


State 17

	Type3 -> Type4 . '**' Integer                       (rule 21)
	Type3 -> Type4 .                                    (rule 23)

	')'            reduce using rule 23
	'*'            reduce using rule 23
	'**'           shift, and enter state 32
	'+'            reduce using rule 23
	'->'           reduce using rule 23
	'.'            reduce using rule 23
	';'            reduce using rule 23


State 18

	Type3 -> '!' . Type4                                (rule 22)

	'('            shift, and enter state 19
	'()'           shift, and enter state 20
	'Bit'          shift, and enter state 21
	'Int'          shift, and enter state 22
	'Qbit'         shift, and enter state 23

	Type5          goto state 16
	Type4          goto state 31

State 19

	Type5 -> '(' . Type ')'                             (rule 28)

	'!'            shift, and enter state 18
	'('            shift, and enter state 19
	'()'           shift, and enter state 20
	'Bit'          shift, and enter state 21
	'Int'          shift, and enter state 22
	'Qbit'         shift, and enter state 23

	Type           goto state 30
	Type1          goto state 13
	Type2          goto state 14
	Type3          goto state 15
	Type5          goto state 16
	Type4          goto state 17

State 20

	Type5 -> '()' .                                     (rule 27)

	')'            reduce using rule 27
	'*'            reduce using rule 27
	'**'           reduce using rule 27
	'+'            reduce using rule 27
	'->'           reduce using rule 27
	'.'            reduce using rule 27
	';'            reduce using rule 27


State 21

	Type5 -> 'Bit' .                                    (rule 24)

	')'            reduce using rule 24
	'*'            reduce using rule 24
	'**'           reduce using rule 24
	'+'            reduce using rule 24
	'->'           reduce using rule 24
	'.'            reduce using rule 24
	';'            reduce using rule 24


State 22

	Type5 -> 'Int' .                                    (rule 25)

	')'            reduce using rule 25
	'*'            reduce using rule 25
	'**'           reduce using rule 25
	'+'            reduce using rule 25
	'->'           reduce using rule 25
	'.'            reduce using rule 25
	';'            reduce using rule 25


State 23

	Type5 -> 'Qbit' .                                   (rule 26)

	')'            reduce using rule 26
	'*'            reduce using rule 26
	'**'           reduce using rule 26
	'+'            reduce using rule 26
	'->'           reduce using rule 26
	'.'            reduce using rule 26
	';'            reduce using rule 26


State 24

	FunctionDefinition -> Var . ListArg '=' Term        (rule 119)

	'='            reduce using rule 117
	L_Var          shift, and enter state 8

	Var            goto state 27
	Arg            goto state 28
	ListArg        goto state 29

State 25

	FunctionDefinition -> FunctionDefinition . ';'      (rule 120)
	FunctionDeclaration -> FunctionType ';' FunctionDefinition . ';'    (rule 123)

	';'            shift, and enter state 26


State 26

	FunctionDefinition -> FunctionDefinition ';' .      (rule 120)
	FunctionDeclaration -> FunctionType ';' FunctionDefinition ';' .    (rule 123)

	';'            reduce using rule 120
	L_Var          reduce using rule 123
	%eof           reduce using rule 123


State 27

	Arg -> Var .                                        (rule 116)

	'='            reduce using rule 116
	L_Var          reduce using rule 116


State 28

	ListArg -> Arg . ListArg                            (rule 118)

	'='            reduce using rule 117
	L_Var          shift, and enter state 8

	Var            goto state 27
	Arg            goto state 28
	ListArg        goto state 43

State 29

	FunctionDefinition -> Var ListArg . '=' Term        (rule 119)

	'='            shift, and enter state 42


State 30

	Type -> Type . '->' Type1                           (rule 15)
	Type5 -> '(' Type . ')'                             (rule 28)

	')'            shift, and enter state 41
	'->'           shift, and enter state 35


State 31

	Type3 -> '!' Type4 .                                (rule 22)

	')'            reduce using rule 22
	'*'            reduce using rule 22
	'+'            reduce using rule 22
	'->'           reduce using rule 22
	'.'            reduce using rule 22
	';'            reduce using rule 22


State 32

	Type3 -> Type4 '**' . Integer                       (rule 21)

	L_integ        shift, and enter state 40

	Integer        goto state 39

State 33

	Type2 -> Type2 '*' . Type3                          (rule 19)

	'!'            shift, and enter state 18
	'('            shift, and enter state 19
	'()'           shift, and enter state 20
	'Bit'          shift, and enter state 21
	'Int'          shift, and enter state 22
	'Qbit'         shift, and enter state 23

	Type3          goto state 38
	Type5          goto state 16
	Type4          goto state 17

State 34

	Type1 -> Type1 '+' . Type2                          (rule 17)

	'!'            shift, and enter state 18
	'('            shift, and enter state 19
	'()'           shift, and enter state 20
	'Bit'          shift, and enter state 21
	'Int'          shift, and enter state 22
	'Qbit'         shift, and enter state 23

	Type2          goto state 37
	Type3          goto state 15
	Type5          goto state 16
	Type4          goto state 17

State 35

	Type -> Type '->' . Type1                           (rule 15)

	'!'            shift, and enter state 18
	'('            shift, and enter state 19
	'()'           shift, and enter state 20
	'Bit'          shift, and enter state 21
	'Int'          shift, and enter state 22
	'Qbit'         shift, and enter state 23

	Type1          goto state 36
	Type2          goto state 14
	Type3          goto state 15
	Type5          goto state 16
	Type4          goto state 17

State 36

	Type -> Type '->' Type1 .                           (rule 15)
	Type1 -> Type1 . '+' Type2                          (rule 17)

	')'            reduce using rule 15
	'+'            shift, and enter state 34
	'->'           reduce using rule 15
	'.'            reduce using rule 15
	';'            reduce using rule 15


State 37

	Type1 -> Type1 '+' Type2 .                          (rule 17)
	Type2 -> Type2 . '*' Type3                          (rule 19)

	')'            reduce using rule 17
	'*'            shift, and enter state 33
	'+'            reduce using rule 17
	'->'           reduce using rule 17
	'.'            reduce using rule 17
	';'            reduce using rule 17


State 38

	Type2 -> Type2 '*' Type3 .                          (rule 19)

	')'            reduce using rule 19
	'*'            reduce using rule 19
	'+'            reduce using rule 19
	'->'           reduce using rule 19
	'.'            reduce using rule 19
	';'            reduce using rule 19


State 39

	Type3 -> Type4 '**' Integer .                       (rule 21)

	')'            reduce using rule 21
	'*'            reduce using rule 21
	'+'            reduce using rule 21
	'->'           reduce using rule 21
	'.'            reduce using rule 21
	';'            reduce using rule 21


State 40

	Integer -> L_integ .                                (rule 2)

	'$'            reduce using rule 2
	'('            reduce using rule 2
	'()'           reduce using rule 2
	')'            reduce using rule 2
	'*'            reduce using rule 2
	'+'            reduce using rule 2
	','            reduce using rule 2
	'-'            reduce using rule 2
	'->'           reduce using rule 2
	'.'            reduce using rule 2
	'/'            reduce using rule 2
	';'            reduce using rule 2
	'@+'           reduce using rule 2
	'@+i'          reduce using rule 2
	'@-'           reduce using rule 2
	'@-i'          reduce using rule 2
	'@0'           reduce using rule 2
	'@1'           reduce using rule 2
	']'            reduce using rule 2
	'case'         reduce using rule 2
	'else'         reduce using rule 2
	'gate'         reduce using rule 2
	'if'           reduce using rule 2
	'let'          reduce using rule 2
	'of'           reduce using rule 2
	'then'         reduce using rule 2
	'with'         reduce using rule 2
	'}'            reduce using rule 2
	L_integ        reduce using rule 2
	L_BitVariable  reduce using rule 2
	L_Var          reduce using rule 2
	L_Lambda       reduce using rule 2


State 41

	Type5 -> '(' Type ')' .                             (rule 28)

	')'            reduce using rule 28
	'*'            reduce using rule 28
	'**'           reduce using rule 28
	'+'            reduce using rule 28
	'->'           reduce using rule 28
	'.'            reduce using rule 28
	';'            reduce using rule 28


State 42

	FunctionDefinition -> Var ListArg '=' . Term        (rule 119)

	'('            shift, and enter state 58
	'()'           shift, and enter state 59
	'@+'           shift, and enter state 60
	'@+i'          shift, and enter state 61
	'@-'           shift, and enter state 62
	'@-i'          shift, and enter state 63
	'@0'           shift, and enter state 64
	'@1'           shift, and enter state 65
	'case'         shift, and enter state 66
	'gate'         shift, and enter state 67
	'if'           shift, and enter state 68
	'let'          shift, and enter state 69
	'with'         shift, and enter state 70
	L_integ        shift, and enter state 40
	L_BitVariable  shift, and enter state 71
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 72

	Integer        goto state 44
	BitVariable    goto state 45
	Var            goto state 46
	Lambda         goto state 47
	IntegerExpr    goto state 48
	IntegerExpr1   goto state 49
	IntegerExpr2   goto state 50
	BasisState     goto state 51
	Bit            goto state 52
	Tuple          goto state 53
	Term1          goto state 54
	Term2          goto state 55
	Term3          goto state 56
	Term           goto state 57

State 43

	ListArg -> Arg ListArg .                            (rule 118)

	'='            reduce using rule 118


State 44

	IntegerExpr2 -> Integer .                           (rule 12)

	'$'            reduce using rule 12
	'('            reduce using rule 12
	'()'           reduce using rule 12
	')'            reduce using rule 12
	'*'            reduce using rule 12
	'+'            reduce using rule 12
	','            reduce using rule 12
	'-'            reduce using rule 12
	'->'           reduce using rule 12
	'.'            reduce using rule 12
	'/'            reduce using rule 12
	';'            reduce using rule 12
	'@+'           reduce using rule 12
	'@+i'          reduce using rule 12
	'@-'           reduce using rule 12
	'@-i'          reduce using rule 12
	'@0'           reduce using rule 12
	'@1'           reduce using rule 12
	']'            reduce using rule 12
	'case'         reduce using rule 12
	'else'         reduce using rule 12
	'gate'         reduce using rule 12
	'if'           reduce using rule 12
	'let'          reduce using rule 12
	'of'           reduce using rule 12
	'then'         reduce using rule 12
	'with'         reduce using rule 12
	'}'            reduce using rule 12
	L_integ        reduce using rule 12
	L_BitVariable  reduce using rule 12
	L_Var          reduce using rule 12
	L_Lambda       reduce using rule 12


State 45

	Bit -> BitVariable .                                (rule 37)

	'$'            reduce using rule 37
	'('            reduce using rule 37
	'()'           reduce using rule 37
	')'            reduce using rule 37
	','            reduce using rule 37
	'->'           reduce using rule 37
	'.'            reduce using rule 37
	';'            reduce using rule 37
	'@+'           reduce using rule 37
	'@+i'          reduce using rule 37
	'@-'           reduce using rule 37
	'@-i'          reduce using rule 37
	'@0'           reduce using rule 37
	'@1'           reduce using rule 37
	']'            reduce using rule 37
	'case'         reduce using rule 37
	'else'         reduce using rule 37
	'gate'         reduce using rule 37
	'if'           reduce using rule 37
	'let'          reduce using rule 37
	'of'           reduce using rule 37
	'then'         reduce using rule 37
	'with'         reduce using rule 37
	'}'            reduce using rule 37
	L_integ        reduce using rule 37
	L_BitVariable  reduce using rule 37
	L_Var          reduce using rule 37
	L_Lambda       reduce using rule 37


State 46

	Term1 -> Var . '<-' Term ';' Term                   (rule 91)
	Term1 -> Var . ',' ListVar '<-' Term ';' Term       (rule 92)
	Term3 -> Var .                                      (rule 104)

	'$'            reduce using rule 104
	'('            reduce using rule 104
	'()'           reduce using rule 104
	')'            reduce using rule 104
	','            shift, and enter state 126
			(reduce using rule 104)

	'->'           reduce using rule 104
	'.'            reduce using rule 104
	';'            reduce using rule 104
	'<-'           shift, and enter state 127
	'@+'           reduce using rule 104
	'@+i'          reduce using rule 104
	'@-'           reduce using rule 104
	'@-i'          reduce using rule 104
	'@0'           reduce using rule 104
	'@1'           reduce using rule 104
	']'            reduce using rule 104
	'case'         reduce using rule 104
	'else'         reduce using rule 104
	'gate'         reduce using rule 104
	'if'           reduce using rule 104
	'let'          reduce using rule 104
	'of'           reduce using rule 104
	'then'         reduce using rule 104
	'with'         reduce using rule 104
	'}'            reduce using rule 104
	L_integ        reduce using rule 104
	L_BitVariable  reduce using rule 104
	L_Var          reduce using rule 104
	L_Lambda       reduce using rule 104


State 47

	Term1 -> Lambda . Var Type '.' Term                 (rule 94)

	L_Var          shift, and enter state 8

	Var            goto state 125

State 48

	IntegerExpr -> IntegerExpr . '+' IntegerExpr1       (rule 6)
	IntegerExpr -> IntegerExpr . '-' IntegerExpr1       (rule 7)
	Term3 -> IntegerExpr .                              (rule 106)

	'$'            reduce using rule 106
	'('            reduce using rule 106
	'()'           reduce using rule 106
	')'            reduce using rule 106
	'+'            shift, and enter state 123
	','            reduce using rule 106
	'-'            shift, and enter state 124
	'->'           reduce using rule 106
	'.'            reduce using rule 106
	';'            reduce using rule 106
	'@+'           reduce using rule 106
	'@+i'          reduce using rule 106
	'@-'           reduce using rule 106
	'@-i'          reduce using rule 106
	'@0'           reduce using rule 106
	'@1'           reduce using rule 106
	']'            reduce using rule 106
	'case'         reduce using rule 106
	'else'         reduce using rule 106
	'gate'         reduce using rule 106
	'if'           reduce using rule 106
	'let'          reduce using rule 106
	'of'           reduce using rule 106
	'then'         reduce using rule 106
	'with'         reduce using rule 106
	'}'            reduce using rule 106
	L_integ        reduce using rule 106
	L_BitVariable  reduce using rule 106
	L_Var          reduce using rule 106
	L_Lambda       reduce using rule 106


State 49

	IntegerExpr -> IntegerExpr1 .                       (rule 8)
	IntegerExpr1 -> IntegerExpr1 . '*' IntegerExpr2     (rule 9)
	IntegerExpr1 -> IntegerExpr1 . '/' IntegerExpr2     (rule 10)

	'$'            reduce using rule 8
	'('            reduce using rule 8
	'()'           reduce using rule 8
	')'            reduce using rule 8
	'*'            shift, and enter state 121
	'+'            reduce using rule 8
	','            reduce using rule 8
	'-'            reduce using rule 8
	'->'           reduce using rule 8
	'.'            reduce using rule 8
	'/'            shift, and enter state 122
	';'            reduce using rule 8
	'@+'           reduce using rule 8
	'@+i'          reduce using rule 8
	'@-'           reduce using rule 8
	'@-i'          reduce using rule 8
	'@0'           reduce using rule 8
	'@1'           reduce using rule 8
	']'            reduce using rule 8
	'case'         reduce using rule 8
	'else'         reduce using rule 8
	'gate'         reduce using rule 8
	'if'           reduce using rule 8
	'let'          reduce using rule 8
	'of'           reduce using rule 8
	'then'         reduce using rule 8
	'with'         reduce using rule 8
	'}'            reduce using rule 8
	L_integ        reduce using rule 8
	L_BitVariable  reduce using rule 8
	L_Var          reduce using rule 8
	L_Lambda       reduce using rule 8


State 50

	IntegerExpr1 -> IntegerExpr2 .                      (rule 11)

	'$'            reduce using rule 11
	'('            reduce using rule 11
	'()'           reduce using rule 11
	')'            reduce using rule 11
	'*'            reduce using rule 11
	'+'            reduce using rule 11
	','            reduce using rule 11
	'-'            reduce using rule 11
	'->'           reduce using rule 11
	'.'            reduce using rule 11
	'/'            reduce using rule 11
	';'            reduce using rule 11
	'@+'           reduce using rule 11
	'@+i'          reduce using rule 11
	'@-'           reduce using rule 11
	'@-i'          reduce using rule 11
	'@0'           reduce using rule 11
	'@1'           reduce using rule 11
	']'            reduce using rule 11
	'case'         reduce using rule 11
	'else'         reduce using rule 11
	'gate'         reduce using rule 11
	'if'           reduce using rule 11
	'let'          reduce using rule 11
	'of'           reduce using rule 11
	'then'         reduce using rule 11
	'with'         reduce using rule 11
	'}'            reduce using rule 11
	L_integ        reduce using rule 11
	L_BitVariable  reduce using rule 11
	L_Var          reduce using rule 11
	L_Lambda       reduce using rule 11


State 51

	Term3 -> BasisState .                               (rule 105)

	'$'            reduce using rule 105
	'('            reduce using rule 105
	'()'           reduce using rule 105
	')'            reduce using rule 105
	','            reduce using rule 105
	'->'           reduce using rule 105
	'.'            reduce using rule 105
	';'            reduce using rule 105
	'@+'           reduce using rule 105
	'@+i'          reduce using rule 105
	'@-'           reduce using rule 105
	'@-i'          reduce using rule 105
	'@0'           reduce using rule 105
	'@1'           reduce using rule 105
	']'            reduce using rule 105
	'case'         reduce using rule 105
	'else'         reduce using rule 105
	'gate'         reduce using rule 105
	'if'           reduce using rule 105
	'let'          reduce using rule 105
	'of'           reduce using rule 105
	'then'         reduce using rule 105
	'with'         reduce using rule 105
	'}'            reduce using rule 105
	L_integ        reduce using rule 105
	L_BitVariable  reduce using rule 105
	L_Var          reduce using rule 105
	L_Lambda       reduce using rule 105


State 52

	Term3 -> Bit .                                      (rule 109)

	'$'            reduce using rule 109
	'('            reduce using rule 109
	'()'           reduce using rule 109
	')'            reduce using rule 109
	','            reduce using rule 109
	'->'           reduce using rule 109
	'.'            reduce using rule 109
	';'            reduce using rule 109
	'@+'           reduce using rule 109
	'@+i'          reduce using rule 109
	'@-'           reduce using rule 109
	'@-i'          reduce using rule 109
	'@0'           reduce using rule 109
	'@1'           reduce using rule 109
	']'            reduce using rule 109
	'case'         reduce using rule 109
	'else'         reduce using rule 109
	'gate'         reduce using rule 109
	'if'           reduce using rule 109
	'let'          reduce using rule 109
	'of'           reduce using rule 109
	'then'         reduce using rule 109
	'with'         reduce using rule 109
	'}'            reduce using rule 109
	L_integ        reduce using rule 109
	L_BitVariable  reduce using rule 109
	L_Var          reduce using rule 109
	L_Lambda       reduce using rule 109


State 53

	Term3 -> Tuple .                                    (rule 108)

	'$'            reduce using rule 108
	'('            reduce using rule 108
	'()'           reduce using rule 108
	')'            reduce using rule 108
	','            reduce using rule 108
	'->'           reduce using rule 108
	'.'            reduce using rule 108
	';'            reduce using rule 108
	'@+'           reduce using rule 108
	'@+i'          reduce using rule 108
	'@-'           reduce using rule 108
	'@-i'          reduce using rule 108
	'@0'           reduce using rule 108
	'@1'           reduce using rule 108
	']'            reduce using rule 108
	'case'         reduce using rule 108
	'else'         reduce using rule 108
	'gate'         reduce using rule 108
	'if'           reduce using rule 108
	'let'          reduce using rule 108
	'of'           reduce using rule 108
	'then'         reduce using rule 108
	'with'         reduce using rule 108
	'}'            reduce using rule 108
	L_integ        reduce using rule 108
	L_BitVariable  reduce using rule 108
	L_Var          reduce using rule 108
	L_Lambda       reduce using rule 108


State 54

	Term -> Term1 .                                     (rule 112)

	'('            reduce using rule 112
	'()'           reduce using rule 112
	')'            reduce using rule 112
	','            reduce using rule 112
	'->'           reduce using rule 112
	';'            reduce using rule 112
	'@+'           reduce using rule 112
	'@+i'          reduce using rule 112
	'@-'           reduce using rule 112
	'@-i'          reduce using rule 112
	'@0'           reduce using rule 112
	'@1'           reduce using rule 112
	']'            reduce using rule 112
	'case'         reduce using rule 112
	'else'         reduce using rule 112
	'gate'         reduce using rule 112
	'if'           reduce using rule 112
	'let'          reduce using rule 112
	'of'           reduce using rule 112
	'then'         reduce using rule 112
	'with'         reduce using rule 112
	'}'            reduce using rule 112
	L_integ        reduce using rule 112
	L_BitVariable  reduce using rule 112
	L_Var          reduce using rule 112
	L_Lambda       reduce using rule 112


State 55

	Term1 -> Term2 . '$' Term1                          (rule 95)
	Term1 -> Term2 .                                    (rule 96)
	Term2 -> Term2 . Term3                              (rule 101)
	Term2 -> Term2 . '.' Term3                          (rule 102)

	'$'            shift, and enter state 119
	'('            shift, and enter state 58
			(reduce using rule 96)

	'()'           shift, and enter state 59
			(reduce using rule 96)

	')'            reduce using rule 96
	','            reduce using rule 96
	'->'           reduce using rule 96
	'.'            shift, and enter state 120
	';'            reduce using rule 96
	'@+'           shift, and enter state 60
			(reduce using rule 96)

	'@+i'          shift, and enter state 61
			(reduce using rule 96)

	'@-'           shift, and enter state 62
			(reduce using rule 96)

	'@-i'          shift, and enter state 63
			(reduce using rule 96)

	'@0'           shift, and enter state 64
			(reduce using rule 96)

	'@1'           shift, and enter state 65
			(reduce using rule 96)

	']'            reduce using rule 96
	'case'         reduce using rule 96
	'else'         reduce using rule 96
	'gate'         shift, and enter state 67
			(reduce using rule 96)

	'if'           reduce using rule 96
	'let'          reduce using rule 96
	'of'           reduce using rule 96
	'then'         reduce using rule 96
	'with'         reduce using rule 96
	'}'            reduce using rule 96
	L_integ        shift, and enter state 40
			(reduce using rule 96)

	L_BitVariable  shift, and enter state 71
			(reduce using rule 96)

	L_Var          shift, and enter state 8
			(reduce using rule 96)

	L_Lambda       reduce using rule 96

	Integer        goto state 44
	BitVariable    goto state 45
	Var            goto state 117
	IntegerExpr    goto state 48
	IntegerExpr1   goto state 49
	IntegerExpr2   goto state 50
	BasisState     goto state 51
	Bit            goto state 52
	Tuple          goto state 53
	Term3          goto state 118

State 56

	Term2 -> Term3 .                                    (rule 103)

	'$'            reduce using rule 103
	'('            reduce using rule 103
	'()'           reduce using rule 103
	')'            reduce using rule 103
	','            reduce using rule 103
	'->'           reduce using rule 103
	'.'            reduce using rule 103
	';'            reduce using rule 103
	'@+'           reduce using rule 103
	'@+i'          reduce using rule 103
	'@-'           reduce using rule 103
	'@-i'          reduce using rule 103
	'@0'           reduce using rule 103
	'@1'           reduce using rule 103
	']'            reduce using rule 103
	'case'         reduce using rule 103
	'else'         reduce using rule 103
	'gate'         reduce using rule 103
	'if'           reduce using rule 103
	'let'          reduce using rule 103
	'of'           reduce using rule 103
	'then'         reduce using rule 103
	'with'         reduce using rule 103
	'}'            reduce using rule 103
	L_integ        reduce using rule 103
	L_BitVariable  reduce using rule 103
	L_Var          reduce using rule 103
	L_Lambda       reduce using rule 103


State 57

	FunctionDefinition -> Var ListArg '=' Term .        (rule 119)

	';'            reduce using rule 119


State 58

	IntegerExpr2 -> '(' . IntegerExpr ')'               (rule 13)
	Tuple -> '(' . Term ',' ListTerm ')'                (rule 83)
	Term3 -> '(' . Term ')'                             (rule 111)

	'('            shift, and enter state 58
	'()'           shift, and enter state 59
	'@+'           shift, and enter state 60
	'@+i'          shift, and enter state 61
	'@-'           shift, and enter state 62
	'@-i'          shift, and enter state 63
	'@0'           shift, and enter state 64
	'@1'           shift, and enter state 65
	'case'         shift, and enter state 66
	'gate'         shift, and enter state 67
	'if'           shift, and enter state 68
	'let'          shift, and enter state 69
	'with'         shift, and enter state 70
	L_integ        shift, and enter state 40
	L_BitVariable  shift, and enter state 71
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 72

	Integer        goto state 44
	BitVariable    goto state 45
	Var            goto state 46
	Lambda         goto state 47
	IntegerExpr    goto state 115
	IntegerExpr1   goto state 49
	IntegerExpr2   goto state 50
	BasisState     goto state 51
	Bit            goto state 52
	Tuple          goto state 53
	Term1          goto state 54
	Term2          goto state 55
	Term3          goto state 56
	Term           goto state 116

State 59

	Term3 -> '()' .                                     (rule 110)

	'$'            reduce using rule 110
	'('            reduce using rule 110
	'()'           reduce using rule 110
	')'            reduce using rule 110
	','            reduce using rule 110
	'->'           reduce using rule 110
	'.'            reduce using rule 110
	';'            reduce using rule 110
	'@+'           reduce using rule 110
	'@+i'          reduce using rule 110
	'@-'           reduce using rule 110
	'@-i'          reduce using rule 110
	'@0'           reduce using rule 110
	'@1'           reduce using rule 110
	']'            reduce using rule 110
	'case'         reduce using rule 110
	'else'         reduce using rule 110
	'gate'         reduce using rule 110
	'if'           reduce using rule 110
	'let'          reduce using rule 110
	'of'           reduce using rule 110
	'then'         reduce using rule 110
	'with'         reduce using rule 110
	'}'            reduce using rule 110
	L_integ        reduce using rule 110
	L_BitVariable  reduce using rule 110
	L_Var          reduce using rule 110
	L_Lambda       reduce using rule 110


State 60

	BasisState -> '@+' .                                (rule 33)

	'$'            reduce using rule 33
	'('            reduce using rule 33
	'()'           reduce using rule 33
	')'            reduce using rule 33
	','            reduce using rule 33
	'->'           reduce using rule 33
	'.'            reduce using rule 33
	';'            reduce using rule 33
	'@+'           reduce using rule 33
	'@+i'          reduce using rule 33
	'@-'           reduce using rule 33
	'@-i'          reduce using rule 33
	'@0'           reduce using rule 33
	'@1'           reduce using rule 33
	']'            reduce using rule 33
	'case'         reduce using rule 33
	'else'         reduce using rule 33
	'gate'         reduce using rule 33
	'if'           reduce using rule 33
	'let'          reduce using rule 33
	'of'           reduce using rule 33
	'then'         reduce using rule 33
	'with'         reduce using rule 33
	'}'            reduce using rule 33
	L_integ        reduce using rule 33
	L_BitVariable  reduce using rule 33
	L_Var          reduce using rule 33
	L_Lambda       reduce using rule 33


State 61

	BasisState -> '@+i' .                               (rule 35)

	'$'            reduce using rule 35
	'('            reduce using rule 35
	'()'           reduce using rule 35
	')'            reduce using rule 35
	','            reduce using rule 35
	'->'           reduce using rule 35
	'.'            reduce using rule 35
	';'            reduce using rule 35
	'@+'           reduce using rule 35
	'@+i'          reduce using rule 35
	'@-'           reduce using rule 35
	'@-i'          reduce using rule 35
	'@0'           reduce using rule 35
	'@1'           reduce using rule 35
	']'            reduce using rule 35
	'case'         reduce using rule 35
	'else'         reduce using rule 35
	'gate'         reduce using rule 35
	'if'           reduce using rule 35
	'let'          reduce using rule 35
	'of'           reduce using rule 35
	'then'         reduce using rule 35
	'with'         reduce using rule 35
	'}'            reduce using rule 35
	L_integ        reduce using rule 35
	L_BitVariable  reduce using rule 35
	L_Var          reduce using rule 35
	L_Lambda       reduce using rule 35


State 62

	BasisState -> '@-' .                                (rule 34)

	'$'            reduce using rule 34
	'('            reduce using rule 34
	'()'           reduce using rule 34
	')'            reduce using rule 34
	','            reduce using rule 34
	'->'           reduce using rule 34
	'.'            reduce using rule 34
	';'            reduce using rule 34
	'@+'           reduce using rule 34
	'@+i'          reduce using rule 34
	'@-'           reduce using rule 34
	'@-i'          reduce using rule 34
	'@0'           reduce using rule 34
	'@1'           reduce using rule 34
	']'            reduce using rule 34
	'case'         reduce using rule 34
	'else'         reduce using rule 34
	'gate'         reduce using rule 34
	'if'           reduce using rule 34
	'let'          reduce using rule 34
	'of'           reduce using rule 34
	'then'         reduce using rule 34
	'with'         reduce using rule 34
	'}'            reduce using rule 34
	L_integ        reduce using rule 34
	L_BitVariable  reduce using rule 34
	L_Var          reduce using rule 34
	L_Lambda       reduce using rule 34


State 63

	BasisState -> '@-i' .                               (rule 36)

	'$'            reduce using rule 36
	'('            reduce using rule 36
	'()'           reduce using rule 36
	')'            reduce using rule 36
	','            reduce using rule 36
	'->'           reduce using rule 36
	'.'            reduce using rule 36
	';'            reduce using rule 36
	'@+'           reduce using rule 36
	'@+i'          reduce using rule 36
	'@-'           reduce using rule 36
	'@-i'          reduce using rule 36
	'@0'           reduce using rule 36
	'@1'           reduce using rule 36
	']'            reduce using rule 36
	'case'         reduce using rule 36
	'else'         reduce using rule 36
	'gate'         reduce using rule 36
	'if'           reduce using rule 36
	'let'          reduce using rule 36
	'of'           reduce using rule 36
	'then'         reduce using rule 36
	'with'         reduce using rule 36
	'}'            reduce using rule 36
	L_integ        reduce using rule 36
	L_BitVariable  reduce using rule 36
	L_Var          reduce using rule 36
	L_Lambda       reduce using rule 36


State 64

	BasisState -> '@0' .                                (rule 31)

	'$'            reduce using rule 31
	'('            reduce using rule 31
	'()'           reduce using rule 31
	')'            reduce using rule 31
	','            reduce using rule 31
	'->'           reduce using rule 31
	'.'            reduce using rule 31
	';'            reduce using rule 31
	'@+'           reduce using rule 31
	'@+i'          reduce using rule 31
	'@-'           reduce using rule 31
	'@-i'          reduce using rule 31
	'@0'           reduce using rule 31
	'@1'           reduce using rule 31
	']'            reduce using rule 31
	'case'         reduce using rule 31
	'else'         reduce using rule 31
	'gate'         reduce using rule 31
	'if'           reduce using rule 31
	'let'          reduce using rule 31
	'of'           reduce using rule 31
	'then'         reduce using rule 31
	'with'         reduce using rule 31
	'}'            reduce using rule 31
	L_integ        reduce using rule 31
	L_BitVariable  reduce using rule 31
	L_Var          reduce using rule 31
	L_Lambda       reduce using rule 31


State 65

	BasisState -> '@1' .                                (rule 32)

	'$'            reduce using rule 32
	'('            reduce using rule 32
	'()'           reduce using rule 32
	')'            reduce using rule 32
	','            reduce using rule 32
	'->'           reduce using rule 32
	'.'            reduce using rule 32
	';'            reduce using rule 32
	'@+'           reduce using rule 32
	'@+i'          reduce using rule 32
	'@-'           reduce using rule 32
	'@-i'          reduce using rule 32
	'@0'           reduce using rule 32
	'@1'           reduce using rule 32
	']'            reduce using rule 32
	'case'         reduce using rule 32
	'else'         reduce using rule 32
	'gate'         reduce using rule 32
	'if'           reduce using rule 32
	'let'          reduce using rule 32
	'of'           reduce using rule 32
	'then'         reduce using rule 32
	'with'         reduce using rule 32
	'}'            reduce using rule 32
	L_integ        reduce using rule 32
	L_BitVariable  reduce using rule 32
	L_Var          reduce using rule 32
	L_Lambda       reduce using rule 32


State 66

	Term1 -> 'case' . Term 'of' CaseExpression ListCaseExpression    (rule 93)

	'('            shift, and enter state 58
	'()'           shift, and enter state 59
	'@+'           shift, and enter state 60
	'@+i'          shift, and enter state 61
	'@-'           shift, and enter state 62
	'@-i'          shift, and enter state 63
	'@0'           shift, and enter state 64
	'@1'           shift, and enter state 65
	'case'         shift, and enter state 66
	'gate'         shift, and enter state 67
	'if'           shift, and enter state 68
	'let'          shift, and enter state 69
	'with'         shift, and enter state 70
	L_integ        shift, and enter state 40
	L_BitVariable  shift, and enter state 71
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 72

	Integer        goto state 44
	BitVariable    goto state 45
	Var            goto state 46
	Lambda         goto state 47
	IntegerExpr    goto state 48
	IntegerExpr1   goto state 49
	IntegerExpr2   goto state 50
	BasisState     goto state 51
	Bit            goto state 52
	Tuple          goto state 53
	Term1          goto state 54
	Term2          goto state 55
	Term3          goto state 56
	Term           goto state 114

State 67

	Term3 -> 'gate' . Gate                              (rule 107)

	'FSWAP'        shift, and enter state 79
	'H'            shift, and enter state 80
	'ID'           shift, and enter state 81
	'ISWAP'        shift, and enter state 82
	'QFT'          shift, and enter state 83
	'QFT_DAG'      shift, and enter state 84
	'ROOT_SWAP'    shift, and enter state 85
	'ROOT_SWAP_DAG'shift, and enter state 86
	'ROOT_X'       shift, and enter state 87
	'ROOT_X_DAG'   shift, and enter state 88
	'ROOT_Y'       shift, and enter state 89
	'ROOT_Y_DAG'   shift, and enter state 90
	'ROOT_Z'       shift, and enter state 91
	'ROOT_Z_DAG'   shift, and enter state 92
	'RX'           shift, and enter state 93
	'RY'           shift, and enter state 94
	'RZ'           shift, and enter state 95
	'S'            shift, and enter state 96
	'SQRT_SWAP'    shift, and enter state 97
	'SQRT_SWAP_DAG'shift, and enter state 98
	'SQRT_X'       shift, and enter state 99
	'SQRT_X_DAG'   shift, and enter state 100
	'SQRT_Y'       shift, and enter state 101
	'SQRT_Y_DAG'   shift, and enter state 102
	'SWAP'         shift, and enter state 103
	'SWAP_THETA'   shift, and enter state 104
	'S_DAG'        shift, and enter state 105
	'T'            shift, and enter state 106
	'T_DAG'        shift, and enter state 107
	'U1'           shift, and enter state 108
	'U2'           shift, and enter state 109
	'U3'           shift, and enter state 110
	'X'            shift, and enter state 111
	'Y'            shift, and enter state 112
	'Z'            shift, and enter state 113

	Gate           goto state 78

State 68

	Term1 -> 'if' . Term 'then' Term 'else' Term        (rule 88)

	'('            shift, and enter state 58
	'()'           shift, and enter state 59
	'@+'           shift, and enter state 60
	'@+i'          shift, and enter state 61
	'@-'           shift, and enter state 62
	'@-i'          shift, and enter state 63
	'@0'           shift, and enter state 64
	'@1'           shift, and enter state 65
	'case'         shift, and enter state 66
	'gate'         shift, and enter state 67
	'if'           shift, and enter state 68
	'let'          shift, and enter state 69
	'with'         shift, and enter state 70
	L_integ        shift, and enter state 40
	L_BitVariable  shift, and enter state 71
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 72

	Integer        goto state 44
	BitVariable    goto state 45
	Var            goto state 46
	Lambda         goto state 47
	IntegerExpr    goto state 48
	IntegerExpr1   goto state 49
	IntegerExpr2   goto state 50
	BasisState     goto state 51
	Bit            goto state 52
	Tuple          goto state 53
	Term1          goto state 54
	Term2          goto state 55
	Term3          goto state 56
	Term           goto state 77

State 69

	Term1 -> 'let' . '{' Var '=' Term '}' 'in' Term     (rule 89)
	Term1 -> 'let' . '{' '(' Var ',' ListVar ')' '=' Term '}' 'in' Term    (rule 90)

	'{'            shift, and enter state 76


State 70

	Term2 -> 'with' . ControlTerm 'ctrl' ControlBasisState    (rule 97)
	Term2 -> 'with' . ControlTerms 'ctrl' ControlBasisStates    (rule 98)
	Term2 -> 'with' . ControlTerm 'ctrl' ControlBit     (rule 99)
	Term2 -> 'with' . ControlTerms 'ctrl' ControlBits    (rule 100)

	'['            shift, and enter state 75

	ControlTerm    goto state 73
	ControlTerms   goto state 74

State 71

	BitVariable -> L_BitVariable .                      (rule 3)

	'$'            reduce using rule 3
	'('            reduce using rule 3
	'()'           reduce using rule 3
	')'            reduce using rule 3
	','            reduce using rule 3
	'->'           reduce using rule 3
	'.'            reduce using rule 3
	';'            reduce using rule 3
	'@+'           reduce using rule 3
	'@+i'          reduce using rule 3
	'@-'           reduce using rule 3
	'@-i'          reduce using rule 3
	'@0'           reduce using rule 3
	'@1'           reduce using rule 3
	']'            reduce using rule 3
	'case'         reduce using rule 3
	'else'         reduce using rule 3
	'gate'         reduce using rule 3
	'if'           reduce using rule 3
	'let'          reduce using rule 3
	'of'           reduce using rule 3
	'then'         reduce using rule 3
	'with'         reduce using rule 3
	'}'            reduce using rule 3
	L_integ        reduce using rule 3
	L_BitVariable  reduce using rule 3
	L_Var          reduce using rule 3
	L_Lambda       reduce using rule 3


State 72

	Lambda -> L_Lambda .                                (rule 5)

	L_Var          reduce using rule 5


State 73

	Term2 -> 'with' ControlTerm . 'ctrl' ControlBasisState    (rule 97)
	Term2 -> 'with' ControlTerm . 'ctrl' ControlBit     (rule 99)

	'ctrl'         shift, and enter state 166


State 74

	Term2 -> 'with' ControlTerms . 'ctrl' ControlBasisStates    (rule 98)
	Term2 -> 'with' ControlTerms . 'ctrl' ControlBits    (rule 100)

	'ctrl'         shift, and enter state 165


State 75

	ControlTerm -> '[' . Term ']'                       (rule 84)
	ControlTerms -> '[' . Term ',' ListTerm ']'         (rule 85)

	'('            shift, and enter state 58
	'()'           shift, and enter state 59
	'@+'           shift, and enter state 60
	'@+i'          shift, and enter state 61
	'@-'           shift, and enter state 62
	'@-i'          shift, and enter state 63
	'@0'           shift, and enter state 64
	'@1'           shift, and enter state 65
	'case'         shift, and enter state 66
	'gate'         shift, and enter state 67
	'if'           shift, and enter state 68
	'let'          shift, and enter state 69
	'with'         shift, and enter state 70
	L_integ        shift, and enter state 40
	L_BitVariable  shift, and enter state 71
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 72

	Integer        goto state 44
	BitVariable    goto state 45
	Var            goto state 46
	Lambda         goto state 47
	IntegerExpr    goto state 48
	IntegerExpr1   goto state 49
	IntegerExpr2   goto state 50
	BasisState     goto state 51
	Bit            goto state 52
	Tuple          goto state 53
	Term1          goto state 54
	Term2          goto state 55
	Term3          goto state 56
	Term           goto state 164

State 76

	Term1 -> 'let' '{' . Var '=' Term '}' 'in' Term     (rule 89)
	Term1 -> 'let' '{' . '(' Var ',' ListVar ')' '=' Term '}' 'in' Term    (rule 90)

	'('            shift, and enter state 163
	L_Var          shift, and enter state 8

	Var            goto state 162

State 77

	Term1 -> 'if' Term . 'then' Term 'else' Term        (rule 88)

	'then'         shift, and enter state 161


State 78

	Term3 -> 'gate' Gate .                              (rule 107)

	'$'            reduce using rule 107
	'('            reduce using rule 107
	'()'           reduce using rule 107
	')'            reduce using rule 107
	','            reduce using rule 107
	'->'           reduce using rule 107
	'.'            reduce using rule 107
	';'            reduce using rule 107
	'@+'           reduce using rule 107
	'@+i'          reduce using rule 107
	'@-'           reduce using rule 107
	'@-i'          reduce using rule 107
	'@0'           reduce using rule 107
	'@1'           reduce using rule 107
	']'            reduce using rule 107
	'case'         reduce using rule 107
	'else'         reduce using rule 107
	'gate'         reduce using rule 107
	'if'           reduce using rule 107
	'let'          reduce using rule 107
	'of'           reduce using rule 107
	'then'         reduce using rule 107
	'with'         reduce using rule 107
	'}'            reduce using rule 107
	L_integ        reduce using rule 107
	L_BitVariable  reduce using rule 107
	L_Var          reduce using rule 107
	L_Lambda       reduce using rule 107


State 79

	Gate -> 'FSWAP' .                                   (rule 67)

	'$'            reduce using rule 67
	'('            reduce using rule 67
	'()'           reduce using rule 67
	')'            reduce using rule 67
	','            reduce using rule 67
	'->'           reduce using rule 67
	'.'            reduce using rule 67
	';'            reduce using rule 67
	'@+'           reduce using rule 67
	'@+i'          reduce using rule 67
	'@-'           reduce using rule 67
	'@-i'          reduce using rule 67
	'@0'           reduce using rule 67
	'@1'           reduce using rule 67
	']'            reduce using rule 67
	'case'         reduce using rule 67
	'else'         reduce using rule 67
	'gate'         reduce using rule 67
	'if'           reduce using rule 67
	'let'          reduce using rule 67
	'of'           reduce using rule 67
	'then'         reduce using rule 67
	'with'         reduce using rule 67
	'}'            reduce using rule 67
	L_integ        reduce using rule 67
	L_BitVariable  reduce using rule 67
	L_Var          reduce using rule 67
	L_Lambda       reduce using rule 67


State 80

	Gate -> 'H' .                                       (rule 38)

	'$'            reduce using rule 38
	'('            reduce using rule 38
	'()'           reduce using rule 38
	')'            reduce using rule 38
	','            reduce using rule 38
	'->'           reduce using rule 38
	'.'            reduce using rule 38
	';'            reduce using rule 38
	'@+'           reduce using rule 38
	'@+i'          reduce using rule 38
	'@-'           reduce using rule 38
	'@-i'          reduce using rule 38
	'@0'           reduce using rule 38
	'@1'           reduce using rule 38
	']'            reduce using rule 38
	'case'         reduce using rule 38
	'else'         reduce using rule 38
	'gate'         reduce using rule 38
	'if'           reduce using rule 38
	'let'          reduce using rule 38
	'of'           reduce using rule 38
	'then'         reduce using rule 38
	'with'         reduce using rule 38
	'}'            reduce using rule 38
	L_integ        reduce using rule 38
	L_BitVariable  reduce using rule 38
	L_Var          reduce using rule 38
	L_Lambda       reduce using rule 38


State 81

	Gate -> 'ID' .                                      (rule 42)

	'$'            reduce using rule 42
	'('            reduce using rule 42
	'()'           reduce using rule 42
	')'            reduce using rule 42
	','            reduce using rule 42
	'->'           reduce using rule 42
	'.'            reduce using rule 42
	';'            reduce using rule 42
	'@+'           reduce using rule 42
	'@+i'          reduce using rule 42
	'@-'           reduce using rule 42
	'@-i'          reduce using rule 42
	'@0'           reduce using rule 42
	'@1'           reduce using rule 42
	']'            reduce using rule 42
	'case'         reduce using rule 42
	'else'         reduce using rule 42
	'gate'         reduce using rule 42
	'if'           reduce using rule 42
	'let'          reduce using rule 42
	'of'           reduce using rule 42
	'then'         reduce using rule 42
	'with'         reduce using rule 42
	'}'            reduce using rule 42
	L_integ        reduce using rule 42
	L_BitVariable  reduce using rule 42
	L_Var          reduce using rule 42
	L_Lambda       reduce using rule 42


State 82

	Gate -> 'ISWAP' .                                   (rule 66)

	'$'            reduce using rule 66
	'('            reduce using rule 66
	'()'           reduce using rule 66
	')'            reduce using rule 66
	','            reduce using rule 66
	'->'           reduce using rule 66
	'.'            reduce using rule 66
	';'            reduce using rule 66
	'@+'           reduce using rule 66
	'@+i'          reduce using rule 66
	'@-'           reduce using rule 66
	'@-i'          reduce using rule 66
	'@0'           reduce using rule 66
	'@1'           reduce using rule 66
	']'            reduce using rule 66
	'case'         reduce using rule 66
	'else'         reduce using rule 66
	'gate'         reduce using rule 66
	'if'           reduce using rule 66
	'let'          reduce using rule 66
	'of'           reduce using rule 66
	'then'         reduce using rule 66
	'with'         reduce using rule 66
	'}'            reduce using rule 66
	L_integ        reduce using rule 66
	L_BitVariable  reduce using rule 66
	L_Var          reduce using rule 66
	L_Lambda       reduce using rule 66


State 83

	Gate -> 'QFT' . Integer                             (rule 71)

	L_integ        shift, and enter state 40

	Integer        goto state 160

State 84

	Gate -> 'QFT_DAG' . Integer                         (rule 72)

	L_integ        shift, and enter state 40

	Integer        goto state 159

State 85

	Gate -> 'ROOT_SWAP' . Integer                       (rule 69)

	L_integ        shift, and enter state 40

	Integer        goto state 158

State 86

	Gate -> 'ROOT_SWAP_DAG' . Integer                   (rule 70)

	L_integ        shift, and enter state 40

	Integer        goto state 157

State 87

	Gate -> 'ROOT_X' . Integer                          (rule 43)

	L_integ        shift, and enter state 40

	Integer        goto state 156

State 88

	Gate -> 'ROOT_X_DAG' . Integer                      (rule 44)

	L_integ        shift, and enter state 40

	Integer        goto state 155

State 89

	Gate -> 'ROOT_Y' . Integer                          (rule 45)

	L_integ        shift, and enter state 40

	Integer        goto state 154

State 90

	Gate -> 'ROOT_Y_DAG' . Integer                      (rule 46)

	L_integ        shift, and enter state 40

	Integer        goto state 153

State 91

	Gate -> 'ROOT_Z' . Integer                          (rule 47)

	L_integ        shift, and enter state 40

	Integer        goto state 152

State 92

	Gate -> 'ROOT_Z_DAG' . Integer                      (rule 48)

	L_integ        shift, and enter state 40

	Integer        goto state 151

State 93

	Gate -> 'RX' . Angle                                (rule 57)

	L_doubl        shift, and enter state 2

	Double         goto state 145
	Angle          goto state 150

State 94

	Gate -> 'RY' . Angle                                (rule 58)

	L_doubl        shift, and enter state 2

	Double         goto state 145
	Angle          goto state 149

State 95

	Gate -> 'RZ' . Angle                                (rule 59)

	L_doubl        shift, and enter state 2

	Double         goto state 145
	Angle          goto state 148

State 96

	Gate -> 'S' .                                       (rule 49)

	'$'            reduce using rule 49
	'('            reduce using rule 49
	'()'           reduce using rule 49
	')'            reduce using rule 49
	','            reduce using rule 49
	'->'           reduce using rule 49
	'.'            reduce using rule 49
	';'            reduce using rule 49
	'@+'           reduce using rule 49
	'@+i'          reduce using rule 49
	'@-'           reduce using rule 49
	'@-i'          reduce using rule 49
	'@0'           reduce using rule 49
	'@1'           reduce using rule 49
	']'            reduce using rule 49
	'case'         reduce using rule 49
	'else'         reduce using rule 49
	'gate'         reduce using rule 49
	'if'           reduce using rule 49
	'let'          reduce using rule 49
	'of'           reduce using rule 49
	'then'         reduce using rule 49
	'with'         reduce using rule 49
	'}'            reduce using rule 49
	L_integ        reduce using rule 49
	L_BitVariable  reduce using rule 49
	L_Var          reduce using rule 49
	L_Lambda       reduce using rule 49


State 97

	Gate -> 'SQRT_SWAP' .                               (rule 64)

	'$'            reduce using rule 64
	'('            reduce using rule 64
	'()'           reduce using rule 64
	')'            reduce using rule 64
	','            reduce using rule 64
	'->'           reduce using rule 64
	'.'            reduce using rule 64
	';'            reduce using rule 64
	'@+'           reduce using rule 64
	'@+i'          reduce using rule 64
	'@-'           reduce using rule 64
	'@-i'          reduce using rule 64
	'@0'           reduce using rule 64
	'@1'           reduce using rule 64
	']'            reduce using rule 64
	'case'         reduce using rule 64
	'else'         reduce using rule 64
	'gate'         reduce using rule 64
	'if'           reduce using rule 64
	'let'          reduce using rule 64
	'of'           reduce using rule 64
	'then'         reduce using rule 64
	'with'         reduce using rule 64
	'}'            reduce using rule 64
	L_integ        reduce using rule 64
	L_BitVariable  reduce using rule 64
	L_Var          reduce using rule 64
	L_Lambda       reduce using rule 64


State 98

	Gate -> 'SQRT_SWAP_DAG' .                           (rule 65)

	'$'            reduce using rule 65
	'('            reduce using rule 65
	'()'           reduce using rule 65
	')'            reduce using rule 65
	','            reduce using rule 65
	'->'           reduce using rule 65
	'.'            reduce using rule 65
	';'            reduce using rule 65
	'@+'           reduce using rule 65
	'@+i'          reduce using rule 65
	'@-'           reduce using rule 65
	'@-i'          reduce using rule 65
	'@0'           reduce using rule 65
	'@1'           reduce using rule 65
	']'            reduce using rule 65
	'case'         reduce using rule 65
	'else'         reduce using rule 65
	'gate'         reduce using rule 65
	'if'           reduce using rule 65
	'let'          reduce using rule 65
	'of'           reduce using rule 65
	'then'         reduce using rule 65
	'with'         reduce using rule 65
	'}'            reduce using rule 65
	L_integ        reduce using rule 65
	L_BitVariable  reduce using rule 65
	L_Var          reduce using rule 65
	L_Lambda       reduce using rule 65


State 99

	Gate -> 'SQRT_X' .                                  (rule 53)

	'$'            reduce using rule 53
	'('            reduce using rule 53
	'()'           reduce using rule 53
	')'            reduce using rule 53
	','            reduce using rule 53
	'->'           reduce using rule 53
	'.'            reduce using rule 53
	';'            reduce using rule 53
	'@+'           reduce using rule 53
	'@+i'          reduce using rule 53
	'@-'           reduce using rule 53
	'@-i'          reduce using rule 53
	'@0'           reduce using rule 53
	'@1'           reduce using rule 53
	']'            reduce using rule 53
	'case'         reduce using rule 53
	'else'         reduce using rule 53
	'gate'         reduce using rule 53
	'if'           reduce using rule 53
	'let'          reduce using rule 53
	'of'           reduce using rule 53
	'then'         reduce using rule 53
	'with'         reduce using rule 53
	'}'            reduce using rule 53
	L_integ        reduce using rule 53
	L_BitVariable  reduce using rule 53
	L_Var          reduce using rule 53
	L_Lambda       reduce using rule 53


State 100

	Gate -> 'SQRT_X_DAG' .                              (rule 54)

	'$'            reduce using rule 54
	'('            reduce using rule 54
	'()'           reduce using rule 54
	')'            reduce using rule 54
	','            reduce using rule 54
	'->'           reduce using rule 54
	'.'            reduce using rule 54
	';'            reduce using rule 54
	'@+'           reduce using rule 54
	'@+i'          reduce using rule 54
	'@-'           reduce using rule 54
	'@-i'          reduce using rule 54
	'@0'           reduce using rule 54
	'@1'           reduce using rule 54
	']'            reduce using rule 54
	'case'         reduce using rule 54
	'else'         reduce using rule 54
	'gate'         reduce using rule 54
	'if'           reduce using rule 54
	'let'          reduce using rule 54
	'of'           reduce using rule 54
	'then'         reduce using rule 54
	'with'         reduce using rule 54
	'}'            reduce using rule 54
	L_integ        reduce using rule 54
	L_BitVariable  reduce using rule 54
	L_Var          reduce using rule 54
	L_Lambda       reduce using rule 54


State 101

	Gate -> 'SQRT_Y' .                                  (rule 55)

	'$'            reduce using rule 55
	'('            reduce using rule 55
	'()'           reduce using rule 55
	')'            reduce using rule 55
	','            reduce using rule 55
	'->'           reduce using rule 55
	'.'            reduce using rule 55
	';'            reduce using rule 55
	'@+'           reduce using rule 55
	'@+i'          reduce using rule 55
	'@-'           reduce using rule 55
	'@-i'          reduce using rule 55
	'@0'           reduce using rule 55
	'@1'           reduce using rule 55
	']'            reduce using rule 55
	'case'         reduce using rule 55
	'else'         reduce using rule 55
	'gate'         reduce using rule 55
	'if'           reduce using rule 55
	'let'          reduce using rule 55
	'of'           reduce using rule 55
	'then'         reduce using rule 55
	'with'         reduce using rule 55
	'}'            reduce using rule 55
	L_integ        reduce using rule 55
	L_BitVariable  reduce using rule 55
	L_Var          reduce using rule 55
	L_Lambda       reduce using rule 55


State 102

	Gate -> 'SQRT_Y_DAG' .                              (rule 56)

	'$'            reduce using rule 56
	'('            reduce using rule 56
	'()'           reduce using rule 56
	')'            reduce using rule 56
	','            reduce using rule 56
	'->'           reduce using rule 56
	'.'            reduce using rule 56
	';'            reduce using rule 56
	'@+'           reduce using rule 56
	'@+i'          reduce using rule 56
	'@-'           reduce using rule 56
	'@-i'          reduce using rule 56
	'@0'           reduce using rule 56
	'@1'           reduce using rule 56
	']'            reduce using rule 56
	'case'         reduce using rule 56
	'else'         reduce using rule 56
	'gate'         reduce using rule 56
	'if'           reduce using rule 56
	'let'          reduce using rule 56
	'of'           reduce using rule 56
	'then'         reduce using rule 56
	'with'         reduce using rule 56
	'}'            reduce using rule 56
	L_integ        reduce using rule 56
	L_BitVariable  reduce using rule 56
	L_Var          reduce using rule 56
	L_Lambda       reduce using rule 56


State 103

	Gate -> 'SWAP' .                                    (rule 63)

	'$'            reduce using rule 63
	'('            reduce using rule 63
	'()'           reduce using rule 63
	')'            reduce using rule 63
	','            reduce using rule 63
	'->'           reduce using rule 63
	'.'            reduce using rule 63
	';'            reduce using rule 63
	'@+'           reduce using rule 63
	'@+i'          reduce using rule 63
	'@-'           reduce using rule 63
	'@-i'          reduce using rule 63
	'@0'           reduce using rule 63
	'@1'           reduce using rule 63
	']'            reduce using rule 63
	'case'         reduce using rule 63
	'else'         reduce using rule 63
	'gate'         reduce using rule 63
	'if'           reduce using rule 63
	'let'          reduce using rule 63
	'of'           reduce using rule 63
	'then'         reduce using rule 63
	'with'         reduce using rule 63
	'}'            reduce using rule 63
	L_integ        reduce using rule 63
	L_BitVariable  reduce using rule 63
	L_Var          reduce using rule 63
	L_Lambda       reduce using rule 63


State 104

	Gate -> 'SWAP_THETA' . Angle                        (rule 68)

	L_doubl        shift, and enter state 2

	Double         goto state 145
	Angle          goto state 147

State 105

	Gate -> 'S_DAG' .                                   (rule 50)

	'$'            reduce using rule 50
	'('            reduce using rule 50
	'()'           reduce using rule 50
	')'            reduce using rule 50
	','            reduce using rule 50
	'->'           reduce using rule 50
	'.'            reduce using rule 50
	';'            reduce using rule 50
	'@+'           reduce using rule 50
	'@+i'          reduce using rule 50
	'@-'           reduce using rule 50
	'@-i'          reduce using rule 50
	'@0'           reduce using rule 50
	'@1'           reduce using rule 50
	']'            reduce using rule 50
	'case'         reduce using rule 50
	'else'         reduce using rule 50
	'gate'         reduce using rule 50
	'if'           reduce using rule 50
	'let'          reduce using rule 50
	'of'           reduce using rule 50
	'then'         reduce using rule 50
	'with'         reduce using rule 50
	'}'            reduce using rule 50
	L_integ        reduce using rule 50
	L_BitVariable  reduce using rule 50
	L_Var          reduce using rule 50
	L_Lambda       reduce using rule 50


State 106

	Gate -> 'T' .                                       (rule 51)

	'$'            reduce using rule 51
	'('            reduce using rule 51
	'()'           reduce using rule 51
	')'            reduce using rule 51
	','            reduce using rule 51
	'->'           reduce using rule 51
	'.'            reduce using rule 51
	';'            reduce using rule 51
	'@+'           reduce using rule 51
	'@+i'          reduce using rule 51
	'@-'           reduce using rule 51
	'@-i'          reduce using rule 51
	'@0'           reduce using rule 51
	'@1'           reduce using rule 51
	']'            reduce using rule 51
	'case'         reduce using rule 51
	'else'         reduce using rule 51
	'gate'         reduce using rule 51
	'if'           reduce using rule 51
	'let'          reduce using rule 51
	'of'           reduce using rule 51
	'then'         reduce using rule 51
	'with'         reduce using rule 51
	'}'            reduce using rule 51
	L_integ        reduce using rule 51
	L_BitVariable  reduce using rule 51
	L_Var          reduce using rule 51
	L_Lambda       reduce using rule 51


State 107

	Gate -> 'T_DAG' .                                   (rule 52)

	'$'            reduce using rule 52
	'('            reduce using rule 52
	'()'           reduce using rule 52
	')'            reduce using rule 52
	','            reduce using rule 52
	'->'           reduce using rule 52
	'.'            reduce using rule 52
	';'            reduce using rule 52
	'@+'           reduce using rule 52
	'@+i'          reduce using rule 52
	'@-'           reduce using rule 52
	'@-i'          reduce using rule 52
	'@0'           reduce using rule 52
	'@1'           reduce using rule 52
	']'            reduce using rule 52
	'case'         reduce using rule 52
	'else'         reduce using rule 52
	'gate'         reduce using rule 52
	'if'           reduce using rule 52
	'let'          reduce using rule 52
	'of'           reduce using rule 52
	'then'         reduce using rule 52
	'with'         reduce using rule 52
	'}'            reduce using rule 52
	L_integ        reduce using rule 52
	L_BitVariable  reduce using rule 52
	L_Var          reduce using rule 52
	L_Lambda       reduce using rule 52


State 108

	Gate -> 'U1' . Angle                                (rule 60)

	L_doubl        shift, and enter state 2

	Double         goto state 145
	Angle          goto state 146

State 109

	Gate -> 'U2' . '(' Angle ',' Angle ')'              (rule 61)

	'('            shift, and enter state 144


State 110

	Gate -> 'U3' . '(' Angle ',' Angle ',' Angle ')'    (rule 62)

	'('            shift, and enter state 143


State 111

	Gate -> 'X' .                                       (rule 39)

	'$'            reduce using rule 39
	'('            reduce using rule 39
	'()'           reduce using rule 39
	')'            reduce using rule 39
	','            reduce using rule 39
	'->'           reduce using rule 39
	'.'            reduce using rule 39
	';'            reduce using rule 39
	'@+'           reduce using rule 39
	'@+i'          reduce using rule 39
	'@-'           reduce using rule 39
	'@-i'          reduce using rule 39
	'@0'           reduce using rule 39
	'@1'           reduce using rule 39
	']'            reduce using rule 39
	'case'         reduce using rule 39
	'else'         reduce using rule 39
	'gate'         reduce using rule 39
	'if'           reduce using rule 39
	'let'          reduce using rule 39
	'of'           reduce using rule 39
	'then'         reduce using rule 39
	'with'         reduce using rule 39
	'}'            reduce using rule 39
	L_integ        reduce using rule 39
	L_BitVariable  reduce using rule 39
	L_Var          reduce using rule 39
	L_Lambda       reduce using rule 39


State 112

	Gate -> 'Y' .                                       (rule 40)

	'$'            reduce using rule 40
	'('            reduce using rule 40
	'()'           reduce using rule 40
	')'            reduce using rule 40
	','            reduce using rule 40
	'->'           reduce using rule 40
	'.'            reduce using rule 40
	';'            reduce using rule 40
	'@+'           reduce using rule 40
	'@+i'          reduce using rule 40
	'@-'           reduce using rule 40
	'@-i'          reduce using rule 40
	'@0'           reduce using rule 40
	'@1'           reduce using rule 40
	']'            reduce using rule 40
	'case'         reduce using rule 40
	'else'         reduce using rule 40
	'gate'         reduce using rule 40
	'if'           reduce using rule 40
	'let'          reduce using rule 40
	'of'           reduce using rule 40
	'then'         reduce using rule 40
	'with'         reduce using rule 40
	'}'            reduce using rule 40
	L_integ        reduce using rule 40
	L_BitVariable  reduce using rule 40
	L_Var          reduce using rule 40
	L_Lambda       reduce using rule 40


State 113

	Gate -> 'Z' .                                       (rule 41)

	'$'            reduce using rule 41
	'('            reduce using rule 41
	'()'           reduce using rule 41
	')'            reduce using rule 41
	','            reduce using rule 41
	'->'           reduce using rule 41
	'.'            reduce using rule 41
	';'            reduce using rule 41
	'@+'           reduce using rule 41
	'@+i'          reduce using rule 41
	'@-'           reduce using rule 41
	'@-i'          reduce using rule 41
	'@0'           reduce using rule 41
	'@1'           reduce using rule 41
	']'            reduce using rule 41
	'case'         reduce using rule 41
	'else'         reduce using rule 41
	'gate'         reduce using rule 41
	'if'           reduce using rule 41
	'let'          reduce using rule 41
	'of'           reduce using rule 41
	'then'         reduce using rule 41
	'with'         reduce using rule 41
	'}'            reduce using rule 41
	L_integ        reduce using rule 41
	L_BitVariable  reduce using rule 41
	L_Var          reduce using rule 41
	L_Lambda       reduce using rule 41


State 114

	Term1 -> 'case' Term . 'of' CaseExpression ListCaseExpression    (rule 93)

	'of'           shift, and enter state 142


State 115

	IntegerExpr -> IntegerExpr . '+' IntegerExpr1       (rule 6)
	IntegerExpr -> IntegerExpr . '-' IntegerExpr1       (rule 7)
	IntegerExpr2 -> '(' IntegerExpr . ')'               (rule 13)
	Term3 -> IntegerExpr .                              (rule 106)

	'$'            reduce using rule 106
	'('            reduce using rule 106
	'()'           reduce using rule 106
	')'            shift, and enter state 141
			(reduce using rule 106)

	'+'            shift, and enter state 123
	','            reduce using rule 106
	'-'            shift, and enter state 124
	'.'            reduce using rule 106
	'@+'           reduce using rule 106
	'@+i'          reduce using rule 106
	'@-'           reduce using rule 106
	'@-i'          reduce using rule 106
	'@0'           reduce using rule 106
	'@1'           reduce using rule 106
	'gate'         reduce using rule 106
	L_integ        reduce using rule 106
	L_BitVariable  reduce using rule 106
	L_Var          reduce using rule 106


State 116

	Tuple -> '(' Term . ',' ListTerm ')'                (rule 83)
	Term3 -> '(' Term . ')'                             (rule 111)

	')'            shift, and enter state 139
	','            shift, and enter state 140


State 117

	Term3 -> Var .                                      (rule 104)

	'$'            reduce using rule 104
	'('            reduce using rule 104
	'()'           reduce using rule 104
	')'            reduce using rule 104
	','            reduce using rule 104
	'->'           reduce using rule 104
	'.'            reduce using rule 104
	';'            reduce using rule 104
	'@+'           reduce using rule 104
	'@+i'          reduce using rule 104
	'@-'           reduce using rule 104
	'@-i'          reduce using rule 104
	'@0'           reduce using rule 104
	'@1'           reduce using rule 104
	']'            reduce using rule 104
	'case'         reduce using rule 104
	'else'         reduce using rule 104
	'gate'         reduce using rule 104
	'if'           reduce using rule 104
	'let'          reduce using rule 104
	'of'           reduce using rule 104
	'then'         reduce using rule 104
	'with'         reduce using rule 104
	'}'            reduce using rule 104
	L_integ        reduce using rule 104
	L_BitVariable  reduce using rule 104
	L_Var          reduce using rule 104
	L_Lambda       reduce using rule 104


State 118

	Term2 -> Term2 Term3 .                              (rule 101)

	'$'            reduce using rule 101
	'('            reduce using rule 101
	'()'           reduce using rule 101
	')'            reduce using rule 101
	','            reduce using rule 101
	'->'           reduce using rule 101
	'.'            reduce using rule 101
	';'            reduce using rule 101
	'@+'           reduce using rule 101
	'@+i'          reduce using rule 101
	'@-'           reduce using rule 101
	'@-i'          reduce using rule 101
	'@0'           reduce using rule 101
	'@1'           reduce using rule 101
	']'            reduce using rule 101
	'case'         reduce using rule 101
	'else'         reduce using rule 101
	'gate'         reduce using rule 101
	'if'           reduce using rule 101
	'let'          reduce using rule 101
	'of'           reduce using rule 101
	'then'         reduce using rule 101
	'with'         reduce using rule 101
	'}'            reduce using rule 101
	L_integ        reduce using rule 101
	L_BitVariable  reduce using rule 101
	L_Var          reduce using rule 101
	L_Lambda       reduce using rule 101


State 119

	Term1 -> Term2 '$' . Term1                          (rule 95)

	'('            shift, and enter state 58
	'()'           shift, and enter state 59
	'@+'           shift, and enter state 60
	'@+i'          shift, and enter state 61
	'@-'           shift, and enter state 62
	'@-i'          shift, and enter state 63
	'@0'           shift, and enter state 64
	'@1'           shift, and enter state 65
	'case'         shift, and enter state 66
	'gate'         shift, and enter state 67
	'if'           shift, and enter state 68
	'let'          shift, and enter state 69
	'with'         shift, and enter state 70
	L_integ        shift, and enter state 40
	L_BitVariable  shift, and enter state 71
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 72

	Integer        goto state 44
	BitVariable    goto state 45
	Var            goto state 46
	Lambda         goto state 47
	IntegerExpr    goto state 48
	IntegerExpr1   goto state 49
	IntegerExpr2   goto state 50
	BasisState     goto state 51
	Bit            goto state 52
	Tuple          goto state 53
	Term1          goto state 138
	Term2          goto state 55
	Term3          goto state 56

State 120

	Term2 -> Term2 '.' . Term3                          (rule 102)

	'('            shift, and enter state 58
	'()'           shift, and enter state 59
	'@+'           shift, and enter state 60
	'@+i'          shift, and enter state 61
	'@-'           shift, and enter state 62
	'@-i'          shift, and enter state 63
	'@0'           shift, and enter state 64
	'@1'           shift, and enter state 65
	'gate'         shift, and enter state 67
	L_integ        shift, and enter state 40
	L_BitVariable  shift, and enter state 71
	L_Var          shift, and enter state 8

	Integer        goto state 44
	BitVariable    goto state 45
	Var            goto state 117
	IntegerExpr    goto state 48
	IntegerExpr1   goto state 49
	IntegerExpr2   goto state 50
	BasisState     goto state 51
	Bit            goto state 52
	Tuple          goto state 53
	Term3          goto state 137

State 121

	IntegerExpr1 -> IntegerExpr1 '*' . IntegerExpr2     (rule 9)

	'('            shift, and enter state 133
	L_integ        shift, and enter state 40

	Integer        goto state 44
	IntegerExpr2   goto state 136

State 122

	IntegerExpr1 -> IntegerExpr1 '/' . IntegerExpr2     (rule 10)

	'('            shift, and enter state 133
	L_integ        shift, and enter state 40

	Integer        goto state 44
	IntegerExpr2   goto state 135

State 123

	IntegerExpr -> IntegerExpr '+' . IntegerExpr1       (rule 6)

	'('            shift, and enter state 133
	L_integ        shift, and enter state 40

	Integer        goto state 44
	IntegerExpr1   goto state 134
	IntegerExpr2   goto state 50

State 124

	IntegerExpr -> IntegerExpr '-' . IntegerExpr1       (rule 7)

	'('            shift, and enter state 133
	L_integ        shift, and enter state 40

	Integer        goto state 44
	IntegerExpr1   goto state 132
	IntegerExpr2   goto state 50

State 125

	Term1 -> Lambda Var . Type '.' Term                 (rule 94)

	'!'            shift, and enter state 18
	'('            shift, and enter state 19
	'()'           shift, and enter state 20
	'Bit'          shift, and enter state 21
	'Int'          shift, and enter state 22
	'Qbit'         shift, and enter state 23

	Type           goto state 131
	Type1          goto state 13
	Type2          goto state 14
	Type3          goto state 15
	Type5          goto state 16
	Type4          goto state 17

State 126

	Term1 -> Var ',' . ListVar '<-' Term ';' Term       (rule 92)

	L_Var          shift, and enter state 8

	Var            goto state 129
	ListVar        goto state 130

State 127

	Term1 -> Var '<-' . Term ';' Term                   (rule 91)

	'('            shift, and enter state 58
	'()'           shift, and enter state 59
	'@+'           shift, and enter state 60
	'@+i'          shift, and enter state 61
	'@-'           shift, and enter state 62
	'@-i'          shift, and enter state 63
	'@0'           shift, and enter state 64
	'@1'           shift, and enter state 65
	'case'         shift, and enter state 66
	'gate'         shift, and enter state 67
	'if'           shift, and enter state 68
	'let'          shift, and enter state 69
	'with'         shift, and enter state 70
	L_integ        shift, and enter state 40
	L_BitVariable  shift, and enter state 71
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 72

	Integer        goto state 44
	BitVariable    goto state 45
	Var            goto state 46
	Lambda         goto state 47
	IntegerExpr    goto state 48
	IntegerExpr1   goto state 49
	IntegerExpr2   goto state 50
	BasisState     goto state 51
	Bit            goto state 52
	Tuple          goto state 53
	Term1          goto state 54
	Term2          goto state 55
	Term3          goto state 56
	Term           goto state 128

State 128

	Term1 -> Var '<-' Term . ';' Term                   (rule 91)

	';'            shift, and enter state 188


State 129

	ListVar -> Var .                                    (rule 73)
	ListVar -> Var . ',' ListVar                        (rule 74)

	')'            reduce using rule 73
	','            shift, and enter state 187
	'<-'           reduce using rule 73


State 130

	Term1 -> Var ',' ListVar . '<-' Term ';' Term       (rule 92)

	'<-'           shift, and enter state 186


State 131

	Type -> Type . '->' Type1                           (rule 15)
	Term1 -> Lambda Var Type . '.' Term                 (rule 94)

	'->'           shift, and enter state 35
	'.'            shift, and enter state 185


State 132

	IntegerExpr -> IntegerExpr '-' IntegerExpr1 .       (rule 7)
	IntegerExpr1 -> IntegerExpr1 . '*' IntegerExpr2     (rule 9)
	IntegerExpr1 -> IntegerExpr1 . '/' IntegerExpr2     (rule 10)

	'$'            reduce using rule 7
	'('            reduce using rule 7
	'()'           reduce using rule 7
	')'            reduce using rule 7
	'*'            shift, and enter state 121
	'+'            reduce using rule 7
	','            reduce using rule 7
	'-'            reduce using rule 7
	'->'           reduce using rule 7
	'.'            reduce using rule 7
	'/'            shift, and enter state 122
	';'            reduce using rule 7
	'@+'           reduce using rule 7
	'@+i'          reduce using rule 7
	'@-'           reduce using rule 7
	'@-i'          reduce using rule 7
	'@0'           reduce using rule 7
	'@1'           reduce using rule 7
	']'            reduce using rule 7
	'case'         reduce using rule 7
	'else'         reduce using rule 7
	'gate'         reduce using rule 7
	'if'           reduce using rule 7
	'let'          reduce using rule 7
	'of'           reduce using rule 7
	'then'         reduce using rule 7
	'with'         reduce using rule 7
	'}'            reduce using rule 7
	L_integ        reduce using rule 7
	L_BitVariable  reduce using rule 7
	L_Var          reduce using rule 7
	L_Lambda       reduce using rule 7


State 133

	IntegerExpr2 -> '(' . IntegerExpr ')'               (rule 13)

	'('            shift, and enter state 133
	L_integ        shift, and enter state 40

	Integer        goto state 44
	IntegerExpr    goto state 184
	IntegerExpr1   goto state 49
	IntegerExpr2   goto state 50

State 134

	IntegerExpr -> IntegerExpr '+' IntegerExpr1 .       (rule 6)
	IntegerExpr1 -> IntegerExpr1 . '*' IntegerExpr2     (rule 9)
	IntegerExpr1 -> IntegerExpr1 . '/' IntegerExpr2     (rule 10)

	'$'            reduce using rule 6
	'('            reduce using rule 6
	'()'           reduce using rule 6
	')'            reduce using rule 6
	'*'            shift, and enter state 121
	'+'            reduce using rule 6
	','            reduce using rule 6
	'-'            reduce using rule 6
	'->'           reduce using rule 6
	'.'            reduce using rule 6
	'/'            shift, and enter state 122
	';'            reduce using rule 6
	'@+'           reduce using rule 6
	'@+i'          reduce using rule 6
	'@-'           reduce using rule 6
	'@-i'          reduce using rule 6
	'@0'           reduce using rule 6
	'@1'           reduce using rule 6
	']'            reduce using rule 6
	'case'         reduce using rule 6
	'else'         reduce using rule 6
	'gate'         reduce using rule 6
	'if'           reduce using rule 6
	'let'          reduce using rule 6
	'of'           reduce using rule 6
	'then'         reduce using rule 6
	'with'         reduce using rule 6
	'}'            reduce using rule 6
	L_integ        reduce using rule 6
	L_BitVariable  reduce using rule 6
	L_Var          reduce using rule 6
	L_Lambda       reduce using rule 6


State 135

	IntegerExpr1 -> IntegerExpr1 '/' IntegerExpr2 .     (rule 10)

	'$'            reduce using rule 10
	'('            reduce using rule 10
	'()'           reduce using rule 10
	')'            reduce using rule 10
	'*'            reduce using rule 10
	'+'            reduce using rule 10
	','            reduce using rule 10
	'-'            reduce using rule 10
	'->'           reduce using rule 10
	'.'            reduce using rule 10
	'/'            reduce using rule 10
	';'            reduce using rule 10
	'@+'           reduce using rule 10
	'@+i'          reduce using rule 10
	'@-'           reduce using rule 10
	'@-i'          reduce using rule 10
	'@0'           reduce using rule 10
	'@1'           reduce using rule 10
	']'            reduce using rule 10
	'case'         reduce using rule 10
	'else'         reduce using rule 10
	'gate'         reduce using rule 10
	'if'           reduce using rule 10
	'let'          reduce using rule 10
	'of'           reduce using rule 10
	'then'         reduce using rule 10
	'with'         reduce using rule 10
	'}'            reduce using rule 10
	L_integ        reduce using rule 10
	L_BitVariable  reduce using rule 10
	L_Var          reduce using rule 10
	L_Lambda       reduce using rule 10


State 136

	IntegerExpr1 -> IntegerExpr1 '*' IntegerExpr2 .     (rule 9)

	'$'            reduce using rule 9
	'('            reduce using rule 9
	'()'           reduce using rule 9
	')'            reduce using rule 9
	'*'            reduce using rule 9
	'+'            reduce using rule 9
	','            reduce using rule 9
	'-'            reduce using rule 9
	'->'           reduce using rule 9
	'.'            reduce using rule 9
	'/'            reduce using rule 9
	';'            reduce using rule 9
	'@+'           reduce using rule 9
	'@+i'          reduce using rule 9
	'@-'           reduce using rule 9
	'@-i'          reduce using rule 9
	'@0'           reduce using rule 9
	'@1'           reduce using rule 9
	']'            reduce using rule 9
	'case'         reduce using rule 9
	'else'         reduce using rule 9
	'gate'         reduce using rule 9
	'if'           reduce using rule 9
	'let'          reduce using rule 9
	'of'           reduce using rule 9
	'then'         reduce using rule 9
	'with'         reduce using rule 9
	'}'            reduce using rule 9
	L_integ        reduce using rule 9
	L_BitVariable  reduce using rule 9
	L_Var          reduce using rule 9
	L_Lambda       reduce using rule 9


State 137

	Term2 -> Term2 '.' Term3 .                          (rule 102)

	'$'            reduce using rule 102
	'('            reduce using rule 102
	'()'           reduce using rule 102
	')'            reduce using rule 102
	','            reduce using rule 102
	'->'           reduce using rule 102
	'.'            reduce using rule 102
	';'            reduce using rule 102
	'@+'           reduce using rule 102
	'@+i'          reduce using rule 102
	'@-'           reduce using rule 102
	'@-i'          reduce using rule 102
	'@0'           reduce using rule 102
	'@1'           reduce using rule 102
	']'            reduce using rule 102
	'case'         reduce using rule 102
	'else'         reduce using rule 102
	'gate'         reduce using rule 102
	'if'           reduce using rule 102
	'let'          reduce using rule 102
	'of'           reduce using rule 102
	'then'         reduce using rule 102
	'with'         reduce using rule 102
	'}'            reduce using rule 102
	L_integ        reduce using rule 102
	L_BitVariable  reduce using rule 102
	L_Var          reduce using rule 102
	L_Lambda       reduce using rule 102


State 138

	Term1 -> Term2 '$' Term1 .                          (rule 95)

	'('            reduce using rule 95
	'()'           reduce using rule 95
	')'            reduce using rule 95
	','            reduce using rule 95
	'->'           reduce using rule 95
	';'            reduce using rule 95
	'@+'           reduce using rule 95
	'@+i'          reduce using rule 95
	'@-'           reduce using rule 95
	'@-i'          reduce using rule 95
	'@0'           reduce using rule 95
	'@1'           reduce using rule 95
	']'            reduce using rule 95
	'case'         reduce using rule 95
	'else'         reduce using rule 95
	'gate'         reduce using rule 95
	'if'           reduce using rule 95
	'let'          reduce using rule 95
	'of'           reduce using rule 95
	'then'         reduce using rule 95
	'with'         reduce using rule 95
	'}'            reduce using rule 95
	L_integ        reduce using rule 95
	L_BitVariable  reduce using rule 95
	L_Var          reduce using rule 95
	L_Lambda       reduce using rule 95


State 139

	Term3 -> '(' Term ')' .                             (rule 111)

	'$'            reduce using rule 111
	'('            reduce using rule 111
	'()'           reduce using rule 111
	')'            reduce using rule 111
	','            reduce using rule 111
	'->'           reduce using rule 111
	'.'            reduce using rule 111
	';'            reduce using rule 111
	'@+'           reduce using rule 111
	'@+i'          reduce using rule 111
	'@-'           reduce using rule 111
	'@-i'          reduce using rule 111
	'@0'           reduce using rule 111
	'@1'           reduce using rule 111
	']'            reduce using rule 111
	'case'         reduce using rule 111
	'else'         reduce using rule 111
	'gate'         reduce using rule 111
	'if'           reduce using rule 111
	'let'          reduce using rule 111
	'of'           reduce using rule 111
	'then'         reduce using rule 111
	'with'         reduce using rule 111
	'}'            reduce using rule 111
	L_integ        reduce using rule 111
	L_BitVariable  reduce using rule 111
	L_Var          reduce using rule 111
	L_Lambda       reduce using rule 111


State 140

	Tuple -> '(' Term ',' . ListTerm ')'                (rule 83)

	'('            shift, and enter state 58
	'()'           shift, and enter state 59
	'@+'           shift, and enter state 60
	'@+i'          shift, and enter state 61
	'@-'           shift, and enter state 62
	'@-i'          shift, and enter state 63
	'@0'           shift, and enter state 64
	'@1'           shift, and enter state 65
	'case'         shift, and enter state 66
	'gate'         shift, and enter state 67
	'if'           shift, and enter state 68
	'let'          shift, and enter state 69
	'with'         shift, and enter state 70
	L_integ        shift, and enter state 40
	L_BitVariable  shift, and enter state 71
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 72

	Integer        goto state 44
	BitVariable    goto state 45
	Var            goto state 46
	Lambda         goto state 47
	IntegerExpr    goto state 48
	IntegerExpr1   goto state 49
	IntegerExpr2   goto state 50
	BasisState     goto state 51
	Bit            goto state 52
	Tuple          goto state 53
	ListTerm       goto state 182
	Term1          goto state 54
	Term2          goto state 55
	Term3          goto state 56
	Term           goto state 183

State 141

	IntegerExpr2 -> '(' IntegerExpr ')' .               (rule 13)

	'$'            reduce using rule 13
	'('            reduce using rule 13
	'()'           reduce using rule 13
	')'            reduce using rule 13
	'*'            reduce using rule 13
	'+'            reduce using rule 13
	','            reduce using rule 13
	'-'            reduce using rule 13
	'->'           reduce using rule 13
	'.'            reduce using rule 13
	'/'            reduce using rule 13
	';'            reduce using rule 13
	'@+'           reduce using rule 13
	'@+i'          reduce using rule 13
	'@-'           reduce using rule 13
	'@-i'          reduce using rule 13
	'@0'           reduce using rule 13
	'@1'           reduce using rule 13
	']'            reduce using rule 13
	'case'         reduce using rule 13
	'else'         reduce using rule 13
	'gate'         reduce using rule 13
	'if'           reduce using rule 13
	'let'          reduce using rule 13
	'of'           reduce using rule 13
	'then'         reduce using rule 13
	'with'         reduce using rule 13
	'}'            reduce using rule 13
	L_integ        reduce using rule 13
	L_BitVariable  reduce using rule 13
	L_Var          reduce using rule 13
	L_Lambda       reduce using rule 13


State 142

	Term1 -> 'case' Term 'of' . CaseExpression ListCaseExpression    (rule 93)

	'('            shift, and enter state 58
	'()'           shift, and enter state 59
	'@+'           shift, and enter state 60
	'@+i'          shift, and enter state 61
	'@-'           shift, and enter state 62
	'@-i'          shift, and enter state 63
	'@0'           shift, and enter state 64
	'@1'           shift, and enter state 65
	'case'         shift, and enter state 66
	'gate'         shift, and enter state 67
	'if'           shift, and enter state 68
	'let'          shift, and enter state 69
	'with'         shift, and enter state 70
	L_integ        shift, and enter state 40
	L_BitVariable  shift, and enter state 71
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 72

	Integer        goto state 44
	BitVariable    goto state 45
	Var            goto state 46
	Lambda         goto state 47
	IntegerExpr    goto state 48
	IntegerExpr1   goto state 49
	IntegerExpr2   goto state 50
	BasisState     goto state 51
	Bit            goto state 52
	Tuple          goto state 53
	Term1          goto state 54
	Term2          goto state 55
	Term3          goto state 56
	Term           goto state 180
	CaseExpression goto state 181

State 143

	Gate -> 'U3' '(' . Angle ',' Angle ',' Angle ')'    (rule 62)

	L_doubl        shift, and enter state 2

	Double         goto state 145
	Angle          goto state 179

State 144

	Gate -> 'U2' '(' . Angle ',' Angle ')'              (rule 61)

	L_doubl        shift, and enter state 2

	Double         goto state 145
	Angle          goto state 178

State 145

	Angle -> Double .                                   (rule 30)

	'$'            reduce using rule 30
	'('            reduce using rule 30
	'()'           reduce using rule 30
	')'            reduce using rule 30
	','            reduce using rule 30
	'->'           reduce using rule 30
	'.'            reduce using rule 30
	';'            reduce using rule 30
	'@+'           reduce using rule 30
	'@+i'          reduce using rule 30
	'@-'           reduce using rule 30
	'@-i'          reduce using rule 30
	'@0'           reduce using rule 30
	'@1'           reduce using rule 30
	']'            reduce using rule 30
	'case'         reduce using rule 30
	'else'         reduce using rule 30
	'gate'         reduce using rule 30
	'if'           reduce using rule 30
	'let'          reduce using rule 30
	'of'           reduce using rule 30
	'then'         reduce using rule 30
	'with'         reduce using rule 30
	'}'            reduce using rule 30
	L_integ        reduce using rule 30
	L_BitVariable  reduce using rule 30
	L_Var          reduce using rule 30
	L_Lambda       reduce using rule 30


State 146

	Gate -> 'U1' Angle .                                (rule 60)

	'$'            reduce using rule 60
	'('            reduce using rule 60
	'()'           reduce using rule 60
	')'            reduce using rule 60
	','            reduce using rule 60
	'->'           reduce using rule 60
	'.'            reduce using rule 60
	';'            reduce using rule 60
	'@+'           reduce using rule 60
	'@+i'          reduce using rule 60
	'@-'           reduce using rule 60
	'@-i'          reduce using rule 60
	'@0'           reduce using rule 60
	'@1'           reduce using rule 60
	']'            reduce using rule 60
	'case'         reduce using rule 60
	'else'         reduce using rule 60
	'gate'         reduce using rule 60
	'if'           reduce using rule 60
	'let'          reduce using rule 60
	'of'           reduce using rule 60
	'then'         reduce using rule 60
	'with'         reduce using rule 60
	'}'            reduce using rule 60
	L_integ        reduce using rule 60
	L_BitVariable  reduce using rule 60
	L_Var          reduce using rule 60
	L_Lambda       reduce using rule 60


State 147

	Gate -> 'SWAP_THETA' Angle .                        (rule 68)

	'$'            reduce using rule 68
	'('            reduce using rule 68
	'()'           reduce using rule 68
	')'            reduce using rule 68
	','            reduce using rule 68
	'->'           reduce using rule 68
	'.'            reduce using rule 68
	';'            reduce using rule 68
	'@+'           reduce using rule 68
	'@+i'          reduce using rule 68
	'@-'           reduce using rule 68
	'@-i'          reduce using rule 68
	'@0'           reduce using rule 68
	'@1'           reduce using rule 68
	']'            reduce using rule 68
	'case'         reduce using rule 68
	'else'         reduce using rule 68
	'gate'         reduce using rule 68
	'if'           reduce using rule 68
	'let'          reduce using rule 68
	'of'           reduce using rule 68
	'then'         reduce using rule 68
	'with'         reduce using rule 68
	'}'            reduce using rule 68
	L_integ        reduce using rule 68
	L_BitVariable  reduce using rule 68
	L_Var          reduce using rule 68
	L_Lambda       reduce using rule 68


State 148

	Gate -> 'RZ' Angle .                                (rule 59)

	'$'            reduce using rule 59
	'('            reduce using rule 59
	'()'           reduce using rule 59
	')'            reduce using rule 59
	','            reduce using rule 59
	'->'           reduce using rule 59
	'.'            reduce using rule 59
	';'            reduce using rule 59
	'@+'           reduce using rule 59
	'@+i'          reduce using rule 59
	'@-'           reduce using rule 59
	'@-i'          reduce using rule 59
	'@0'           reduce using rule 59
	'@1'           reduce using rule 59
	']'            reduce using rule 59
	'case'         reduce using rule 59
	'else'         reduce using rule 59
	'gate'         reduce using rule 59
	'if'           reduce using rule 59
	'let'          reduce using rule 59
	'of'           reduce using rule 59
	'then'         reduce using rule 59
	'with'         reduce using rule 59
	'}'            reduce using rule 59
	L_integ        reduce using rule 59
	L_BitVariable  reduce using rule 59
	L_Var          reduce using rule 59
	L_Lambda       reduce using rule 59


State 149

	Gate -> 'RY' Angle .                                (rule 58)

	'$'            reduce using rule 58
	'('            reduce using rule 58
	'()'           reduce using rule 58
	')'            reduce using rule 58
	','            reduce using rule 58
	'->'           reduce using rule 58
	'.'            reduce using rule 58
	';'            reduce using rule 58
	'@+'           reduce using rule 58
	'@+i'          reduce using rule 58
	'@-'           reduce using rule 58
	'@-i'          reduce using rule 58
	'@0'           reduce using rule 58
	'@1'           reduce using rule 58
	']'            reduce using rule 58
	'case'         reduce using rule 58
	'else'         reduce using rule 58
	'gate'         reduce using rule 58
	'if'           reduce using rule 58
	'let'          reduce using rule 58
	'of'           reduce using rule 58
	'then'         reduce using rule 58
	'with'         reduce using rule 58
	'}'            reduce using rule 58
	L_integ        reduce using rule 58
	L_BitVariable  reduce using rule 58
	L_Var          reduce using rule 58
	L_Lambda       reduce using rule 58


State 150

	Gate -> 'RX' Angle .                                (rule 57)

	'$'            reduce using rule 57
	'('            reduce using rule 57
	'()'           reduce using rule 57
	')'            reduce using rule 57
	','            reduce using rule 57
	'->'           reduce using rule 57
	'.'            reduce using rule 57
	';'            reduce using rule 57
	'@+'           reduce using rule 57
	'@+i'          reduce using rule 57
	'@-'           reduce using rule 57
	'@-i'          reduce using rule 57
	'@0'           reduce using rule 57
	'@1'           reduce using rule 57
	']'            reduce using rule 57
	'case'         reduce using rule 57
	'else'         reduce using rule 57
	'gate'         reduce using rule 57
	'if'           reduce using rule 57
	'let'          reduce using rule 57
	'of'           reduce using rule 57
	'then'         reduce using rule 57
	'with'         reduce using rule 57
	'}'            reduce using rule 57
	L_integ        reduce using rule 57
	L_BitVariable  reduce using rule 57
	L_Var          reduce using rule 57
	L_Lambda       reduce using rule 57


State 151

	Gate -> 'ROOT_Z_DAG' Integer .                      (rule 48)

	'$'            reduce using rule 48
	'('            reduce using rule 48
	'()'           reduce using rule 48
	')'            reduce using rule 48
	','            reduce using rule 48
	'->'           reduce using rule 48
	'.'            reduce using rule 48
	';'            reduce using rule 48
	'@+'           reduce using rule 48
	'@+i'          reduce using rule 48
	'@-'           reduce using rule 48
	'@-i'          reduce using rule 48
	'@0'           reduce using rule 48
	'@1'           reduce using rule 48
	']'            reduce using rule 48
	'case'         reduce using rule 48
	'else'         reduce using rule 48
	'gate'         reduce using rule 48
	'if'           reduce using rule 48
	'let'          reduce using rule 48
	'of'           reduce using rule 48
	'then'         reduce using rule 48
	'with'         reduce using rule 48
	'}'            reduce using rule 48
	L_integ        reduce using rule 48
	L_BitVariable  reduce using rule 48
	L_Var          reduce using rule 48
	L_Lambda       reduce using rule 48


State 152

	Gate -> 'ROOT_Z' Integer .                          (rule 47)

	'$'            reduce using rule 47
	'('            reduce using rule 47
	'()'           reduce using rule 47
	')'            reduce using rule 47
	','            reduce using rule 47
	'->'           reduce using rule 47
	'.'            reduce using rule 47
	';'            reduce using rule 47
	'@+'           reduce using rule 47
	'@+i'          reduce using rule 47
	'@-'           reduce using rule 47
	'@-i'          reduce using rule 47
	'@0'           reduce using rule 47
	'@1'           reduce using rule 47
	']'            reduce using rule 47
	'case'         reduce using rule 47
	'else'         reduce using rule 47
	'gate'         reduce using rule 47
	'if'           reduce using rule 47
	'let'          reduce using rule 47
	'of'           reduce using rule 47
	'then'         reduce using rule 47
	'with'         reduce using rule 47
	'}'            reduce using rule 47
	L_integ        reduce using rule 47
	L_BitVariable  reduce using rule 47
	L_Var          reduce using rule 47
	L_Lambda       reduce using rule 47


State 153

	Gate -> 'ROOT_Y_DAG' Integer .                      (rule 46)

	'$'            reduce using rule 46
	'('            reduce using rule 46
	'()'           reduce using rule 46
	')'            reduce using rule 46
	','            reduce using rule 46
	'->'           reduce using rule 46
	'.'            reduce using rule 46
	';'            reduce using rule 46
	'@+'           reduce using rule 46
	'@+i'          reduce using rule 46
	'@-'           reduce using rule 46
	'@-i'          reduce using rule 46
	'@0'           reduce using rule 46
	'@1'           reduce using rule 46
	']'            reduce using rule 46
	'case'         reduce using rule 46
	'else'         reduce using rule 46
	'gate'         reduce using rule 46
	'if'           reduce using rule 46
	'let'          reduce using rule 46
	'of'           reduce using rule 46
	'then'         reduce using rule 46
	'with'         reduce using rule 46
	'}'            reduce using rule 46
	L_integ        reduce using rule 46
	L_BitVariable  reduce using rule 46
	L_Var          reduce using rule 46
	L_Lambda       reduce using rule 46


State 154

	Gate -> 'ROOT_Y' Integer .                          (rule 45)

	'$'            reduce using rule 45
	'('            reduce using rule 45
	'()'           reduce using rule 45
	')'            reduce using rule 45
	','            reduce using rule 45
	'->'           reduce using rule 45
	'.'            reduce using rule 45
	';'            reduce using rule 45
	'@+'           reduce using rule 45
	'@+i'          reduce using rule 45
	'@-'           reduce using rule 45
	'@-i'          reduce using rule 45
	'@0'           reduce using rule 45
	'@1'           reduce using rule 45
	']'            reduce using rule 45
	'case'         reduce using rule 45
	'else'         reduce using rule 45
	'gate'         reduce using rule 45
	'if'           reduce using rule 45
	'let'          reduce using rule 45
	'of'           reduce using rule 45
	'then'         reduce using rule 45
	'with'         reduce using rule 45
	'}'            reduce using rule 45
	L_integ        reduce using rule 45
	L_BitVariable  reduce using rule 45
	L_Var          reduce using rule 45
	L_Lambda       reduce using rule 45


State 155

	Gate -> 'ROOT_X_DAG' Integer .                      (rule 44)

	'$'            reduce using rule 44
	'('            reduce using rule 44
	'()'           reduce using rule 44
	')'            reduce using rule 44
	','            reduce using rule 44
	'->'           reduce using rule 44
	'.'            reduce using rule 44
	';'            reduce using rule 44
	'@+'           reduce using rule 44
	'@+i'          reduce using rule 44
	'@-'           reduce using rule 44
	'@-i'          reduce using rule 44
	'@0'           reduce using rule 44
	'@1'           reduce using rule 44
	']'            reduce using rule 44
	'case'         reduce using rule 44
	'else'         reduce using rule 44
	'gate'         reduce using rule 44
	'if'           reduce using rule 44
	'let'          reduce using rule 44
	'of'           reduce using rule 44
	'then'         reduce using rule 44
	'with'         reduce using rule 44
	'}'            reduce using rule 44
	L_integ        reduce using rule 44
	L_BitVariable  reduce using rule 44
	L_Var          reduce using rule 44
	L_Lambda       reduce using rule 44


State 156

	Gate -> 'ROOT_X' Integer .                          (rule 43)

	'$'            reduce using rule 43
	'('            reduce using rule 43
	'()'           reduce using rule 43
	')'            reduce using rule 43
	','            reduce using rule 43
	'->'           reduce using rule 43
	'.'            reduce using rule 43
	';'            reduce using rule 43
	'@+'           reduce using rule 43
	'@+i'          reduce using rule 43
	'@-'           reduce using rule 43
	'@-i'          reduce using rule 43
	'@0'           reduce using rule 43
	'@1'           reduce using rule 43
	']'            reduce using rule 43
	'case'         reduce using rule 43
	'else'         reduce using rule 43
	'gate'         reduce using rule 43
	'if'           reduce using rule 43
	'let'          reduce using rule 43
	'of'           reduce using rule 43
	'then'         reduce using rule 43
	'with'         reduce using rule 43
	'}'            reduce using rule 43
	L_integ        reduce using rule 43
	L_BitVariable  reduce using rule 43
	L_Var          reduce using rule 43
	L_Lambda       reduce using rule 43


State 157

	Gate -> 'ROOT_SWAP_DAG' Integer .                   (rule 70)

	'$'            reduce using rule 70
	'('            reduce using rule 70
	'()'           reduce using rule 70
	')'            reduce using rule 70
	','            reduce using rule 70
	'->'           reduce using rule 70
	'.'            reduce using rule 70
	';'            reduce using rule 70
	'@+'           reduce using rule 70
	'@+i'          reduce using rule 70
	'@-'           reduce using rule 70
	'@-i'          reduce using rule 70
	'@0'           reduce using rule 70
	'@1'           reduce using rule 70
	']'            reduce using rule 70
	'case'         reduce using rule 70
	'else'         reduce using rule 70
	'gate'         reduce using rule 70
	'if'           reduce using rule 70
	'let'          reduce using rule 70
	'of'           reduce using rule 70
	'then'         reduce using rule 70
	'with'         reduce using rule 70
	'}'            reduce using rule 70
	L_integ        reduce using rule 70
	L_BitVariable  reduce using rule 70
	L_Var          reduce using rule 70
	L_Lambda       reduce using rule 70


State 158

	Gate -> 'ROOT_SWAP' Integer .                       (rule 69)

	'$'            reduce using rule 69
	'('            reduce using rule 69
	'()'           reduce using rule 69
	')'            reduce using rule 69
	','            reduce using rule 69
	'->'           reduce using rule 69
	'.'            reduce using rule 69
	';'            reduce using rule 69
	'@+'           reduce using rule 69
	'@+i'          reduce using rule 69
	'@-'           reduce using rule 69
	'@-i'          reduce using rule 69
	'@0'           reduce using rule 69
	'@1'           reduce using rule 69
	']'            reduce using rule 69
	'case'         reduce using rule 69
	'else'         reduce using rule 69
	'gate'         reduce using rule 69
	'if'           reduce using rule 69
	'let'          reduce using rule 69
	'of'           reduce using rule 69
	'then'         reduce using rule 69
	'with'         reduce using rule 69
	'}'            reduce using rule 69
	L_integ        reduce using rule 69
	L_BitVariable  reduce using rule 69
	L_Var          reduce using rule 69
	L_Lambda       reduce using rule 69


State 159

	Gate -> 'QFT_DAG' Integer .                         (rule 72)

	'$'            reduce using rule 72
	'('            reduce using rule 72
	'()'           reduce using rule 72
	')'            reduce using rule 72
	','            reduce using rule 72
	'->'           reduce using rule 72
	'.'            reduce using rule 72
	';'            reduce using rule 72
	'@+'           reduce using rule 72
	'@+i'          reduce using rule 72
	'@-'           reduce using rule 72
	'@-i'          reduce using rule 72
	'@0'           reduce using rule 72
	'@1'           reduce using rule 72
	']'            reduce using rule 72
	'case'         reduce using rule 72
	'else'         reduce using rule 72
	'gate'         reduce using rule 72
	'if'           reduce using rule 72
	'let'          reduce using rule 72
	'of'           reduce using rule 72
	'then'         reduce using rule 72
	'with'         reduce using rule 72
	'}'            reduce using rule 72
	L_integ        reduce using rule 72
	L_BitVariable  reduce using rule 72
	L_Var          reduce using rule 72
	L_Lambda       reduce using rule 72


State 160

	Gate -> 'QFT' Integer .                             (rule 71)

	'$'            reduce using rule 71
	'('            reduce using rule 71
	'()'           reduce using rule 71
	')'            reduce using rule 71
	','            reduce using rule 71
	'->'           reduce using rule 71
	'.'            reduce using rule 71
	';'            reduce using rule 71
	'@+'           reduce using rule 71
	'@+i'          reduce using rule 71
	'@-'           reduce using rule 71
	'@-i'          reduce using rule 71
	'@0'           reduce using rule 71
	'@1'           reduce using rule 71
	']'            reduce using rule 71
	'case'         reduce using rule 71
	'else'         reduce using rule 71
	'gate'         reduce using rule 71
	'if'           reduce using rule 71
	'let'          reduce using rule 71
	'of'           reduce using rule 71
	'then'         reduce using rule 71
	'with'         reduce using rule 71
	'}'            reduce using rule 71
	L_integ        reduce using rule 71
	L_BitVariable  reduce using rule 71
	L_Var          reduce using rule 71
	L_Lambda       reduce using rule 71


State 161

	Term1 -> 'if' Term 'then' . Term 'else' Term        (rule 88)

	'('            shift, and enter state 58
	'()'           shift, and enter state 59
	'@+'           shift, and enter state 60
	'@+i'          shift, and enter state 61
	'@-'           shift, and enter state 62
	'@-i'          shift, and enter state 63
	'@0'           shift, and enter state 64
	'@1'           shift, and enter state 65
	'case'         shift, and enter state 66
	'gate'         shift, and enter state 67
	'if'           shift, and enter state 68
	'let'          shift, and enter state 69
	'with'         shift, and enter state 70
	L_integ        shift, and enter state 40
	L_BitVariable  shift, and enter state 71
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 72

	Integer        goto state 44
	BitVariable    goto state 45
	Var            goto state 46
	Lambda         goto state 47
	IntegerExpr    goto state 48
	IntegerExpr1   goto state 49
	IntegerExpr2   goto state 50
	BasisState     goto state 51
	Bit            goto state 52
	Tuple          goto state 53
	Term1          goto state 54
	Term2          goto state 55
	Term3          goto state 56
	Term           goto state 177

State 162

	Term1 -> 'let' '{' Var . '=' Term '}' 'in' Term     (rule 89)

	'='            shift, and enter state 176


State 163

	Term1 -> 'let' '{' '(' . Var ',' ListVar ')' '=' Term '}' 'in' Term    (rule 90)

	L_Var          shift, and enter state 8

	Var            goto state 175

State 164

	ControlTerm -> '[' Term . ']'                       (rule 84)
	ControlTerms -> '[' Term . ',' ListTerm ']'         (rule 85)

	','            shift, and enter state 173
	']'            shift, and enter state 174


State 165

	Term2 -> 'with' ControlTerms 'ctrl' . ControlBasisStates    (rule 98)
	Term2 -> 'with' ControlTerms 'ctrl' . ControlBits    (rule 100)

	'['            shift, and enter state 172

	ControlBasisStatesgoto state 170
	ControlBits    goto state 171

State 166

	Term2 -> 'with' ControlTerm 'ctrl' . ControlBasisState    (rule 97)
	Term2 -> 'with' ControlTerm 'ctrl' . ControlBit     (rule 99)

	'['            shift, and enter state 169

	ControlBasisStategoto state 167
	ControlBit     goto state 168

State 167

	Term2 -> 'with' ControlTerm 'ctrl' ControlBasisState .    (rule 97)

	'$'            reduce using rule 97
	'('            reduce using rule 97
	'()'           reduce using rule 97
	')'            reduce using rule 97
	','            reduce using rule 97
	'->'           reduce using rule 97
	'.'            reduce using rule 97
	';'            reduce using rule 97
	'@+'           reduce using rule 97
	'@+i'          reduce using rule 97
	'@-'           reduce using rule 97
	'@-i'          reduce using rule 97
	'@0'           reduce using rule 97
	'@1'           reduce using rule 97
	']'            reduce using rule 97
	'case'         reduce using rule 97
	'else'         reduce using rule 97
	'gate'         reduce using rule 97
	'if'           reduce using rule 97
	'let'          reduce using rule 97
	'of'           reduce using rule 97
	'then'         reduce using rule 97
	'with'         reduce using rule 97
	'}'            reduce using rule 97
	L_integ        reduce using rule 97
	L_BitVariable  reduce using rule 97
	L_Var          reduce using rule 97
	L_Lambda       reduce using rule 97


State 168

	Term2 -> 'with' ControlTerm 'ctrl' ControlBit .     (rule 99)

	'$'            reduce using rule 99
	'('            reduce using rule 99
	'()'           reduce using rule 99
	')'            reduce using rule 99
	','            reduce using rule 99
	'->'           reduce using rule 99
	'.'            reduce using rule 99
	';'            reduce using rule 99
	'@+'           reduce using rule 99
	'@+i'          reduce using rule 99
	'@-'           reduce using rule 99
	'@-i'          reduce using rule 99
	'@0'           reduce using rule 99
	'@1'           reduce using rule 99
	']'            reduce using rule 99
	'case'         reduce using rule 99
	'else'         reduce using rule 99
	'gate'         reduce using rule 99
	'if'           reduce using rule 99
	'let'          reduce using rule 99
	'of'           reduce using rule 99
	'then'         reduce using rule 99
	'with'         reduce using rule 99
	'}'            reduce using rule 99
	L_integ        reduce using rule 99
	L_BitVariable  reduce using rule 99
	L_Var          reduce using rule 99
	L_Lambda       reduce using rule 99


State 169

	ControlBasisState -> '[' . BasisState ']'           (rule 75)
	ControlBit -> '[' . Integer ']'                     (rule 79)

	'@+'           shift, and enter state 60
	'@+i'          shift, and enter state 61
	'@-'           shift, and enter state 62
	'@-i'          shift, and enter state 63
	'@0'           shift, and enter state 64
	'@1'           shift, and enter state 65
	L_integ        shift, and enter state 40

	Integer        goto state 206
	BasisState     goto state 207

State 170

	Term2 -> 'with' ControlTerms 'ctrl' ControlBasisStates .    (rule 98)

	'$'            reduce using rule 98
	'('            reduce using rule 98
	'()'           reduce using rule 98
	')'            reduce using rule 98
	','            reduce using rule 98
	'->'           reduce using rule 98
	'.'            reduce using rule 98
	';'            reduce using rule 98
	'@+'           reduce using rule 98
	'@+i'          reduce using rule 98
	'@-'           reduce using rule 98
	'@-i'          reduce using rule 98
	'@0'           reduce using rule 98
	'@1'           reduce using rule 98
	']'            reduce using rule 98
	'case'         reduce using rule 98
	'else'         reduce using rule 98
	'gate'         reduce using rule 98
	'if'           reduce using rule 98
	'let'          reduce using rule 98
	'of'           reduce using rule 98
	'then'         reduce using rule 98
	'with'         reduce using rule 98
	'}'            reduce using rule 98
	L_integ        reduce using rule 98
	L_BitVariable  reduce using rule 98
	L_Var          reduce using rule 98
	L_Lambda       reduce using rule 98


State 171

	Term2 -> 'with' ControlTerms 'ctrl' ControlBits .    (rule 100)

	'$'            reduce using rule 100
	'('            reduce using rule 100
	'()'           reduce using rule 100
	')'            reduce using rule 100
	','            reduce using rule 100
	'->'           reduce using rule 100
	'.'            reduce using rule 100
	';'            reduce using rule 100
	'@+'           reduce using rule 100
	'@+i'          reduce using rule 100
	'@-'           reduce using rule 100
	'@-i'          reduce using rule 100
	'@0'           reduce using rule 100
	'@1'           reduce using rule 100
	']'            reduce using rule 100
	'case'         reduce using rule 100
	'else'         reduce using rule 100
	'gate'         reduce using rule 100
	'if'           reduce using rule 100
	'let'          reduce using rule 100
	'of'           reduce using rule 100
	'then'         reduce using rule 100
	'with'         reduce using rule 100
	'}'            reduce using rule 100
	L_integ        reduce using rule 100
	L_BitVariable  reduce using rule 100
	L_Var          reduce using rule 100
	L_Lambda       reduce using rule 100


State 172

	ControlBasisStates -> '[' . BasisState ',' ListBasisState ']'    (rule 76)
	ControlBits -> '[' . Integer ',' ListInteger ']'    (rule 80)

	'@+'           shift, and enter state 60
	'@+i'          shift, and enter state 61
	'@-'           shift, and enter state 62
	'@-i'          shift, and enter state 63
	'@0'           shift, and enter state 64
	'@1'           shift, and enter state 65
	L_integ        shift, and enter state 40

	Integer        goto state 204
	BasisState     goto state 205

State 173

	ControlTerms -> '[' Term ',' . ListTerm ']'         (rule 85)

	'('            shift, and enter state 58
	'()'           shift, and enter state 59
	'@+'           shift, and enter state 60
	'@+i'          shift, and enter state 61
	'@-'           shift, and enter state 62
	'@-i'          shift, and enter state 63
	'@0'           shift, and enter state 64
	'@1'           shift, and enter state 65
	'case'         shift, and enter state 66
	'gate'         shift, and enter state 67
	'if'           shift, and enter state 68
	'let'          shift, and enter state 69
	'with'         shift, and enter state 70
	L_integ        shift, and enter state 40
	L_BitVariable  shift, and enter state 71
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 72

	Integer        goto state 44
	BitVariable    goto state 45
	Var            goto state 46
	Lambda         goto state 47
	IntegerExpr    goto state 48
	IntegerExpr1   goto state 49
	IntegerExpr2   goto state 50
	BasisState     goto state 51
	Bit            goto state 52
	Tuple          goto state 53
	ListTerm       goto state 203
	Term1          goto state 54
	Term2          goto state 55
	Term3          goto state 56
	Term           goto state 183

State 174

	ControlTerm -> '[' Term ']' .                       (rule 84)

	'ctrl'         reduce using rule 84


State 175

	Term1 -> 'let' '{' '(' Var . ',' ListVar ')' '=' Term '}' 'in' Term    (rule 90)

	','            shift, and enter state 202


State 176

	Term1 -> 'let' '{' Var '=' . Term '}' 'in' Term     (rule 89)

	'('            shift, and enter state 58
	'()'           shift, and enter state 59
	'@+'           shift, and enter state 60
	'@+i'          shift, and enter state 61
	'@-'           shift, and enter state 62
	'@-i'          shift, and enter state 63
	'@0'           shift, and enter state 64
	'@1'           shift, and enter state 65
	'case'         shift, and enter state 66
	'gate'         shift, and enter state 67
	'if'           shift, and enter state 68
	'let'          shift, and enter state 69
	'with'         shift, and enter state 70
	L_integ        shift, and enter state 40
	L_BitVariable  shift, and enter state 71
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 72

	Integer        goto state 44
	BitVariable    goto state 45
	Var            goto state 46
	Lambda         goto state 47
	IntegerExpr    goto state 48
	IntegerExpr1   goto state 49
	IntegerExpr2   goto state 50
	BasisState     goto state 51
	Bit            goto state 52
	Tuple          goto state 53
	Term1          goto state 54
	Term2          goto state 55
	Term3          goto state 56
	Term           goto state 201

State 177

	Term1 -> 'if' Term 'then' Term . 'else' Term        (rule 88)

	'else'         shift, and enter state 200


State 178

	Gate -> 'U2' '(' Angle . ',' Angle ')'              (rule 61)

	','            shift, and enter state 199


State 179

	Gate -> 'U3' '(' Angle . ',' Angle ',' Angle ')'    (rule 62)

	','            shift, and enter state 198


State 180

	CaseExpression -> Term . '->' Term                  (rule 113)

	'->'           shift, and enter state 197


State 181

	Term1 -> 'case' Term 'of' CaseExpression . ListCaseExpression    (rule 93)

	'('            shift, and enter state 58
	'()'           shift, and enter state 59
	'@+'           shift, and enter state 60
	'@+i'          shift, and enter state 61
	'@-'           shift, and enter state 62
	'@-i'          shift, and enter state 63
	'@0'           shift, and enter state 64
	'@1'           shift, and enter state 65
	'case'         shift, and enter state 66
	'gate'         shift, and enter state 67
	'if'           shift, and enter state 68
	'let'          shift, and enter state 69
	'with'         shift, and enter state 70
	L_integ        shift, and enter state 40
	L_BitVariable  shift, and enter state 71
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 72

	Integer        goto state 44
	BitVariable    goto state 45
	Var            goto state 46
	Lambda         goto state 47
	IntegerExpr    goto state 48
	IntegerExpr1   goto state 49
	IntegerExpr2   goto state 50
	BasisState     goto state 51
	Bit            goto state 52
	Tuple          goto state 53
	Term1          goto state 54
	Term2          goto state 55
	Term3          goto state 56
	Term           goto state 180
	CaseExpression goto state 195
	ListCaseExpressiongoto state 196

State 182

	Tuple -> '(' Term ',' ListTerm . ')'                (rule 83)

	')'            shift, and enter state 194


State 183

	ListTerm -> Term .                                  (rule 86)
	ListTerm -> Term . ',' ListTerm                     (rule 87)

	')'            reduce using rule 86
	','            shift, and enter state 193
	']'            reduce using rule 86


State 184

	IntegerExpr -> IntegerExpr . '+' IntegerExpr1       (rule 6)
	IntegerExpr -> IntegerExpr . '-' IntegerExpr1       (rule 7)
	IntegerExpr2 -> '(' IntegerExpr . ')'               (rule 13)

	')'            shift, and enter state 141
	'+'            shift, and enter state 123
	'-'            shift, and enter state 124


State 185

	Term1 -> Lambda Var Type '.' . Term                 (rule 94)

	'('            shift, and enter state 58
	'()'           shift, and enter state 59
	'@+'           shift, and enter state 60
	'@+i'          shift, and enter state 61
	'@-'           shift, and enter state 62
	'@-i'          shift, and enter state 63
	'@0'           shift, and enter state 64
	'@1'           shift, and enter state 65
	'case'         shift, and enter state 66
	'gate'         shift, and enter state 67
	'if'           shift, and enter state 68
	'let'          shift, and enter state 69
	'with'         shift, and enter state 70
	L_integ        shift, and enter state 40
	L_BitVariable  shift, and enter state 71
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 72

	Integer        goto state 44
	BitVariable    goto state 45
	Var            goto state 46
	Lambda         goto state 47
	IntegerExpr    goto state 48
	IntegerExpr1   goto state 49
	IntegerExpr2   goto state 50
	BasisState     goto state 51
	Bit            goto state 52
	Tuple          goto state 53
	Term1          goto state 54
	Term2          goto state 55
	Term3          goto state 56
	Term           goto state 192

State 186

	Term1 -> Var ',' ListVar '<-' . Term ';' Term       (rule 92)

	'('            shift, and enter state 58
	'()'           shift, and enter state 59
	'@+'           shift, and enter state 60
	'@+i'          shift, and enter state 61
	'@-'           shift, and enter state 62
	'@-i'          shift, and enter state 63
	'@0'           shift, and enter state 64
	'@1'           shift, and enter state 65
	'case'         shift, and enter state 66
	'gate'         shift, and enter state 67
	'if'           shift, and enter state 68
	'let'          shift, and enter state 69
	'with'         shift, and enter state 70
	L_integ        shift, and enter state 40
	L_BitVariable  shift, and enter state 71
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 72

	Integer        goto state 44
	BitVariable    goto state 45
	Var            goto state 46
	Lambda         goto state 47
	IntegerExpr    goto state 48
	IntegerExpr1   goto state 49
	IntegerExpr2   goto state 50
	BasisState     goto state 51
	Bit            goto state 52
	Tuple          goto state 53
	Term1          goto state 54
	Term2          goto state 55
	Term3          goto state 56
	Term           goto state 191

State 187

	ListVar -> Var ',' . ListVar                        (rule 74)

	L_Var          shift, and enter state 8

	Var            goto state 129
	ListVar        goto state 190

State 188

	Term1 -> Var '<-' Term ';' . Term                   (rule 91)

	'('            shift, and enter state 58
	'()'           shift, and enter state 59
	'@+'           shift, and enter state 60
	'@+i'          shift, and enter state 61
	'@-'           shift, and enter state 62
	'@-i'          shift, and enter state 63
	'@0'           shift, and enter state 64
	'@1'           shift, and enter state 65
	'case'         shift, and enter state 66
	'gate'         shift, and enter state 67
	'if'           shift, and enter state 68
	'let'          shift, and enter state 69
	'with'         shift, and enter state 70
	L_integ        shift, and enter state 40
	L_BitVariable  shift, and enter state 71
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 72

	Integer        goto state 44
	BitVariable    goto state 45
	Var            goto state 46
	Lambda         goto state 47
	IntegerExpr    goto state 48
	IntegerExpr1   goto state 49
	IntegerExpr2   goto state 50
	BasisState     goto state 51
	Bit            goto state 52
	Tuple          goto state 53
	Term1          goto state 54
	Term2          goto state 55
	Term3          goto state 56
	Term           goto state 189

State 189

	Term1 -> Var '<-' Term ';' Term .                   (rule 91)

	'('            reduce using rule 91
	'()'           reduce using rule 91
	')'            reduce using rule 91
	','            reduce using rule 91
	'->'           reduce using rule 91
	';'            reduce using rule 91
	'@+'           reduce using rule 91
	'@+i'          reduce using rule 91
	'@-'           reduce using rule 91
	'@-i'          reduce using rule 91
	'@0'           reduce using rule 91
	'@1'           reduce using rule 91
	']'            reduce using rule 91
	'case'         reduce using rule 91
	'else'         reduce using rule 91
	'gate'         reduce using rule 91
	'if'           reduce using rule 91
	'let'          reduce using rule 91
	'of'           reduce using rule 91
	'then'         reduce using rule 91
	'with'         reduce using rule 91
	'}'            reduce using rule 91
	L_integ        reduce using rule 91
	L_BitVariable  reduce using rule 91
	L_Var          reduce using rule 91
	L_Lambda       reduce using rule 91


State 190

	ListVar -> Var ',' ListVar .                        (rule 74)

	')'            reduce using rule 74
	'<-'           reduce using rule 74


State 191

	Term1 -> Var ',' ListVar '<-' Term . ';' Term       (rule 92)

	';'            shift, and enter state 221


State 192

	Term1 -> Lambda Var Type '.' Term .                 (rule 94)

	'('            reduce using rule 94
	'()'           reduce using rule 94
	')'            reduce using rule 94
	','            reduce using rule 94
	'->'           reduce using rule 94
	';'            reduce using rule 94
	'@+'           reduce using rule 94
	'@+i'          reduce using rule 94
	'@-'           reduce using rule 94
	'@-i'          reduce using rule 94
	'@0'           reduce using rule 94
	'@1'           reduce using rule 94
	']'            reduce using rule 94
	'case'         reduce using rule 94
	'else'         reduce using rule 94
	'gate'         reduce using rule 94
	'if'           reduce using rule 94
	'let'          reduce using rule 94
	'of'           reduce using rule 94
	'then'         reduce using rule 94
	'with'         reduce using rule 94
	'}'            reduce using rule 94
	L_integ        reduce using rule 94
	L_BitVariable  reduce using rule 94
	L_Var          reduce using rule 94
	L_Lambda       reduce using rule 94


State 193

	ListTerm -> Term ',' . ListTerm                     (rule 87)

	'('            shift, and enter state 58
	'()'           shift, and enter state 59
	'@+'           shift, and enter state 60
	'@+i'          shift, and enter state 61
	'@-'           shift, and enter state 62
	'@-i'          shift, and enter state 63
	'@0'           shift, and enter state 64
	'@1'           shift, and enter state 65
	'case'         shift, and enter state 66
	'gate'         shift, and enter state 67
	'if'           shift, and enter state 68
	'let'          shift, and enter state 69
	'with'         shift, and enter state 70
	L_integ        shift, and enter state 40
	L_BitVariable  shift, and enter state 71
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 72

	Integer        goto state 44
	BitVariable    goto state 45
	Var            goto state 46
	Lambda         goto state 47
	IntegerExpr    goto state 48
	IntegerExpr1   goto state 49
	IntegerExpr2   goto state 50
	BasisState     goto state 51
	Bit            goto state 52
	Tuple          goto state 53
	ListTerm       goto state 220
	Term1          goto state 54
	Term2          goto state 55
	Term3          goto state 56
	Term           goto state 183

State 194

	Tuple -> '(' Term ',' ListTerm ')' .                (rule 83)

	'$'            reduce using rule 83
	'('            reduce using rule 83
	'()'           reduce using rule 83
	')'            reduce using rule 83
	','            reduce using rule 83
	'->'           reduce using rule 83
	'.'            reduce using rule 83
	';'            reduce using rule 83
	'@+'           reduce using rule 83
	'@+i'          reduce using rule 83
	'@-'           reduce using rule 83
	'@-i'          reduce using rule 83
	'@0'           reduce using rule 83
	'@1'           reduce using rule 83
	']'            reduce using rule 83
	'case'         reduce using rule 83
	'else'         reduce using rule 83
	'gate'         reduce using rule 83
	'if'           reduce using rule 83
	'let'          reduce using rule 83
	'of'           reduce using rule 83
	'then'         reduce using rule 83
	'with'         reduce using rule 83
	'}'            reduce using rule 83
	L_integ        reduce using rule 83
	L_BitVariable  reduce using rule 83
	L_Var          reduce using rule 83
	L_Lambda       reduce using rule 83


State 195

	ListCaseExpression -> CaseExpression .              (rule 114)
	ListCaseExpression -> CaseExpression . ListCaseExpression    (rule 115)

	'('            shift, and enter state 58
			(reduce using rule 114)

	'()'           shift, and enter state 59
			(reduce using rule 114)

	')'            reduce using rule 114
	','            reduce using rule 114
	'->'           reduce using rule 114
	';'            reduce using rule 114
	'@+'           shift, and enter state 60
			(reduce using rule 114)

	'@+i'          shift, and enter state 61
			(reduce using rule 114)

	'@-'           shift, and enter state 62
			(reduce using rule 114)

	'@-i'          shift, and enter state 63
			(reduce using rule 114)

	'@0'           shift, and enter state 64
			(reduce using rule 114)

	'@1'           shift, and enter state 65
			(reduce using rule 114)

	']'            reduce using rule 114
	'case'         shift, and enter state 66
			(reduce using rule 114)

	'else'         reduce using rule 114
	'gate'         shift, and enter state 67
			(reduce using rule 114)

	'if'           shift, and enter state 68
			(reduce using rule 114)

	'let'          shift, and enter state 69
			(reduce using rule 114)

	'of'           reduce using rule 114
	'then'         reduce using rule 114
	'with'         shift, and enter state 70
			(reduce using rule 114)

	'}'            reduce using rule 114
	L_integ        shift, and enter state 40
			(reduce using rule 114)

	L_BitVariable  shift, and enter state 71
			(reduce using rule 114)

	L_Var          shift, and enter state 8
			(reduce using rule 114)

	L_Lambda       shift, and enter state 72
			(reduce using rule 114)


	Integer        goto state 44
	BitVariable    goto state 45
	Var            goto state 46
	Lambda         goto state 47
	IntegerExpr    goto state 48
	IntegerExpr1   goto state 49
	IntegerExpr2   goto state 50
	BasisState     goto state 51
	Bit            goto state 52
	Tuple          goto state 53
	Term1          goto state 54
	Term2          goto state 55
	Term3          goto state 56
	Term           goto state 180
	CaseExpression goto state 195
	ListCaseExpressiongoto state 219

State 196

	Term1 -> 'case' Term 'of' CaseExpression ListCaseExpression .    (rule 93)

	'('            reduce using rule 93
	'()'           reduce using rule 93
	')'            reduce using rule 93
	','            reduce using rule 93
	'->'           reduce using rule 93
	';'            reduce using rule 93
	'@+'           reduce using rule 93
	'@+i'          reduce using rule 93
	'@-'           reduce using rule 93
	'@-i'          reduce using rule 93
	'@0'           reduce using rule 93
	'@1'           reduce using rule 93
	']'            reduce using rule 93
	'case'         reduce using rule 93
	'else'         reduce using rule 93
	'gate'         reduce using rule 93
	'if'           reduce using rule 93
	'let'          reduce using rule 93
	'of'           reduce using rule 93
	'then'         reduce using rule 93
	'with'         reduce using rule 93
	'}'            reduce using rule 93
	L_integ        reduce using rule 93
	L_BitVariable  reduce using rule 93
	L_Var          reduce using rule 93
	L_Lambda       reduce using rule 93


State 197

	CaseExpression -> Term '->' . Term                  (rule 113)

	'('            shift, and enter state 58
	'()'           shift, and enter state 59
	'@+'           shift, and enter state 60
	'@+i'          shift, and enter state 61
	'@-'           shift, and enter state 62
	'@-i'          shift, and enter state 63
	'@0'           shift, and enter state 64
	'@1'           shift, and enter state 65
	'case'         shift, and enter state 66
	'gate'         shift, and enter state 67
	'if'           shift, and enter state 68
	'let'          shift, and enter state 69
	'with'         shift, and enter state 70
	L_integ        shift, and enter state 40
	L_BitVariable  shift, and enter state 71
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 72

	Integer        goto state 44
	BitVariable    goto state 45
	Var            goto state 46
	Lambda         goto state 47
	IntegerExpr    goto state 48
	IntegerExpr1   goto state 49
	IntegerExpr2   goto state 50
	BasisState     goto state 51
	Bit            goto state 52
	Tuple          goto state 53
	Term1          goto state 54
	Term2          goto state 55
	Term3          goto state 56
	Term           goto state 218

State 198

	Gate -> 'U3' '(' Angle ',' . Angle ',' Angle ')'    (rule 62)

	L_doubl        shift, and enter state 2

	Double         goto state 145
	Angle          goto state 217

State 199

	Gate -> 'U2' '(' Angle ',' . Angle ')'              (rule 61)

	L_doubl        shift, and enter state 2

	Double         goto state 145
	Angle          goto state 216

State 200

	Term1 -> 'if' Term 'then' Term 'else' . Term        (rule 88)

	'('            shift, and enter state 58
	'()'           shift, and enter state 59
	'@+'           shift, and enter state 60
	'@+i'          shift, and enter state 61
	'@-'           shift, and enter state 62
	'@-i'          shift, and enter state 63
	'@0'           shift, and enter state 64
	'@1'           shift, and enter state 65
	'case'         shift, and enter state 66
	'gate'         shift, and enter state 67
	'if'           shift, and enter state 68
	'let'          shift, and enter state 69
	'with'         shift, and enter state 70
	L_integ        shift, and enter state 40
	L_BitVariable  shift, and enter state 71
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 72

	Integer        goto state 44
	BitVariable    goto state 45
	Var            goto state 46
	Lambda         goto state 47
	IntegerExpr    goto state 48
	IntegerExpr1   goto state 49
	IntegerExpr2   goto state 50
	BasisState     goto state 51
	Bit            goto state 52
	Tuple          goto state 53
	Term1          goto state 54
	Term2          goto state 55
	Term3          goto state 56
	Term           goto state 215

State 201

	Term1 -> 'let' '{' Var '=' Term . '}' 'in' Term     (rule 89)

	'}'            shift, and enter state 214


State 202

	Term1 -> 'let' '{' '(' Var ',' . ListVar ')' '=' Term '}' 'in' Term    (rule 90)

	L_Var          shift, and enter state 8

	Var            goto state 129
	ListVar        goto state 213

State 203

	ControlTerms -> '[' Term ',' ListTerm . ']'         (rule 85)

	']'            shift, and enter state 212


State 204

	ControlBits -> '[' Integer . ',' ListInteger ']'    (rule 80)

	','            shift, and enter state 211


State 205

	ControlBasisStates -> '[' BasisState . ',' ListBasisState ']'    (rule 76)

	','            shift, and enter state 210


State 206

	ControlBit -> '[' Integer . ']'                     (rule 79)

	']'            shift, and enter state 209


State 207

	ControlBasisState -> '[' BasisState . ']'           (rule 75)

	']'            shift, and enter state 208


State 208

	ControlBasisState -> '[' BasisState ']' .           (rule 75)

	'$'            reduce using rule 75
	'('            reduce using rule 75
	'()'           reduce using rule 75
	')'            reduce using rule 75
	','            reduce using rule 75
	'->'           reduce using rule 75
	'.'            reduce using rule 75
	';'            reduce using rule 75
	'@+'           reduce using rule 75
	'@+i'          reduce using rule 75
	'@-'           reduce using rule 75
	'@-i'          reduce using rule 75
	'@0'           reduce using rule 75
	'@1'           reduce using rule 75
	']'            reduce using rule 75
	'case'         reduce using rule 75
	'else'         reduce using rule 75
	'gate'         reduce using rule 75
	'if'           reduce using rule 75
	'let'          reduce using rule 75
	'of'           reduce using rule 75
	'then'         reduce using rule 75
	'with'         reduce using rule 75
	'}'            reduce using rule 75
	L_integ        reduce using rule 75
	L_BitVariable  reduce using rule 75
	L_Var          reduce using rule 75
	L_Lambda       reduce using rule 75


State 209

	ControlBit -> '[' Integer ']' .                     (rule 79)

	'$'            reduce using rule 79
	'('            reduce using rule 79
	'()'           reduce using rule 79
	')'            reduce using rule 79
	','            reduce using rule 79
	'->'           reduce using rule 79
	'.'            reduce using rule 79
	';'            reduce using rule 79
	'@+'           reduce using rule 79
	'@+i'          reduce using rule 79
	'@-'           reduce using rule 79
	'@-i'          reduce using rule 79
	'@0'           reduce using rule 79
	'@1'           reduce using rule 79
	']'            reduce using rule 79
	'case'         reduce using rule 79
	'else'         reduce using rule 79
	'gate'         reduce using rule 79
	'if'           reduce using rule 79
	'let'          reduce using rule 79
	'of'           reduce using rule 79
	'then'         reduce using rule 79
	'with'         reduce using rule 79
	'}'            reduce using rule 79
	L_integ        reduce using rule 79
	L_BitVariable  reduce using rule 79
	L_Var          reduce using rule 79
	L_Lambda       reduce using rule 79


State 210

	ControlBasisStates -> '[' BasisState ',' . ListBasisState ']'    (rule 76)

	'@+'           shift, and enter state 60
	'@+i'          shift, and enter state 61
	'@-'           shift, and enter state 62
	'@-i'          shift, and enter state 63
	'@0'           shift, and enter state 64
	'@1'           shift, and enter state 65

	BasisState     goto state 229
	ListBasisState goto state 230

State 211

	ControlBits -> '[' Integer ',' . ListInteger ']'    (rule 80)

	L_integ        shift, and enter state 40

	Integer        goto state 227
	ListInteger    goto state 228

State 212

	ControlTerms -> '[' Term ',' ListTerm ']' .         (rule 85)

	'ctrl'         reduce using rule 85


State 213

	Term1 -> 'let' '{' '(' Var ',' ListVar . ')' '=' Term '}' 'in' Term    (rule 90)

	')'            shift, and enter state 226


State 214

	Term1 -> 'let' '{' Var '=' Term '}' . 'in' Term     (rule 89)

	'in'           shift, and enter state 225


State 215

	Term1 -> 'if' Term 'then' Term 'else' Term .        (rule 88)

	'('            reduce using rule 88
	'()'           reduce using rule 88
	')'            reduce using rule 88
	','            reduce using rule 88
	'->'           reduce using rule 88
	';'            reduce using rule 88
	'@+'           reduce using rule 88
	'@+i'          reduce using rule 88
	'@-'           reduce using rule 88
	'@-i'          reduce using rule 88
	'@0'           reduce using rule 88
	'@1'           reduce using rule 88
	']'            reduce using rule 88
	'case'         reduce using rule 88
	'else'         reduce using rule 88
	'gate'         reduce using rule 88
	'if'           reduce using rule 88
	'let'          reduce using rule 88
	'of'           reduce using rule 88
	'then'         reduce using rule 88
	'with'         reduce using rule 88
	'}'            reduce using rule 88
	L_integ        reduce using rule 88
	L_BitVariable  reduce using rule 88
	L_Var          reduce using rule 88
	L_Lambda       reduce using rule 88


State 216

	Gate -> 'U2' '(' Angle ',' Angle . ')'              (rule 61)

	')'            shift, and enter state 224


State 217

	Gate -> 'U3' '(' Angle ',' Angle . ',' Angle ')'    (rule 62)

	','            shift, and enter state 223


State 218

	CaseExpression -> Term '->' Term .                  (rule 113)

	'('            reduce using rule 113
	'()'           reduce using rule 113
	')'            reduce using rule 113
	','            reduce using rule 113
	'->'           reduce using rule 113
	';'            reduce using rule 113
	'@+'           reduce using rule 113
	'@+i'          reduce using rule 113
	'@-'           reduce using rule 113
	'@-i'          reduce using rule 113
	'@0'           reduce using rule 113
	'@1'           reduce using rule 113
	']'            reduce using rule 113
	'case'         reduce using rule 113
	'else'         reduce using rule 113
	'gate'         reduce using rule 113
	'if'           reduce using rule 113
	'let'          reduce using rule 113
	'of'           reduce using rule 113
	'then'         reduce using rule 113
	'with'         reduce using rule 113
	'}'            reduce using rule 113
	L_integ        reduce using rule 113
	L_BitVariable  reduce using rule 113
	L_Var          reduce using rule 113
	L_Lambda       reduce using rule 113


State 219

	ListCaseExpression -> CaseExpression ListCaseExpression .    (rule 115)

	'('            reduce using rule 115
	'()'           reduce using rule 115
	')'            reduce using rule 115
	','            reduce using rule 115
	'->'           reduce using rule 115
	';'            reduce using rule 115
	'@+'           reduce using rule 115
	'@+i'          reduce using rule 115
	'@-'           reduce using rule 115
	'@-i'          reduce using rule 115
	'@0'           reduce using rule 115
	'@1'           reduce using rule 115
	']'            reduce using rule 115
	'case'         reduce using rule 115
	'else'         reduce using rule 115
	'gate'         reduce using rule 115
	'if'           reduce using rule 115
	'let'          reduce using rule 115
	'of'           reduce using rule 115
	'then'         reduce using rule 115
	'with'         reduce using rule 115
	'}'            reduce using rule 115
	L_integ        reduce using rule 115
	L_BitVariable  reduce using rule 115
	L_Var          reduce using rule 115
	L_Lambda       reduce using rule 115


State 220

	ListTerm -> Term ',' ListTerm .                     (rule 87)

	')'            reduce using rule 87
	']'            reduce using rule 87


State 221

	Term1 -> Var ',' ListVar '<-' Term ';' . Term       (rule 92)

	'('            shift, and enter state 58
	'()'           shift, and enter state 59
	'@+'           shift, and enter state 60
	'@+i'          shift, and enter state 61
	'@-'           shift, and enter state 62
	'@-i'          shift, and enter state 63
	'@0'           shift, and enter state 64
	'@1'           shift, and enter state 65
	'case'         shift, and enter state 66
	'gate'         shift, and enter state 67
	'if'           shift, and enter state 68
	'let'          shift, and enter state 69
	'with'         shift, and enter state 70
	L_integ        shift, and enter state 40
	L_BitVariable  shift, and enter state 71
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 72

	Integer        goto state 44
	BitVariable    goto state 45
	Var            goto state 46
	Lambda         goto state 47
	IntegerExpr    goto state 48
	IntegerExpr1   goto state 49
	IntegerExpr2   goto state 50
	BasisState     goto state 51
	Bit            goto state 52
	Tuple          goto state 53
	Term1          goto state 54
	Term2          goto state 55
	Term3          goto state 56
	Term           goto state 222

State 222

	Term1 -> Var ',' ListVar '<-' Term ';' Term .       (rule 92)

	'('            reduce using rule 92
	'()'           reduce using rule 92
	')'            reduce using rule 92
	','            reduce using rule 92
	'->'           reduce using rule 92
	';'            reduce using rule 92
	'@+'           reduce using rule 92
	'@+i'          reduce using rule 92
	'@-'           reduce using rule 92
	'@-i'          reduce using rule 92
	'@0'           reduce using rule 92
	'@1'           reduce using rule 92
	']'            reduce using rule 92
	'case'         reduce using rule 92
	'else'         reduce using rule 92
	'gate'         reduce using rule 92
	'if'           reduce using rule 92
	'let'          reduce using rule 92
	'of'           reduce using rule 92
	'then'         reduce using rule 92
	'with'         reduce using rule 92
	'}'            reduce using rule 92
	L_integ        reduce using rule 92
	L_BitVariable  reduce using rule 92
	L_Var          reduce using rule 92
	L_Lambda       reduce using rule 92


State 223

	Gate -> 'U3' '(' Angle ',' Angle ',' . Angle ')'    (rule 62)

	L_doubl        shift, and enter state 2

	Double         goto state 145
	Angle          goto state 237

State 224

	Gate -> 'U2' '(' Angle ',' Angle ')' .              (rule 61)

	'$'            reduce using rule 61
	'('            reduce using rule 61
	'()'           reduce using rule 61
	')'            reduce using rule 61
	','            reduce using rule 61
	'->'           reduce using rule 61
	'.'            reduce using rule 61
	';'            reduce using rule 61
	'@+'           reduce using rule 61
	'@+i'          reduce using rule 61
	'@-'           reduce using rule 61
	'@-i'          reduce using rule 61
	'@0'           reduce using rule 61
	'@1'           reduce using rule 61
	']'            reduce using rule 61
	'case'         reduce using rule 61
	'else'         reduce using rule 61
	'gate'         reduce using rule 61
	'if'           reduce using rule 61
	'let'          reduce using rule 61
	'of'           reduce using rule 61
	'then'         reduce using rule 61
	'with'         reduce using rule 61
	'}'            reduce using rule 61
	L_integ        reduce using rule 61
	L_BitVariable  reduce using rule 61
	L_Var          reduce using rule 61
	L_Lambda       reduce using rule 61


State 225

	Term1 -> 'let' '{' Var '=' Term '}' 'in' . Term     (rule 89)

	'('            shift, and enter state 58
	'()'           shift, and enter state 59
	'@+'           shift, and enter state 60
	'@+i'          shift, and enter state 61
	'@-'           shift, and enter state 62
	'@-i'          shift, and enter state 63
	'@0'           shift, and enter state 64
	'@1'           shift, and enter state 65
	'case'         shift, and enter state 66
	'gate'         shift, and enter state 67
	'if'           shift, and enter state 68
	'let'          shift, and enter state 69
	'with'         shift, and enter state 70
	L_integ        shift, and enter state 40
	L_BitVariable  shift, and enter state 71
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 72

	Integer        goto state 44
	BitVariable    goto state 45
	Var            goto state 46
	Lambda         goto state 47
	IntegerExpr    goto state 48
	IntegerExpr1   goto state 49
	IntegerExpr2   goto state 50
	BasisState     goto state 51
	Bit            goto state 52
	Tuple          goto state 53
	Term1          goto state 54
	Term2          goto state 55
	Term3          goto state 56
	Term           goto state 236

State 226

	Term1 -> 'let' '{' '(' Var ',' ListVar ')' . '=' Term '}' 'in' Term    (rule 90)

	'='            shift, and enter state 235


State 227

	ListInteger -> Integer .                            (rule 81)
	ListInteger -> Integer . ',' ListInteger            (rule 82)

	','            shift, and enter state 234
	']'            reduce using rule 81


State 228

	ControlBits -> '[' Integer ',' ListInteger . ']'    (rule 80)

	']'            shift, and enter state 233


State 229

	ListBasisState -> BasisState .                      (rule 77)
	ListBasisState -> BasisState . ',' ListBasisState    (rule 78)

	','            shift, and enter state 232
	']'            reduce using rule 77


State 230

	ControlBasisStates -> '[' BasisState ',' ListBasisState . ']'    (rule 76)

	']'            shift, and enter state 231


State 231

	ControlBasisStates -> '[' BasisState ',' ListBasisState ']' .    (rule 76)

	'$'            reduce using rule 76
	'('            reduce using rule 76
	'()'           reduce using rule 76
	')'            reduce using rule 76
	','            reduce using rule 76
	'->'           reduce using rule 76
	'.'            reduce using rule 76
	';'            reduce using rule 76
	'@+'           reduce using rule 76
	'@+i'          reduce using rule 76
	'@-'           reduce using rule 76
	'@-i'          reduce using rule 76
	'@0'           reduce using rule 76
	'@1'           reduce using rule 76
	']'            reduce using rule 76
	'case'         reduce using rule 76
	'else'         reduce using rule 76
	'gate'         reduce using rule 76
	'if'           reduce using rule 76
	'let'          reduce using rule 76
	'of'           reduce using rule 76
	'then'         reduce using rule 76
	'with'         reduce using rule 76
	'}'            reduce using rule 76
	L_integ        reduce using rule 76
	L_BitVariable  reduce using rule 76
	L_Var          reduce using rule 76
	L_Lambda       reduce using rule 76


State 232

	ListBasisState -> BasisState ',' . ListBasisState    (rule 78)

	'@+'           shift, and enter state 60
	'@+i'          shift, and enter state 61
	'@-'           shift, and enter state 62
	'@-i'          shift, and enter state 63
	'@0'           shift, and enter state 64
	'@1'           shift, and enter state 65

	BasisState     goto state 229
	ListBasisState goto state 241

State 233

	ControlBits -> '[' Integer ',' ListInteger ']' .    (rule 80)

	'$'            reduce using rule 80
	'('            reduce using rule 80
	'()'           reduce using rule 80
	')'            reduce using rule 80
	','            reduce using rule 80
	'->'           reduce using rule 80
	'.'            reduce using rule 80
	';'            reduce using rule 80
	'@+'           reduce using rule 80
	'@+i'          reduce using rule 80
	'@-'           reduce using rule 80
	'@-i'          reduce using rule 80
	'@0'           reduce using rule 80
	'@1'           reduce using rule 80
	']'            reduce using rule 80
	'case'         reduce using rule 80
	'else'         reduce using rule 80
	'gate'         reduce using rule 80
	'if'           reduce using rule 80
	'let'          reduce using rule 80
	'of'           reduce using rule 80
	'then'         reduce using rule 80
	'with'         reduce using rule 80
	'}'            reduce using rule 80
	L_integ        reduce using rule 80
	L_BitVariable  reduce using rule 80
	L_Var          reduce using rule 80
	L_Lambda       reduce using rule 80


State 234

	ListInteger -> Integer ',' . ListInteger            (rule 82)

	L_integ        shift, and enter state 40

	Integer        goto state 227
	ListInteger    goto state 240

State 235

	Term1 -> 'let' '{' '(' Var ',' ListVar ')' '=' . Term '}' 'in' Term    (rule 90)

	'('            shift, and enter state 58
	'()'           shift, and enter state 59
	'@+'           shift, and enter state 60
	'@+i'          shift, and enter state 61
	'@-'           shift, and enter state 62
	'@-i'          shift, and enter state 63
	'@0'           shift, and enter state 64
	'@1'           shift, and enter state 65
	'case'         shift, and enter state 66
	'gate'         shift, and enter state 67
	'if'           shift, and enter state 68
	'let'          shift, and enter state 69
	'with'         shift, and enter state 70
	L_integ        shift, and enter state 40
	L_BitVariable  shift, and enter state 71
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 72

	Integer        goto state 44
	BitVariable    goto state 45
	Var            goto state 46
	Lambda         goto state 47
	IntegerExpr    goto state 48
	IntegerExpr1   goto state 49
	IntegerExpr2   goto state 50
	BasisState     goto state 51
	Bit            goto state 52
	Tuple          goto state 53
	Term1          goto state 54
	Term2          goto state 55
	Term3          goto state 56
	Term           goto state 239

State 236

	Term1 -> 'let' '{' Var '=' Term '}' 'in' Term .     (rule 89)

	'('            reduce using rule 89
	'()'           reduce using rule 89
	')'            reduce using rule 89
	','            reduce using rule 89
	'->'           reduce using rule 89
	';'            reduce using rule 89
	'@+'           reduce using rule 89
	'@+i'          reduce using rule 89
	'@-'           reduce using rule 89
	'@-i'          reduce using rule 89
	'@0'           reduce using rule 89
	'@1'           reduce using rule 89
	']'            reduce using rule 89
	'case'         reduce using rule 89
	'else'         reduce using rule 89
	'gate'         reduce using rule 89
	'if'           reduce using rule 89
	'let'          reduce using rule 89
	'of'           reduce using rule 89
	'then'         reduce using rule 89
	'with'         reduce using rule 89
	'}'            reduce using rule 89
	L_integ        reduce using rule 89
	L_BitVariable  reduce using rule 89
	L_Var          reduce using rule 89
	L_Lambda       reduce using rule 89


State 237

	Gate -> 'U3' '(' Angle ',' Angle ',' Angle . ')'    (rule 62)

	')'            shift, and enter state 238


State 238

	Gate -> 'U3' '(' Angle ',' Angle ',' Angle ')' .    (rule 62)

	'$'            reduce using rule 62
	'('            reduce using rule 62
	'()'           reduce using rule 62
	')'            reduce using rule 62
	','            reduce using rule 62
	'->'           reduce using rule 62
	'.'            reduce using rule 62
	';'            reduce using rule 62
	'@+'           reduce using rule 62
	'@+i'          reduce using rule 62
	'@-'           reduce using rule 62
	'@-i'          reduce using rule 62
	'@0'           reduce using rule 62
	'@1'           reduce using rule 62
	']'            reduce using rule 62
	'case'         reduce using rule 62
	'else'         reduce using rule 62
	'gate'         reduce using rule 62
	'if'           reduce using rule 62
	'let'          reduce using rule 62
	'of'           reduce using rule 62
	'then'         reduce using rule 62
	'with'         reduce using rule 62
	'}'            reduce using rule 62
	L_integ        reduce using rule 62
	L_BitVariable  reduce using rule 62
	L_Var          reduce using rule 62
	L_Lambda       reduce using rule 62


State 239

	Term1 -> 'let' '{' '(' Var ',' ListVar ')' '=' Term . '}' 'in' Term    (rule 90)

	'}'            shift, and enter state 242


State 240

	ListInteger -> Integer ',' ListInteger .            (rule 82)

	']'            reduce using rule 82


State 241

	ListBasisState -> BasisState ',' ListBasisState .    (rule 78)

	']'            reduce using rule 78


State 242

	Term1 -> 'let' '{' '(' Var ',' ListVar ')' '=' Term '}' . 'in' Term    (rule 90)

	'in'           shift, and enter state 243


State 243

	Term1 -> 'let' '{' '(' Var ',' ListVar ')' '=' Term '}' 'in' . Term    (rule 90)

	'('            shift, and enter state 58
	'()'           shift, and enter state 59
	'@+'           shift, and enter state 60
	'@+i'          shift, and enter state 61
	'@-'           shift, and enter state 62
	'@-i'          shift, and enter state 63
	'@0'           shift, and enter state 64
	'@1'           shift, and enter state 65
	'case'         shift, and enter state 66
	'gate'         shift, and enter state 67
	'if'           shift, and enter state 68
	'let'          shift, and enter state 69
	'with'         shift, and enter state 70
	L_integ        shift, and enter state 40
	L_BitVariable  shift, and enter state 71
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 72

	Integer        goto state 44
	BitVariable    goto state 45
	Var            goto state 46
	Lambda         goto state 47
	IntegerExpr    goto state 48
	IntegerExpr1   goto state 49
	IntegerExpr2   goto state 50
	BasisState     goto state 51
	Bit            goto state 52
	Tuple          goto state 53
	Term1          goto state 54
	Term2          goto state 55
	Term3          goto state 56
	Term           goto state 244

State 244

	Term1 -> 'let' '{' '(' Var ',' ListVar ')' '=' Term '}' 'in' Term .    (rule 90)

	'('            reduce using rule 90
	'()'           reduce using rule 90
	')'            reduce using rule 90
	','            reduce using rule 90
	'->'           reduce using rule 90
	';'            reduce using rule 90
	'@+'           reduce using rule 90
	'@+i'          reduce using rule 90
	'@-'           reduce using rule 90
	'@-i'          reduce using rule 90
	'@0'           reduce using rule 90
	'@1'           reduce using rule 90
	']'            reduce using rule 90
	'case'         reduce using rule 90
	'else'         reduce using rule 90
	'gate'         reduce using rule 90
	'if'           reduce using rule 90
	'let'          reduce using rule 90
	'of'           reduce using rule 90
	'then'         reduce using rule 90
	'with'         reduce using rule 90
	'}'            reduce using rule 90
	L_integ        reduce using rule 90
	L_BitVariable  reduce using rule 90
	L_Var          reduce using rule 90
	L_Lambda       reduce using rule 90


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 126
Number of terminals: 80
Number of non-terminals: 43
Number of states: 245
