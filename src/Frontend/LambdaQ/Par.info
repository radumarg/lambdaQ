-----------------------------------------------------------------------------
Info file generated by Happy Version 1.20.0 from Frontend/LambdaQ/Par.y
-----------------------------------------------------------------------------

state 49 contains 1 shift/reduce conflicts.
state 61 contains 1 shift/reduce conflicts.
state 94 contains 2 shift/reduce conflicts.
state 134 contains 1 shift/reduce conflicts.
state 135 contains 1 shift/reduce conflicts.
state 137 contains 1 shift/reduce conflicts.
state 163 contains 1 shift/reduce conflicts.

-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_pProgram -> Program                         (0)
	Double -> L_doubl                                  (1)
	Integer -> L_integ                                 (2)
	GateVar -> L_GateVar                               (3)
	Var -> L_Var                                       (4)
	Lambda -> L_Lambda                                 (5)
	Program -> ListFunctionDeclaration                 (6)
	IntegerExpression -> IntegerExpression '+' IntegerExpression1   (7)
	IntegerExpression -> IntegerExpression '-' IntegerExpression1   (8)
	IntegerExpression -> IntegerExpression1            (9)
	IntegerExpression1 -> IntegerExpression1 '*' IntegerExpression2   (10)
	IntegerExpression1 -> IntegerExpression1 '/' IntegerExpression2   (11)
	IntegerExpression1 -> IntegerExpression2           (12)
	IntegerExpression2 -> Integer                      (13)
	IntegerExpression2 -> '(' IntegerExpression ')'    (14)
	BoolValue -> 'True'                                (15)
	BoolValue -> 'False'                               (16)
	BoolExpression -> BoolExpression '&&' BoolExpression1   (17)
	BoolExpression -> BoolExpression '||' BoolExpression1   (18)
	BoolExpression -> 'not' BoolExpression1            (19)
	BoolExpression -> BoolExpression1                  (20)
	BoolExpression1 -> BoolExpression1 '==' BoolExpression2   (21)
	BoolExpression1 -> BoolExpression1 '/=' BoolExpression2   (22)
	BoolExpression1 -> BoolExpression2                 (23)
	BoolExpression2 -> IntegerExpression2 '==' IntegerExpression2   (24)
	BoolExpression2 -> IntegerExpression2 '/=' IntegerExpression2   (25)
	BoolExpression2 -> IntegerExpression2 '>' IntegerExpression2   (26)
	BoolExpression2 -> IntegerExpression2 '>=' IntegerExpression2   (27)
	BoolExpression2 -> IntegerExpression2 '<' IntegerExpression2   (28)
	BoolExpression2 -> IntegerExpression2 '<=' IntegerExpression2   (29)
	BoolExpression2 -> BoolValue                       (30)
	BoolExpression2 -> '(' BoolExpression ')'          (31)
	Type -> Type '->' Type1                            (32)
	Type -> Type1                                      (33)
	Type1 -> Type1 '+' Type2                           (34)
	Type1 -> Type2                                     (35)
	Type2 -> Type2 '*' Type3                           (36)
	Type2 -> Type3                                     (37)
	Type3 -> Type4 '**' Integer                        (38)
	Type3 -> '!' Type4                                 (39)
	Type3 -> Type4                                     (40)
	Type5 -> 'Bool'                                    (41)
	Type5 -> 'Bit'                                     (42)
	Type5 -> 'Int'                                     (43)
	Type5 -> 'Qbit'                                    (44)
	Type5 -> '()'                                      (45)
	Type5 -> '[' Type ']'                              (46)
	Type5 -> '(' Type ')'                              (47)
	Type4 -> Type5                                     (48)
	Angle -> Double                                    (49)
	BasisState -> '@0'                                 (50)
	BasisState -> '@1'                                 (51)
	BasisState -> '@+'                                 (52)
	BasisState -> '@-'                                 (53)
	BasisState -> '@+i'                                (54)
	BasisState -> '@-i'                                (55)
	Gate -> 'H'                                        (56)
	Gate -> 'X'                                        (57)
	Gate -> 'Y'                                        (58)
	Gate -> 'Z'                                        (59)
	Gate -> 'ID'                                       (60)
	Gate -> 'ROOT_X' Integer                           (61)
	Gate -> 'ROOT_X_DAG' Integer                       (62)
	Gate -> 'ROOT_Y' Integer                           (63)
	Gate -> 'ROOT_Y_DAG' Integer                       (64)
	Gate -> 'ROOT_Z' Integer                           (65)
	Gate -> 'ROOT_Z_DAG' Integer                       (66)
	Gate -> 'S'                                        (67)
	Gate -> 'S_DAG'                                    (68)
	Gate -> 'T'                                        (69)
	Gate -> 'T_DAG'                                    (70)
	Gate -> 'SQRT_X'                                   (71)
	Gate -> 'SQRT_X_DAG'                               (72)
	Gate -> 'SQRT_Y'                                   (73)
	Gate -> 'SQRT_Y_DAG'                               (74)
	Gate -> 'RX' Angle                                 (75)
	Gate -> 'RY' Angle                                 (76)
	Gate -> 'RZ' Angle                                 (77)
	Gate -> 'U1' Angle                                 (78)
	Gate -> 'U2' '(' Angle ',' Angle ')'               (79)
	Gate -> 'U3' '(' Angle ',' Angle ',' Angle ')'     (80)
	Gate -> 'SWAP'                                     (81)
	Gate -> 'SQRT_SWAP'                                (82)
	Gate -> 'SQRT_SWAP_DAG'                            (83)
	Gate -> 'ISWAP'                                    (84)
	Gate -> 'FSWAP'                                    (85)
	Gate -> 'SWAP_THETA' Angle                         (86)
	Gate -> 'ROOT_SWAP' Integer                        (87)
	Gate -> 'ROOT_SWAP_DAG' Integer                    (88)
	Gate -> 'QFT' Integer                              (89)
	Gate -> 'QFT_DAG' Integer                          (90)
	Gate -> GateVar '(' Angle ',' Angle ',' Angle ')'   (91)
	Gate -> GateVar '(' Angle ',' Angle ')'            (92)
	Gate -> GateVar Angle                              (93)
	Gate -> GateVar Integer                            (94)
	Gate -> GateVar                                    (95)
	ListVar -> Var                                     (96)
	ListVar -> Var ',' ListVar                         (97)
	ControlBasisState -> '[' BasisState ']'            (98)
	ControlBasisStates -> '[' BasisState ',' ListBasisState ']'   (99)
	ListBasisState -> BasisState                       (100)
	ListBasisState -> BasisState ',' ListBasisState    (101)
	ControlBit -> '[' Integer ']'                      (102)
	ControlBits -> '[' Integer ',' ListInteger ']'     (103)
	ListInteger -> Integer                             (104)
	ListInteger -> Integer ',' ListInteger             (105)
	Tuple -> '(' Term ',' ListTerm ')'                 (106)
	ControlTerm -> '[' Term ']'                        (107)
	ControlTerms -> '[' Term ',' ListTerm ']'          (108)
	ListTerm -> Term                                   (109)
	ListTerm -> Term ',' ListTerm                      (110)
	Term -> Term1 '$' Term                             (111)
	Term -> Term1                                      (112)
	Term1 -> 'if' Term 'then' Term 'else' Term         (113)
	Term1 -> 'let' '{' Var '=' Term '}' 'in' Term      (114)
	Term1 -> 'let' '{' '(' Var ',' ListVar ')' '=' Term '}' 'in' Term   (115)
	Term1 -> Var '<-' Term ';' Term                    (116)
	Term1 -> Var ',' ListVar '<-' Term ';' Term        (117)
	Term1 -> 'case' Term 'of' CaseExpression ListCaseExpression   (118)
	Term1 -> Lambda Var Type '.' Term                  (119)
	Term1 -> Term2                                     (120)
	Term2 -> 'with' ControlTerm 'ctrl' ControlBasisState   (121)
	Term2 -> 'with' ControlTerms 'ctrl' ControlBasisStates   (122)
	Term2 -> 'with' ControlTerm 'ctrl' ControlBit      (123)
	Term2 -> 'with' ControlTerms 'ctrl' ControlBits    (124)
	Term2 -> Term2 Term3                               (125)
	Term2 -> Term2 '.' Term3                           (126)
	Term2 -> Var ',' ListVar                           (127)
	Term2 -> Term3                                     (128)
	Term3 -> Var                                       (129)
	Term3 -> '()'                                      (130)
	Term3 -> BasisState                                (131)
	Term3 -> BoolExpression                            (132)
	Term3 -> IntegerExpression                         (133)
	Term3 -> 'gate' Gate                               (134)
	Term3 -> Tuple                                     (135)
	Term3 -> List                                      (136)
	Term3 -> Term4                                     (137)
	Term4 -> List '!!' Integer                         (138)
	Term4 -> '(' Term ')'                              (139)
	List1 -> '[]'                                      (140)
	List1 -> '[' Term ']'                              (141)
	List1 -> '[' Term ',' ListTerm ']'                 (142)
	List1 -> '(' List ')'                              (143)
	List -> List '++' List1                            (144)
	List -> Term3 ':' List1                            (145)
	List -> List1                                      (146)
	CaseExpression -> Term3 '->' Term3                 (147)
	ListCaseExpression -> CaseExpression               (148)
	ListCaseExpression -> CaseExpression ListCaseExpression   (149)
	Arg -> Var                                         (150)
	ListArg ->                                         (151)
	ListArg -> Arg ListArg                             (152)
	FunctionDefinition -> Var ListArg '=' Term         (153)
	FunctionDefinition -> FunctionDefinition ';'       (154)
	FunctionType -> Var '::' Type                      (155)
	FunctionType -> FunctionType ';'                   (156)
	FunctionDeclaration -> FunctionType ';' FunctionDefinition ';'   (157)
	ListFunctionDeclaration ->                         (158)
	ListFunctionDeclaration -> FunctionDeclaration ListFunctionDeclaration   (159)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	'!'            { PT _ (TS _ 1) }
	'!!'           { PT _ (TS _ 2) }
	'$'            { PT _ (TS _ 3) }
	'&&'           { PT _ (TS _ 4) }
	'('            { PT _ (TS _ 5) }
	'()'           { PT _ (TS _ 6) }
	')'            { PT _ (TS _ 7) }
	'*'            { PT _ (TS _ 8) }
	'**'           { PT _ (TS _ 9) }
	'+'            { PT _ (TS _ 10) }
	'++'           { PT _ (TS _ 11) }
	','            { PT _ (TS _ 12) }
	'-'            { PT _ (TS _ 13) }
	'->'           { PT _ (TS _ 14) }
	'.'            { PT _ (TS _ 15) }
	'/'            { PT _ (TS _ 16) }
	'/='           { PT _ (TS _ 17) }
	':'            { PT _ (TS _ 18) }
	'::'           { PT _ (TS _ 19) }
	';'            { PT _ (TS _ 20) }
	'<'            { PT _ (TS _ 21) }
	'<-'           { PT _ (TS _ 22) }
	'<='           { PT _ (TS _ 23) }
	'='            { PT _ (TS _ 24) }
	'=='           { PT _ (TS _ 25) }
	'>'            { PT _ (TS _ 26) }
	'>='           { PT _ (TS _ 27) }
	'@+'           { PT _ (TS _ 28) }
	'@+i'          { PT _ (TS _ 29) }
	'@-'           { PT _ (TS _ 30) }
	'@-i'          { PT _ (TS _ 31) }
	'@0'           { PT _ (TS _ 32) }
	'@1'           { PT _ (TS _ 33) }
	'Bit'          { PT _ (TS _ 34) }
	'Bool'         { PT _ (TS _ 35) }
	'FSWAP'        { PT _ (TS _ 36) }
	'False'        { PT _ (TS _ 37) }
	'H'            { PT _ (TS _ 38) }
	'ID'           { PT _ (TS _ 39) }
	'ISWAP'        { PT _ (TS _ 40) }
	'Int'          { PT _ (TS _ 41) }
	'QFT'          { PT _ (TS _ 42) }
	'QFT_DAG'      { PT _ (TS _ 43) }
	'Qbit'         { PT _ (TS _ 44) }
	'ROOT_SWAP'    { PT _ (TS _ 45) }
	'ROOT_SWAP_DAG'{ PT _ (TS _ 46) }
	'ROOT_X'       { PT _ (TS _ 47) }
	'ROOT_X_DAG'   { PT _ (TS _ 48) }
	'ROOT_Y'       { PT _ (TS _ 49) }
	'ROOT_Y_DAG'   { PT _ (TS _ 50) }
	'ROOT_Z'       { PT _ (TS _ 51) }
	'ROOT_Z_DAG'   { PT _ (TS _ 52) }
	'RX'           { PT _ (TS _ 53) }
	'RY'           { PT _ (TS _ 54) }
	'RZ'           { PT _ (TS _ 55) }
	'S'            { PT _ (TS _ 56) }
	'SQRT_SWAP'    { PT _ (TS _ 57) }
	'SQRT_SWAP_DAG'{ PT _ (TS _ 58) }
	'SQRT_X'       { PT _ (TS _ 59) }
	'SQRT_X_DAG'   { PT _ (TS _ 60) }
	'SQRT_Y'       { PT _ (TS _ 61) }
	'SQRT_Y_DAG'   { PT _ (TS _ 62) }
	'SWAP'         { PT _ (TS _ 63) }
	'SWAP_THETA'   { PT _ (TS _ 64) }
	'S_DAG'        { PT _ (TS _ 65) }
	'T'            { PT _ (TS _ 66) }
	'T_DAG'        { PT _ (TS _ 67) }
	'True'         { PT _ (TS _ 68) }
	'U1'           { PT _ (TS _ 69) }
	'U2'           { PT _ (TS _ 70) }
	'U3'           { PT _ (TS _ 71) }
	'X'            { PT _ (TS _ 72) }
	'Y'            { PT _ (TS _ 73) }
	'Z'            { PT _ (TS _ 74) }
	'['            { PT _ (TS _ 75) }
	'[]'           { PT _ (TS _ 76) }
	']'            { PT _ (TS _ 77) }
	'case'         { PT _ (TS _ 78) }
	'ctrl'         { PT _ (TS _ 79) }
	'else'         { PT _ (TS _ 80) }
	'gate'         { PT _ (TS _ 81) }
	'if'           { PT _ (TS _ 82) }
	'in'           { PT _ (TS _ 83) }
	'let'          { PT _ (TS _ 84) }
	'not'          { PT _ (TS _ 85) }
	'of'           { PT _ (TS _ 86) }
	'then'         { PT _ (TS _ 87) }
	'with'         { PT _ (TS _ 88) }
	'{'            { PT _ (TS _ 89) }
	'||'           { PT _ (TS _ 90) }
	'}'            { PT _ (TS _ 91) }
	L_doubl        { PT _ (TD $$) }
	L_integ        { PT _ (TI $$) }
	L_GateVar      { PT _ (T_GateVar _) }
	L_Var          { PT _ (T_Var _) }
	L_Lambda       { PT _ (T_Lambda $$) }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_pProgram rule  0
	Double          rule  1
	Integer         rule  2
	GateVar         rule  3
	Var             rule  4
	Lambda          rule  5
	Program         rule  6
	IntegerExpression rules 7, 8, 9
	IntegerExpression1 rules 10, 11, 12
	IntegerExpression2 rules 13, 14
	BoolValue       rules 15, 16
	BoolExpression  rules 17, 18, 19, 20
	BoolExpression1 rules 21, 22, 23
	BoolExpression2 rules 24, 25, 26, 27, 28, 29, 30, 31
	Type            rules 32, 33
	Type1           rules 34, 35
	Type2           rules 36, 37
	Type3           rules 38, 39, 40
	Type5           rules 41, 42, 43, 44, 45, 46, 47
	Type4           rule  48
	Angle           rule  49
	BasisState      rules 50, 51, 52, 53, 54, 55
	Gate            rules 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95
	ListVar         rules 96, 97
	ControlBasisState rule  98
	ControlBasisStates rule  99
	ListBasisState  rules 100, 101
	ControlBit      rule  102
	ControlBits     rule  103
	ListInteger     rules 104, 105
	Tuple           rule  106
	ControlTerm     rule  107
	ControlTerms    rule  108
	ListTerm        rules 109, 110
	Term            rules 111, 112
	Term1           rules 113, 114, 115, 116, 117, 118, 119, 120
	Term2           rules 121, 122, 123, 124, 125, 126, 127, 128
	Term3           rules 129, 130, 131, 132, 133, 134, 135, 136, 137
	Term4           rules 138, 139
	List1           rules 140, 141, 142, 143
	List            rules 144, 145, 146
	CaseExpression  rule  147
	ListCaseExpression rules 148, 149
	Arg             rule  150
	ListArg         rules 151, 152
	FunctionDefinition rules 153, 154
	FunctionType    rules 155, 156
	FunctionDeclaration rule  157
	ListFunctionDeclaration rules 158, 159

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0

	%start_pProgram -> . Program                        (rule 0)

	L_Var          shift, and enter state 8
	%eof           reduce using rule 158

	Var            goto state 3
	Program        goto state 4
	FunctionType   goto state 5
	FunctionDeclarationgoto state 6
	ListFunctionDeclarationgoto state 7

State 1

	Double -> . L_doubl                                 (rule 1)

	L_doubl        shift, and enter state 2


State 2

	Double -> L_doubl .                                 (rule 1)

	'$'            reduce using rule 1
	'('            reduce using rule 1
	'()'           reduce using rule 1
	')'            reduce using rule 1
	','            reduce using rule 1
	'->'           reduce using rule 1
	'.'            reduce using rule 1
	':'            reduce using rule 1
	';'            reduce using rule 1
	'@+'           reduce using rule 1
	'@+i'          reduce using rule 1
	'@-'           reduce using rule 1
	'@-i'          reduce using rule 1
	'@0'           reduce using rule 1
	'@1'           reduce using rule 1
	'False'        reduce using rule 1
	'True'         reduce using rule 1
	'['            reduce using rule 1
	'[]'           reduce using rule 1
	']'            reduce using rule 1
	'else'         reduce using rule 1
	'gate'         reduce using rule 1
	'not'          reduce using rule 1
	'of'           reduce using rule 1
	'then'         reduce using rule 1
	'}'            reduce using rule 1
	L_integ        reduce using rule 1
	L_Var          reduce using rule 1


State 3

	FunctionType -> Var . '::' Type                     (rule 155)

	'::'           shift, and enter state 11


State 4

	%start_pProgram -> Program .                        (rule 0)

	%eof           accept


State 5

	FunctionType -> FunctionType . ';'                  (rule 156)
	FunctionDeclaration -> FunctionType . ';' FunctionDefinition ';'    (rule 157)

	';'            shift, and enter state 10


State 6

	ListFunctionDeclaration -> FunctionDeclaration . ListFunctionDeclaration    (rule 159)

	L_Var          shift, and enter state 8
	%eof           reduce using rule 158

	Var            goto state 3
	FunctionType   goto state 5
	FunctionDeclarationgoto state 6
	ListFunctionDeclarationgoto state 9

State 7

	Program -> ListFunctionDeclaration .                (rule 6)

	%eof           reduce using rule 6


State 8

	Var -> L_Var .                                      (rule 4)

	'!'            reduce using rule 4
	'$'            reduce using rule 4
	'('            reduce using rule 4
	'()'           reduce using rule 4
	')'            reduce using rule 4
	','            reduce using rule 4
	'->'           reduce using rule 4
	'.'            reduce using rule 4
	':'            reduce using rule 4
	'::'           reduce using rule 4
	';'            reduce using rule 4
	'<-'           reduce using rule 4
	'='            reduce using rule 4
	'@+'           reduce using rule 4
	'@+i'          reduce using rule 4
	'@-'           reduce using rule 4
	'@-i'          reduce using rule 4
	'@0'           reduce using rule 4
	'@1'           reduce using rule 4
	'Bit'          reduce using rule 4
	'Bool'         reduce using rule 4
	'False'        reduce using rule 4
	'Int'          reduce using rule 4
	'Qbit'         reduce using rule 4
	'True'         reduce using rule 4
	'['            reduce using rule 4
	'[]'           reduce using rule 4
	']'            reduce using rule 4
	'else'         reduce using rule 4
	'gate'         reduce using rule 4
	'not'          reduce using rule 4
	'of'           reduce using rule 4
	'then'         reduce using rule 4
	'}'            reduce using rule 4
	L_integ        reduce using rule 4
	L_Var          reduce using rule 4


State 9

	ListFunctionDeclaration -> FunctionDeclaration ListFunctionDeclaration .    (rule 159)

	%eof           reduce using rule 159


State 10

	FunctionType -> FunctionType ';' .                  (rule 156)
	FunctionDeclaration -> FunctionType ';' . FunctionDefinition ';'    (rule 157)

	';'            reduce using rule 156
	L_Var          shift, and enter state 8

	Var            goto state 26
	FunctionDefinitiongoto state 27

State 11

	FunctionType -> Var '::' . Type                     (rule 155)

	'!'            shift, and enter state 18
	'('            shift, and enter state 19
	'()'           shift, and enter state 20
	'Bit'          shift, and enter state 21
	'Bool'         shift, and enter state 22
	'Int'          shift, and enter state 23
	'Qbit'         shift, and enter state 24
	'['            shift, and enter state 25

	Type           goto state 12
	Type1          goto state 13
	Type2          goto state 14
	Type3          goto state 15
	Type5          goto state 16
	Type4          goto state 17

State 12

	Type -> Type . '->' Type1                           (rule 32)
	FunctionType -> Var '::' Type .                     (rule 155)

	'->'           shift, and enter state 38
	';'            reduce using rule 155


State 13

	Type -> Type1 .                                     (rule 33)
	Type1 -> Type1 . '+' Type2                          (rule 34)

	')'            reduce using rule 33
	'+'            shift, and enter state 37
	'->'           reduce using rule 33
	'.'            reduce using rule 33
	';'            reduce using rule 33
	']'            reduce using rule 33


State 14

	Type1 -> Type2 .                                    (rule 35)
	Type2 -> Type2 . '*' Type3                          (rule 36)

	')'            reduce using rule 35
	'*'            shift, and enter state 36
	'+'            reduce using rule 35
	'->'           reduce using rule 35
	'.'            reduce using rule 35
	';'            reduce using rule 35
	']'            reduce using rule 35


State 15

	Type2 -> Type3 .                                    (rule 37)

	')'            reduce using rule 37
	'*'            reduce using rule 37
	'+'            reduce using rule 37
	'->'           reduce using rule 37
	'.'            reduce using rule 37
	';'            reduce using rule 37
	']'            reduce using rule 37


State 16

	Type4 -> Type5 .                                    (rule 48)

	')'            reduce using rule 48
	'*'            reduce using rule 48
	'**'           reduce using rule 48
	'+'            reduce using rule 48
	'->'           reduce using rule 48
	'.'            reduce using rule 48
	';'            reduce using rule 48
	']'            reduce using rule 48


State 17

	Type3 -> Type4 . '**' Integer                       (rule 38)
	Type3 -> Type4 .                                    (rule 40)

	')'            reduce using rule 40
	'*'            reduce using rule 40
	'**'           shift, and enter state 35
	'+'            reduce using rule 40
	'->'           reduce using rule 40
	'.'            reduce using rule 40
	';'            reduce using rule 40
	']'            reduce using rule 40


State 18

	Type3 -> '!' . Type4                                (rule 39)

	'('            shift, and enter state 19
	'()'           shift, and enter state 20
	'Bit'          shift, and enter state 21
	'Bool'         shift, and enter state 22
	'Int'          shift, and enter state 23
	'Qbit'         shift, and enter state 24
	'['            shift, and enter state 25

	Type5          goto state 16
	Type4          goto state 34

State 19

	Type5 -> '(' . Type ')'                             (rule 47)

	'!'            shift, and enter state 18
	'('            shift, and enter state 19
	'()'           shift, and enter state 20
	'Bit'          shift, and enter state 21
	'Bool'         shift, and enter state 22
	'Int'          shift, and enter state 23
	'Qbit'         shift, and enter state 24
	'['            shift, and enter state 25

	Type           goto state 33
	Type1          goto state 13
	Type2          goto state 14
	Type3          goto state 15
	Type5          goto state 16
	Type4          goto state 17

State 20

	Type5 -> '()' .                                     (rule 45)

	')'            reduce using rule 45
	'*'            reduce using rule 45
	'**'           reduce using rule 45
	'+'            reduce using rule 45
	'->'           reduce using rule 45
	'.'            reduce using rule 45
	';'            reduce using rule 45
	']'            reduce using rule 45


State 21

	Type5 -> 'Bit' .                                    (rule 42)

	')'            reduce using rule 42
	'*'            reduce using rule 42
	'**'           reduce using rule 42
	'+'            reduce using rule 42
	'->'           reduce using rule 42
	'.'            reduce using rule 42
	';'            reduce using rule 42
	']'            reduce using rule 42


State 22

	Type5 -> 'Bool' .                                   (rule 41)

	')'            reduce using rule 41
	'*'            reduce using rule 41
	'**'           reduce using rule 41
	'+'            reduce using rule 41
	'->'           reduce using rule 41
	'.'            reduce using rule 41
	';'            reduce using rule 41
	']'            reduce using rule 41


State 23

	Type5 -> 'Int' .                                    (rule 43)

	')'            reduce using rule 43
	'*'            reduce using rule 43
	'**'           reduce using rule 43
	'+'            reduce using rule 43
	'->'           reduce using rule 43
	'.'            reduce using rule 43
	';'            reduce using rule 43
	']'            reduce using rule 43


State 24

	Type5 -> 'Qbit' .                                   (rule 44)

	')'            reduce using rule 44
	'*'            reduce using rule 44
	'**'           reduce using rule 44
	'+'            reduce using rule 44
	'->'           reduce using rule 44
	'.'            reduce using rule 44
	';'            reduce using rule 44
	']'            reduce using rule 44


State 25

	Type5 -> '[' . Type ']'                             (rule 46)

	'!'            shift, and enter state 18
	'('            shift, and enter state 19
	'()'           shift, and enter state 20
	'Bit'          shift, and enter state 21
	'Bool'         shift, and enter state 22
	'Int'          shift, and enter state 23
	'Qbit'         shift, and enter state 24
	'['            shift, and enter state 25

	Type           goto state 32
	Type1          goto state 13
	Type2          goto state 14
	Type3          goto state 15
	Type5          goto state 16
	Type4          goto state 17

State 26

	FunctionDefinition -> Var . ListArg '=' Term        (rule 153)

	'='            reduce using rule 151
	L_Var          shift, and enter state 8

	Var            goto state 29
	Arg            goto state 30
	ListArg        goto state 31

State 27

	FunctionDefinition -> FunctionDefinition . ';'      (rule 154)
	FunctionDeclaration -> FunctionType ';' FunctionDefinition . ';'    (rule 157)

	';'            shift, and enter state 28


State 28

	FunctionDefinition -> FunctionDefinition ';' .      (rule 154)
	FunctionDeclaration -> FunctionType ';' FunctionDefinition ';' .    (rule 157)

	';'            reduce using rule 154
	L_Var          reduce using rule 157
	%eof           reduce using rule 157


State 29

	Arg -> Var .                                        (rule 150)

	'='            reduce using rule 150
	L_Var          reduce using rule 150


State 30

	ListArg -> Arg . ListArg                            (rule 152)

	'='            reduce using rule 151
	L_Var          shift, and enter state 8

	Var            goto state 29
	Arg            goto state 30
	ListArg        goto state 47

State 31

	FunctionDefinition -> Var ListArg . '=' Term        (rule 153)

	'='            shift, and enter state 46


State 32

	Type -> Type . '->' Type1                           (rule 32)
	Type5 -> '[' Type . ']'                             (rule 46)

	'->'           shift, and enter state 38
	']'            shift, and enter state 45


State 33

	Type -> Type . '->' Type1                           (rule 32)
	Type5 -> '(' Type . ')'                             (rule 47)

	')'            shift, and enter state 44
	'->'           shift, and enter state 38


State 34

	Type3 -> '!' Type4 .                                (rule 39)

	')'            reduce using rule 39
	'*'            reduce using rule 39
	'+'            reduce using rule 39
	'->'           reduce using rule 39
	'.'            reduce using rule 39
	';'            reduce using rule 39
	']'            reduce using rule 39


State 35

	Type3 -> Type4 '**' . Integer                       (rule 38)

	L_integ        shift, and enter state 43

	Integer        goto state 42

State 36

	Type2 -> Type2 '*' . Type3                          (rule 36)

	'!'            shift, and enter state 18
	'('            shift, and enter state 19
	'()'           shift, and enter state 20
	'Bit'          shift, and enter state 21
	'Bool'         shift, and enter state 22
	'Int'          shift, and enter state 23
	'Qbit'         shift, and enter state 24
	'['            shift, and enter state 25

	Type3          goto state 41
	Type5          goto state 16
	Type4          goto state 17

State 37

	Type1 -> Type1 '+' . Type2                          (rule 34)

	'!'            shift, and enter state 18
	'('            shift, and enter state 19
	'()'           shift, and enter state 20
	'Bit'          shift, and enter state 21
	'Bool'         shift, and enter state 22
	'Int'          shift, and enter state 23
	'Qbit'         shift, and enter state 24
	'['            shift, and enter state 25

	Type2          goto state 40
	Type3          goto state 15
	Type5          goto state 16
	Type4          goto state 17

State 38

	Type -> Type '->' . Type1                           (rule 32)

	'!'            shift, and enter state 18
	'('            shift, and enter state 19
	'()'           shift, and enter state 20
	'Bit'          shift, and enter state 21
	'Bool'         shift, and enter state 22
	'Int'          shift, and enter state 23
	'Qbit'         shift, and enter state 24
	'['            shift, and enter state 25

	Type1          goto state 39
	Type2          goto state 14
	Type3          goto state 15
	Type5          goto state 16
	Type4          goto state 17

State 39

	Type -> Type '->' Type1 .                           (rule 32)
	Type1 -> Type1 . '+' Type2                          (rule 34)

	')'            reduce using rule 32
	'+'            shift, and enter state 37
	'->'           reduce using rule 32
	'.'            reduce using rule 32
	';'            reduce using rule 32
	']'            reduce using rule 32


State 40

	Type1 -> Type1 '+' Type2 .                          (rule 34)
	Type2 -> Type2 . '*' Type3                          (rule 36)

	')'            reduce using rule 34
	'*'            shift, and enter state 36
	'+'            reduce using rule 34
	'->'           reduce using rule 34
	'.'            reduce using rule 34
	';'            reduce using rule 34
	']'            reduce using rule 34


State 41

	Type2 -> Type2 '*' Type3 .                          (rule 36)

	')'            reduce using rule 36
	'*'            reduce using rule 36
	'+'            reduce using rule 36
	'->'           reduce using rule 36
	'.'            reduce using rule 36
	';'            reduce using rule 36
	']'            reduce using rule 36


State 42

	Type3 -> Type4 '**' Integer .                       (rule 38)

	')'            reduce using rule 38
	'*'            reduce using rule 38
	'+'            reduce using rule 38
	'->'           reduce using rule 38
	'.'            reduce using rule 38
	';'            reduce using rule 38
	']'            reduce using rule 38


State 43

	Integer -> L_integ .                                (rule 2)

	'$'            reduce using rule 2
	'&&'           reduce using rule 2
	'('            reduce using rule 2
	'()'           reduce using rule 2
	')'            reduce using rule 2
	'*'            reduce using rule 2
	'+'            reduce using rule 2
	','            reduce using rule 2
	'-'            reduce using rule 2
	'->'           reduce using rule 2
	'.'            reduce using rule 2
	'/'            reduce using rule 2
	'/='           reduce using rule 2
	':'            reduce using rule 2
	';'            reduce using rule 2
	'<'            reduce using rule 2
	'<='           reduce using rule 2
	'=='           reduce using rule 2
	'>'            reduce using rule 2
	'>='           reduce using rule 2
	'@+'           reduce using rule 2
	'@+i'          reduce using rule 2
	'@-'           reduce using rule 2
	'@-i'          reduce using rule 2
	'@0'           reduce using rule 2
	'@1'           reduce using rule 2
	'False'        reduce using rule 2
	'True'         reduce using rule 2
	'['            reduce using rule 2
	'[]'           reduce using rule 2
	']'            reduce using rule 2
	'else'         reduce using rule 2
	'gate'         reduce using rule 2
	'not'          reduce using rule 2
	'of'           reduce using rule 2
	'then'         reduce using rule 2
	'||'           reduce using rule 2
	'}'            reduce using rule 2
	L_integ        reduce using rule 2
	L_Var          reduce using rule 2


State 44

	Type5 -> '(' Type ')' .                             (rule 47)

	')'            reduce using rule 47
	'*'            reduce using rule 47
	'**'           reduce using rule 47
	'+'            reduce using rule 47
	'->'           reduce using rule 47
	'.'            reduce using rule 47
	';'            reduce using rule 47
	']'            reduce using rule 47


State 45

	Type5 -> '[' Type ']' .                             (rule 46)

	')'            reduce using rule 46
	'*'            reduce using rule 46
	'**'           reduce using rule 46
	'+'            reduce using rule 46
	'->'           reduce using rule 46
	'.'            reduce using rule 46
	';'            reduce using rule 46
	']'            reduce using rule 46


State 46

	FunctionDefinition -> Var ListArg '=' . Term        (rule 153)

	'('            shift, and enter state 67
	'()'           shift, and enter state 68
	'@+'           shift, and enter state 69
	'@+i'          shift, and enter state 70
	'@-'           shift, and enter state 71
	'@-i'          shift, and enter state 72
	'@0'           shift, and enter state 73
	'@1'           shift, and enter state 74
	'False'        shift, and enter state 75
	'True'         shift, and enter state 76
	'['            shift, and enter state 77
	'[]'           shift, and enter state 78
	'case'         shift, and enter state 79
	'gate'         shift, and enter state 80
	'if'           shift, and enter state 81
	'let'          shift, and enter state 82
	'not'          shift, and enter state 83
	'with'         shift, and enter state 84
	L_integ        shift, and enter state 43
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 85

	Integer        goto state 48
	Var            goto state 49
	Lambda         goto state 50
	IntegerExpressiongoto state 51
	IntegerExpression1goto state 52
	IntegerExpression2goto state 53
	BoolValue      goto state 54
	BoolExpression goto state 55
	BoolExpression1goto state 56
	BoolExpression2goto state 57
	BasisState     goto state 58
	Tuple          goto state 59
	Term           goto state 60
	Term1          goto state 61
	Term2          goto state 62
	Term3          goto state 63
	Term4          goto state 64
	List1          goto state 65
	List           goto state 66

State 47

	ListArg -> Arg ListArg .                            (rule 152)

	'='            reduce using rule 152


State 48

	IntegerExpression2 -> Integer .                     (rule 13)

	'$'            reduce using rule 13
	'&&'           reduce using rule 13
	'('            reduce using rule 13
	'()'           reduce using rule 13
	')'            reduce using rule 13
	'*'            reduce using rule 13
	'+'            reduce using rule 13
	','            reduce using rule 13
	'-'            reduce using rule 13
	'->'           reduce using rule 13
	'.'            reduce using rule 13
	'/'            reduce using rule 13
	'/='           reduce using rule 13
	':'            reduce using rule 13
	';'            reduce using rule 13
	'<'            reduce using rule 13
	'<='           reduce using rule 13
	'=='           reduce using rule 13
	'>'            reduce using rule 13
	'>='           reduce using rule 13
	'@+'           reduce using rule 13
	'@+i'          reduce using rule 13
	'@-'           reduce using rule 13
	'@-i'          reduce using rule 13
	'@0'           reduce using rule 13
	'@1'           reduce using rule 13
	'False'        reduce using rule 13
	'True'         reduce using rule 13
	'['            reduce using rule 13
	'[]'           reduce using rule 13
	']'            reduce using rule 13
	'else'         reduce using rule 13
	'gate'         reduce using rule 13
	'not'          reduce using rule 13
	'of'           reduce using rule 13
	'then'         reduce using rule 13
	'||'           reduce using rule 13
	'}'            reduce using rule 13
	L_integ        reduce using rule 13
	L_Var          reduce using rule 13


State 49

	Term1 -> Var . '<-' Term ';' Term                   (rule 116)
	Term1 -> Var . ',' ListVar '<-' Term ';' Term       (rule 117)
	Term2 -> Var . ',' ListVar                          (rule 127)
	Term3 -> Var .                                      (rule 129)

	'$'            reduce using rule 129
	'('            reduce using rule 129
	'()'           reduce using rule 129
	')'            reduce using rule 129
	','            shift, and enter state 160
			(reduce using rule 129)

	'.'            reduce using rule 129
	':'            reduce using rule 129
	';'            reduce using rule 129
	'<-'           shift, and enter state 161
	'@+'           reduce using rule 129
	'@+i'          reduce using rule 129
	'@-'           reduce using rule 129
	'@-i'          reduce using rule 129
	'@0'           reduce using rule 129
	'@1'           reduce using rule 129
	'False'        reduce using rule 129
	'True'         reduce using rule 129
	'['            reduce using rule 129
	'[]'           reduce using rule 129
	']'            reduce using rule 129
	'else'         reduce using rule 129
	'gate'         reduce using rule 129
	'not'          reduce using rule 129
	'of'           reduce using rule 129
	'then'         reduce using rule 129
	'}'            reduce using rule 129
	L_integ        reduce using rule 129
	L_Var          reduce using rule 129


State 50

	Term1 -> Lambda . Var Type '.' Term                 (rule 119)

	L_Var          shift, and enter state 8

	Var            goto state 159

State 51

	IntegerExpression -> IntegerExpression . '+' IntegerExpression1    (rule 7)
	IntegerExpression -> IntegerExpression . '-' IntegerExpression1    (rule 8)
	Term3 -> IntegerExpression .                        (rule 133)

	'$'            reduce using rule 133
	'('            reduce using rule 133
	'()'           reduce using rule 133
	')'            reduce using rule 133
	'+'            shift, and enter state 157
	','            reduce using rule 133
	'-'            shift, and enter state 158
	'->'           reduce using rule 133
	'.'            reduce using rule 133
	':'            reduce using rule 133
	';'            reduce using rule 133
	'@+'           reduce using rule 133
	'@+i'          reduce using rule 133
	'@-'           reduce using rule 133
	'@-i'          reduce using rule 133
	'@0'           reduce using rule 133
	'@1'           reduce using rule 133
	'False'        reduce using rule 133
	'True'         reduce using rule 133
	'['            reduce using rule 133
	'[]'           reduce using rule 133
	']'            reduce using rule 133
	'else'         reduce using rule 133
	'gate'         reduce using rule 133
	'not'          reduce using rule 133
	'of'           reduce using rule 133
	'then'         reduce using rule 133
	'}'            reduce using rule 133
	L_integ        reduce using rule 133
	L_Var          reduce using rule 133


State 52

	IntegerExpression -> IntegerExpression1 .           (rule 9)
	IntegerExpression1 -> IntegerExpression1 . '*' IntegerExpression2    (rule 10)
	IntegerExpression1 -> IntegerExpression1 . '/' IntegerExpression2    (rule 11)

	'$'            reduce using rule 9
	'('            reduce using rule 9
	'()'           reduce using rule 9
	')'            reduce using rule 9
	'*'            shift, and enter state 155
	'+'            reduce using rule 9
	','            reduce using rule 9
	'-'            reduce using rule 9
	'->'           reduce using rule 9
	'.'            reduce using rule 9
	'/'            shift, and enter state 156
	':'            reduce using rule 9
	';'            reduce using rule 9
	'@+'           reduce using rule 9
	'@+i'          reduce using rule 9
	'@-'           reduce using rule 9
	'@-i'          reduce using rule 9
	'@0'           reduce using rule 9
	'@1'           reduce using rule 9
	'False'        reduce using rule 9
	'True'         reduce using rule 9
	'['            reduce using rule 9
	'[]'           reduce using rule 9
	']'            reduce using rule 9
	'else'         reduce using rule 9
	'gate'         reduce using rule 9
	'not'          reduce using rule 9
	'of'           reduce using rule 9
	'then'         reduce using rule 9
	'}'            reduce using rule 9
	L_integ        reduce using rule 9
	L_Var          reduce using rule 9


State 53

	IntegerExpression1 -> IntegerExpression2 .          (rule 12)
	BoolExpression2 -> IntegerExpression2 . '==' IntegerExpression2    (rule 24)
	BoolExpression2 -> IntegerExpression2 . '/=' IntegerExpression2    (rule 25)
	BoolExpression2 -> IntegerExpression2 . '>' IntegerExpression2    (rule 26)
	BoolExpression2 -> IntegerExpression2 . '>=' IntegerExpression2    (rule 27)
	BoolExpression2 -> IntegerExpression2 . '<' IntegerExpression2    (rule 28)
	BoolExpression2 -> IntegerExpression2 . '<=' IntegerExpression2    (rule 29)

	'$'            reduce using rule 12
	'('            reduce using rule 12
	'()'           reduce using rule 12
	')'            reduce using rule 12
	'*'            reduce using rule 12
	'+'            reduce using rule 12
	','            reduce using rule 12
	'-'            reduce using rule 12
	'->'           reduce using rule 12
	'.'            reduce using rule 12
	'/'            reduce using rule 12
	'/='           shift, and enter state 149
	':'            reduce using rule 12
	';'            reduce using rule 12
	'<'            shift, and enter state 150
	'<='           shift, and enter state 151
	'=='           shift, and enter state 152
	'>'            shift, and enter state 153
	'>='           shift, and enter state 154
	'@+'           reduce using rule 12
	'@+i'          reduce using rule 12
	'@-'           reduce using rule 12
	'@-i'          reduce using rule 12
	'@0'           reduce using rule 12
	'@1'           reduce using rule 12
	'False'        reduce using rule 12
	'True'         reduce using rule 12
	'['            reduce using rule 12
	'[]'           reduce using rule 12
	']'            reduce using rule 12
	'else'         reduce using rule 12
	'gate'         reduce using rule 12
	'not'          reduce using rule 12
	'of'           reduce using rule 12
	'then'         reduce using rule 12
	'}'            reduce using rule 12
	L_integ        reduce using rule 12
	L_Var          reduce using rule 12


State 54

	BoolExpression2 -> BoolValue .                      (rule 30)

	'$'            reduce using rule 30
	'&&'           reduce using rule 30
	'('            reduce using rule 30
	'()'           reduce using rule 30
	')'            reduce using rule 30
	','            reduce using rule 30
	'->'           reduce using rule 30
	'.'            reduce using rule 30
	'/='           reduce using rule 30
	':'            reduce using rule 30
	';'            reduce using rule 30
	'=='           reduce using rule 30
	'@+'           reduce using rule 30
	'@+i'          reduce using rule 30
	'@-'           reduce using rule 30
	'@-i'          reduce using rule 30
	'@0'           reduce using rule 30
	'@1'           reduce using rule 30
	'False'        reduce using rule 30
	'True'         reduce using rule 30
	'['            reduce using rule 30
	'[]'           reduce using rule 30
	']'            reduce using rule 30
	'else'         reduce using rule 30
	'gate'         reduce using rule 30
	'not'          reduce using rule 30
	'of'           reduce using rule 30
	'then'         reduce using rule 30
	'||'           reduce using rule 30
	'}'            reduce using rule 30
	L_integ        reduce using rule 30
	L_Var          reduce using rule 30


State 55

	BoolExpression -> BoolExpression . '&&' BoolExpression1    (rule 17)
	BoolExpression -> BoolExpression . '||' BoolExpression1    (rule 18)
	Term3 -> BoolExpression .                           (rule 132)

	'$'            reduce using rule 132
	'&&'           shift, and enter state 147
	'('            reduce using rule 132
	'()'           reduce using rule 132
	')'            reduce using rule 132
	','            reduce using rule 132
	'->'           reduce using rule 132
	'.'            reduce using rule 132
	':'            reduce using rule 132
	';'            reduce using rule 132
	'@+'           reduce using rule 132
	'@+i'          reduce using rule 132
	'@-'           reduce using rule 132
	'@-i'          reduce using rule 132
	'@0'           reduce using rule 132
	'@1'           reduce using rule 132
	'False'        reduce using rule 132
	'True'         reduce using rule 132
	'['            reduce using rule 132
	'[]'           reduce using rule 132
	']'            reduce using rule 132
	'else'         reduce using rule 132
	'gate'         reduce using rule 132
	'not'          reduce using rule 132
	'of'           reduce using rule 132
	'then'         reduce using rule 132
	'||'           shift, and enter state 148
	'}'            reduce using rule 132
	L_integ        reduce using rule 132
	L_Var          reduce using rule 132


State 56

	BoolExpression -> BoolExpression1 .                 (rule 20)
	BoolExpression1 -> BoolExpression1 . '==' BoolExpression2    (rule 21)
	BoolExpression1 -> BoolExpression1 . '/=' BoolExpression2    (rule 22)

	'$'            reduce using rule 20
	'&&'           reduce using rule 20
	'('            reduce using rule 20
	'()'           reduce using rule 20
	')'            reduce using rule 20
	','            reduce using rule 20
	'->'           reduce using rule 20
	'.'            reduce using rule 20
	'/='           shift, and enter state 145
	':'            reduce using rule 20
	';'            reduce using rule 20
	'=='           shift, and enter state 146
	'@+'           reduce using rule 20
	'@+i'          reduce using rule 20
	'@-'           reduce using rule 20
	'@-i'          reduce using rule 20
	'@0'           reduce using rule 20
	'@1'           reduce using rule 20
	'False'        reduce using rule 20
	'True'         reduce using rule 20
	'['            reduce using rule 20
	'[]'           reduce using rule 20
	']'            reduce using rule 20
	'else'         reduce using rule 20
	'gate'         reduce using rule 20
	'not'          reduce using rule 20
	'of'           reduce using rule 20
	'then'         reduce using rule 20
	'||'           reduce using rule 20
	'}'            reduce using rule 20
	L_integ        reduce using rule 20
	L_Var          reduce using rule 20


State 57

	BoolExpression1 -> BoolExpression2 .                (rule 23)

	'$'            reduce using rule 23
	'&&'           reduce using rule 23
	'('            reduce using rule 23
	'()'           reduce using rule 23
	')'            reduce using rule 23
	','            reduce using rule 23
	'->'           reduce using rule 23
	'.'            reduce using rule 23
	'/='           reduce using rule 23
	':'            reduce using rule 23
	';'            reduce using rule 23
	'=='           reduce using rule 23
	'@+'           reduce using rule 23
	'@+i'          reduce using rule 23
	'@-'           reduce using rule 23
	'@-i'          reduce using rule 23
	'@0'           reduce using rule 23
	'@1'           reduce using rule 23
	'False'        reduce using rule 23
	'True'         reduce using rule 23
	'['            reduce using rule 23
	'[]'           reduce using rule 23
	']'            reduce using rule 23
	'else'         reduce using rule 23
	'gate'         reduce using rule 23
	'not'          reduce using rule 23
	'of'           reduce using rule 23
	'then'         reduce using rule 23
	'||'           reduce using rule 23
	'}'            reduce using rule 23
	L_integ        reduce using rule 23
	L_Var          reduce using rule 23


State 58

	Term3 -> BasisState .                               (rule 131)

	'$'            reduce using rule 131
	'('            reduce using rule 131
	'()'           reduce using rule 131
	')'            reduce using rule 131
	','            reduce using rule 131
	'->'           reduce using rule 131
	'.'            reduce using rule 131
	':'            reduce using rule 131
	';'            reduce using rule 131
	'@+'           reduce using rule 131
	'@+i'          reduce using rule 131
	'@-'           reduce using rule 131
	'@-i'          reduce using rule 131
	'@0'           reduce using rule 131
	'@1'           reduce using rule 131
	'False'        reduce using rule 131
	'True'         reduce using rule 131
	'['            reduce using rule 131
	'[]'           reduce using rule 131
	']'            reduce using rule 131
	'else'         reduce using rule 131
	'gate'         reduce using rule 131
	'not'          reduce using rule 131
	'of'           reduce using rule 131
	'then'         reduce using rule 131
	'}'            reduce using rule 131
	L_integ        reduce using rule 131
	L_Var          reduce using rule 131


State 59

	Term3 -> Tuple .                                    (rule 135)

	'$'            reduce using rule 135
	'('            reduce using rule 135
	'()'           reduce using rule 135
	')'            reduce using rule 135
	','            reduce using rule 135
	'->'           reduce using rule 135
	'.'            reduce using rule 135
	':'            reduce using rule 135
	';'            reduce using rule 135
	'@+'           reduce using rule 135
	'@+i'          reduce using rule 135
	'@-'           reduce using rule 135
	'@-i'          reduce using rule 135
	'@0'           reduce using rule 135
	'@1'           reduce using rule 135
	'False'        reduce using rule 135
	'True'         reduce using rule 135
	'['            reduce using rule 135
	'[]'           reduce using rule 135
	']'            reduce using rule 135
	'else'         reduce using rule 135
	'gate'         reduce using rule 135
	'not'          reduce using rule 135
	'of'           reduce using rule 135
	'then'         reduce using rule 135
	'}'            reduce using rule 135
	L_integ        reduce using rule 135
	L_Var          reduce using rule 135


State 60

	FunctionDefinition -> Var ListArg '=' Term .        (rule 153)

	';'            reduce using rule 153


State 61

	Term -> Term1 . '$' Term                            (rule 111)
	Term -> Term1 .                                     (rule 112)

	'$'            shift, and enter state 144
			(reduce using rule 112)

	')'            reduce using rule 112
	','            reduce using rule 112
	';'            reduce using rule 112
	']'            reduce using rule 112
	'else'         reduce using rule 112
	'of'           reduce using rule 112
	'then'         reduce using rule 112
	'}'            reduce using rule 112


State 62

	Term1 -> Term2 .                                    (rule 120)
	Term2 -> Term2 . Term3                              (rule 125)
	Term2 -> Term2 . '.' Term3                          (rule 126)

	'$'            reduce using rule 120
	'('            shift, and enter state 67
	'()'           shift, and enter state 68
	')'            reduce using rule 120
	','            reduce using rule 120
	'.'            shift, and enter state 143
	';'            reduce using rule 120
	'@+'           shift, and enter state 69
	'@+i'          shift, and enter state 70
	'@-'           shift, and enter state 71
	'@-i'          shift, and enter state 72
	'@0'           shift, and enter state 73
	'@1'           shift, and enter state 74
	'False'        shift, and enter state 75
	'True'         shift, and enter state 76
	'['            shift, and enter state 77
	'[]'           shift, and enter state 78
	']'            reduce using rule 120
	'else'         reduce using rule 120
	'gate'         shift, and enter state 80
	'not'          shift, and enter state 83
	'of'           reduce using rule 120
	'then'         reduce using rule 120
	'}'            reduce using rule 120
	L_integ        shift, and enter state 43
	L_Var          shift, and enter state 8

	Integer        goto state 48
	Var            goto state 141
	IntegerExpressiongoto state 51
	IntegerExpression1goto state 52
	IntegerExpression2goto state 53
	BoolValue      goto state 54
	BoolExpression goto state 55
	BoolExpression1goto state 56
	BoolExpression2goto state 57
	BasisState     goto state 58
	Tuple          goto state 59
	Term3          goto state 142
	Term4          goto state 64
	List1          goto state 65
	List           goto state 66

State 63

	Term2 -> Term3 .                                    (rule 128)
	List -> Term3 . ':' List1                           (rule 145)

	'$'            reduce using rule 128
	'('            reduce using rule 128
	'()'           reduce using rule 128
	')'            reduce using rule 128
	','            reduce using rule 128
	'.'            reduce using rule 128
	':'            shift, and enter state 140
	';'            reduce using rule 128
	'@+'           reduce using rule 128
	'@+i'          reduce using rule 128
	'@-'           reduce using rule 128
	'@-i'          reduce using rule 128
	'@0'           reduce using rule 128
	'@1'           reduce using rule 128
	'False'        reduce using rule 128
	'True'         reduce using rule 128
	'['            reduce using rule 128
	'[]'           reduce using rule 128
	']'            reduce using rule 128
	'else'         reduce using rule 128
	'gate'         reduce using rule 128
	'not'          reduce using rule 128
	'of'           reduce using rule 128
	'then'         reduce using rule 128
	'}'            reduce using rule 128
	L_integ        reduce using rule 128
	L_Var          reduce using rule 128


State 64

	Term3 -> Term4 .                                    (rule 137)

	'$'            reduce using rule 137
	'('            reduce using rule 137
	'()'           reduce using rule 137
	')'            reduce using rule 137
	','            reduce using rule 137
	'->'           reduce using rule 137
	'.'            reduce using rule 137
	':'            reduce using rule 137
	';'            reduce using rule 137
	'@+'           reduce using rule 137
	'@+i'          reduce using rule 137
	'@-'           reduce using rule 137
	'@-i'          reduce using rule 137
	'@0'           reduce using rule 137
	'@1'           reduce using rule 137
	'False'        reduce using rule 137
	'True'         reduce using rule 137
	'['            reduce using rule 137
	'[]'           reduce using rule 137
	']'            reduce using rule 137
	'else'         reduce using rule 137
	'gate'         reduce using rule 137
	'not'          reduce using rule 137
	'of'           reduce using rule 137
	'then'         reduce using rule 137
	'}'            reduce using rule 137
	L_integ        reduce using rule 137
	L_Var          reduce using rule 137


State 65

	List -> List1 .                                     (rule 146)

	'!!'           reduce using rule 146
	'$'            reduce using rule 146
	'('            reduce using rule 146
	'()'           reduce using rule 146
	')'            reduce using rule 146
	'++'           reduce using rule 146
	','            reduce using rule 146
	'->'           reduce using rule 146
	'.'            reduce using rule 146
	':'            reduce using rule 146
	';'            reduce using rule 146
	'@+'           reduce using rule 146
	'@+i'          reduce using rule 146
	'@-'           reduce using rule 146
	'@-i'          reduce using rule 146
	'@0'           reduce using rule 146
	'@1'           reduce using rule 146
	'False'        reduce using rule 146
	'True'         reduce using rule 146
	'['            reduce using rule 146
	'[]'           reduce using rule 146
	']'            reduce using rule 146
	'else'         reduce using rule 146
	'gate'         reduce using rule 146
	'not'          reduce using rule 146
	'of'           reduce using rule 146
	'then'         reduce using rule 146
	'}'            reduce using rule 146
	L_integ        reduce using rule 146
	L_Var          reduce using rule 146


State 66

	Term3 -> List .                                     (rule 136)
	Term4 -> List . '!!' Integer                        (rule 138)
	List -> List . '++' List1                           (rule 144)

	'!!'           shift, and enter state 138
	'$'            reduce using rule 136
	'('            reduce using rule 136
	'()'           reduce using rule 136
	')'            reduce using rule 136
	'++'           shift, and enter state 139
	','            reduce using rule 136
	'->'           reduce using rule 136
	'.'            reduce using rule 136
	':'            reduce using rule 136
	';'            reduce using rule 136
	'@+'           reduce using rule 136
	'@+i'          reduce using rule 136
	'@-'           reduce using rule 136
	'@-i'          reduce using rule 136
	'@0'           reduce using rule 136
	'@1'           reduce using rule 136
	'False'        reduce using rule 136
	'True'         reduce using rule 136
	'['            reduce using rule 136
	'[]'           reduce using rule 136
	']'            reduce using rule 136
	'else'         reduce using rule 136
	'gate'         reduce using rule 136
	'not'          reduce using rule 136
	'of'           reduce using rule 136
	'then'         reduce using rule 136
	'}'            reduce using rule 136
	L_integ        reduce using rule 136
	L_Var          reduce using rule 136


State 67

	IntegerExpression2 -> '(' . IntegerExpression ')'    (rule 14)
	BoolExpression2 -> '(' . BoolExpression ')'         (rule 31)
	Tuple -> '(' . Term ',' ListTerm ')'                (rule 106)
	Term4 -> '(' . Term ')'                             (rule 139)
	List1 -> '(' . List ')'                             (rule 143)

	'('            shift, and enter state 67
	'()'           shift, and enter state 68
	'@+'           shift, and enter state 69
	'@+i'          shift, and enter state 70
	'@-'           shift, and enter state 71
	'@-i'          shift, and enter state 72
	'@0'           shift, and enter state 73
	'@1'           shift, and enter state 74
	'False'        shift, and enter state 75
	'True'         shift, and enter state 76
	'['            shift, and enter state 77
	'[]'           shift, and enter state 78
	'case'         shift, and enter state 79
	'gate'         shift, and enter state 80
	'if'           shift, and enter state 81
	'let'          shift, and enter state 82
	'not'          shift, and enter state 83
	'with'         shift, and enter state 84
	L_integ        shift, and enter state 43
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 85

	Integer        goto state 48
	Var            goto state 49
	Lambda         goto state 50
	IntegerExpressiongoto state 134
	IntegerExpression1goto state 52
	IntegerExpression2goto state 53
	BoolValue      goto state 54
	BoolExpression goto state 135
	BoolExpression1goto state 56
	BoolExpression2goto state 57
	BasisState     goto state 58
	Tuple          goto state 59
	Term           goto state 136
	Term1          goto state 61
	Term2          goto state 62
	Term3          goto state 63
	Term4          goto state 64
	List1          goto state 65
	List           goto state 137

State 68

	Term3 -> '()' .                                     (rule 130)

	'$'            reduce using rule 130
	'('            reduce using rule 130
	'()'           reduce using rule 130
	')'            reduce using rule 130
	','            reduce using rule 130
	'->'           reduce using rule 130
	'.'            reduce using rule 130
	':'            reduce using rule 130
	';'            reduce using rule 130
	'@+'           reduce using rule 130
	'@+i'          reduce using rule 130
	'@-'           reduce using rule 130
	'@-i'          reduce using rule 130
	'@0'           reduce using rule 130
	'@1'           reduce using rule 130
	'False'        reduce using rule 130
	'True'         reduce using rule 130
	'['            reduce using rule 130
	'[]'           reduce using rule 130
	']'            reduce using rule 130
	'else'         reduce using rule 130
	'gate'         reduce using rule 130
	'not'          reduce using rule 130
	'of'           reduce using rule 130
	'then'         reduce using rule 130
	'}'            reduce using rule 130
	L_integ        reduce using rule 130
	L_Var          reduce using rule 130


State 69

	BasisState -> '@+' .                                (rule 52)

	'$'            reduce using rule 52
	'('            reduce using rule 52
	'()'           reduce using rule 52
	')'            reduce using rule 52
	','            reduce using rule 52
	'->'           reduce using rule 52
	'.'            reduce using rule 52
	':'            reduce using rule 52
	';'            reduce using rule 52
	'@+'           reduce using rule 52
	'@+i'          reduce using rule 52
	'@-'           reduce using rule 52
	'@-i'          reduce using rule 52
	'@0'           reduce using rule 52
	'@1'           reduce using rule 52
	'False'        reduce using rule 52
	'True'         reduce using rule 52
	'['            reduce using rule 52
	'[]'           reduce using rule 52
	']'            reduce using rule 52
	'else'         reduce using rule 52
	'gate'         reduce using rule 52
	'not'          reduce using rule 52
	'of'           reduce using rule 52
	'then'         reduce using rule 52
	'}'            reduce using rule 52
	L_integ        reduce using rule 52
	L_Var          reduce using rule 52


State 70

	BasisState -> '@+i' .                               (rule 54)

	'$'            reduce using rule 54
	'('            reduce using rule 54
	'()'           reduce using rule 54
	')'            reduce using rule 54
	','            reduce using rule 54
	'->'           reduce using rule 54
	'.'            reduce using rule 54
	':'            reduce using rule 54
	';'            reduce using rule 54
	'@+'           reduce using rule 54
	'@+i'          reduce using rule 54
	'@-'           reduce using rule 54
	'@-i'          reduce using rule 54
	'@0'           reduce using rule 54
	'@1'           reduce using rule 54
	'False'        reduce using rule 54
	'True'         reduce using rule 54
	'['            reduce using rule 54
	'[]'           reduce using rule 54
	']'            reduce using rule 54
	'else'         reduce using rule 54
	'gate'         reduce using rule 54
	'not'          reduce using rule 54
	'of'           reduce using rule 54
	'then'         reduce using rule 54
	'}'            reduce using rule 54
	L_integ        reduce using rule 54
	L_Var          reduce using rule 54


State 71

	BasisState -> '@-' .                                (rule 53)

	'$'            reduce using rule 53
	'('            reduce using rule 53
	'()'           reduce using rule 53
	')'            reduce using rule 53
	','            reduce using rule 53
	'->'           reduce using rule 53
	'.'            reduce using rule 53
	':'            reduce using rule 53
	';'            reduce using rule 53
	'@+'           reduce using rule 53
	'@+i'          reduce using rule 53
	'@-'           reduce using rule 53
	'@-i'          reduce using rule 53
	'@0'           reduce using rule 53
	'@1'           reduce using rule 53
	'False'        reduce using rule 53
	'True'         reduce using rule 53
	'['            reduce using rule 53
	'[]'           reduce using rule 53
	']'            reduce using rule 53
	'else'         reduce using rule 53
	'gate'         reduce using rule 53
	'not'          reduce using rule 53
	'of'           reduce using rule 53
	'then'         reduce using rule 53
	'}'            reduce using rule 53
	L_integ        reduce using rule 53
	L_Var          reduce using rule 53


State 72

	BasisState -> '@-i' .                               (rule 55)

	'$'            reduce using rule 55
	'('            reduce using rule 55
	'()'           reduce using rule 55
	')'            reduce using rule 55
	','            reduce using rule 55
	'->'           reduce using rule 55
	'.'            reduce using rule 55
	':'            reduce using rule 55
	';'            reduce using rule 55
	'@+'           reduce using rule 55
	'@+i'          reduce using rule 55
	'@-'           reduce using rule 55
	'@-i'          reduce using rule 55
	'@0'           reduce using rule 55
	'@1'           reduce using rule 55
	'False'        reduce using rule 55
	'True'         reduce using rule 55
	'['            reduce using rule 55
	'[]'           reduce using rule 55
	']'            reduce using rule 55
	'else'         reduce using rule 55
	'gate'         reduce using rule 55
	'not'          reduce using rule 55
	'of'           reduce using rule 55
	'then'         reduce using rule 55
	'}'            reduce using rule 55
	L_integ        reduce using rule 55
	L_Var          reduce using rule 55


State 73

	BasisState -> '@0' .                                (rule 50)

	'$'            reduce using rule 50
	'('            reduce using rule 50
	'()'           reduce using rule 50
	')'            reduce using rule 50
	','            reduce using rule 50
	'->'           reduce using rule 50
	'.'            reduce using rule 50
	':'            reduce using rule 50
	';'            reduce using rule 50
	'@+'           reduce using rule 50
	'@+i'          reduce using rule 50
	'@-'           reduce using rule 50
	'@-i'          reduce using rule 50
	'@0'           reduce using rule 50
	'@1'           reduce using rule 50
	'False'        reduce using rule 50
	'True'         reduce using rule 50
	'['            reduce using rule 50
	'[]'           reduce using rule 50
	']'            reduce using rule 50
	'else'         reduce using rule 50
	'gate'         reduce using rule 50
	'not'          reduce using rule 50
	'of'           reduce using rule 50
	'then'         reduce using rule 50
	'}'            reduce using rule 50
	L_integ        reduce using rule 50
	L_Var          reduce using rule 50


State 74

	BasisState -> '@1' .                                (rule 51)

	'$'            reduce using rule 51
	'('            reduce using rule 51
	'()'           reduce using rule 51
	')'            reduce using rule 51
	','            reduce using rule 51
	'->'           reduce using rule 51
	'.'            reduce using rule 51
	':'            reduce using rule 51
	';'            reduce using rule 51
	'@+'           reduce using rule 51
	'@+i'          reduce using rule 51
	'@-'           reduce using rule 51
	'@-i'          reduce using rule 51
	'@0'           reduce using rule 51
	'@1'           reduce using rule 51
	'False'        reduce using rule 51
	'True'         reduce using rule 51
	'['            reduce using rule 51
	'[]'           reduce using rule 51
	']'            reduce using rule 51
	'else'         reduce using rule 51
	'gate'         reduce using rule 51
	'not'          reduce using rule 51
	'of'           reduce using rule 51
	'then'         reduce using rule 51
	'}'            reduce using rule 51
	L_integ        reduce using rule 51
	L_Var          reduce using rule 51


State 75

	BoolValue -> 'False' .                              (rule 16)

	'$'            reduce using rule 16
	'&&'           reduce using rule 16
	'('            reduce using rule 16
	'()'           reduce using rule 16
	')'            reduce using rule 16
	','            reduce using rule 16
	'->'           reduce using rule 16
	'.'            reduce using rule 16
	'/='           reduce using rule 16
	':'            reduce using rule 16
	';'            reduce using rule 16
	'=='           reduce using rule 16
	'@+'           reduce using rule 16
	'@+i'          reduce using rule 16
	'@-'           reduce using rule 16
	'@-i'          reduce using rule 16
	'@0'           reduce using rule 16
	'@1'           reduce using rule 16
	'False'        reduce using rule 16
	'True'         reduce using rule 16
	'['            reduce using rule 16
	'[]'           reduce using rule 16
	']'            reduce using rule 16
	'else'         reduce using rule 16
	'gate'         reduce using rule 16
	'not'          reduce using rule 16
	'of'           reduce using rule 16
	'then'         reduce using rule 16
	'||'           reduce using rule 16
	'}'            reduce using rule 16
	L_integ        reduce using rule 16
	L_Var          reduce using rule 16


State 76

	BoolValue -> 'True' .                               (rule 15)

	'$'            reduce using rule 15
	'&&'           reduce using rule 15
	'('            reduce using rule 15
	'()'           reduce using rule 15
	')'            reduce using rule 15
	','            reduce using rule 15
	'->'           reduce using rule 15
	'.'            reduce using rule 15
	'/='           reduce using rule 15
	':'            reduce using rule 15
	';'            reduce using rule 15
	'=='           reduce using rule 15
	'@+'           reduce using rule 15
	'@+i'          reduce using rule 15
	'@-'           reduce using rule 15
	'@-i'          reduce using rule 15
	'@0'           reduce using rule 15
	'@1'           reduce using rule 15
	'False'        reduce using rule 15
	'True'         reduce using rule 15
	'['            reduce using rule 15
	'[]'           reduce using rule 15
	']'            reduce using rule 15
	'else'         reduce using rule 15
	'gate'         reduce using rule 15
	'not'          reduce using rule 15
	'of'           reduce using rule 15
	'then'         reduce using rule 15
	'||'           reduce using rule 15
	'}'            reduce using rule 15
	L_integ        reduce using rule 15
	L_Var          reduce using rule 15


State 77

	List1 -> '[' . Term ']'                             (rule 141)
	List1 -> '[' . Term ',' ListTerm ']'                (rule 142)

	'('            shift, and enter state 67
	'()'           shift, and enter state 68
	'@+'           shift, and enter state 69
	'@+i'          shift, and enter state 70
	'@-'           shift, and enter state 71
	'@-i'          shift, and enter state 72
	'@0'           shift, and enter state 73
	'@1'           shift, and enter state 74
	'False'        shift, and enter state 75
	'True'         shift, and enter state 76
	'['            shift, and enter state 77
	'[]'           shift, and enter state 78
	'case'         shift, and enter state 79
	'gate'         shift, and enter state 80
	'if'           shift, and enter state 81
	'let'          shift, and enter state 82
	'not'          shift, and enter state 83
	'with'         shift, and enter state 84
	L_integ        shift, and enter state 43
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 85

	Integer        goto state 48
	Var            goto state 49
	Lambda         goto state 50
	IntegerExpressiongoto state 51
	IntegerExpression1goto state 52
	IntegerExpression2goto state 53
	BoolValue      goto state 54
	BoolExpression goto state 55
	BoolExpression1goto state 56
	BoolExpression2goto state 57
	BasisState     goto state 58
	Tuple          goto state 59
	Term           goto state 133
	Term1          goto state 61
	Term2          goto state 62
	Term3          goto state 63
	Term4          goto state 64
	List1          goto state 65
	List           goto state 66

State 78

	List1 -> '[]' .                                     (rule 140)

	'!!'           reduce using rule 140
	'$'            reduce using rule 140
	'('            reduce using rule 140
	'()'           reduce using rule 140
	')'            reduce using rule 140
	'++'           reduce using rule 140
	','            reduce using rule 140
	'->'           reduce using rule 140
	'.'            reduce using rule 140
	':'            reduce using rule 140
	';'            reduce using rule 140
	'@+'           reduce using rule 140
	'@+i'          reduce using rule 140
	'@-'           reduce using rule 140
	'@-i'          reduce using rule 140
	'@0'           reduce using rule 140
	'@1'           reduce using rule 140
	'False'        reduce using rule 140
	'True'         reduce using rule 140
	'['            reduce using rule 140
	'[]'           reduce using rule 140
	']'            reduce using rule 140
	'else'         reduce using rule 140
	'gate'         reduce using rule 140
	'not'          reduce using rule 140
	'of'           reduce using rule 140
	'then'         reduce using rule 140
	'}'            reduce using rule 140
	L_integ        reduce using rule 140
	L_Var          reduce using rule 140


State 79

	Term1 -> 'case' . Term 'of' CaseExpression ListCaseExpression    (rule 118)

	'('            shift, and enter state 67
	'()'           shift, and enter state 68
	'@+'           shift, and enter state 69
	'@+i'          shift, and enter state 70
	'@-'           shift, and enter state 71
	'@-i'          shift, and enter state 72
	'@0'           shift, and enter state 73
	'@1'           shift, and enter state 74
	'False'        shift, and enter state 75
	'True'         shift, and enter state 76
	'['            shift, and enter state 77
	'[]'           shift, and enter state 78
	'case'         shift, and enter state 79
	'gate'         shift, and enter state 80
	'if'           shift, and enter state 81
	'let'          shift, and enter state 82
	'not'          shift, and enter state 83
	'with'         shift, and enter state 84
	L_integ        shift, and enter state 43
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 85

	Integer        goto state 48
	Var            goto state 49
	Lambda         goto state 50
	IntegerExpressiongoto state 51
	IntegerExpression1goto state 52
	IntegerExpression2goto state 53
	BoolValue      goto state 54
	BoolExpression goto state 55
	BoolExpression1goto state 56
	BoolExpression2goto state 57
	BasisState     goto state 58
	Tuple          goto state 59
	Term           goto state 132
	Term1          goto state 61
	Term2          goto state 62
	Term3          goto state 63
	Term4          goto state 64
	List1          goto state 65
	List           goto state 66

State 80

	Term3 -> 'gate' . Gate                              (rule 134)

	'FSWAP'        shift, and enter state 96
	'H'            shift, and enter state 97
	'ID'           shift, and enter state 98
	'ISWAP'        shift, and enter state 99
	'QFT'          shift, and enter state 100
	'QFT_DAG'      shift, and enter state 101
	'ROOT_SWAP'    shift, and enter state 102
	'ROOT_SWAP_DAG'shift, and enter state 103
	'ROOT_X'       shift, and enter state 104
	'ROOT_X_DAG'   shift, and enter state 105
	'ROOT_Y'       shift, and enter state 106
	'ROOT_Y_DAG'   shift, and enter state 107
	'ROOT_Z'       shift, and enter state 108
	'ROOT_Z_DAG'   shift, and enter state 109
	'RX'           shift, and enter state 110
	'RY'           shift, and enter state 111
	'RZ'           shift, and enter state 112
	'S'            shift, and enter state 113
	'SQRT_SWAP'    shift, and enter state 114
	'SQRT_SWAP_DAG'shift, and enter state 115
	'SQRT_X'       shift, and enter state 116
	'SQRT_X_DAG'   shift, and enter state 117
	'SQRT_Y'       shift, and enter state 118
	'SQRT_Y_DAG'   shift, and enter state 119
	'SWAP'         shift, and enter state 120
	'SWAP_THETA'   shift, and enter state 121
	'S_DAG'        shift, and enter state 122
	'T'            shift, and enter state 123
	'T_DAG'        shift, and enter state 124
	'U1'           shift, and enter state 125
	'U2'           shift, and enter state 126
	'U3'           shift, and enter state 127
	'X'            shift, and enter state 128
	'Y'            shift, and enter state 129
	'Z'            shift, and enter state 130
	L_GateVar      shift, and enter state 131

	GateVar        goto state 94
	Gate           goto state 95

State 81

	Term1 -> 'if' . Term 'then' Term 'else' Term        (rule 113)

	'('            shift, and enter state 67
	'()'           shift, and enter state 68
	'@+'           shift, and enter state 69
	'@+i'          shift, and enter state 70
	'@-'           shift, and enter state 71
	'@-i'          shift, and enter state 72
	'@0'           shift, and enter state 73
	'@1'           shift, and enter state 74
	'False'        shift, and enter state 75
	'True'         shift, and enter state 76
	'['            shift, and enter state 77
	'[]'           shift, and enter state 78
	'case'         shift, and enter state 79
	'gate'         shift, and enter state 80
	'if'           shift, and enter state 81
	'let'          shift, and enter state 82
	'not'          shift, and enter state 83
	'with'         shift, and enter state 84
	L_integ        shift, and enter state 43
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 85

	Integer        goto state 48
	Var            goto state 49
	Lambda         goto state 50
	IntegerExpressiongoto state 51
	IntegerExpression1goto state 52
	IntegerExpression2goto state 53
	BoolValue      goto state 54
	BoolExpression goto state 55
	BoolExpression1goto state 56
	BoolExpression2goto state 57
	BasisState     goto state 58
	Tuple          goto state 59
	Term           goto state 93
	Term1          goto state 61
	Term2          goto state 62
	Term3          goto state 63
	Term4          goto state 64
	List1          goto state 65
	List           goto state 66

State 82

	Term1 -> 'let' . '{' Var '=' Term '}' 'in' Term     (rule 114)
	Term1 -> 'let' . '{' '(' Var ',' ListVar ')' '=' Term '}' 'in' Term    (rule 115)

	'{'            shift, and enter state 92


State 83

	BoolExpression -> 'not' . BoolExpression1           (rule 19)

	'('            shift, and enter state 91
	'False'        shift, and enter state 75
	'True'         shift, and enter state 76
	L_integ        shift, and enter state 43

	Integer        goto state 48
	IntegerExpression2goto state 89
	BoolValue      goto state 54
	BoolExpression1goto state 90
	BoolExpression2goto state 57

State 84

	Term2 -> 'with' . ControlTerm 'ctrl' ControlBasisState    (rule 121)
	Term2 -> 'with' . ControlTerms 'ctrl' ControlBasisStates    (rule 122)
	Term2 -> 'with' . ControlTerm 'ctrl' ControlBit     (rule 123)
	Term2 -> 'with' . ControlTerms 'ctrl' ControlBits    (rule 124)

	'['            shift, and enter state 88

	ControlTerm    goto state 86
	ControlTerms   goto state 87

State 85

	Lambda -> L_Lambda .                                (rule 5)

	L_Var          reduce using rule 5


State 86

	Term2 -> 'with' ControlTerm . 'ctrl' ControlBasisState    (rule 121)
	Term2 -> 'with' ControlTerm . 'ctrl' ControlBit     (rule 123)

	'ctrl'         shift, and enter state 224


State 87

	Term2 -> 'with' ControlTerms . 'ctrl' ControlBasisStates    (rule 122)
	Term2 -> 'with' ControlTerms . 'ctrl' ControlBits    (rule 124)

	'ctrl'         shift, and enter state 223


State 88

	ControlTerm -> '[' . Term ']'                       (rule 107)
	ControlTerms -> '[' . Term ',' ListTerm ']'         (rule 108)

	'('            shift, and enter state 67
	'()'           shift, and enter state 68
	'@+'           shift, and enter state 69
	'@+i'          shift, and enter state 70
	'@-'           shift, and enter state 71
	'@-i'          shift, and enter state 72
	'@0'           shift, and enter state 73
	'@1'           shift, and enter state 74
	'False'        shift, and enter state 75
	'True'         shift, and enter state 76
	'['            shift, and enter state 77
	'[]'           shift, and enter state 78
	'case'         shift, and enter state 79
	'gate'         shift, and enter state 80
	'if'           shift, and enter state 81
	'let'          shift, and enter state 82
	'not'          shift, and enter state 83
	'with'         shift, and enter state 84
	L_integ        shift, and enter state 43
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 85

	Integer        goto state 48
	Var            goto state 49
	Lambda         goto state 50
	IntegerExpressiongoto state 51
	IntegerExpression1goto state 52
	IntegerExpression2goto state 53
	BoolValue      goto state 54
	BoolExpression goto state 55
	BoolExpression1goto state 56
	BoolExpression2goto state 57
	BasisState     goto state 58
	Tuple          goto state 59
	Term           goto state 222
	Term1          goto state 61
	Term2          goto state 62
	Term3          goto state 63
	Term4          goto state 64
	List1          goto state 65
	List           goto state 66

State 89

	BoolExpression2 -> IntegerExpression2 . '==' IntegerExpression2    (rule 24)
	BoolExpression2 -> IntegerExpression2 . '/=' IntegerExpression2    (rule 25)
	BoolExpression2 -> IntegerExpression2 . '>' IntegerExpression2    (rule 26)
	BoolExpression2 -> IntegerExpression2 . '>=' IntegerExpression2    (rule 27)
	BoolExpression2 -> IntegerExpression2 . '<' IntegerExpression2    (rule 28)
	BoolExpression2 -> IntegerExpression2 . '<=' IntegerExpression2    (rule 29)

	'/='           shift, and enter state 149
	'<'            shift, and enter state 150
	'<='           shift, and enter state 151
	'=='           shift, and enter state 152
	'>'            shift, and enter state 153
	'>='           shift, and enter state 154


State 90

	BoolExpression -> 'not' BoolExpression1 .           (rule 19)
	BoolExpression1 -> BoolExpression1 . '==' BoolExpression2    (rule 21)
	BoolExpression1 -> BoolExpression1 . '/=' BoolExpression2    (rule 22)

	'$'            reduce using rule 19
	'&&'           reduce using rule 19
	'('            reduce using rule 19
	'()'           reduce using rule 19
	')'            reduce using rule 19
	','            reduce using rule 19
	'->'           reduce using rule 19
	'.'            reduce using rule 19
	'/='           shift, and enter state 145
	':'            reduce using rule 19
	';'            reduce using rule 19
	'=='           shift, and enter state 146
	'@+'           reduce using rule 19
	'@+i'          reduce using rule 19
	'@-'           reduce using rule 19
	'@-i'          reduce using rule 19
	'@0'           reduce using rule 19
	'@1'           reduce using rule 19
	'False'        reduce using rule 19
	'True'         reduce using rule 19
	'['            reduce using rule 19
	'[]'           reduce using rule 19
	']'            reduce using rule 19
	'else'         reduce using rule 19
	'gate'         reduce using rule 19
	'not'          reduce using rule 19
	'of'           reduce using rule 19
	'then'         reduce using rule 19
	'||'           reduce using rule 19
	'}'            reduce using rule 19
	L_integ        reduce using rule 19
	L_Var          reduce using rule 19


State 91

	IntegerExpression2 -> '(' . IntegerExpression ')'    (rule 14)
	BoolExpression2 -> '(' . BoolExpression ')'         (rule 31)

	'('            shift, and enter state 91
	'False'        shift, and enter state 75
	'True'         shift, and enter state 76
	'not'          shift, and enter state 83
	L_integ        shift, and enter state 43

	Integer        goto state 48
	IntegerExpressiongoto state 220
	IntegerExpression1goto state 52
	IntegerExpression2goto state 53
	BoolValue      goto state 54
	BoolExpression goto state 221
	BoolExpression1goto state 56
	BoolExpression2goto state 57

State 92

	Term1 -> 'let' '{' . Var '=' Term '}' 'in' Term     (rule 114)
	Term1 -> 'let' '{' . '(' Var ',' ListVar ')' '=' Term '}' 'in' Term    (rule 115)

	'('            shift, and enter state 219
	L_Var          shift, and enter state 8

	Var            goto state 218

State 93

	Term1 -> 'if' Term . 'then' Term 'else' Term        (rule 113)

	'then'         shift, and enter state 217


State 94

	Gate -> GateVar . '(' Angle ',' Angle ',' Angle ')'    (rule 91)
	Gate -> GateVar . '(' Angle ',' Angle ')'           (rule 92)
	Gate -> GateVar . Angle                             (rule 93)
	Gate -> GateVar . Integer                           (rule 94)
	Gate -> GateVar .                                   (rule 95)

	'$'            reduce using rule 95
	'('            shift, and enter state 216
			(reduce using rule 95)

	'()'           reduce using rule 95
	')'            reduce using rule 95
	','            reduce using rule 95
	'->'           reduce using rule 95
	'.'            reduce using rule 95
	':'            reduce using rule 95
	';'            reduce using rule 95
	'@+'           reduce using rule 95
	'@+i'          reduce using rule 95
	'@-'           reduce using rule 95
	'@-i'          reduce using rule 95
	'@0'           reduce using rule 95
	'@1'           reduce using rule 95
	'False'        reduce using rule 95
	'True'         reduce using rule 95
	'['            reduce using rule 95
	'[]'           reduce using rule 95
	']'            reduce using rule 95
	'else'         reduce using rule 95
	'gate'         reduce using rule 95
	'not'          reduce using rule 95
	'of'           reduce using rule 95
	'then'         reduce using rule 95
	'}'            reduce using rule 95
	L_doubl        shift, and enter state 2
	L_integ        shift, and enter state 43
			(reduce using rule 95)

	L_Var          reduce using rule 95

	Double         goto state 198
	Integer        goto state 214
	Angle          goto state 215

State 95

	Term3 -> 'gate' Gate .                              (rule 134)

	'$'            reduce using rule 134
	'('            reduce using rule 134
	'()'           reduce using rule 134
	')'            reduce using rule 134
	','            reduce using rule 134
	'->'           reduce using rule 134
	'.'            reduce using rule 134
	':'            reduce using rule 134
	';'            reduce using rule 134
	'@+'           reduce using rule 134
	'@+i'          reduce using rule 134
	'@-'           reduce using rule 134
	'@-i'          reduce using rule 134
	'@0'           reduce using rule 134
	'@1'           reduce using rule 134
	'False'        reduce using rule 134
	'True'         reduce using rule 134
	'['            reduce using rule 134
	'[]'           reduce using rule 134
	']'            reduce using rule 134
	'else'         reduce using rule 134
	'gate'         reduce using rule 134
	'not'          reduce using rule 134
	'of'           reduce using rule 134
	'then'         reduce using rule 134
	'}'            reduce using rule 134
	L_integ        reduce using rule 134
	L_Var          reduce using rule 134


State 96

	Gate -> 'FSWAP' .                                   (rule 85)

	'$'            reduce using rule 85
	'('            reduce using rule 85
	'()'           reduce using rule 85
	')'            reduce using rule 85
	','            reduce using rule 85
	'->'           reduce using rule 85
	'.'            reduce using rule 85
	':'            reduce using rule 85
	';'            reduce using rule 85
	'@+'           reduce using rule 85
	'@+i'          reduce using rule 85
	'@-'           reduce using rule 85
	'@-i'          reduce using rule 85
	'@0'           reduce using rule 85
	'@1'           reduce using rule 85
	'False'        reduce using rule 85
	'True'         reduce using rule 85
	'['            reduce using rule 85
	'[]'           reduce using rule 85
	']'            reduce using rule 85
	'else'         reduce using rule 85
	'gate'         reduce using rule 85
	'not'          reduce using rule 85
	'of'           reduce using rule 85
	'then'         reduce using rule 85
	'}'            reduce using rule 85
	L_integ        reduce using rule 85
	L_Var          reduce using rule 85


State 97

	Gate -> 'H' .                                       (rule 56)

	'$'            reduce using rule 56
	'('            reduce using rule 56
	'()'           reduce using rule 56
	')'            reduce using rule 56
	','            reduce using rule 56
	'->'           reduce using rule 56
	'.'            reduce using rule 56
	':'            reduce using rule 56
	';'            reduce using rule 56
	'@+'           reduce using rule 56
	'@+i'          reduce using rule 56
	'@-'           reduce using rule 56
	'@-i'          reduce using rule 56
	'@0'           reduce using rule 56
	'@1'           reduce using rule 56
	'False'        reduce using rule 56
	'True'         reduce using rule 56
	'['            reduce using rule 56
	'[]'           reduce using rule 56
	']'            reduce using rule 56
	'else'         reduce using rule 56
	'gate'         reduce using rule 56
	'not'          reduce using rule 56
	'of'           reduce using rule 56
	'then'         reduce using rule 56
	'}'            reduce using rule 56
	L_integ        reduce using rule 56
	L_Var          reduce using rule 56


State 98

	Gate -> 'ID' .                                      (rule 60)

	'$'            reduce using rule 60
	'('            reduce using rule 60
	'()'           reduce using rule 60
	')'            reduce using rule 60
	','            reduce using rule 60
	'->'           reduce using rule 60
	'.'            reduce using rule 60
	':'            reduce using rule 60
	';'            reduce using rule 60
	'@+'           reduce using rule 60
	'@+i'          reduce using rule 60
	'@-'           reduce using rule 60
	'@-i'          reduce using rule 60
	'@0'           reduce using rule 60
	'@1'           reduce using rule 60
	'False'        reduce using rule 60
	'True'         reduce using rule 60
	'['            reduce using rule 60
	'[]'           reduce using rule 60
	']'            reduce using rule 60
	'else'         reduce using rule 60
	'gate'         reduce using rule 60
	'not'          reduce using rule 60
	'of'           reduce using rule 60
	'then'         reduce using rule 60
	'}'            reduce using rule 60
	L_integ        reduce using rule 60
	L_Var          reduce using rule 60


State 99

	Gate -> 'ISWAP' .                                   (rule 84)

	'$'            reduce using rule 84
	'('            reduce using rule 84
	'()'           reduce using rule 84
	')'            reduce using rule 84
	','            reduce using rule 84
	'->'           reduce using rule 84
	'.'            reduce using rule 84
	':'            reduce using rule 84
	';'            reduce using rule 84
	'@+'           reduce using rule 84
	'@+i'          reduce using rule 84
	'@-'           reduce using rule 84
	'@-i'          reduce using rule 84
	'@0'           reduce using rule 84
	'@1'           reduce using rule 84
	'False'        reduce using rule 84
	'True'         reduce using rule 84
	'['            reduce using rule 84
	'[]'           reduce using rule 84
	']'            reduce using rule 84
	'else'         reduce using rule 84
	'gate'         reduce using rule 84
	'not'          reduce using rule 84
	'of'           reduce using rule 84
	'then'         reduce using rule 84
	'}'            reduce using rule 84
	L_integ        reduce using rule 84
	L_Var          reduce using rule 84


State 100

	Gate -> 'QFT' . Integer                             (rule 89)

	L_integ        shift, and enter state 43

	Integer        goto state 213

State 101

	Gate -> 'QFT_DAG' . Integer                         (rule 90)

	L_integ        shift, and enter state 43

	Integer        goto state 212

State 102

	Gate -> 'ROOT_SWAP' . Integer                       (rule 87)

	L_integ        shift, and enter state 43

	Integer        goto state 211

State 103

	Gate -> 'ROOT_SWAP_DAG' . Integer                   (rule 88)

	L_integ        shift, and enter state 43

	Integer        goto state 210

State 104

	Gate -> 'ROOT_X' . Integer                          (rule 61)

	L_integ        shift, and enter state 43

	Integer        goto state 209

State 105

	Gate -> 'ROOT_X_DAG' . Integer                      (rule 62)

	L_integ        shift, and enter state 43

	Integer        goto state 208

State 106

	Gate -> 'ROOT_Y' . Integer                          (rule 63)

	L_integ        shift, and enter state 43

	Integer        goto state 207

State 107

	Gate -> 'ROOT_Y_DAG' . Integer                      (rule 64)

	L_integ        shift, and enter state 43

	Integer        goto state 206

State 108

	Gate -> 'ROOT_Z' . Integer                          (rule 65)

	L_integ        shift, and enter state 43

	Integer        goto state 205

State 109

	Gate -> 'ROOT_Z_DAG' . Integer                      (rule 66)

	L_integ        shift, and enter state 43

	Integer        goto state 204

State 110

	Gate -> 'RX' . Angle                                (rule 75)

	L_doubl        shift, and enter state 2

	Double         goto state 198
	Angle          goto state 203

State 111

	Gate -> 'RY' . Angle                                (rule 76)

	L_doubl        shift, and enter state 2

	Double         goto state 198
	Angle          goto state 202

State 112

	Gate -> 'RZ' . Angle                                (rule 77)

	L_doubl        shift, and enter state 2

	Double         goto state 198
	Angle          goto state 201

State 113

	Gate -> 'S' .                                       (rule 67)

	'$'            reduce using rule 67
	'('            reduce using rule 67
	'()'           reduce using rule 67
	')'            reduce using rule 67
	','            reduce using rule 67
	'->'           reduce using rule 67
	'.'            reduce using rule 67
	':'            reduce using rule 67
	';'            reduce using rule 67
	'@+'           reduce using rule 67
	'@+i'          reduce using rule 67
	'@-'           reduce using rule 67
	'@-i'          reduce using rule 67
	'@0'           reduce using rule 67
	'@1'           reduce using rule 67
	'False'        reduce using rule 67
	'True'         reduce using rule 67
	'['            reduce using rule 67
	'[]'           reduce using rule 67
	']'            reduce using rule 67
	'else'         reduce using rule 67
	'gate'         reduce using rule 67
	'not'          reduce using rule 67
	'of'           reduce using rule 67
	'then'         reduce using rule 67
	'}'            reduce using rule 67
	L_integ        reduce using rule 67
	L_Var          reduce using rule 67


State 114

	Gate -> 'SQRT_SWAP' .                               (rule 82)

	'$'            reduce using rule 82
	'('            reduce using rule 82
	'()'           reduce using rule 82
	')'            reduce using rule 82
	','            reduce using rule 82
	'->'           reduce using rule 82
	'.'            reduce using rule 82
	':'            reduce using rule 82
	';'            reduce using rule 82
	'@+'           reduce using rule 82
	'@+i'          reduce using rule 82
	'@-'           reduce using rule 82
	'@-i'          reduce using rule 82
	'@0'           reduce using rule 82
	'@1'           reduce using rule 82
	'False'        reduce using rule 82
	'True'         reduce using rule 82
	'['            reduce using rule 82
	'[]'           reduce using rule 82
	']'            reduce using rule 82
	'else'         reduce using rule 82
	'gate'         reduce using rule 82
	'not'          reduce using rule 82
	'of'           reduce using rule 82
	'then'         reduce using rule 82
	'}'            reduce using rule 82
	L_integ        reduce using rule 82
	L_Var          reduce using rule 82


State 115

	Gate -> 'SQRT_SWAP_DAG' .                           (rule 83)

	'$'            reduce using rule 83
	'('            reduce using rule 83
	'()'           reduce using rule 83
	')'            reduce using rule 83
	','            reduce using rule 83
	'->'           reduce using rule 83
	'.'            reduce using rule 83
	':'            reduce using rule 83
	';'            reduce using rule 83
	'@+'           reduce using rule 83
	'@+i'          reduce using rule 83
	'@-'           reduce using rule 83
	'@-i'          reduce using rule 83
	'@0'           reduce using rule 83
	'@1'           reduce using rule 83
	'False'        reduce using rule 83
	'True'         reduce using rule 83
	'['            reduce using rule 83
	'[]'           reduce using rule 83
	']'            reduce using rule 83
	'else'         reduce using rule 83
	'gate'         reduce using rule 83
	'not'          reduce using rule 83
	'of'           reduce using rule 83
	'then'         reduce using rule 83
	'}'            reduce using rule 83
	L_integ        reduce using rule 83
	L_Var          reduce using rule 83


State 116

	Gate -> 'SQRT_X' .                                  (rule 71)

	'$'            reduce using rule 71
	'('            reduce using rule 71
	'()'           reduce using rule 71
	')'            reduce using rule 71
	','            reduce using rule 71
	'->'           reduce using rule 71
	'.'            reduce using rule 71
	':'            reduce using rule 71
	';'            reduce using rule 71
	'@+'           reduce using rule 71
	'@+i'          reduce using rule 71
	'@-'           reduce using rule 71
	'@-i'          reduce using rule 71
	'@0'           reduce using rule 71
	'@1'           reduce using rule 71
	'False'        reduce using rule 71
	'True'         reduce using rule 71
	'['            reduce using rule 71
	'[]'           reduce using rule 71
	']'            reduce using rule 71
	'else'         reduce using rule 71
	'gate'         reduce using rule 71
	'not'          reduce using rule 71
	'of'           reduce using rule 71
	'then'         reduce using rule 71
	'}'            reduce using rule 71
	L_integ        reduce using rule 71
	L_Var          reduce using rule 71


State 117

	Gate -> 'SQRT_X_DAG' .                              (rule 72)

	'$'            reduce using rule 72
	'('            reduce using rule 72
	'()'           reduce using rule 72
	')'            reduce using rule 72
	','            reduce using rule 72
	'->'           reduce using rule 72
	'.'            reduce using rule 72
	':'            reduce using rule 72
	';'            reduce using rule 72
	'@+'           reduce using rule 72
	'@+i'          reduce using rule 72
	'@-'           reduce using rule 72
	'@-i'          reduce using rule 72
	'@0'           reduce using rule 72
	'@1'           reduce using rule 72
	'False'        reduce using rule 72
	'True'         reduce using rule 72
	'['            reduce using rule 72
	'[]'           reduce using rule 72
	']'            reduce using rule 72
	'else'         reduce using rule 72
	'gate'         reduce using rule 72
	'not'          reduce using rule 72
	'of'           reduce using rule 72
	'then'         reduce using rule 72
	'}'            reduce using rule 72
	L_integ        reduce using rule 72
	L_Var          reduce using rule 72


State 118

	Gate -> 'SQRT_Y' .                                  (rule 73)

	'$'            reduce using rule 73
	'('            reduce using rule 73
	'()'           reduce using rule 73
	')'            reduce using rule 73
	','            reduce using rule 73
	'->'           reduce using rule 73
	'.'            reduce using rule 73
	':'            reduce using rule 73
	';'            reduce using rule 73
	'@+'           reduce using rule 73
	'@+i'          reduce using rule 73
	'@-'           reduce using rule 73
	'@-i'          reduce using rule 73
	'@0'           reduce using rule 73
	'@1'           reduce using rule 73
	'False'        reduce using rule 73
	'True'         reduce using rule 73
	'['            reduce using rule 73
	'[]'           reduce using rule 73
	']'            reduce using rule 73
	'else'         reduce using rule 73
	'gate'         reduce using rule 73
	'not'          reduce using rule 73
	'of'           reduce using rule 73
	'then'         reduce using rule 73
	'}'            reduce using rule 73
	L_integ        reduce using rule 73
	L_Var          reduce using rule 73


State 119

	Gate -> 'SQRT_Y_DAG' .                              (rule 74)

	'$'            reduce using rule 74
	'('            reduce using rule 74
	'()'           reduce using rule 74
	')'            reduce using rule 74
	','            reduce using rule 74
	'->'           reduce using rule 74
	'.'            reduce using rule 74
	':'            reduce using rule 74
	';'            reduce using rule 74
	'@+'           reduce using rule 74
	'@+i'          reduce using rule 74
	'@-'           reduce using rule 74
	'@-i'          reduce using rule 74
	'@0'           reduce using rule 74
	'@1'           reduce using rule 74
	'False'        reduce using rule 74
	'True'         reduce using rule 74
	'['            reduce using rule 74
	'[]'           reduce using rule 74
	']'            reduce using rule 74
	'else'         reduce using rule 74
	'gate'         reduce using rule 74
	'not'          reduce using rule 74
	'of'           reduce using rule 74
	'then'         reduce using rule 74
	'}'            reduce using rule 74
	L_integ        reduce using rule 74
	L_Var          reduce using rule 74


State 120

	Gate -> 'SWAP' .                                    (rule 81)

	'$'            reduce using rule 81
	'('            reduce using rule 81
	'()'           reduce using rule 81
	')'            reduce using rule 81
	','            reduce using rule 81
	'->'           reduce using rule 81
	'.'            reduce using rule 81
	':'            reduce using rule 81
	';'            reduce using rule 81
	'@+'           reduce using rule 81
	'@+i'          reduce using rule 81
	'@-'           reduce using rule 81
	'@-i'          reduce using rule 81
	'@0'           reduce using rule 81
	'@1'           reduce using rule 81
	'False'        reduce using rule 81
	'True'         reduce using rule 81
	'['            reduce using rule 81
	'[]'           reduce using rule 81
	']'            reduce using rule 81
	'else'         reduce using rule 81
	'gate'         reduce using rule 81
	'not'          reduce using rule 81
	'of'           reduce using rule 81
	'then'         reduce using rule 81
	'}'            reduce using rule 81
	L_integ        reduce using rule 81
	L_Var          reduce using rule 81


State 121

	Gate -> 'SWAP_THETA' . Angle                        (rule 86)

	L_doubl        shift, and enter state 2

	Double         goto state 198
	Angle          goto state 200

State 122

	Gate -> 'S_DAG' .                                   (rule 68)

	'$'            reduce using rule 68
	'('            reduce using rule 68
	'()'           reduce using rule 68
	')'            reduce using rule 68
	','            reduce using rule 68
	'->'           reduce using rule 68
	'.'            reduce using rule 68
	':'            reduce using rule 68
	';'            reduce using rule 68
	'@+'           reduce using rule 68
	'@+i'          reduce using rule 68
	'@-'           reduce using rule 68
	'@-i'          reduce using rule 68
	'@0'           reduce using rule 68
	'@1'           reduce using rule 68
	'False'        reduce using rule 68
	'True'         reduce using rule 68
	'['            reduce using rule 68
	'[]'           reduce using rule 68
	']'            reduce using rule 68
	'else'         reduce using rule 68
	'gate'         reduce using rule 68
	'not'          reduce using rule 68
	'of'           reduce using rule 68
	'then'         reduce using rule 68
	'}'            reduce using rule 68
	L_integ        reduce using rule 68
	L_Var          reduce using rule 68


State 123

	Gate -> 'T' .                                       (rule 69)

	'$'            reduce using rule 69
	'('            reduce using rule 69
	'()'           reduce using rule 69
	')'            reduce using rule 69
	','            reduce using rule 69
	'->'           reduce using rule 69
	'.'            reduce using rule 69
	':'            reduce using rule 69
	';'            reduce using rule 69
	'@+'           reduce using rule 69
	'@+i'          reduce using rule 69
	'@-'           reduce using rule 69
	'@-i'          reduce using rule 69
	'@0'           reduce using rule 69
	'@1'           reduce using rule 69
	'False'        reduce using rule 69
	'True'         reduce using rule 69
	'['            reduce using rule 69
	'[]'           reduce using rule 69
	']'            reduce using rule 69
	'else'         reduce using rule 69
	'gate'         reduce using rule 69
	'not'          reduce using rule 69
	'of'           reduce using rule 69
	'then'         reduce using rule 69
	'}'            reduce using rule 69
	L_integ        reduce using rule 69
	L_Var          reduce using rule 69


State 124

	Gate -> 'T_DAG' .                                   (rule 70)

	'$'            reduce using rule 70
	'('            reduce using rule 70
	'()'           reduce using rule 70
	')'            reduce using rule 70
	','            reduce using rule 70
	'->'           reduce using rule 70
	'.'            reduce using rule 70
	':'            reduce using rule 70
	';'            reduce using rule 70
	'@+'           reduce using rule 70
	'@+i'          reduce using rule 70
	'@-'           reduce using rule 70
	'@-i'          reduce using rule 70
	'@0'           reduce using rule 70
	'@1'           reduce using rule 70
	'False'        reduce using rule 70
	'True'         reduce using rule 70
	'['            reduce using rule 70
	'[]'           reduce using rule 70
	']'            reduce using rule 70
	'else'         reduce using rule 70
	'gate'         reduce using rule 70
	'not'          reduce using rule 70
	'of'           reduce using rule 70
	'then'         reduce using rule 70
	'}'            reduce using rule 70
	L_integ        reduce using rule 70
	L_Var          reduce using rule 70


State 125

	Gate -> 'U1' . Angle                                (rule 78)

	L_doubl        shift, and enter state 2

	Double         goto state 198
	Angle          goto state 199

State 126

	Gate -> 'U2' . '(' Angle ',' Angle ')'              (rule 79)

	'('            shift, and enter state 197


State 127

	Gate -> 'U3' . '(' Angle ',' Angle ',' Angle ')'    (rule 80)

	'('            shift, and enter state 196


State 128

	Gate -> 'X' .                                       (rule 57)

	'$'            reduce using rule 57
	'('            reduce using rule 57
	'()'           reduce using rule 57
	')'            reduce using rule 57
	','            reduce using rule 57
	'->'           reduce using rule 57
	'.'            reduce using rule 57
	':'            reduce using rule 57
	';'            reduce using rule 57
	'@+'           reduce using rule 57
	'@+i'          reduce using rule 57
	'@-'           reduce using rule 57
	'@-i'          reduce using rule 57
	'@0'           reduce using rule 57
	'@1'           reduce using rule 57
	'False'        reduce using rule 57
	'True'         reduce using rule 57
	'['            reduce using rule 57
	'[]'           reduce using rule 57
	']'            reduce using rule 57
	'else'         reduce using rule 57
	'gate'         reduce using rule 57
	'not'          reduce using rule 57
	'of'           reduce using rule 57
	'then'         reduce using rule 57
	'}'            reduce using rule 57
	L_integ        reduce using rule 57
	L_Var          reduce using rule 57


State 129

	Gate -> 'Y' .                                       (rule 58)

	'$'            reduce using rule 58
	'('            reduce using rule 58
	'()'           reduce using rule 58
	')'            reduce using rule 58
	','            reduce using rule 58
	'->'           reduce using rule 58
	'.'            reduce using rule 58
	':'            reduce using rule 58
	';'            reduce using rule 58
	'@+'           reduce using rule 58
	'@+i'          reduce using rule 58
	'@-'           reduce using rule 58
	'@-i'          reduce using rule 58
	'@0'           reduce using rule 58
	'@1'           reduce using rule 58
	'False'        reduce using rule 58
	'True'         reduce using rule 58
	'['            reduce using rule 58
	'[]'           reduce using rule 58
	']'            reduce using rule 58
	'else'         reduce using rule 58
	'gate'         reduce using rule 58
	'not'          reduce using rule 58
	'of'           reduce using rule 58
	'then'         reduce using rule 58
	'}'            reduce using rule 58
	L_integ        reduce using rule 58
	L_Var          reduce using rule 58


State 130

	Gate -> 'Z' .                                       (rule 59)

	'$'            reduce using rule 59
	'('            reduce using rule 59
	'()'           reduce using rule 59
	')'            reduce using rule 59
	','            reduce using rule 59
	'->'           reduce using rule 59
	'.'            reduce using rule 59
	':'            reduce using rule 59
	';'            reduce using rule 59
	'@+'           reduce using rule 59
	'@+i'          reduce using rule 59
	'@-'           reduce using rule 59
	'@-i'          reduce using rule 59
	'@0'           reduce using rule 59
	'@1'           reduce using rule 59
	'False'        reduce using rule 59
	'True'         reduce using rule 59
	'['            reduce using rule 59
	'[]'           reduce using rule 59
	']'            reduce using rule 59
	'else'         reduce using rule 59
	'gate'         reduce using rule 59
	'not'          reduce using rule 59
	'of'           reduce using rule 59
	'then'         reduce using rule 59
	'}'            reduce using rule 59
	L_integ        reduce using rule 59
	L_Var          reduce using rule 59


State 131

	GateVar -> L_GateVar .                              (rule 3)

	'$'            reduce using rule 3
	'('            reduce using rule 3
	'()'           reduce using rule 3
	')'            reduce using rule 3
	','            reduce using rule 3
	'->'           reduce using rule 3
	'.'            reduce using rule 3
	':'            reduce using rule 3
	';'            reduce using rule 3
	'@+'           reduce using rule 3
	'@+i'          reduce using rule 3
	'@-'           reduce using rule 3
	'@-i'          reduce using rule 3
	'@0'           reduce using rule 3
	'@1'           reduce using rule 3
	'False'        reduce using rule 3
	'True'         reduce using rule 3
	'['            reduce using rule 3
	'[]'           reduce using rule 3
	']'            reduce using rule 3
	'else'         reduce using rule 3
	'gate'         reduce using rule 3
	'not'          reduce using rule 3
	'of'           reduce using rule 3
	'then'         reduce using rule 3
	'}'            reduce using rule 3
	L_doubl        reduce using rule 3
	L_integ        reduce using rule 3
	L_Var          reduce using rule 3


State 132

	Term1 -> 'case' Term . 'of' CaseExpression ListCaseExpression    (rule 118)

	'of'           shift, and enter state 195


State 133

	List1 -> '[' Term . ']'                             (rule 141)
	List1 -> '[' Term . ',' ListTerm ']'                (rule 142)

	','            shift, and enter state 193
	']'            shift, and enter state 194


State 134

	IntegerExpression -> IntegerExpression . '+' IntegerExpression1    (rule 7)
	IntegerExpression -> IntegerExpression . '-' IntegerExpression1    (rule 8)
	IntegerExpression2 -> '(' IntegerExpression . ')'    (rule 14)
	Term3 -> IntegerExpression .                        (rule 133)

	'$'            reduce using rule 133
	'('            reduce using rule 133
	'()'           reduce using rule 133
	')'            shift, and enter state 192
			(reduce using rule 133)

	'+'            shift, and enter state 157
	','            reduce using rule 133
	'-'            shift, and enter state 158
	'.'            reduce using rule 133
	':'            reduce using rule 133
	'@+'           reduce using rule 133
	'@+i'          reduce using rule 133
	'@-'           reduce using rule 133
	'@-i'          reduce using rule 133
	'@0'           reduce using rule 133
	'@1'           reduce using rule 133
	'False'        reduce using rule 133
	'True'         reduce using rule 133
	'['            reduce using rule 133
	'[]'           reduce using rule 133
	'gate'         reduce using rule 133
	'not'          reduce using rule 133
	L_integ        reduce using rule 133
	L_Var          reduce using rule 133


State 135

	BoolExpression -> BoolExpression . '&&' BoolExpression1    (rule 17)
	BoolExpression -> BoolExpression . '||' BoolExpression1    (rule 18)
	BoolExpression2 -> '(' BoolExpression . ')'         (rule 31)
	Term3 -> BoolExpression .                           (rule 132)

	'$'            reduce using rule 132
	'&&'           shift, and enter state 147
	'('            reduce using rule 132
	'()'           reduce using rule 132
	')'            shift, and enter state 191
			(reduce using rule 132)

	','            reduce using rule 132
	'.'            reduce using rule 132
	':'            reduce using rule 132
	'@+'           reduce using rule 132
	'@+i'          reduce using rule 132
	'@-'           reduce using rule 132
	'@-i'          reduce using rule 132
	'@0'           reduce using rule 132
	'@1'           reduce using rule 132
	'False'        reduce using rule 132
	'True'         reduce using rule 132
	'['            reduce using rule 132
	'[]'           reduce using rule 132
	'gate'         reduce using rule 132
	'not'          reduce using rule 132
	'||'           shift, and enter state 148
	L_integ        reduce using rule 132
	L_Var          reduce using rule 132


State 136

	Tuple -> '(' Term . ',' ListTerm ')'                (rule 106)
	Term4 -> '(' Term . ')'                             (rule 139)

	')'            shift, and enter state 189
	','            shift, and enter state 190


State 137

	Term3 -> List .                                     (rule 136)
	Term4 -> List . '!!' Integer                        (rule 138)
	List1 -> '(' List . ')'                             (rule 143)
	List -> List . '++' List1                           (rule 144)

	'!!'           shift, and enter state 138
	'$'            reduce using rule 136
	'('            reduce using rule 136
	'()'           reduce using rule 136
	')'            shift, and enter state 188
			(reduce using rule 136)

	'++'           shift, and enter state 139
	','            reduce using rule 136
	'.'            reduce using rule 136
	':'            reduce using rule 136
	'@+'           reduce using rule 136
	'@+i'          reduce using rule 136
	'@-'           reduce using rule 136
	'@-i'          reduce using rule 136
	'@0'           reduce using rule 136
	'@1'           reduce using rule 136
	'False'        reduce using rule 136
	'True'         reduce using rule 136
	'['            reduce using rule 136
	'[]'           reduce using rule 136
	'gate'         reduce using rule 136
	'not'          reduce using rule 136
	L_integ        reduce using rule 136
	L_Var          reduce using rule 136


State 138

	Term4 -> List '!!' . Integer                        (rule 138)

	L_integ        shift, and enter state 43

	Integer        goto state 187

State 139

	List -> List '++' . List1                           (rule 144)

	'('            shift, and enter state 185
	'['            shift, and enter state 77
	'[]'           shift, and enter state 78

	List1          goto state 186

State 140

	List -> Term3 ':' . List1                           (rule 145)

	'('            shift, and enter state 185
	'['            shift, and enter state 77
	'[]'           shift, and enter state 78

	List1          goto state 184

State 141

	Term3 -> Var .                                      (rule 129)

	'$'            reduce using rule 129
	'('            reduce using rule 129
	'()'           reduce using rule 129
	')'            reduce using rule 129
	','            reduce using rule 129
	'->'           reduce using rule 129
	'.'            reduce using rule 129
	':'            reduce using rule 129
	';'            reduce using rule 129
	'@+'           reduce using rule 129
	'@+i'          reduce using rule 129
	'@-'           reduce using rule 129
	'@-i'          reduce using rule 129
	'@0'           reduce using rule 129
	'@1'           reduce using rule 129
	'False'        reduce using rule 129
	'True'         reduce using rule 129
	'['            reduce using rule 129
	'[]'           reduce using rule 129
	']'            reduce using rule 129
	'else'         reduce using rule 129
	'gate'         reduce using rule 129
	'not'          reduce using rule 129
	'of'           reduce using rule 129
	'then'         reduce using rule 129
	'}'            reduce using rule 129
	L_integ        reduce using rule 129
	L_Var          reduce using rule 129


State 142

	Term2 -> Term2 Term3 .                              (rule 125)
	List -> Term3 . ':' List1                           (rule 145)

	'$'            reduce using rule 125
	'('            reduce using rule 125
	'()'           reduce using rule 125
	')'            reduce using rule 125
	','            reduce using rule 125
	'.'            reduce using rule 125
	':'            shift, and enter state 140
	';'            reduce using rule 125
	'@+'           reduce using rule 125
	'@+i'          reduce using rule 125
	'@-'           reduce using rule 125
	'@-i'          reduce using rule 125
	'@0'           reduce using rule 125
	'@1'           reduce using rule 125
	'False'        reduce using rule 125
	'True'         reduce using rule 125
	'['            reduce using rule 125
	'[]'           reduce using rule 125
	']'            reduce using rule 125
	'else'         reduce using rule 125
	'gate'         reduce using rule 125
	'not'          reduce using rule 125
	'of'           reduce using rule 125
	'then'         reduce using rule 125
	'}'            reduce using rule 125
	L_integ        reduce using rule 125
	L_Var          reduce using rule 125


State 143

	Term2 -> Term2 '.' . Term3                          (rule 126)

	'('            shift, and enter state 67
	'()'           shift, and enter state 68
	'@+'           shift, and enter state 69
	'@+i'          shift, and enter state 70
	'@-'           shift, and enter state 71
	'@-i'          shift, and enter state 72
	'@0'           shift, and enter state 73
	'@1'           shift, and enter state 74
	'False'        shift, and enter state 75
	'True'         shift, and enter state 76
	'['            shift, and enter state 77
	'[]'           shift, and enter state 78
	'gate'         shift, and enter state 80
	'not'          shift, and enter state 83
	L_integ        shift, and enter state 43
	L_Var          shift, and enter state 8

	Integer        goto state 48
	Var            goto state 141
	IntegerExpressiongoto state 51
	IntegerExpression1goto state 52
	IntegerExpression2goto state 53
	BoolValue      goto state 54
	BoolExpression goto state 55
	BoolExpression1goto state 56
	BoolExpression2goto state 57
	BasisState     goto state 58
	Tuple          goto state 59
	Term3          goto state 183
	Term4          goto state 64
	List1          goto state 65
	List           goto state 66

State 144

	Term -> Term1 '$' . Term                            (rule 111)

	'('            shift, and enter state 67
	'()'           shift, and enter state 68
	'@+'           shift, and enter state 69
	'@+i'          shift, and enter state 70
	'@-'           shift, and enter state 71
	'@-i'          shift, and enter state 72
	'@0'           shift, and enter state 73
	'@1'           shift, and enter state 74
	'False'        shift, and enter state 75
	'True'         shift, and enter state 76
	'['            shift, and enter state 77
	'[]'           shift, and enter state 78
	'case'         shift, and enter state 79
	'gate'         shift, and enter state 80
	'if'           shift, and enter state 81
	'let'          shift, and enter state 82
	'not'          shift, and enter state 83
	'with'         shift, and enter state 84
	L_integ        shift, and enter state 43
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 85

	Integer        goto state 48
	Var            goto state 49
	Lambda         goto state 50
	IntegerExpressiongoto state 51
	IntegerExpression1goto state 52
	IntegerExpression2goto state 53
	BoolValue      goto state 54
	BoolExpression goto state 55
	BoolExpression1goto state 56
	BoolExpression2goto state 57
	BasisState     goto state 58
	Tuple          goto state 59
	Term           goto state 182
	Term1          goto state 61
	Term2          goto state 62
	Term3          goto state 63
	Term4          goto state 64
	List1          goto state 65
	List           goto state 66

State 145

	BoolExpression1 -> BoolExpression1 '/=' . BoolExpression2    (rule 22)

	'('            shift, and enter state 91
	'False'        shift, and enter state 75
	'True'         shift, and enter state 76
	L_integ        shift, and enter state 43

	Integer        goto state 48
	IntegerExpression2goto state 89
	BoolValue      goto state 54
	BoolExpression2goto state 181

State 146

	BoolExpression1 -> BoolExpression1 '==' . BoolExpression2    (rule 21)

	'('            shift, and enter state 91
	'False'        shift, and enter state 75
	'True'         shift, and enter state 76
	L_integ        shift, and enter state 43

	Integer        goto state 48
	IntegerExpression2goto state 89
	BoolValue      goto state 54
	BoolExpression2goto state 180

State 147

	BoolExpression -> BoolExpression '&&' . BoolExpression1    (rule 17)

	'('            shift, and enter state 91
	'False'        shift, and enter state 75
	'True'         shift, and enter state 76
	L_integ        shift, and enter state 43

	Integer        goto state 48
	IntegerExpression2goto state 89
	BoolValue      goto state 54
	BoolExpression1goto state 179
	BoolExpression2goto state 57

State 148

	BoolExpression -> BoolExpression '||' . BoolExpression1    (rule 18)

	'('            shift, and enter state 91
	'False'        shift, and enter state 75
	'True'         shift, and enter state 76
	L_integ        shift, and enter state 43

	Integer        goto state 48
	IntegerExpression2goto state 89
	BoolValue      goto state 54
	BoolExpression1goto state 178
	BoolExpression2goto state 57

State 149

	BoolExpression2 -> IntegerExpression2 '/=' . IntegerExpression2    (rule 25)

	'('            shift, and enter state 168
	L_integ        shift, and enter state 43

	Integer        goto state 48
	IntegerExpression2goto state 177

State 150

	BoolExpression2 -> IntegerExpression2 '<' . IntegerExpression2    (rule 28)

	'('            shift, and enter state 168
	L_integ        shift, and enter state 43

	Integer        goto state 48
	IntegerExpression2goto state 176

State 151

	BoolExpression2 -> IntegerExpression2 '<=' . IntegerExpression2    (rule 29)

	'('            shift, and enter state 168
	L_integ        shift, and enter state 43

	Integer        goto state 48
	IntegerExpression2goto state 175

State 152

	BoolExpression2 -> IntegerExpression2 '==' . IntegerExpression2    (rule 24)

	'('            shift, and enter state 168
	L_integ        shift, and enter state 43

	Integer        goto state 48
	IntegerExpression2goto state 174

State 153

	BoolExpression2 -> IntegerExpression2 '>' . IntegerExpression2    (rule 26)

	'('            shift, and enter state 168
	L_integ        shift, and enter state 43

	Integer        goto state 48
	IntegerExpression2goto state 173

State 154

	BoolExpression2 -> IntegerExpression2 '>=' . IntegerExpression2    (rule 27)

	'('            shift, and enter state 168
	L_integ        shift, and enter state 43

	Integer        goto state 48
	IntegerExpression2goto state 172

State 155

	IntegerExpression1 -> IntegerExpression1 '*' . IntegerExpression2    (rule 10)

	'('            shift, and enter state 168
	L_integ        shift, and enter state 43

	Integer        goto state 48
	IntegerExpression2goto state 171

State 156

	IntegerExpression1 -> IntegerExpression1 '/' . IntegerExpression2    (rule 11)

	'('            shift, and enter state 168
	L_integ        shift, and enter state 43

	Integer        goto state 48
	IntegerExpression2goto state 170

State 157

	IntegerExpression -> IntegerExpression '+' . IntegerExpression1    (rule 7)

	'('            shift, and enter state 168
	L_integ        shift, and enter state 43

	Integer        goto state 48
	IntegerExpression1goto state 169
	IntegerExpression2goto state 167

State 158

	IntegerExpression -> IntegerExpression '-' . IntegerExpression1    (rule 8)

	'('            shift, and enter state 168
	L_integ        shift, and enter state 43

	Integer        goto state 48
	IntegerExpression1goto state 166
	IntegerExpression2goto state 167

State 159

	Term1 -> Lambda Var . Type '.' Term                 (rule 119)

	'!'            shift, and enter state 18
	'('            shift, and enter state 19
	'()'           shift, and enter state 20
	'Bit'          shift, and enter state 21
	'Bool'         shift, and enter state 22
	'Int'          shift, and enter state 23
	'Qbit'         shift, and enter state 24
	'['            shift, and enter state 25

	Type           goto state 165
	Type1          goto state 13
	Type2          goto state 14
	Type3          goto state 15
	Type5          goto state 16
	Type4          goto state 17

State 160

	Term1 -> Var ',' . ListVar '<-' Term ';' Term       (rule 117)
	Term2 -> Var ',' . ListVar                          (rule 127)

	L_Var          shift, and enter state 8

	Var            goto state 163
	ListVar        goto state 164

State 161

	Term1 -> Var '<-' . Term ';' Term                   (rule 116)

	'('            shift, and enter state 67
	'()'           shift, and enter state 68
	'@+'           shift, and enter state 69
	'@+i'          shift, and enter state 70
	'@-'           shift, and enter state 71
	'@-i'          shift, and enter state 72
	'@0'           shift, and enter state 73
	'@1'           shift, and enter state 74
	'False'        shift, and enter state 75
	'True'         shift, and enter state 76
	'['            shift, and enter state 77
	'[]'           shift, and enter state 78
	'case'         shift, and enter state 79
	'gate'         shift, and enter state 80
	'if'           shift, and enter state 81
	'let'          shift, and enter state 82
	'not'          shift, and enter state 83
	'with'         shift, and enter state 84
	L_integ        shift, and enter state 43
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 85

	Integer        goto state 48
	Var            goto state 49
	Lambda         goto state 50
	IntegerExpressiongoto state 51
	IntegerExpression1goto state 52
	IntegerExpression2goto state 53
	BoolValue      goto state 54
	BoolExpression goto state 55
	BoolExpression1goto state 56
	BoolExpression2goto state 57
	BasisState     goto state 58
	Tuple          goto state 59
	Term           goto state 162
	Term1          goto state 61
	Term2          goto state 62
	Term3          goto state 63
	Term4          goto state 64
	List1          goto state 65
	List           goto state 66

State 162

	Term1 -> Var '<-' Term . ';' Term                   (rule 116)

	';'            shift, and enter state 248


State 163

	ListVar -> Var .                                    (rule 96)
	ListVar -> Var . ',' ListVar                        (rule 97)

	'$'            reduce using rule 96
	'('            reduce using rule 96
	'()'           reduce using rule 96
	')'            reduce using rule 96
	','            shift, and enter state 247
			(reduce using rule 96)

	'.'            reduce using rule 96
	';'            reduce using rule 96
	'<-'           reduce using rule 96
	'@+'           reduce using rule 96
	'@+i'          reduce using rule 96
	'@-'           reduce using rule 96
	'@-i'          reduce using rule 96
	'@0'           reduce using rule 96
	'@1'           reduce using rule 96
	'False'        reduce using rule 96
	'True'         reduce using rule 96
	'['            reduce using rule 96
	'[]'           reduce using rule 96
	']'            reduce using rule 96
	'else'         reduce using rule 96
	'gate'         reduce using rule 96
	'not'          reduce using rule 96
	'of'           reduce using rule 96
	'then'         reduce using rule 96
	'}'            reduce using rule 96
	L_integ        reduce using rule 96
	L_Var          reduce using rule 96


State 164

	Term1 -> Var ',' ListVar . '<-' Term ';' Term       (rule 117)
	Term2 -> Var ',' ListVar .                          (rule 127)

	'$'            reduce using rule 127
	'('            reduce using rule 127
	'()'           reduce using rule 127
	')'            reduce using rule 127
	','            reduce using rule 127
	'.'            reduce using rule 127
	';'            reduce using rule 127
	'<-'           shift, and enter state 246
	'@+'           reduce using rule 127
	'@+i'          reduce using rule 127
	'@-'           reduce using rule 127
	'@-i'          reduce using rule 127
	'@0'           reduce using rule 127
	'@1'           reduce using rule 127
	'False'        reduce using rule 127
	'True'         reduce using rule 127
	'['            reduce using rule 127
	'[]'           reduce using rule 127
	']'            reduce using rule 127
	'else'         reduce using rule 127
	'gate'         reduce using rule 127
	'not'          reduce using rule 127
	'of'           reduce using rule 127
	'then'         reduce using rule 127
	'}'            reduce using rule 127
	L_integ        reduce using rule 127
	L_Var          reduce using rule 127


State 165

	Type -> Type . '->' Type1                           (rule 32)
	Term1 -> Lambda Var Type . '.' Term                 (rule 119)

	'->'           shift, and enter state 38
	'.'            shift, and enter state 245


State 166

	IntegerExpression -> IntegerExpression '-' IntegerExpression1 .    (rule 8)
	IntegerExpression1 -> IntegerExpression1 . '*' IntegerExpression2    (rule 10)
	IntegerExpression1 -> IntegerExpression1 . '/' IntegerExpression2    (rule 11)

	'$'            reduce using rule 8
	'('            reduce using rule 8
	'()'           reduce using rule 8
	')'            reduce using rule 8
	'*'            shift, and enter state 155
	'+'            reduce using rule 8
	','            reduce using rule 8
	'-'            reduce using rule 8
	'->'           reduce using rule 8
	'.'            reduce using rule 8
	'/'            shift, and enter state 156
	':'            reduce using rule 8
	';'            reduce using rule 8
	'@+'           reduce using rule 8
	'@+i'          reduce using rule 8
	'@-'           reduce using rule 8
	'@-i'          reduce using rule 8
	'@0'           reduce using rule 8
	'@1'           reduce using rule 8
	'False'        reduce using rule 8
	'True'         reduce using rule 8
	'['            reduce using rule 8
	'[]'           reduce using rule 8
	']'            reduce using rule 8
	'else'         reduce using rule 8
	'gate'         reduce using rule 8
	'not'          reduce using rule 8
	'of'           reduce using rule 8
	'then'         reduce using rule 8
	'}'            reduce using rule 8
	L_integ        reduce using rule 8
	L_Var          reduce using rule 8


State 167

	IntegerExpression1 -> IntegerExpression2 .          (rule 12)

	'$'            reduce using rule 12
	'('            reduce using rule 12
	'()'           reduce using rule 12
	')'            reduce using rule 12
	'*'            reduce using rule 12
	'+'            reduce using rule 12
	','            reduce using rule 12
	'-'            reduce using rule 12
	'->'           reduce using rule 12
	'.'            reduce using rule 12
	'/'            reduce using rule 12
	':'            reduce using rule 12
	';'            reduce using rule 12
	'@+'           reduce using rule 12
	'@+i'          reduce using rule 12
	'@-'           reduce using rule 12
	'@-i'          reduce using rule 12
	'@0'           reduce using rule 12
	'@1'           reduce using rule 12
	'False'        reduce using rule 12
	'True'         reduce using rule 12
	'['            reduce using rule 12
	'[]'           reduce using rule 12
	']'            reduce using rule 12
	'else'         reduce using rule 12
	'gate'         reduce using rule 12
	'not'          reduce using rule 12
	'of'           reduce using rule 12
	'then'         reduce using rule 12
	'}'            reduce using rule 12
	L_integ        reduce using rule 12
	L_Var          reduce using rule 12


State 168

	IntegerExpression2 -> '(' . IntegerExpression ')'    (rule 14)

	'('            shift, and enter state 168
	L_integ        shift, and enter state 43

	Integer        goto state 48
	IntegerExpressiongoto state 220
	IntegerExpression1goto state 52
	IntegerExpression2goto state 167

State 169

	IntegerExpression -> IntegerExpression '+' IntegerExpression1 .    (rule 7)
	IntegerExpression1 -> IntegerExpression1 . '*' IntegerExpression2    (rule 10)
	IntegerExpression1 -> IntegerExpression1 . '/' IntegerExpression2    (rule 11)

	'$'            reduce using rule 7
	'('            reduce using rule 7
	'()'           reduce using rule 7
	')'            reduce using rule 7
	'*'            shift, and enter state 155
	'+'            reduce using rule 7
	','            reduce using rule 7
	'-'            reduce using rule 7
	'->'           reduce using rule 7
	'.'            reduce using rule 7
	'/'            shift, and enter state 156
	':'            reduce using rule 7
	';'            reduce using rule 7
	'@+'           reduce using rule 7
	'@+i'          reduce using rule 7
	'@-'           reduce using rule 7
	'@-i'          reduce using rule 7
	'@0'           reduce using rule 7
	'@1'           reduce using rule 7
	'False'        reduce using rule 7
	'True'         reduce using rule 7
	'['            reduce using rule 7
	'[]'           reduce using rule 7
	']'            reduce using rule 7
	'else'         reduce using rule 7
	'gate'         reduce using rule 7
	'not'          reduce using rule 7
	'of'           reduce using rule 7
	'then'         reduce using rule 7
	'}'            reduce using rule 7
	L_integ        reduce using rule 7
	L_Var          reduce using rule 7


State 170

	IntegerExpression1 -> IntegerExpression1 '/' IntegerExpression2 .    (rule 11)

	'$'            reduce using rule 11
	'('            reduce using rule 11
	'()'           reduce using rule 11
	')'            reduce using rule 11
	'*'            reduce using rule 11
	'+'            reduce using rule 11
	','            reduce using rule 11
	'-'            reduce using rule 11
	'->'           reduce using rule 11
	'.'            reduce using rule 11
	'/'            reduce using rule 11
	':'            reduce using rule 11
	';'            reduce using rule 11
	'@+'           reduce using rule 11
	'@+i'          reduce using rule 11
	'@-'           reduce using rule 11
	'@-i'          reduce using rule 11
	'@0'           reduce using rule 11
	'@1'           reduce using rule 11
	'False'        reduce using rule 11
	'True'         reduce using rule 11
	'['            reduce using rule 11
	'[]'           reduce using rule 11
	']'            reduce using rule 11
	'else'         reduce using rule 11
	'gate'         reduce using rule 11
	'not'          reduce using rule 11
	'of'           reduce using rule 11
	'then'         reduce using rule 11
	'}'            reduce using rule 11
	L_integ        reduce using rule 11
	L_Var          reduce using rule 11


State 171

	IntegerExpression1 -> IntegerExpression1 '*' IntegerExpression2 .    (rule 10)

	'$'            reduce using rule 10
	'('            reduce using rule 10
	'()'           reduce using rule 10
	')'            reduce using rule 10
	'*'            reduce using rule 10
	'+'            reduce using rule 10
	','            reduce using rule 10
	'-'            reduce using rule 10
	'->'           reduce using rule 10
	'.'            reduce using rule 10
	'/'            reduce using rule 10
	':'            reduce using rule 10
	';'            reduce using rule 10
	'@+'           reduce using rule 10
	'@+i'          reduce using rule 10
	'@-'           reduce using rule 10
	'@-i'          reduce using rule 10
	'@0'           reduce using rule 10
	'@1'           reduce using rule 10
	'False'        reduce using rule 10
	'True'         reduce using rule 10
	'['            reduce using rule 10
	'[]'           reduce using rule 10
	']'            reduce using rule 10
	'else'         reduce using rule 10
	'gate'         reduce using rule 10
	'not'          reduce using rule 10
	'of'           reduce using rule 10
	'then'         reduce using rule 10
	'}'            reduce using rule 10
	L_integ        reduce using rule 10
	L_Var          reduce using rule 10


State 172

	BoolExpression2 -> IntegerExpression2 '>=' IntegerExpression2 .    (rule 27)

	'$'            reduce using rule 27
	'&&'           reduce using rule 27
	'('            reduce using rule 27
	'()'           reduce using rule 27
	')'            reduce using rule 27
	','            reduce using rule 27
	'->'           reduce using rule 27
	'.'            reduce using rule 27
	'/='           reduce using rule 27
	':'            reduce using rule 27
	';'            reduce using rule 27
	'=='           reduce using rule 27
	'@+'           reduce using rule 27
	'@+i'          reduce using rule 27
	'@-'           reduce using rule 27
	'@-i'          reduce using rule 27
	'@0'           reduce using rule 27
	'@1'           reduce using rule 27
	'False'        reduce using rule 27
	'True'         reduce using rule 27
	'['            reduce using rule 27
	'[]'           reduce using rule 27
	']'            reduce using rule 27
	'else'         reduce using rule 27
	'gate'         reduce using rule 27
	'not'          reduce using rule 27
	'of'           reduce using rule 27
	'then'         reduce using rule 27
	'||'           reduce using rule 27
	'}'            reduce using rule 27
	L_integ        reduce using rule 27
	L_Var          reduce using rule 27


State 173

	BoolExpression2 -> IntegerExpression2 '>' IntegerExpression2 .    (rule 26)

	'$'            reduce using rule 26
	'&&'           reduce using rule 26
	'('            reduce using rule 26
	'()'           reduce using rule 26
	')'            reduce using rule 26
	','            reduce using rule 26
	'->'           reduce using rule 26
	'.'            reduce using rule 26
	'/='           reduce using rule 26
	':'            reduce using rule 26
	';'            reduce using rule 26
	'=='           reduce using rule 26
	'@+'           reduce using rule 26
	'@+i'          reduce using rule 26
	'@-'           reduce using rule 26
	'@-i'          reduce using rule 26
	'@0'           reduce using rule 26
	'@1'           reduce using rule 26
	'False'        reduce using rule 26
	'True'         reduce using rule 26
	'['            reduce using rule 26
	'[]'           reduce using rule 26
	']'            reduce using rule 26
	'else'         reduce using rule 26
	'gate'         reduce using rule 26
	'not'          reduce using rule 26
	'of'           reduce using rule 26
	'then'         reduce using rule 26
	'||'           reduce using rule 26
	'}'            reduce using rule 26
	L_integ        reduce using rule 26
	L_Var          reduce using rule 26


State 174

	BoolExpression2 -> IntegerExpression2 '==' IntegerExpression2 .    (rule 24)

	'$'            reduce using rule 24
	'&&'           reduce using rule 24
	'('            reduce using rule 24
	'()'           reduce using rule 24
	')'            reduce using rule 24
	','            reduce using rule 24
	'->'           reduce using rule 24
	'.'            reduce using rule 24
	'/='           reduce using rule 24
	':'            reduce using rule 24
	';'            reduce using rule 24
	'=='           reduce using rule 24
	'@+'           reduce using rule 24
	'@+i'          reduce using rule 24
	'@-'           reduce using rule 24
	'@-i'          reduce using rule 24
	'@0'           reduce using rule 24
	'@1'           reduce using rule 24
	'False'        reduce using rule 24
	'True'         reduce using rule 24
	'['            reduce using rule 24
	'[]'           reduce using rule 24
	']'            reduce using rule 24
	'else'         reduce using rule 24
	'gate'         reduce using rule 24
	'not'          reduce using rule 24
	'of'           reduce using rule 24
	'then'         reduce using rule 24
	'||'           reduce using rule 24
	'}'            reduce using rule 24
	L_integ        reduce using rule 24
	L_Var          reduce using rule 24


State 175

	BoolExpression2 -> IntegerExpression2 '<=' IntegerExpression2 .    (rule 29)

	'$'            reduce using rule 29
	'&&'           reduce using rule 29
	'('            reduce using rule 29
	'()'           reduce using rule 29
	')'            reduce using rule 29
	','            reduce using rule 29
	'->'           reduce using rule 29
	'.'            reduce using rule 29
	'/='           reduce using rule 29
	':'            reduce using rule 29
	';'            reduce using rule 29
	'=='           reduce using rule 29
	'@+'           reduce using rule 29
	'@+i'          reduce using rule 29
	'@-'           reduce using rule 29
	'@-i'          reduce using rule 29
	'@0'           reduce using rule 29
	'@1'           reduce using rule 29
	'False'        reduce using rule 29
	'True'         reduce using rule 29
	'['            reduce using rule 29
	'[]'           reduce using rule 29
	']'            reduce using rule 29
	'else'         reduce using rule 29
	'gate'         reduce using rule 29
	'not'          reduce using rule 29
	'of'           reduce using rule 29
	'then'         reduce using rule 29
	'||'           reduce using rule 29
	'}'            reduce using rule 29
	L_integ        reduce using rule 29
	L_Var          reduce using rule 29


State 176

	BoolExpression2 -> IntegerExpression2 '<' IntegerExpression2 .    (rule 28)

	'$'            reduce using rule 28
	'&&'           reduce using rule 28
	'('            reduce using rule 28
	'()'           reduce using rule 28
	')'            reduce using rule 28
	','            reduce using rule 28
	'->'           reduce using rule 28
	'.'            reduce using rule 28
	'/='           reduce using rule 28
	':'            reduce using rule 28
	';'            reduce using rule 28
	'=='           reduce using rule 28
	'@+'           reduce using rule 28
	'@+i'          reduce using rule 28
	'@-'           reduce using rule 28
	'@-i'          reduce using rule 28
	'@0'           reduce using rule 28
	'@1'           reduce using rule 28
	'False'        reduce using rule 28
	'True'         reduce using rule 28
	'['            reduce using rule 28
	'[]'           reduce using rule 28
	']'            reduce using rule 28
	'else'         reduce using rule 28
	'gate'         reduce using rule 28
	'not'          reduce using rule 28
	'of'           reduce using rule 28
	'then'         reduce using rule 28
	'||'           reduce using rule 28
	'}'            reduce using rule 28
	L_integ        reduce using rule 28
	L_Var          reduce using rule 28


State 177

	BoolExpression2 -> IntegerExpression2 '/=' IntegerExpression2 .    (rule 25)

	'$'            reduce using rule 25
	'&&'           reduce using rule 25
	'('            reduce using rule 25
	'()'           reduce using rule 25
	')'            reduce using rule 25
	','            reduce using rule 25
	'->'           reduce using rule 25
	'.'            reduce using rule 25
	'/='           reduce using rule 25
	':'            reduce using rule 25
	';'            reduce using rule 25
	'=='           reduce using rule 25
	'@+'           reduce using rule 25
	'@+i'          reduce using rule 25
	'@-'           reduce using rule 25
	'@-i'          reduce using rule 25
	'@0'           reduce using rule 25
	'@1'           reduce using rule 25
	'False'        reduce using rule 25
	'True'         reduce using rule 25
	'['            reduce using rule 25
	'[]'           reduce using rule 25
	']'            reduce using rule 25
	'else'         reduce using rule 25
	'gate'         reduce using rule 25
	'not'          reduce using rule 25
	'of'           reduce using rule 25
	'then'         reduce using rule 25
	'||'           reduce using rule 25
	'}'            reduce using rule 25
	L_integ        reduce using rule 25
	L_Var          reduce using rule 25


State 178

	BoolExpression -> BoolExpression '||' BoolExpression1 .    (rule 18)
	BoolExpression1 -> BoolExpression1 . '==' BoolExpression2    (rule 21)
	BoolExpression1 -> BoolExpression1 . '/=' BoolExpression2    (rule 22)

	'$'            reduce using rule 18
	'&&'           reduce using rule 18
	'('            reduce using rule 18
	'()'           reduce using rule 18
	')'            reduce using rule 18
	','            reduce using rule 18
	'->'           reduce using rule 18
	'.'            reduce using rule 18
	'/='           shift, and enter state 145
	':'            reduce using rule 18
	';'            reduce using rule 18
	'=='           shift, and enter state 146
	'@+'           reduce using rule 18
	'@+i'          reduce using rule 18
	'@-'           reduce using rule 18
	'@-i'          reduce using rule 18
	'@0'           reduce using rule 18
	'@1'           reduce using rule 18
	'False'        reduce using rule 18
	'True'         reduce using rule 18
	'['            reduce using rule 18
	'[]'           reduce using rule 18
	']'            reduce using rule 18
	'else'         reduce using rule 18
	'gate'         reduce using rule 18
	'not'          reduce using rule 18
	'of'           reduce using rule 18
	'then'         reduce using rule 18
	'||'           reduce using rule 18
	'}'            reduce using rule 18
	L_integ        reduce using rule 18
	L_Var          reduce using rule 18


State 179

	BoolExpression -> BoolExpression '&&' BoolExpression1 .    (rule 17)
	BoolExpression1 -> BoolExpression1 . '==' BoolExpression2    (rule 21)
	BoolExpression1 -> BoolExpression1 . '/=' BoolExpression2    (rule 22)

	'$'            reduce using rule 17
	'&&'           reduce using rule 17
	'('            reduce using rule 17
	'()'           reduce using rule 17
	')'            reduce using rule 17
	','            reduce using rule 17
	'->'           reduce using rule 17
	'.'            reduce using rule 17
	'/='           shift, and enter state 145
	':'            reduce using rule 17
	';'            reduce using rule 17
	'=='           shift, and enter state 146
	'@+'           reduce using rule 17
	'@+i'          reduce using rule 17
	'@-'           reduce using rule 17
	'@-i'          reduce using rule 17
	'@0'           reduce using rule 17
	'@1'           reduce using rule 17
	'False'        reduce using rule 17
	'True'         reduce using rule 17
	'['            reduce using rule 17
	'[]'           reduce using rule 17
	']'            reduce using rule 17
	'else'         reduce using rule 17
	'gate'         reduce using rule 17
	'not'          reduce using rule 17
	'of'           reduce using rule 17
	'then'         reduce using rule 17
	'||'           reduce using rule 17
	'}'            reduce using rule 17
	L_integ        reduce using rule 17
	L_Var          reduce using rule 17


State 180

	BoolExpression1 -> BoolExpression1 '==' BoolExpression2 .    (rule 21)

	'$'            reduce using rule 21
	'&&'           reduce using rule 21
	'('            reduce using rule 21
	'()'           reduce using rule 21
	')'            reduce using rule 21
	','            reduce using rule 21
	'->'           reduce using rule 21
	'.'            reduce using rule 21
	'/='           reduce using rule 21
	':'            reduce using rule 21
	';'            reduce using rule 21
	'=='           reduce using rule 21
	'@+'           reduce using rule 21
	'@+i'          reduce using rule 21
	'@-'           reduce using rule 21
	'@-i'          reduce using rule 21
	'@0'           reduce using rule 21
	'@1'           reduce using rule 21
	'False'        reduce using rule 21
	'True'         reduce using rule 21
	'['            reduce using rule 21
	'[]'           reduce using rule 21
	']'            reduce using rule 21
	'else'         reduce using rule 21
	'gate'         reduce using rule 21
	'not'          reduce using rule 21
	'of'           reduce using rule 21
	'then'         reduce using rule 21
	'||'           reduce using rule 21
	'}'            reduce using rule 21
	L_integ        reduce using rule 21
	L_Var          reduce using rule 21


State 181

	BoolExpression1 -> BoolExpression1 '/=' BoolExpression2 .    (rule 22)

	'$'            reduce using rule 22
	'&&'           reduce using rule 22
	'('            reduce using rule 22
	'()'           reduce using rule 22
	')'            reduce using rule 22
	','            reduce using rule 22
	'->'           reduce using rule 22
	'.'            reduce using rule 22
	'/='           reduce using rule 22
	':'            reduce using rule 22
	';'            reduce using rule 22
	'=='           reduce using rule 22
	'@+'           reduce using rule 22
	'@+i'          reduce using rule 22
	'@-'           reduce using rule 22
	'@-i'          reduce using rule 22
	'@0'           reduce using rule 22
	'@1'           reduce using rule 22
	'False'        reduce using rule 22
	'True'         reduce using rule 22
	'['            reduce using rule 22
	'[]'           reduce using rule 22
	']'            reduce using rule 22
	'else'         reduce using rule 22
	'gate'         reduce using rule 22
	'not'          reduce using rule 22
	'of'           reduce using rule 22
	'then'         reduce using rule 22
	'||'           reduce using rule 22
	'}'            reduce using rule 22
	L_integ        reduce using rule 22
	L_Var          reduce using rule 22


State 182

	Term -> Term1 '$' Term .                            (rule 111)

	'$'            reduce using rule 111
	')'            reduce using rule 111
	','            reduce using rule 111
	';'            reduce using rule 111
	']'            reduce using rule 111
	'else'         reduce using rule 111
	'of'           reduce using rule 111
	'then'         reduce using rule 111
	'}'            reduce using rule 111


State 183

	Term2 -> Term2 '.' Term3 .                          (rule 126)
	List -> Term3 . ':' List1                           (rule 145)

	'$'            reduce using rule 126
	'('            reduce using rule 126
	'()'           reduce using rule 126
	')'            reduce using rule 126
	','            reduce using rule 126
	'.'            reduce using rule 126
	':'            shift, and enter state 140
	';'            reduce using rule 126
	'@+'           reduce using rule 126
	'@+i'          reduce using rule 126
	'@-'           reduce using rule 126
	'@-i'          reduce using rule 126
	'@0'           reduce using rule 126
	'@1'           reduce using rule 126
	'False'        reduce using rule 126
	'True'         reduce using rule 126
	'['            reduce using rule 126
	'[]'           reduce using rule 126
	']'            reduce using rule 126
	'else'         reduce using rule 126
	'gate'         reduce using rule 126
	'not'          reduce using rule 126
	'of'           reduce using rule 126
	'then'         reduce using rule 126
	'}'            reduce using rule 126
	L_integ        reduce using rule 126
	L_Var          reduce using rule 126


State 184

	List -> Term3 ':' List1 .                           (rule 145)

	'!!'           reduce using rule 145
	'$'            reduce using rule 145
	'('            reduce using rule 145
	'()'           reduce using rule 145
	')'            reduce using rule 145
	'++'           reduce using rule 145
	','            reduce using rule 145
	'->'           reduce using rule 145
	'.'            reduce using rule 145
	':'            reduce using rule 145
	';'            reduce using rule 145
	'@+'           reduce using rule 145
	'@+i'          reduce using rule 145
	'@-'           reduce using rule 145
	'@-i'          reduce using rule 145
	'@0'           reduce using rule 145
	'@1'           reduce using rule 145
	'False'        reduce using rule 145
	'True'         reduce using rule 145
	'['            reduce using rule 145
	'[]'           reduce using rule 145
	']'            reduce using rule 145
	'else'         reduce using rule 145
	'gate'         reduce using rule 145
	'not'          reduce using rule 145
	'of'           reduce using rule 145
	'then'         reduce using rule 145
	'}'            reduce using rule 145
	L_integ        reduce using rule 145
	L_Var          reduce using rule 145


State 185

	List1 -> '(' . List ')'                             (rule 143)

	'('            shift, and enter state 67
	'()'           shift, and enter state 68
	'@+'           shift, and enter state 69
	'@+i'          shift, and enter state 70
	'@-'           shift, and enter state 71
	'@-i'          shift, and enter state 72
	'@0'           shift, and enter state 73
	'@1'           shift, and enter state 74
	'False'        shift, and enter state 75
	'True'         shift, and enter state 76
	'['            shift, and enter state 77
	'[]'           shift, and enter state 78
	'gate'         shift, and enter state 80
	'not'          shift, and enter state 83
	L_integ        shift, and enter state 43
	L_Var          shift, and enter state 8

	Integer        goto state 48
	Var            goto state 141
	IntegerExpressiongoto state 51
	IntegerExpression1goto state 52
	IntegerExpression2goto state 53
	BoolValue      goto state 54
	BoolExpression goto state 55
	BoolExpression1goto state 56
	BoolExpression2goto state 57
	BasisState     goto state 58
	Tuple          goto state 59
	Term3          goto state 244
	Term4          goto state 64
	List1          goto state 65
	List           goto state 137

State 186

	List -> List '++' List1 .                           (rule 144)

	'!!'           reduce using rule 144
	'$'            reduce using rule 144
	'('            reduce using rule 144
	'()'           reduce using rule 144
	')'            reduce using rule 144
	'++'           reduce using rule 144
	','            reduce using rule 144
	'->'           reduce using rule 144
	'.'            reduce using rule 144
	':'            reduce using rule 144
	';'            reduce using rule 144
	'@+'           reduce using rule 144
	'@+i'          reduce using rule 144
	'@-'           reduce using rule 144
	'@-i'          reduce using rule 144
	'@0'           reduce using rule 144
	'@1'           reduce using rule 144
	'False'        reduce using rule 144
	'True'         reduce using rule 144
	'['            reduce using rule 144
	'[]'           reduce using rule 144
	']'            reduce using rule 144
	'else'         reduce using rule 144
	'gate'         reduce using rule 144
	'not'          reduce using rule 144
	'of'           reduce using rule 144
	'then'         reduce using rule 144
	'}'            reduce using rule 144
	L_integ        reduce using rule 144
	L_Var          reduce using rule 144


State 187

	Term4 -> List '!!' Integer .                        (rule 138)

	'$'            reduce using rule 138
	'('            reduce using rule 138
	'()'           reduce using rule 138
	')'            reduce using rule 138
	','            reduce using rule 138
	'->'           reduce using rule 138
	'.'            reduce using rule 138
	':'            reduce using rule 138
	';'            reduce using rule 138
	'@+'           reduce using rule 138
	'@+i'          reduce using rule 138
	'@-'           reduce using rule 138
	'@-i'          reduce using rule 138
	'@0'           reduce using rule 138
	'@1'           reduce using rule 138
	'False'        reduce using rule 138
	'True'         reduce using rule 138
	'['            reduce using rule 138
	'[]'           reduce using rule 138
	']'            reduce using rule 138
	'else'         reduce using rule 138
	'gate'         reduce using rule 138
	'not'          reduce using rule 138
	'of'           reduce using rule 138
	'then'         reduce using rule 138
	'}'            reduce using rule 138
	L_integ        reduce using rule 138
	L_Var          reduce using rule 138


State 188

	List1 -> '(' List ')' .                             (rule 143)

	'!!'           reduce using rule 143
	'$'            reduce using rule 143
	'('            reduce using rule 143
	'()'           reduce using rule 143
	')'            reduce using rule 143
	'++'           reduce using rule 143
	','            reduce using rule 143
	'->'           reduce using rule 143
	'.'            reduce using rule 143
	':'            reduce using rule 143
	';'            reduce using rule 143
	'@+'           reduce using rule 143
	'@+i'          reduce using rule 143
	'@-'           reduce using rule 143
	'@-i'          reduce using rule 143
	'@0'           reduce using rule 143
	'@1'           reduce using rule 143
	'False'        reduce using rule 143
	'True'         reduce using rule 143
	'['            reduce using rule 143
	'[]'           reduce using rule 143
	']'            reduce using rule 143
	'else'         reduce using rule 143
	'gate'         reduce using rule 143
	'not'          reduce using rule 143
	'of'           reduce using rule 143
	'then'         reduce using rule 143
	'}'            reduce using rule 143
	L_integ        reduce using rule 143
	L_Var          reduce using rule 143


State 189

	Term4 -> '(' Term ')' .                             (rule 139)

	'$'            reduce using rule 139
	'('            reduce using rule 139
	'()'           reduce using rule 139
	')'            reduce using rule 139
	','            reduce using rule 139
	'->'           reduce using rule 139
	'.'            reduce using rule 139
	':'            reduce using rule 139
	';'            reduce using rule 139
	'@+'           reduce using rule 139
	'@+i'          reduce using rule 139
	'@-'           reduce using rule 139
	'@-i'          reduce using rule 139
	'@0'           reduce using rule 139
	'@1'           reduce using rule 139
	'False'        reduce using rule 139
	'True'         reduce using rule 139
	'['            reduce using rule 139
	'[]'           reduce using rule 139
	']'            reduce using rule 139
	'else'         reduce using rule 139
	'gate'         reduce using rule 139
	'not'          reduce using rule 139
	'of'           reduce using rule 139
	'then'         reduce using rule 139
	'}'            reduce using rule 139
	L_integ        reduce using rule 139
	L_Var          reduce using rule 139


State 190

	Tuple -> '(' Term ',' . ListTerm ')'                (rule 106)

	'('            shift, and enter state 67
	'()'           shift, and enter state 68
	'@+'           shift, and enter state 69
	'@+i'          shift, and enter state 70
	'@-'           shift, and enter state 71
	'@-i'          shift, and enter state 72
	'@0'           shift, and enter state 73
	'@1'           shift, and enter state 74
	'False'        shift, and enter state 75
	'True'         shift, and enter state 76
	'['            shift, and enter state 77
	'[]'           shift, and enter state 78
	'case'         shift, and enter state 79
	'gate'         shift, and enter state 80
	'if'           shift, and enter state 81
	'let'          shift, and enter state 82
	'not'          shift, and enter state 83
	'with'         shift, and enter state 84
	L_integ        shift, and enter state 43
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 85

	Integer        goto state 48
	Var            goto state 49
	Lambda         goto state 50
	IntegerExpressiongoto state 51
	IntegerExpression1goto state 52
	IntegerExpression2goto state 53
	BoolValue      goto state 54
	BoolExpression goto state 55
	BoolExpression1goto state 56
	BoolExpression2goto state 57
	BasisState     goto state 58
	Tuple          goto state 59
	ListTerm       goto state 243
	Term           goto state 242
	Term1          goto state 61
	Term2          goto state 62
	Term3          goto state 63
	Term4          goto state 64
	List1          goto state 65
	List           goto state 66

State 191

	BoolExpression2 -> '(' BoolExpression ')' .         (rule 31)

	'$'            reduce using rule 31
	'&&'           reduce using rule 31
	'('            reduce using rule 31
	'()'           reduce using rule 31
	')'            reduce using rule 31
	','            reduce using rule 31
	'->'           reduce using rule 31
	'.'            reduce using rule 31
	'/='           reduce using rule 31
	':'            reduce using rule 31
	';'            reduce using rule 31
	'=='           reduce using rule 31
	'@+'           reduce using rule 31
	'@+i'          reduce using rule 31
	'@-'           reduce using rule 31
	'@-i'          reduce using rule 31
	'@0'           reduce using rule 31
	'@1'           reduce using rule 31
	'False'        reduce using rule 31
	'True'         reduce using rule 31
	'['            reduce using rule 31
	'[]'           reduce using rule 31
	']'            reduce using rule 31
	'else'         reduce using rule 31
	'gate'         reduce using rule 31
	'not'          reduce using rule 31
	'of'           reduce using rule 31
	'then'         reduce using rule 31
	'||'           reduce using rule 31
	'}'            reduce using rule 31
	L_integ        reduce using rule 31
	L_Var          reduce using rule 31


State 192

	IntegerExpression2 -> '(' IntegerExpression ')' .    (rule 14)

	'$'            reduce using rule 14
	'&&'           reduce using rule 14
	'('            reduce using rule 14
	'()'           reduce using rule 14
	')'            reduce using rule 14
	'*'            reduce using rule 14
	'+'            reduce using rule 14
	','            reduce using rule 14
	'-'            reduce using rule 14
	'->'           reduce using rule 14
	'.'            reduce using rule 14
	'/'            reduce using rule 14
	'/='           reduce using rule 14
	':'            reduce using rule 14
	';'            reduce using rule 14
	'<'            reduce using rule 14
	'<='           reduce using rule 14
	'=='           reduce using rule 14
	'>'            reduce using rule 14
	'>='           reduce using rule 14
	'@+'           reduce using rule 14
	'@+i'          reduce using rule 14
	'@-'           reduce using rule 14
	'@-i'          reduce using rule 14
	'@0'           reduce using rule 14
	'@1'           reduce using rule 14
	'False'        reduce using rule 14
	'True'         reduce using rule 14
	'['            reduce using rule 14
	'[]'           reduce using rule 14
	']'            reduce using rule 14
	'else'         reduce using rule 14
	'gate'         reduce using rule 14
	'not'          reduce using rule 14
	'of'           reduce using rule 14
	'then'         reduce using rule 14
	'||'           reduce using rule 14
	'}'            reduce using rule 14
	L_integ        reduce using rule 14
	L_Var          reduce using rule 14


State 193

	List1 -> '[' Term ',' . ListTerm ']'                (rule 142)

	'('            shift, and enter state 67
	'()'           shift, and enter state 68
	'@+'           shift, and enter state 69
	'@+i'          shift, and enter state 70
	'@-'           shift, and enter state 71
	'@-i'          shift, and enter state 72
	'@0'           shift, and enter state 73
	'@1'           shift, and enter state 74
	'False'        shift, and enter state 75
	'True'         shift, and enter state 76
	'['            shift, and enter state 77
	'[]'           shift, and enter state 78
	'case'         shift, and enter state 79
	'gate'         shift, and enter state 80
	'if'           shift, and enter state 81
	'let'          shift, and enter state 82
	'not'          shift, and enter state 83
	'with'         shift, and enter state 84
	L_integ        shift, and enter state 43
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 85

	Integer        goto state 48
	Var            goto state 49
	Lambda         goto state 50
	IntegerExpressiongoto state 51
	IntegerExpression1goto state 52
	IntegerExpression2goto state 53
	BoolValue      goto state 54
	BoolExpression goto state 55
	BoolExpression1goto state 56
	BoolExpression2goto state 57
	BasisState     goto state 58
	Tuple          goto state 59
	ListTerm       goto state 241
	Term           goto state 242
	Term1          goto state 61
	Term2          goto state 62
	Term3          goto state 63
	Term4          goto state 64
	List1          goto state 65
	List           goto state 66

State 194

	List1 -> '[' Term ']' .                             (rule 141)

	'!!'           reduce using rule 141
	'$'            reduce using rule 141
	'('            reduce using rule 141
	'()'           reduce using rule 141
	')'            reduce using rule 141
	'++'           reduce using rule 141
	','            reduce using rule 141
	'->'           reduce using rule 141
	'.'            reduce using rule 141
	':'            reduce using rule 141
	';'            reduce using rule 141
	'@+'           reduce using rule 141
	'@+i'          reduce using rule 141
	'@-'           reduce using rule 141
	'@-i'          reduce using rule 141
	'@0'           reduce using rule 141
	'@1'           reduce using rule 141
	'False'        reduce using rule 141
	'True'         reduce using rule 141
	'['            reduce using rule 141
	'[]'           reduce using rule 141
	']'            reduce using rule 141
	'else'         reduce using rule 141
	'gate'         reduce using rule 141
	'not'          reduce using rule 141
	'of'           reduce using rule 141
	'then'         reduce using rule 141
	'}'            reduce using rule 141
	L_integ        reduce using rule 141
	L_Var          reduce using rule 141


State 195

	Term1 -> 'case' Term 'of' . CaseExpression ListCaseExpression    (rule 118)

	'('            shift, and enter state 67
	'()'           shift, and enter state 68
	'@+'           shift, and enter state 69
	'@+i'          shift, and enter state 70
	'@-'           shift, and enter state 71
	'@-i'          shift, and enter state 72
	'@0'           shift, and enter state 73
	'@1'           shift, and enter state 74
	'False'        shift, and enter state 75
	'True'         shift, and enter state 76
	'['            shift, and enter state 77
	'[]'           shift, and enter state 78
	'gate'         shift, and enter state 80
	'not'          shift, and enter state 83
	L_integ        shift, and enter state 43
	L_Var          shift, and enter state 8

	Integer        goto state 48
	Var            goto state 141
	IntegerExpressiongoto state 51
	IntegerExpression1goto state 52
	IntegerExpression2goto state 53
	BoolValue      goto state 54
	BoolExpression goto state 55
	BoolExpression1goto state 56
	BoolExpression2goto state 57
	BasisState     goto state 58
	Tuple          goto state 59
	Term3          goto state 239
	Term4          goto state 64
	List1          goto state 65
	List           goto state 66
	CaseExpression goto state 240

State 196

	Gate -> 'U3' '(' . Angle ',' Angle ',' Angle ')'    (rule 80)

	L_doubl        shift, and enter state 2

	Double         goto state 198
	Angle          goto state 238

State 197

	Gate -> 'U2' '(' . Angle ',' Angle ')'              (rule 79)

	L_doubl        shift, and enter state 2

	Double         goto state 198
	Angle          goto state 237

State 198

	Angle -> Double .                                   (rule 49)

	'$'            reduce using rule 49
	'('            reduce using rule 49
	'()'           reduce using rule 49
	')'            reduce using rule 49
	','            reduce using rule 49
	'->'           reduce using rule 49
	'.'            reduce using rule 49
	':'            reduce using rule 49
	';'            reduce using rule 49
	'@+'           reduce using rule 49
	'@+i'          reduce using rule 49
	'@-'           reduce using rule 49
	'@-i'          reduce using rule 49
	'@0'           reduce using rule 49
	'@1'           reduce using rule 49
	'False'        reduce using rule 49
	'True'         reduce using rule 49
	'['            reduce using rule 49
	'[]'           reduce using rule 49
	']'            reduce using rule 49
	'else'         reduce using rule 49
	'gate'         reduce using rule 49
	'not'          reduce using rule 49
	'of'           reduce using rule 49
	'then'         reduce using rule 49
	'}'            reduce using rule 49
	L_integ        reduce using rule 49
	L_Var          reduce using rule 49


State 199

	Gate -> 'U1' Angle .                                (rule 78)

	'$'            reduce using rule 78
	'('            reduce using rule 78
	'()'           reduce using rule 78
	')'            reduce using rule 78
	','            reduce using rule 78
	'->'           reduce using rule 78
	'.'            reduce using rule 78
	':'            reduce using rule 78
	';'            reduce using rule 78
	'@+'           reduce using rule 78
	'@+i'          reduce using rule 78
	'@-'           reduce using rule 78
	'@-i'          reduce using rule 78
	'@0'           reduce using rule 78
	'@1'           reduce using rule 78
	'False'        reduce using rule 78
	'True'         reduce using rule 78
	'['            reduce using rule 78
	'[]'           reduce using rule 78
	']'            reduce using rule 78
	'else'         reduce using rule 78
	'gate'         reduce using rule 78
	'not'          reduce using rule 78
	'of'           reduce using rule 78
	'then'         reduce using rule 78
	'}'            reduce using rule 78
	L_integ        reduce using rule 78
	L_Var          reduce using rule 78


State 200

	Gate -> 'SWAP_THETA' Angle .                        (rule 86)

	'$'            reduce using rule 86
	'('            reduce using rule 86
	'()'           reduce using rule 86
	')'            reduce using rule 86
	','            reduce using rule 86
	'->'           reduce using rule 86
	'.'            reduce using rule 86
	':'            reduce using rule 86
	';'            reduce using rule 86
	'@+'           reduce using rule 86
	'@+i'          reduce using rule 86
	'@-'           reduce using rule 86
	'@-i'          reduce using rule 86
	'@0'           reduce using rule 86
	'@1'           reduce using rule 86
	'False'        reduce using rule 86
	'True'         reduce using rule 86
	'['            reduce using rule 86
	'[]'           reduce using rule 86
	']'            reduce using rule 86
	'else'         reduce using rule 86
	'gate'         reduce using rule 86
	'not'          reduce using rule 86
	'of'           reduce using rule 86
	'then'         reduce using rule 86
	'}'            reduce using rule 86
	L_integ        reduce using rule 86
	L_Var          reduce using rule 86


State 201

	Gate -> 'RZ' Angle .                                (rule 77)

	'$'            reduce using rule 77
	'('            reduce using rule 77
	'()'           reduce using rule 77
	')'            reduce using rule 77
	','            reduce using rule 77
	'->'           reduce using rule 77
	'.'            reduce using rule 77
	':'            reduce using rule 77
	';'            reduce using rule 77
	'@+'           reduce using rule 77
	'@+i'          reduce using rule 77
	'@-'           reduce using rule 77
	'@-i'          reduce using rule 77
	'@0'           reduce using rule 77
	'@1'           reduce using rule 77
	'False'        reduce using rule 77
	'True'         reduce using rule 77
	'['            reduce using rule 77
	'[]'           reduce using rule 77
	']'            reduce using rule 77
	'else'         reduce using rule 77
	'gate'         reduce using rule 77
	'not'          reduce using rule 77
	'of'           reduce using rule 77
	'then'         reduce using rule 77
	'}'            reduce using rule 77
	L_integ        reduce using rule 77
	L_Var          reduce using rule 77


State 202

	Gate -> 'RY' Angle .                                (rule 76)

	'$'            reduce using rule 76
	'('            reduce using rule 76
	'()'           reduce using rule 76
	')'            reduce using rule 76
	','            reduce using rule 76
	'->'           reduce using rule 76
	'.'            reduce using rule 76
	':'            reduce using rule 76
	';'            reduce using rule 76
	'@+'           reduce using rule 76
	'@+i'          reduce using rule 76
	'@-'           reduce using rule 76
	'@-i'          reduce using rule 76
	'@0'           reduce using rule 76
	'@1'           reduce using rule 76
	'False'        reduce using rule 76
	'True'         reduce using rule 76
	'['            reduce using rule 76
	'[]'           reduce using rule 76
	']'            reduce using rule 76
	'else'         reduce using rule 76
	'gate'         reduce using rule 76
	'not'          reduce using rule 76
	'of'           reduce using rule 76
	'then'         reduce using rule 76
	'}'            reduce using rule 76
	L_integ        reduce using rule 76
	L_Var          reduce using rule 76


State 203

	Gate -> 'RX' Angle .                                (rule 75)

	'$'            reduce using rule 75
	'('            reduce using rule 75
	'()'           reduce using rule 75
	')'            reduce using rule 75
	','            reduce using rule 75
	'->'           reduce using rule 75
	'.'            reduce using rule 75
	':'            reduce using rule 75
	';'            reduce using rule 75
	'@+'           reduce using rule 75
	'@+i'          reduce using rule 75
	'@-'           reduce using rule 75
	'@-i'          reduce using rule 75
	'@0'           reduce using rule 75
	'@1'           reduce using rule 75
	'False'        reduce using rule 75
	'True'         reduce using rule 75
	'['            reduce using rule 75
	'[]'           reduce using rule 75
	']'            reduce using rule 75
	'else'         reduce using rule 75
	'gate'         reduce using rule 75
	'not'          reduce using rule 75
	'of'           reduce using rule 75
	'then'         reduce using rule 75
	'}'            reduce using rule 75
	L_integ        reduce using rule 75
	L_Var          reduce using rule 75


State 204

	Gate -> 'ROOT_Z_DAG' Integer .                      (rule 66)

	'$'            reduce using rule 66
	'('            reduce using rule 66
	'()'           reduce using rule 66
	')'            reduce using rule 66
	','            reduce using rule 66
	'->'           reduce using rule 66
	'.'            reduce using rule 66
	':'            reduce using rule 66
	';'            reduce using rule 66
	'@+'           reduce using rule 66
	'@+i'          reduce using rule 66
	'@-'           reduce using rule 66
	'@-i'          reduce using rule 66
	'@0'           reduce using rule 66
	'@1'           reduce using rule 66
	'False'        reduce using rule 66
	'True'         reduce using rule 66
	'['            reduce using rule 66
	'[]'           reduce using rule 66
	']'            reduce using rule 66
	'else'         reduce using rule 66
	'gate'         reduce using rule 66
	'not'          reduce using rule 66
	'of'           reduce using rule 66
	'then'         reduce using rule 66
	'}'            reduce using rule 66
	L_integ        reduce using rule 66
	L_Var          reduce using rule 66


State 205

	Gate -> 'ROOT_Z' Integer .                          (rule 65)

	'$'            reduce using rule 65
	'('            reduce using rule 65
	'()'           reduce using rule 65
	')'            reduce using rule 65
	','            reduce using rule 65
	'->'           reduce using rule 65
	'.'            reduce using rule 65
	':'            reduce using rule 65
	';'            reduce using rule 65
	'@+'           reduce using rule 65
	'@+i'          reduce using rule 65
	'@-'           reduce using rule 65
	'@-i'          reduce using rule 65
	'@0'           reduce using rule 65
	'@1'           reduce using rule 65
	'False'        reduce using rule 65
	'True'         reduce using rule 65
	'['            reduce using rule 65
	'[]'           reduce using rule 65
	']'            reduce using rule 65
	'else'         reduce using rule 65
	'gate'         reduce using rule 65
	'not'          reduce using rule 65
	'of'           reduce using rule 65
	'then'         reduce using rule 65
	'}'            reduce using rule 65
	L_integ        reduce using rule 65
	L_Var          reduce using rule 65


State 206

	Gate -> 'ROOT_Y_DAG' Integer .                      (rule 64)

	'$'            reduce using rule 64
	'('            reduce using rule 64
	'()'           reduce using rule 64
	')'            reduce using rule 64
	','            reduce using rule 64
	'->'           reduce using rule 64
	'.'            reduce using rule 64
	':'            reduce using rule 64
	';'            reduce using rule 64
	'@+'           reduce using rule 64
	'@+i'          reduce using rule 64
	'@-'           reduce using rule 64
	'@-i'          reduce using rule 64
	'@0'           reduce using rule 64
	'@1'           reduce using rule 64
	'False'        reduce using rule 64
	'True'         reduce using rule 64
	'['            reduce using rule 64
	'[]'           reduce using rule 64
	']'            reduce using rule 64
	'else'         reduce using rule 64
	'gate'         reduce using rule 64
	'not'          reduce using rule 64
	'of'           reduce using rule 64
	'then'         reduce using rule 64
	'}'            reduce using rule 64
	L_integ        reduce using rule 64
	L_Var          reduce using rule 64


State 207

	Gate -> 'ROOT_Y' Integer .                          (rule 63)

	'$'            reduce using rule 63
	'('            reduce using rule 63
	'()'           reduce using rule 63
	')'            reduce using rule 63
	','            reduce using rule 63
	'->'           reduce using rule 63
	'.'            reduce using rule 63
	':'            reduce using rule 63
	';'            reduce using rule 63
	'@+'           reduce using rule 63
	'@+i'          reduce using rule 63
	'@-'           reduce using rule 63
	'@-i'          reduce using rule 63
	'@0'           reduce using rule 63
	'@1'           reduce using rule 63
	'False'        reduce using rule 63
	'True'         reduce using rule 63
	'['            reduce using rule 63
	'[]'           reduce using rule 63
	']'            reduce using rule 63
	'else'         reduce using rule 63
	'gate'         reduce using rule 63
	'not'          reduce using rule 63
	'of'           reduce using rule 63
	'then'         reduce using rule 63
	'}'            reduce using rule 63
	L_integ        reduce using rule 63
	L_Var          reduce using rule 63


State 208

	Gate -> 'ROOT_X_DAG' Integer .                      (rule 62)

	'$'            reduce using rule 62
	'('            reduce using rule 62
	'()'           reduce using rule 62
	')'            reduce using rule 62
	','            reduce using rule 62
	'->'           reduce using rule 62
	'.'            reduce using rule 62
	':'            reduce using rule 62
	';'            reduce using rule 62
	'@+'           reduce using rule 62
	'@+i'          reduce using rule 62
	'@-'           reduce using rule 62
	'@-i'          reduce using rule 62
	'@0'           reduce using rule 62
	'@1'           reduce using rule 62
	'False'        reduce using rule 62
	'True'         reduce using rule 62
	'['            reduce using rule 62
	'[]'           reduce using rule 62
	']'            reduce using rule 62
	'else'         reduce using rule 62
	'gate'         reduce using rule 62
	'not'          reduce using rule 62
	'of'           reduce using rule 62
	'then'         reduce using rule 62
	'}'            reduce using rule 62
	L_integ        reduce using rule 62
	L_Var          reduce using rule 62


State 209

	Gate -> 'ROOT_X' Integer .                          (rule 61)

	'$'            reduce using rule 61
	'('            reduce using rule 61
	'()'           reduce using rule 61
	')'            reduce using rule 61
	','            reduce using rule 61
	'->'           reduce using rule 61
	'.'            reduce using rule 61
	':'            reduce using rule 61
	';'            reduce using rule 61
	'@+'           reduce using rule 61
	'@+i'          reduce using rule 61
	'@-'           reduce using rule 61
	'@-i'          reduce using rule 61
	'@0'           reduce using rule 61
	'@1'           reduce using rule 61
	'False'        reduce using rule 61
	'True'         reduce using rule 61
	'['            reduce using rule 61
	'[]'           reduce using rule 61
	']'            reduce using rule 61
	'else'         reduce using rule 61
	'gate'         reduce using rule 61
	'not'          reduce using rule 61
	'of'           reduce using rule 61
	'then'         reduce using rule 61
	'}'            reduce using rule 61
	L_integ        reduce using rule 61
	L_Var          reduce using rule 61


State 210

	Gate -> 'ROOT_SWAP_DAG' Integer .                   (rule 88)

	'$'            reduce using rule 88
	'('            reduce using rule 88
	'()'           reduce using rule 88
	')'            reduce using rule 88
	','            reduce using rule 88
	'->'           reduce using rule 88
	'.'            reduce using rule 88
	':'            reduce using rule 88
	';'            reduce using rule 88
	'@+'           reduce using rule 88
	'@+i'          reduce using rule 88
	'@-'           reduce using rule 88
	'@-i'          reduce using rule 88
	'@0'           reduce using rule 88
	'@1'           reduce using rule 88
	'False'        reduce using rule 88
	'True'         reduce using rule 88
	'['            reduce using rule 88
	'[]'           reduce using rule 88
	']'            reduce using rule 88
	'else'         reduce using rule 88
	'gate'         reduce using rule 88
	'not'          reduce using rule 88
	'of'           reduce using rule 88
	'then'         reduce using rule 88
	'}'            reduce using rule 88
	L_integ        reduce using rule 88
	L_Var          reduce using rule 88


State 211

	Gate -> 'ROOT_SWAP' Integer .                       (rule 87)

	'$'            reduce using rule 87
	'('            reduce using rule 87
	'()'           reduce using rule 87
	')'            reduce using rule 87
	','            reduce using rule 87
	'->'           reduce using rule 87
	'.'            reduce using rule 87
	':'            reduce using rule 87
	';'            reduce using rule 87
	'@+'           reduce using rule 87
	'@+i'          reduce using rule 87
	'@-'           reduce using rule 87
	'@-i'          reduce using rule 87
	'@0'           reduce using rule 87
	'@1'           reduce using rule 87
	'False'        reduce using rule 87
	'True'         reduce using rule 87
	'['            reduce using rule 87
	'[]'           reduce using rule 87
	']'            reduce using rule 87
	'else'         reduce using rule 87
	'gate'         reduce using rule 87
	'not'          reduce using rule 87
	'of'           reduce using rule 87
	'then'         reduce using rule 87
	'}'            reduce using rule 87
	L_integ        reduce using rule 87
	L_Var          reduce using rule 87


State 212

	Gate -> 'QFT_DAG' Integer .                         (rule 90)

	'$'            reduce using rule 90
	'('            reduce using rule 90
	'()'           reduce using rule 90
	')'            reduce using rule 90
	','            reduce using rule 90
	'->'           reduce using rule 90
	'.'            reduce using rule 90
	':'            reduce using rule 90
	';'            reduce using rule 90
	'@+'           reduce using rule 90
	'@+i'          reduce using rule 90
	'@-'           reduce using rule 90
	'@-i'          reduce using rule 90
	'@0'           reduce using rule 90
	'@1'           reduce using rule 90
	'False'        reduce using rule 90
	'True'         reduce using rule 90
	'['            reduce using rule 90
	'[]'           reduce using rule 90
	']'            reduce using rule 90
	'else'         reduce using rule 90
	'gate'         reduce using rule 90
	'not'          reduce using rule 90
	'of'           reduce using rule 90
	'then'         reduce using rule 90
	'}'            reduce using rule 90
	L_integ        reduce using rule 90
	L_Var          reduce using rule 90


State 213

	Gate -> 'QFT' Integer .                             (rule 89)

	'$'            reduce using rule 89
	'('            reduce using rule 89
	'()'           reduce using rule 89
	')'            reduce using rule 89
	','            reduce using rule 89
	'->'           reduce using rule 89
	'.'            reduce using rule 89
	':'            reduce using rule 89
	';'            reduce using rule 89
	'@+'           reduce using rule 89
	'@+i'          reduce using rule 89
	'@-'           reduce using rule 89
	'@-i'          reduce using rule 89
	'@0'           reduce using rule 89
	'@1'           reduce using rule 89
	'False'        reduce using rule 89
	'True'         reduce using rule 89
	'['            reduce using rule 89
	'[]'           reduce using rule 89
	']'            reduce using rule 89
	'else'         reduce using rule 89
	'gate'         reduce using rule 89
	'not'          reduce using rule 89
	'of'           reduce using rule 89
	'then'         reduce using rule 89
	'}'            reduce using rule 89
	L_integ        reduce using rule 89
	L_Var          reduce using rule 89


State 214

	Gate -> GateVar Integer .                           (rule 94)

	'$'            reduce using rule 94
	'('            reduce using rule 94
	'()'           reduce using rule 94
	')'            reduce using rule 94
	','            reduce using rule 94
	'->'           reduce using rule 94
	'.'            reduce using rule 94
	':'            reduce using rule 94
	';'            reduce using rule 94
	'@+'           reduce using rule 94
	'@+i'          reduce using rule 94
	'@-'           reduce using rule 94
	'@-i'          reduce using rule 94
	'@0'           reduce using rule 94
	'@1'           reduce using rule 94
	'False'        reduce using rule 94
	'True'         reduce using rule 94
	'['            reduce using rule 94
	'[]'           reduce using rule 94
	']'            reduce using rule 94
	'else'         reduce using rule 94
	'gate'         reduce using rule 94
	'not'          reduce using rule 94
	'of'           reduce using rule 94
	'then'         reduce using rule 94
	'}'            reduce using rule 94
	L_integ        reduce using rule 94
	L_Var          reduce using rule 94


State 215

	Gate -> GateVar Angle .                             (rule 93)

	'$'            reduce using rule 93
	'('            reduce using rule 93
	'()'           reduce using rule 93
	')'            reduce using rule 93
	','            reduce using rule 93
	'->'           reduce using rule 93
	'.'            reduce using rule 93
	':'            reduce using rule 93
	';'            reduce using rule 93
	'@+'           reduce using rule 93
	'@+i'          reduce using rule 93
	'@-'           reduce using rule 93
	'@-i'          reduce using rule 93
	'@0'           reduce using rule 93
	'@1'           reduce using rule 93
	'False'        reduce using rule 93
	'True'         reduce using rule 93
	'['            reduce using rule 93
	'[]'           reduce using rule 93
	']'            reduce using rule 93
	'else'         reduce using rule 93
	'gate'         reduce using rule 93
	'not'          reduce using rule 93
	'of'           reduce using rule 93
	'then'         reduce using rule 93
	'}'            reduce using rule 93
	L_integ        reduce using rule 93
	L_Var          reduce using rule 93


State 216

	Gate -> GateVar '(' . Angle ',' Angle ',' Angle ')'    (rule 91)
	Gate -> GateVar '(' . Angle ',' Angle ')'           (rule 92)

	L_doubl        shift, and enter state 2

	Double         goto state 198
	Angle          goto state 236

State 217

	Term1 -> 'if' Term 'then' . Term 'else' Term        (rule 113)

	'('            shift, and enter state 67
	'()'           shift, and enter state 68
	'@+'           shift, and enter state 69
	'@+i'          shift, and enter state 70
	'@-'           shift, and enter state 71
	'@-i'          shift, and enter state 72
	'@0'           shift, and enter state 73
	'@1'           shift, and enter state 74
	'False'        shift, and enter state 75
	'True'         shift, and enter state 76
	'['            shift, and enter state 77
	'[]'           shift, and enter state 78
	'case'         shift, and enter state 79
	'gate'         shift, and enter state 80
	'if'           shift, and enter state 81
	'let'          shift, and enter state 82
	'not'          shift, and enter state 83
	'with'         shift, and enter state 84
	L_integ        shift, and enter state 43
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 85

	Integer        goto state 48
	Var            goto state 49
	Lambda         goto state 50
	IntegerExpressiongoto state 51
	IntegerExpression1goto state 52
	IntegerExpression2goto state 53
	BoolValue      goto state 54
	BoolExpression goto state 55
	BoolExpression1goto state 56
	BoolExpression2goto state 57
	BasisState     goto state 58
	Tuple          goto state 59
	Term           goto state 235
	Term1          goto state 61
	Term2          goto state 62
	Term3          goto state 63
	Term4          goto state 64
	List1          goto state 65
	List           goto state 66

State 218

	Term1 -> 'let' '{' Var . '=' Term '}' 'in' Term     (rule 114)

	'='            shift, and enter state 234


State 219

	Term1 -> 'let' '{' '(' . Var ',' ListVar ')' '=' Term '}' 'in' Term    (rule 115)

	L_Var          shift, and enter state 8

	Var            goto state 233

State 220

	IntegerExpression -> IntegerExpression . '+' IntegerExpression1    (rule 7)
	IntegerExpression -> IntegerExpression . '-' IntegerExpression1    (rule 8)
	IntegerExpression2 -> '(' IntegerExpression . ')'    (rule 14)

	')'            shift, and enter state 192
	'+'            shift, and enter state 157
	'-'            shift, and enter state 158


State 221

	BoolExpression -> BoolExpression . '&&' BoolExpression1    (rule 17)
	BoolExpression -> BoolExpression . '||' BoolExpression1    (rule 18)
	BoolExpression2 -> '(' BoolExpression . ')'         (rule 31)

	'&&'           shift, and enter state 147
	')'            shift, and enter state 191
	'||'           shift, and enter state 148


State 222

	ControlTerm -> '[' Term . ']'                       (rule 107)
	ControlTerms -> '[' Term . ',' ListTerm ']'         (rule 108)

	','            shift, and enter state 231
	']'            shift, and enter state 232


State 223

	Term2 -> 'with' ControlTerms 'ctrl' . ControlBasisStates    (rule 122)
	Term2 -> 'with' ControlTerms 'ctrl' . ControlBits    (rule 124)

	'['            shift, and enter state 230

	ControlBasisStatesgoto state 228
	ControlBits    goto state 229

State 224

	Term2 -> 'with' ControlTerm 'ctrl' . ControlBasisState    (rule 121)
	Term2 -> 'with' ControlTerm 'ctrl' . ControlBit     (rule 123)

	'['            shift, and enter state 227

	ControlBasisStategoto state 225
	ControlBit     goto state 226

State 225

	Term2 -> 'with' ControlTerm 'ctrl' ControlBasisState .    (rule 121)

	'$'            reduce using rule 121
	'('            reduce using rule 121
	'()'           reduce using rule 121
	')'            reduce using rule 121
	','            reduce using rule 121
	'.'            reduce using rule 121
	';'            reduce using rule 121
	'@+'           reduce using rule 121
	'@+i'          reduce using rule 121
	'@-'           reduce using rule 121
	'@-i'          reduce using rule 121
	'@0'           reduce using rule 121
	'@1'           reduce using rule 121
	'False'        reduce using rule 121
	'True'         reduce using rule 121
	'['            reduce using rule 121
	'[]'           reduce using rule 121
	']'            reduce using rule 121
	'else'         reduce using rule 121
	'gate'         reduce using rule 121
	'not'          reduce using rule 121
	'of'           reduce using rule 121
	'then'         reduce using rule 121
	'}'            reduce using rule 121
	L_integ        reduce using rule 121
	L_Var          reduce using rule 121


State 226

	Term2 -> 'with' ControlTerm 'ctrl' ControlBit .     (rule 123)

	'$'            reduce using rule 123
	'('            reduce using rule 123
	'()'           reduce using rule 123
	')'            reduce using rule 123
	','            reduce using rule 123
	'.'            reduce using rule 123
	';'            reduce using rule 123
	'@+'           reduce using rule 123
	'@+i'          reduce using rule 123
	'@-'           reduce using rule 123
	'@-i'          reduce using rule 123
	'@0'           reduce using rule 123
	'@1'           reduce using rule 123
	'False'        reduce using rule 123
	'True'         reduce using rule 123
	'['            reduce using rule 123
	'[]'           reduce using rule 123
	']'            reduce using rule 123
	'else'         reduce using rule 123
	'gate'         reduce using rule 123
	'not'          reduce using rule 123
	'of'           reduce using rule 123
	'then'         reduce using rule 123
	'}'            reduce using rule 123
	L_integ        reduce using rule 123
	L_Var          reduce using rule 123


State 227

	ControlBasisState -> '[' . BasisState ']'           (rule 98)
	ControlBit -> '[' . Integer ']'                     (rule 102)

	'@+'           shift, and enter state 69
	'@+i'          shift, and enter state 70
	'@-'           shift, and enter state 71
	'@-i'          shift, and enter state 72
	'@0'           shift, and enter state 73
	'@1'           shift, and enter state 74
	L_integ        shift, and enter state 43

	Integer        goto state 268
	BasisState     goto state 269

State 228

	Term2 -> 'with' ControlTerms 'ctrl' ControlBasisStates .    (rule 122)

	'$'            reduce using rule 122
	'('            reduce using rule 122
	'()'           reduce using rule 122
	')'            reduce using rule 122
	','            reduce using rule 122
	'.'            reduce using rule 122
	';'            reduce using rule 122
	'@+'           reduce using rule 122
	'@+i'          reduce using rule 122
	'@-'           reduce using rule 122
	'@-i'          reduce using rule 122
	'@0'           reduce using rule 122
	'@1'           reduce using rule 122
	'False'        reduce using rule 122
	'True'         reduce using rule 122
	'['            reduce using rule 122
	'[]'           reduce using rule 122
	']'            reduce using rule 122
	'else'         reduce using rule 122
	'gate'         reduce using rule 122
	'not'          reduce using rule 122
	'of'           reduce using rule 122
	'then'         reduce using rule 122
	'}'            reduce using rule 122
	L_integ        reduce using rule 122
	L_Var          reduce using rule 122


State 229

	Term2 -> 'with' ControlTerms 'ctrl' ControlBits .    (rule 124)

	'$'            reduce using rule 124
	'('            reduce using rule 124
	'()'           reduce using rule 124
	')'            reduce using rule 124
	','            reduce using rule 124
	'.'            reduce using rule 124
	';'            reduce using rule 124
	'@+'           reduce using rule 124
	'@+i'          reduce using rule 124
	'@-'           reduce using rule 124
	'@-i'          reduce using rule 124
	'@0'           reduce using rule 124
	'@1'           reduce using rule 124
	'False'        reduce using rule 124
	'True'         reduce using rule 124
	'['            reduce using rule 124
	'[]'           reduce using rule 124
	']'            reduce using rule 124
	'else'         reduce using rule 124
	'gate'         reduce using rule 124
	'not'          reduce using rule 124
	'of'           reduce using rule 124
	'then'         reduce using rule 124
	'}'            reduce using rule 124
	L_integ        reduce using rule 124
	L_Var          reduce using rule 124


State 230

	ControlBasisStates -> '[' . BasisState ',' ListBasisState ']'    (rule 99)
	ControlBits -> '[' . Integer ',' ListInteger ']'    (rule 103)

	'@+'           shift, and enter state 69
	'@+i'          shift, and enter state 70
	'@-'           shift, and enter state 71
	'@-i'          shift, and enter state 72
	'@0'           shift, and enter state 73
	'@1'           shift, and enter state 74
	L_integ        shift, and enter state 43

	Integer        goto state 266
	BasisState     goto state 267

State 231

	ControlTerms -> '[' Term ',' . ListTerm ']'         (rule 108)

	'('            shift, and enter state 67
	'()'           shift, and enter state 68
	'@+'           shift, and enter state 69
	'@+i'          shift, and enter state 70
	'@-'           shift, and enter state 71
	'@-i'          shift, and enter state 72
	'@0'           shift, and enter state 73
	'@1'           shift, and enter state 74
	'False'        shift, and enter state 75
	'True'         shift, and enter state 76
	'['            shift, and enter state 77
	'[]'           shift, and enter state 78
	'case'         shift, and enter state 79
	'gate'         shift, and enter state 80
	'if'           shift, and enter state 81
	'let'          shift, and enter state 82
	'not'          shift, and enter state 83
	'with'         shift, and enter state 84
	L_integ        shift, and enter state 43
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 85

	Integer        goto state 48
	Var            goto state 49
	Lambda         goto state 50
	IntegerExpressiongoto state 51
	IntegerExpression1goto state 52
	IntegerExpression2goto state 53
	BoolValue      goto state 54
	BoolExpression goto state 55
	BoolExpression1goto state 56
	BoolExpression2goto state 57
	BasisState     goto state 58
	Tuple          goto state 59
	ListTerm       goto state 265
	Term           goto state 242
	Term1          goto state 61
	Term2          goto state 62
	Term3          goto state 63
	Term4          goto state 64
	List1          goto state 65
	List           goto state 66

State 232

	ControlTerm -> '[' Term ']' .                       (rule 107)

	'ctrl'         reduce using rule 107


State 233

	Term1 -> 'let' '{' '(' Var . ',' ListVar ')' '=' Term '}' 'in' Term    (rule 115)

	','            shift, and enter state 264


State 234

	Term1 -> 'let' '{' Var '=' . Term '}' 'in' Term     (rule 114)

	'('            shift, and enter state 67
	'()'           shift, and enter state 68
	'@+'           shift, and enter state 69
	'@+i'          shift, and enter state 70
	'@-'           shift, and enter state 71
	'@-i'          shift, and enter state 72
	'@0'           shift, and enter state 73
	'@1'           shift, and enter state 74
	'False'        shift, and enter state 75
	'True'         shift, and enter state 76
	'['            shift, and enter state 77
	'[]'           shift, and enter state 78
	'case'         shift, and enter state 79
	'gate'         shift, and enter state 80
	'if'           shift, and enter state 81
	'let'          shift, and enter state 82
	'not'          shift, and enter state 83
	'with'         shift, and enter state 84
	L_integ        shift, and enter state 43
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 85

	Integer        goto state 48
	Var            goto state 49
	Lambda         goto state 50
	IntegerExpressiongoto state 51
	IntegerExpression1goto state 52
	IntegerExpression2goto state 53
	BoolValue      goto state 54
	BoolExpression goto state 55
	BoolExpression1goto state 56
	BoolExpression2goto state 57
	BasisState     goto state 58
	Tuple          goto state 59
	Term           goto state 263
	Term1          goto state 61
	Term2          goto state 62
	Term3          goto state 63
	Term4          goto state 64
	List1          goto state 65
	List           goto state 66

State 235

	Term1 -> 'if' Term 'then' Term . 'else' Term        (rule 113)

	'else'         shift, and enter state 262


State 236

	Gate -> GateVar '(' Angle . ',' Angle ',' Angle ')'    (rule 91)
	Gate -> GateVar '(' Angle . ',' Angle ')'           (rule 92)

	','            shift, and enter state 261


State 237

	Gate -> 'U2' '(' Angle . ',' Angle ')'              (rule 79)

	','            shift, and enter state 260


State 238

	Gate -> 'U3' '(' Angle . ',' Angle ',' Angle ')'    (rule 80)

	','            shift, and enter state 259


State 239

	List -> Term3 . ':' List1                           (rule 145)
	CaseExpression -> Term3 . '->' Term3                (rule 147)

	'->'           shift, and enter state 258
	':'            shift, and enter state 140


State 240

	Term1 -> 'case' Term 'of' CaseExpression . ListCaseExpression    (rule 118)

	'('            shift, and enter state 67
	'()'           shift, and enter state 68
	'@+'           shift, and enter state 69
	'@+i'          shift, and enter state 70
	'@-'           shift, and enter state 71
	'@-i'          shift, and enter state 72
	'@0'           shift, and enter state 73
	'@1'           shift, and enter state 74
	'False'        shift, and enter state 75
	'True'         shift, and enter state 76
	'['            shift, and enter state 77
	'[]'           shift, and enter state 78
	'gate'         shift, and enter state 80
	'not'          shift, and enter state 83
	L_integ        shift, and enter state 43
	L_Var          shift, and enter state 8

	Integer        goto state 48
	Var            goto state 141
	IntegerExpressiongoto state 51
	IntegerExpression1goto state 52
	IntegerExpression2goto state 53
	BoolValue      goto state 54
	BoolExpression goto state 55
	BoolExpression1goto state 56
	BoolExpression2goto state 57
	BasisState     goto state 58
	Tuple          goto state 59
	Term3          goto state 239
	Term4          goto state 64
	List1          goto state 65
	List           goto state 66
	CaseExpression goto state 256
	ListCaseExpressiongoto state 257

State 241

	List1 -> '[' Term ',' ListTerm . ']'                (rule 142)

	']'            shift, and enter state 255


State 242

	ListTerm -> Term .                                  (rule 109)
	ListTerm -> Term . ',' ListTerm                     (rule 110)

	')'            reduce using rule 109
	','            shift, and enter state 254
	']'            reduce using rule 109


State 243

	Tuple -> '(' Term ',' ListTerm . ')'                (rule 106)

	')'            shift, and enter state 253


State 244

	List -> Term3 . ':' List1                           (rule 145)

	':'            shift, and enter state 140


State 245

	Term1 -> Lambda Var Type '.' . Term                 (rule 119)

	'('            shift, and enter state 67
	'()'           shift, and enter state 68
	'@+'           shift, and enter state 69
	'@+i'          shift, and enter state 70
	'@-'           shift, and enter state 71
	'@-i'          shift, and enter state 72
	'@0'           shift, and enter state 73
	'@1'           shift, and enter state 74
	'False'        shift, and enter state 75
	'True'         shift, and enter state 76
	'['            shift, and enter state 77
	'[]'           shift, and enter state 78
	'case'         shift, and enter state 79
	'gate'         shift, and enter state 80
	'if'           shift, and enter state 81
	'let'          shift, and enter state 82
	'not'          shift, and enter state 83
	'with'         shift, and enter state 84
	L_integ        shift, and enter state 43
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 85

	Integer        goto state 48
	Var            goto state 49
	Lambda         goto state 50
	IntegerExpressiongoto state 51
	IntegerExpression1goto state 52
	IntegerExpression2goto state 53
	BoolValue      goto state 54
	BoolExpression goto state 55
	BoolExpression1goto state 56
	BoolExpression2goto state 57
	BasisState     goto state 58
	Tuple          goto state 59
	Term           goto state 252
	Term1          goto state 61
	Term2          goto state 62
	Term3          goto state 63
	Term4          goto state 64
	List1          goto state 65
	List           goto state 66

State 246

	Term1 -> Var ',' ListVar '<-' . Term ';' Term       (rule 117)

	'('            shift, and enter state 67
	'()'           shift, and enter state 68
	'@+'           shift, and enter state 69
	'@+i'          shift, and enter state 70
	'@-'           shift, and enter state 71
	'@-i'          shift, and enter state 72
	'@0'           shift, and enter state 73
	'@1'           shift, and enter state 74
	'False'        shift, and enter state 75
	'True'         shift, and enter state 76
	'['            shift, and enter state 77
	'[]'           shift, and enter state 78
	'case'         shift, and enter state 79
	'gate'         shift, and enter state 80
	'if'           shift, and enter state 81
	'let'          shift, and enter state 82
	'not'          shift, and enter state 83
	'with'         shift, and enter state 84
	L_integ        shift, and enter state 43
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 85

	Integer        goto state 48
	Var            goto state 49
	Lambda         goto state 50
	IntegerExpressiongoto state 51
	IntegerExpression1goto state 52
	IntegerExpression2goto state 53
	BoolValue      goto state 54
	BoolExpression goto state 55
	BoolExpression1goto state 56
	BoolExpression2goto state 57
	BasisState     goto state 58
	Tuple          goto state 59
	Term           goto state 251
	Term1          goto state 61
	Term2          goto state 62
	Term3          goto state 63
	Term4          goto state 64
	List1          goto state 65
	List           goto state 66

State 247

	ListVar -> Var ',' . ListVar                        (rule 97)

	L_Var          shift, and enter state 8

	Var            goto state 163
	ListVar        goto state 250

State 248

	Term1 -> Var '<-' Term ';' . Term                   (rule 116)

	'('            shift, and enter state 67
	'()'           shift, and enter state 68
	'@+'           shift, and enter state 69
	'@+i'          shift, and enter state 70
	'@-'           shift, and enter state 71
	'@-i'          shift, and enter state 72
	'@0'           shift, and enter state 73
	'@1'           shift, and enter state 74
	'False'        shift, and enter state 75
	'True'         shift, and enter state 76
	'['            shift, and enter state 77
	'[]'           shift, and enter state 78
	'case'         shift, and enter state 79
	'gate'         shift, and enter state 80
	'if'           shift, and enter state 81
	'let'          shift, and enter state 82
	'not'          shift, and enter state 83
	'with'         shift, and enter state 84
	L_integ        shift, and enter state 43
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 85

	Integer        goto state 48
	Var            goto state 49
	Lambda         goto state 50
	IntegerExpressiongoto state 51
	IntegerExpression1goto state 52
	IntegerExpression2goto state 53
	BoolValue      goto state 54
	BoolExpression goto state 55
	BoolExpression1goto state 56
	BoolExpression2goto state 57
	BasisState     goto state 58
	Tuple          goto state 59
	Term           goto state 249
	Term1          goto state 61
	Term2          goto state 62
	Term3          goto state 63
	Term4          goto state 64
	List1          goto state 65
	List           goto state 66

State 249

	Term1 -> Var '<-' Term ';' Term .                   (rule 116)

	'$'            reduce using rule 116
	')'            reduce using rule 116
	','            reduce using rule 116
	';'            reduce using rule 116
	']'            reduce using rule 116
	'else'         reduce using rule 116
	'of'           reduce using rule 116
	'then'         reduce using rule 116
	'}'            reduce using rule 116


State 250

	ListVar -> Var ',' ListVar .                        (rule 97)

	'$'            reduce using rule 97
	'('            reduce using rule 97
	'()'           reduce using rule 97
	')'            reduce using rule 97
	','            reduce using rule 97
	'.'            reduce using rule 97
	';'            reduce using rule 97
	'<-'           reduce using rule 97
	'@+'           reduce using rule 97
	'@+i'          reduce using rule 97
	'@-'           reduce using rule 97
	'@-i'          reduce using rule 97
	'@0'           reduce using rule 97
	'@1'           reduce using rule 97
	'False'        reduce using rule 97
	'True'         reduce using rule 97
	'['            reduce using rule 97
	'[]'           reduce using rule 97
	']'            reduce using rule 97
	'else'         reduce using rule 97
	'gate'         reduce using rule 97
	'not'          reduce using rule 97
	'of'           reduce using rule 97
	'then'         reduce using rule 97
	'}'            reduce using rule 97
	L_integ        reduce using rule 97
	L_Var          reduce using rule 97


State 251

	Term1 -> Var ',' ListVar '<-' Term . ';' Term       (rule 117)

	';'            shift, and enter state 284


State 252

	Term1 -> Lambda Var Type '.' Term .                 (rule 119)

	'$'            reduce using rule 119
	')'            reduce using rule 119
	','            reduce using rule 119
	';'            reduce using rule 119
	']'            reduce using rule 119
	'else'         reduce using rule 119
	'of'           reduce using rule 119
	'then'         reduce using rule 119
	'}'            reduce using rule 119


State 253

	Tuple -> '(' Term ',' ListTerm ')' .                (rule 106)

	'$'            reduce using rule 106
	'('            reduce using rule 106
	'()'           reduce using rule 106
	')'            reduce using rule 106
	','            reduce using rule 106
	'->'           reduce using rule 106
	'.'            reduce using rule 106
	':'            reduce using rule 106
	';'            reduce using rule 106
	'@+'           reduce using rule 106
	'@+i'          reduce using rule 106
	'@-'           reduce using rule 106
	'@-i'          reduce using rule 106
	'@0'           reduce using rule 106
	'@1'           reduce using rule 106
	'False'        reduce using rule 106
	'True'         reduce using rule 106
	'['            reduce using rule 106
	'[]'           reduce using rule 106
	']'            reduce using rule 106
	'else'         reduce using rule 106
	'gate'         reduce using rule 106
	'not'          reduce using rule 106
	'of'           reduce using rule 106
	'then'         reduce using rule 106
	'}'            reduce using rule 106
	L_integ        reduce using rule 106
	L_Var          reduce using rule 106


State 254

	ListTerm -> Term ',' . ListTerm                     (rule 110)

	'('            shift, and enter state 67
	'()'           shift, and enter state 68
	'@+'           shift, and enter state 69
	'@+i'          shift, and enter state 70
	'@-'           shift, and enter state 71
	'@-i'          shift, and enter state 72
	'@0'           shift, and enter state 73
	'@1'           shift, and enter state 74
	'False'        shift, and enter state 75
	'True'         shift, and enter state 76
	'['            shift, and enter state 77
	'[]'           shift, and enter state 78
	'case'         shift, and enter state 79
	'gate'         shift, and enter state 80
	'if'           shift, and enter state 81
	'let'          shift, and enter state 82
	'not'          shift, and enter state 83
	'with'         shift, and enter state 84
	L_integ        shift, and enter state 43
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 85

	Integer        goto state 48
	Var            goto state 49
	Lambda         goto state 50
	IntegerExpressiongoto state 51
	IntegerExpression1goto state 52
	IntegerExpression2goto state 53
	BoolValue      goto state 54
	BoolExpression goto state 55
	BoolExpression1goto state 56
	BoolExpression2goto state 57
	BasisState     goto state 58
	Tuple          goto state 59
	ListTerm       goto state 283
	Term           goto state 242
	Term1          goto state 61
	Term2          goto state 62
	Term3          goto state 63
	Term4          goto state 64
	List1          goto state 65
	List           goto state 66

State 255

	List1 -> '[' Term ',' ListTerm ']' .                (rule 142)

	'!!'           reduce using rule 142
	'$'            reduce using rule 142
	'('            reduce using rule 142
	'()'           reduce using rule 142
	')'            reduce using rule 142
	'++'           reduce using rule 142
	','            reduce using rule 142
	'->'           reduce using rule 142
	'.'            reduce using rule 142
	':'            reduce using rule 142
	';'            reduce using rule 142
	'@+'           reduce using rule 142
	'@+i'          reduce using rule 142
	'@-'           reduce using rule 142
	'@-i'          reduce using rule 142
	'@0'           reduce using rule 142
	'@1'           reduce using rule 142
	'False'        reduce using rule 142
	'True'         reduce using rule 142
	'['            reduce using rule 142
	'[]'           reduce using rule 142
	']'            reduce using rule 142
	'else'         reduce using rule 142
	'gate'         reduce using rule 142
	'not'          reduce using rule 142
	'of'           reduce using rule 142
	'then'         reduce using rule 142
	'}'            reduce using rule 142
	L_integ        reduce using rule 142
	L_Var          reduce using rule 142


State 256

	ListCaseExpression -> CaseExpression .              (rule 148)
	ListCaseExpression -> CaseExpression . ListCaseExpression    (rule 149)

	'$'            reduce using rule 148
	'('            shift, and enter state 67
	'()'           shift, and enter state 68
	')'            reduce using rule 148
	','            reduce using rule 148
	';'            reduce using rule 148
	'@+'           shift, and enter state 69
	'@+i'          shift, and enter state 70
	'@-'           shift, and enter state 71
	'@-i'          shift, and enter state 72
	'@0'           shift, and enter state 73
	'@1'           shift, and enter state 74
	'False'        shift, and enter state 75
	'True'         shift, and enter state 76
	'['            shift, and enter state 77
	'[]'           shift, and enter state 78
	']'            reduce using rule 148
	'else'         reduce using rule 148
	'gate'         shift, and enter state 80
	'not'          shift, and enter state 83
	'of'           reduce using rule 148
	'then'         reduce using rule 148
	'}'            reduce using rule 148
	L_integ        shift, and enter state 43
	L_Var          shift, and enter state 8

	Integer        goto state 48
	Var            goto state 141
	IntegerExpressiongoto state 51
	IntegerExpression1goto state 52
	IntegerExpression2goto state 53
	BoolValue      goto state 54
	BoolExpression goto state 55
	BoolExpression1goto state 56
	BoolExpression2goto state 57
	BasisState     goto state 58
	Tuple          goto state 59
	Term3          goto state 239
	Term4          goto state 64
	List1          goto state 65
	List           goto state 66
	CaseExpression goto state 256
	ListCaseExpressiongoto state 282

State 257

	Term1 -> 'case' Term 'of' CaseExpression ListCaseExpression .    (rule 118)

	'$'            reduce using rule 118
	')'            reduce using rule 118
	','            reduce using rule 118
	';'            reduce using rule 118
	']'            reduce using rule 118
	'else'         reduce using rule 118
	'of'           reduce using rule 118
	'then'         reduce using rule 118
	'}'            reduce using rule 118


State 258

	CaseExpression -> Term3 '->' . Term3                (rule 147)

	'('            shift, and enter state 67
	'()'           shift, and enter state 68
	'@+'           shift, and enter state 69
	'@+i'          shift, and enter state 70
	'@-'           shift, and enter state 71
	'@-i'          shift, and enter state 72
	'@0'           shift, and enter state 73
	'@1'           shift, and enter state 74
	'False'        shift, and enter state 75
	'True'         shift, and enter state 76
	'['            shift, and enter state 77
	'[]'           shift, and enter state 78
	'gate'         shift, and enter state 80
	'not'          shift, and enter state 83
	L_integ        shift, and enter state 43
	L_Var          shift, and enter state 8

	Integer        goto state 48
	Var            goto state 141
	IntegerExpressiongoto state 51
	IntegerExpression1goto state 52
	IntegerExpression2goto state 53
	BoolValue      goto state 54
	BoolExpression goto state 55
	BoolExpression1goto state 56
	BoolExpression2goto state 57
	BasisState     goto state 58
	Tuple          goto state 59
	Term3          goto state 281
	Term4          goto state 64
	List1          goto state 65
	List           goto state 66

State 259

	Gate -> 'U3' '(' Angle ',' . Angle ',' Angle ')'    (rule 80)

	L_doubl        shift, and enter state 2

	Double         goto state 198
	Angle          goto state 280

State 260

	Gate -> 'U2' '(' Angle ',' . Angle ')'              (rule 79)

	L_doubl        shift, and enter state 2

	Double         goto state 198
	Angle          goto state 279

State 261

	Gate -> GateVar '(' Angle ',' . Angle ',' Angle ')'    (rule 91)
	Gate -> GateVar '(' Angle ',' . Angle ')'           (rule 92)

	L_doubl        shift, and enter state 2

	Double         goto state 198
	Angle          goto state 278

State 262

	Term1 -> 'if' Term 'then' Term 'else' . Term        (rule 113)

	'('            shift, and enter state 67
	'()'           shift, and enter state 68
	'@+'           shift, and enter state 69
	'@+i'          shift, and enter state 70
	'@-'           shift, and enter state 71
	'@-i'          shift, and enter state 72
	'@0'           shift, and enter state 73
	'@1'           shift, and enter state 74
	'False'        shift, and enter state 75
	'True'         shift, and enter state 76
	'['            shift, and enter state 77
	'[]'           shift, and enter state 78
	'case'         shift, and enter state 79
	'gate'         shift, and enter state 80
	'if'           shift, and enter state 81
	'let'          shift, and enter state 82
	'not'          shift, and enter state 83
	'with'         shift, and enter state 84
	L_integ        shift, and enter state 43
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 85

	Integer        goto state 48
	Var            goto state 49
	Lambda         goto state 50
	IntegerExpressiongoto state 51
	IntegerExpression1goto state 52
	IntegerExpression2goto state 53
	BoolValue      goto state 54
	BoolExpression goto state 55
	BoolExpression1goto state 56
	BoolExpression2goto state 57
	BasisState     goto state 58
	Tuple          goto state 59
	Term           goto state 277
	Term1          goto state 61
	Term2          goto state 62
	Term3          goto state 63
	Term4          goto state 64
	List1          goto state 65
	List           goto state 66

State 263

	Term1 -> 'let' '{' Var '=' Term . '}' 'in' Term     (rule 114)

	'}'            shift, and enter state 276


State 264

	Term1 -> 'let' '{' '(' Var ',' . ListVar ')' '=' Term '}' 'in' Term    (rule 115)

	L_Var          shift, and enter state 8

	Var            goto state 163
	ListVar        goto state 275

State 265

	ControlTerms -> '[' Term ',' ListTerm . ']'         (rule 108)

	']'            shift, and enter state 274


State 266

	ControlBits -> '[' Integer . ',' ListInteger ']'    (rule 103)

	','            shift, and enter state 273


State 267

	ControlBasisStates -> '[' BasisState . ',' ListBasisState ']'    (rule 99)

	','            shift, and enter state 272


State 268

	ControlBit -> '[' Integer . ']'                     (rule 102)

	']'            shift, and enter state 271


State 269

	ControlBasisState -> '[' BasisState . ']'           (rule 98)

	']'            shift, and enter state 270


State 270

	ControlBasisState -> '[' BasisState ']' .           (rule 98)

	'$'            reduce using rule 98
	'('            reduce using rule 98
	'()'           reduce using rule 98
	')'            reduce using rule 98
	','            reduce using rule 98
	'.'            reduce using rule 98
	';'            reduce using rule 98
	'@+'           reduce using rule 98
	'@+i'          reduce using rule 98
	'@-'           reduce using rule 98
	'@-i'          reduce using rule 98
	'@0'           reduce using rule 98
	'@1'           reduce using rule 98
	'False'        reduce using rule 98
	'True'         reduce using rule 98
	'['            reduce using rule 98
	'[]'           reduce using rule 98
	']'            reduce using rule 98
	'else'         reduce using rule 98
	'gate'         reduce using rule 98
	'not'          reduce using rule 98
	'of'           reduce using rule 98
	'then'         reduce using rule 98
	'}'            reduce using rule 98
	L_integ        reduce using rule 98
	L_Var          reduce using rule 98


State 271

	ControlBit -> '[' Integer ']' .                     (rule 102)

	'$'            reduce using rule 102
	'('            reduce using rule 102
	'()'           reduce using rule 102
	')'            reduce using rule 102
	','            reduce using rule 102
	'.'            reduce using rule 102
	';'            reduce using rule 102
	'@+'           reduce using rule 102
	'@+i'          reduce using rule 102
	'@-'           reduce using rule 102
	'@-i'          reduce using rule 102
	'@0'           reduce using rule 102
	'@1'           reduce using rule 102
	'False'        reduce using rule 102
	'True'         reduce using rule 102
	'['            reduce using rule 102
	'[]'           reduce using rule 102
	']'            reduce using rule 102
	'else'         reduce using rule 102
	'gate'         reduce using rule 102
	'not'          reduce using rule 102
	'of'           reduce using rule 102
	'then'         reduce using rule 102
	'}'            reduce using rule 102
	L_integ        reduce using rule 102
	L_Var          reduce using rule 102


State 272

	ControlBasisStates -> '[' BasisState ',' . ListBasisState ']'    (rule 99)

	'@+'           shift, and enter state 69
	'@+i'          shift, and enter state 70
	'@-'           shift, and enter state 71
	'@-i'          shift, and enter state 72
	'@0'           shift, and enter state 73
	'@1'           shift, and enter state 74

	BasisState     goto state 294
	ListBasisState goto state 295

State 273

	ControlBits -> '[' Integer ',' . ListInteger ']'    (rule 103)

	L_integ        shift, and enter state 43

	Integer        goto state 292
	ListInteger    goto state 293

State 274

	ControlTerms -> '[' Term ',' ListTerm ']' .         (rule 108)

	'ctrl'         reduce using rule 108


State 275

	Term1 -> 'let' '{' '(' Var ',' ListVar . ')' '=' Term '}' 'in' Term    (rule 115)

	')'            shift, and enter state 291


State 276

	Term1 -> 'let' '{' Var '=' Term '}' . 'in' Term     (rule 114)

	'in'           shift, and enter state 290


State 277

	Term1 -> 'if' Term 'then' Term 'else' Term .        (rule 113)

	'$'            reduce using rule 113
	')'            reduce using rule 113
	','            reduce using rule 113
	';'            reduce using rule 113
	']'            reduce using rule 113
	'else'         reduce using rule 113
	'of'           reduce using rule 113
	'then'         reduce using rule 113
	'}'            reduce using rule 113


State 278

	Gate -> GateVar '(' Angle ',' Angle . ',' Angle ')'    (rule 91)
	Gate -> GateVar '(' Angle ',' Angle . ')'           (rule 92)

	')'            shift, and enter state 288
	','            shift, and enter state 289


State 279

	Gate -> 'U2' '(' Angle ',' Angle . ')'              (rule 79)

	')'            shift, and enter state 287


State 280

	Gate -> 'U3' '(' Angle ',' Angle . ',' Angle ')'    (rule 80)

	','            shift, and enter state 286


State 281

	List -> Term3 . ':' List1                           (rule 145)
	CaseExpression -> Term3 '->' Term3 .                (rule 147)

	'$'            reduce using rule 147
	'('            reduce using rule 147
	'()'           reduce using rule 147
	')'            reduce using rule 147
	','            reduce using rule 147
	':'            shift, and enter state 140
	';'            reduce using rule 147
	'@+'           reduce using rule 147
	'@+i'          reduce using rule 147
	'@-'           reduce using rule 147
	'@-i'          reduce using rule 147
	'@0'           reduce using rule 147
	'@1'           reduce using rule 147
	'False'        reduce using rule 147
	'True'         reduce using rule 147
	'['            reduce using rule 147
	'[]'           reduce using rule 147
	']'            reduce using rule 147
	'else'         reduce using rule 147
	'gate'         reduce using rule 147
	'not'          reduce using rule 147
	'of'           reduce using rule 147
	'then'         reduce using rule 147
	'}'            reduce using rule 147
	L_integ        reduce using rule 147
	L_Var          reduce using rule 147


State 282

	ListCaseExpression -> CaseExpression ListCaseExpression .    (rule 149)

	'$'            reduce using rule 149
	')'            reduce using rule 149
	','            reduce using rule 149
	';'            reduce using rule 149
	']'            reduce using rule 149
	'else'         reduce using rule 149
	'of'           reduce using rule 149
	'then'         reduce using rule 149
	'}'            reduce using rule 149


State 283

	ListTerm -> Term ',' ListTerm .                     (rule 110)

	')'            reduce using rule 110
	']'            reduce using rule 110


State 284

	Term1 -> Var ',' ListVar '<-' Term ';' . Term       (rule 117)

	'('            shift, and enter state 67
	'()'           shift, and enter state 68
	'@+'           shift, and enter state 69
	'@+i'          shift, and enter state 70
	'@-'           shift, and enter state 71
	'@-i'          shift, and enter state 72
	'@0'           shift, and enter state 73
	'@1'           shift, and enter state 74
	'False'        shift, and enter state 75
	'True'         shift, and enter state 76
	'['            shift, and enter state 77
	'[]'           shift, and enter state 78
	'case'         shift, and enter state 79
	'gate'         shift, and enter state 80
	'if'           shift, and enter state 81
	'let'          shift, and enter state 82
	'not'          shift, and enter state 83
	'with'         shift, and enter state 84
	L_integ        shift, and enter state 43
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 85

	Integer        goto state 48
	Var            goto state 49
	Lambda         goto state 50
	IntegerExpressiongoto state 51
	IntegerExpression1goto state 52
	IntegerExpression2goto state 53
	BoolValue      goto state 54
	BoolExpression goto state 55
	BoolExpression1goto state 56
	BoolExpression2goto state 57
	BasisState     goto state 58
	Tuple          goto state 59
	Term           goto state 285
	Term1          goto state 61
	Term2          goto state 62
	Term3          goto state 63
	Term4          goto state 64
	List1          goto state 65
	List           goto state 66

State 285

	Term1 -> Var ',' ListVar '<-' Term ';' Term .       (rule 117)

	'$'            reduce using rule 117
	')'            reduce using rule 117
	','            reduce using rule 117
	';'            reduce using rule 117
	']'            reduce using rule 117
	'else'         reduce using rule 117
	'of'           reduce using rule 117
	'then'         reduce using rule 117
	'}'            reduce using rule 117


State 286

	Gate -> 'U3' '(' Angle ',' Angle ',' . Angle ')'    (rule 80)

	L_doubl        shift, and enter state 2

	Double         goto state 198
	Angle          goto state 303

State 287

	Gate -> 'U2' '(' Angle ',' Angle ')' .              (rule 79)

	'$'            reduce using rule 79
	'('            reduce using rule 79
	'()'           reduce using rule 79
	')'            reduce using rule 79
	','            reduce using rule 79
	'->'           reduce using rule 79
	'.'            reduce using rule 79
	':'            reduce using rule 79
	';'            reduce using rule 79
	'@+'           reduce using rule 79
	'@+i'          reduce using rule 79
	'@-'           reduce using rule 79
	'@-i'          reduce using rule 79
	'@0'           reduce using rule 79
	'@1'           reduce using rule 79
	'False'        reduce using rule 79
	'True'         reduce using rule 79
	'['            reduce using rule 79
	'[]'           reduce using rule 79
	']'            reduce using rule 79
	'else'         reduce using rule 79
	'gate'         reduce using rule 79
	'not'          reduce using rule 79
	'of'           reduce using rule 79
	'then'         reduce using rule 79
	'}'            reduce using rule 79
	L_integ        reduce using rule 79
	L_Var          reduce using rule 79


State 288

	Gate -> GateVar '(' Angle ',' Angle ')' .           (rule 92)

	'$'            reduce using rule 92
	'('            reduce using rule 92
	'()'           reduce using rule 92
	')'            reduce using rule 92
	','            reduce using rule 92
	'->'           reduce using rule 92
	'.'            reduce using rule 92
	':'            reduce using rule 92
	';'            reduce using rule 92
	'@+'           reduce using rule 92
	'@+i'          reduce using rule 92
	'@-'           reduce using rule 92
	'@-i'          reduce using rule 92
	'@0'           reduce using rule 92
	'@1'           reduce using rule 92
	'False'        reduce using rule 92
	'True'         reduce using rule 92
	'['            reduce using rule 92
	'[]'           reduce using rule 92
	']'            reduce using rule 92
	'else'         reduce using rule 92
	'gate'         reduce using rule 92
	'not'          reduce using rule 92
	'of'           reduce using rule 92
	'then'         reduce using rule 92
	'}'            reduce using rule 92
	L_integ        reduce using rule 92
	L_Var          reduce using rule 92


State 289

	Gate -> GateVar '(' Angle ',' Angle ',' . Angle ')'    (rule 91)

	L_doubl        shift, and enter state 2

	Double         goto state 198
	Angle          goto state 302

State 290

	Term1 -> 'let' '{' Var '=' Term '}' 'in' . Term     (rule 114)

	'('            shift, and enter state 67
	'()'           shift, and enter state 68
	'@+'           shift, and enter state 69
	'@+i'          shift, and enter state 70
	'@-'           shift, and enter state 71
	'@-i'          shift, and enter state 72
	'@0'           shift, and enter state 73
	'@1'           shift, and enter state 74
	'False'        shift, and enter state 75
	'True'         shift, and enter state 76
	'['            shift, and enter state 77
	'[]'           shift, and enter state 78
	'case'         shift, and enter state 79
	'gate'         shift, and enter state 80
	'if'           shift, and enter state 81
	'let'          shift, and enter state 82
	'not'          shift, and enter state 83
	'with'         shift, and enter state 84
	L_integ        shift, and enter state 43
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 85

	Integer        goto state 48
	Var            goto state 49
	Lambda         goto state 50
	IntegerExpressiongoto state 51
	IntegerExpression1goto state 52
	IntegerExpression2goto state 53
	BoolValue      goto state 54
	BoolExpression goto state 55
	BoolExpression1goto state 56
	BoolExpression2goto state 57
	BasisState     goto state 58
	Tuple          goto state 59
	Term           goto state 301
	Term1          goto state 61
	Term2          goto state 62
	Term3          goto state 63
	Term4          goto state 64
	List1          goto state 65
	List           goto state 66

State 291

	Term1 -> 'let' '{' '(' Var ',' ListVar ')' . '=' Term '}' 'in' Term    (rule 115)

	'='            shift, and enter state 300


State 292

	ListInteger -> Integer .                            (rule 104)
	ListInteger -> Integer . ',' ListInteger            (rule 105)

	','            shift, and enter state 299
	']'            reduce using rule 104


State 293

	ControlBits -> '[' Integer ',' ListInteger . ']'    (rule 103)

	']'            shift, and enter state 298


State 294

	ListBasisState -> BasisState .                      (rule 100)
	ListBasisState -> BasisState . ',' ListBasisState    (rule 101)

	','            shift, and enter state 297
	']'            reduce using rule 100


State 295

	ControlBasisStates -> '[' BasisState ',' ListBasisState . ']'    (rule 99)

	']'            shift, and enter state 296


State 296

	ControlBasisStates -> '[' BasisState ',' ListBasisState ']' .    (rule 99)

	'$'            reduce using rule 99
	'('            reduce using rule 99
	'()'           reduce using rule 99
	')'            reduce using rule 99
	','            reduce using rule 99
	'.'            reduce using rule 99
	';'            reduce using rule 99
	'@+'           reduce using rule 99
	'@+i'          reduce using rule 99
	'@-'           reduce using rule 99
	'@-i'          reduce using rule 99
	'@0'           reduce using rule 99
	'@1'           reduce using rule 99
	'False'        reduce using rule 99
	'True'         reduce using rule 99
	'['            reduce using rule 99
	'[]'           reduce using rule 99
	']'            reduce using rule 99
	'else'         reduce using rule 99
	'gate'         reduce using rule 99
	'not'          reduce using rule 99
	'of'           reduce using rule 99
	'then'         reduce using rule 99
	'}'            reduce using rule 99
	L_integ        reduce using rule 99
	L_Var          reduce using rule 99


State 297

	ListBasisState -> BasisState ',' . ListBasisState    (rule 101)

	'@+'           shift, and enter state 69
	'@+i'          shift, and enter state 70
	'@-'           shift, and enter state 71
	'@-i'          shift, and enter state 72
	'@0'           shift, and enter state 73
	'@1'           shift, and enter state 74

	BasisState     goto state 294
	ListBasisState goto state 308

State 298

	ControlBits -> '[' Integer ',' ListInteger ']' .    (rule 103)

	'$'            reduce using rule 103
	'('            reduce using rule 103
	'()'           reduce using rule 103
	')'            reduce using rule 103
	','            reduce using rule 103
	'.'            reduce using rule 103
	';'            reduce using rule 103
	'@+'           reduce using rule 103
	'@+i'          reduce using rule 103
	'@-'           reduce using rule 103
	'@-i'          reduce using rule 103
	'@0'           reduce using rule 103
	'@1'           reduce using rule 103
	'False'        reduce using rule 103
	'True'         reduce using rule 103
	'['            reduce using rule 103
	'[]'           reduce using rule 103
	']'            reduce using rule 103
	'else'         reduce using rule 103
	'gate'         reduce using rule 103
	'not'          reduce using rule 103
	'of'           reduce using rule 103
	'then'         reduce using rule 103
	'}'            reduce using rule 103
	L_integ        reduce using rule 103
	L_Var          reduce using rule 103


State 299

	ListInteger -> Integer ',' . ListInteger            (rule 105)

	L_integ        shift, and enter state 43

	Integer        goto state 292
	ListInteger    goto state 307

State 300

	Term1 -> 'let' '{' '(' Var ',' ListVar ')' '=' . Term '}' 'in' Term    (rule 115)

	'('            shift, and enter state 67
	'()'           shift, and enter state 68
	'@+'           shift, and enter state 69
	'@+i'          shift, and enter state 70
	'@-'           shift, and enter state 71
	'@-i'          shift, and enter state 72
	'@0'           shift, and enter state 73
	'@1'           shift, and enter state 74
	'False'        shift, and enter state 75
	'True'         shift, and enter state 76
	'['            shift, and enter state 77
	'[]'           shift, and enter state 78
	'case'         shift, and enter state 79
	'gate'         shift, and enter state 80
	'if'           shift, and enter state 81
	'let'          shift, and enter state 82
	'not'          shift, and enter state 83
	'with'         shift, and enter state 84
	L_integ        shift, and enter state 43
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 85

	Integer        goto state 48
	Var            goto state 49
	Lambda         goto state 50
	IntegerExpressiongoto state 51
	IntegerExpression1goto state 52
	IntegerExpression2goto state 53
	BoolValue      goto state 54
	BoolExpression goto state 55
	BoolExpression1goto state 56
	BoolExpression2goto state 57
	BasisState     goto state 58
	Tuple          goto state 59
	Term           goto state 306
	Term1          goto state 61
	Term2          goto state 62
	Term3          goto state 63
	Term4          goto state 64
	List1          goto state 65
	List           goto state 66

State 301

	Term1 -> 'let' '{' Var '=' Term '}' 'in' Term .     (rule 114)

	'$'            reduce using rule 114
	')'            reduce using rule 114
	','            reduce using rule 114
	';'            reduce using rule 114
	']'            reduce using rule 114
	'else'         reduce using rule 114
	'of'           reduce using rule 114
	'then'         reduce using rule 114
	'}'            reduce using rule 114


State 302

	Gate -> GateVar '(' Angle ',' Angle ',' Angle . ')'    (rule 91)

	')'            shift, and enter state 305


State 303

	Gate -> 'U3' '(' Angle ',' Angle ',' Angle . ')'    (rule 80)

	')'            shift, and enter state 304


State 304

	Gate -> 'U3' '(' Angle ',' Angle ',' Angle ')' .    (rule 80)

	'$'            reduce using rule 80
	'('            reduce using rule 80
	'()'           reduce using rule 80
	')'            reduce using rule 80
	','            reduce using rule 80
	'->'           reduce using rule 80
	'.'            reduce using rule 80
	':'            reduce using rule 80
	';'            reduce using rule 80
	'@+'           reduce using rule 80
	'@+i'          reduce using rule 80
	'@-'           reduce using rule 80
	'@-i'          reduce using rule 80
	'@0'           reduce using rule 80
	'@1'           reduce using rule 80
	'False'        reduce using rule 80
	'True'         reduce using rule 80
	'['            reduce using rule 80
	'[]'           reduce using rule 80
	']'            reduce using rule 80
	'else'         reduce using rule 80
	'gate'         reduce using rule 80
	'not'          reduce using rule 80
	'of'           reduce using rule 80
	'then'         reduce using rule 80
	'}'            reduce using rule 80
	L_integ        reduce using rule 80
	L_Var          reduce using rule 80


State 305

	Gate -> GateVar '(' Angle ',' Angle ',' Angle ')' .    (rule 91)

	'$'            reduce using rule 91
	'('            reduce using rule 91
	'()'           reduce using rule 91
	')'            reduce using rule 91
	','            reduce using rule 91
	'->'           reduce using rule 91
	'.'            reduce using rule 91
	':'            reduce using rule 91
	';'            reduce using rule 91
	'@+'           reduce using rule 91
	'@+i'          reduce using rule 91
	'@-'           reduce using rule 91
	'@-i'          reduce using rule 91
	'@0'           reduce using rule 91
	'@1'           reduce using rule 91
	'False'        reduce using rule 91
	'True'         reduce using rule 91
	'['            reduce using rule 91
	'[]'           reduce using rule 91
	']'            reduce using rule 91
	'else'         reduce using rule 91
	'gate'         reduce using rule 91
	'not'          reduce using rule 91
	'of'           reduce using rule 91
	'then'         reduce using rule 91
	'}'            reduce using rule 91
	L_integ        reduce using rule 91
	L_Var          reduce using rule 91


State 306

	Term1 -> 'let' '{' '(' Var ',' ListVar ')' '=' Term . '}' 'in' Term    (rule 115)

	'}'            shift, and enter state 309


State 307

	ListInteger -> Integer ',' ListInteger .            (rule 105)

	']'            reduce using rule 105


State 308

	ListBasisState -> BasisState ',' ListBasisState .    (rule 101)

	']'            reduce using rule 101


State 309

	Term1 -> 'let' '{' '(' Var ',' ListVar ')' '=' Term '}' . 'in' Term    (rule 115)

	'in'           shift, and enter state 310


State 310

	Term1 -> 'let' '{' '(' Var ',' ListVar ')' '=' Term '}' 'in' . Term    (rule 115)

	'('            shift, and enter state 67
	'()'           shift, and enter state 68
	'@+'           shift, and enter state 69
	'@+i'          shift, and enter state 70
	'@-'           shift, and enter state 71
	'@-i'          shift, and enter state 72
	'@0'           shift, and enter state 73
	'@1'           shift, and enter state 74
	'False'        shift, and enter state 75
	'True'         shift, and enter state 76
	'['            shift, and enter state 77
	'[]'           shift, and enter state 78
	'case'         shift, and enter state 79
	'gate'         shift, and enter state 80
	'if'           shift, and enter state 81
	'let'          shift, and enter state 82
	'not'          shift, and enter state 83
	'with'         shift, and enter state 84
	L_integ        shift, and enter state 43
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 85

	Integer        goto state 48
	Var            goto state 49
	Lambda         goto state 50
	IntegerExpressiongoto state 51
	IntegerExpression1goto state 52
	IntegerExpression2goto state 53
	BoolValue      goto state 54
	BoolExpression goto state 55
	BoolExpression1goto state 56
	BoolExpression2goto state 57
	BasisState     goto state 58
	Tuple          goto state 59
	Term           goto state 311
	Term1          goto state 61
	Term2          goto state 62
	Term3          goto state 63
	Term4          goto state 64
	List1          goto state 65
	List           goto state 66

State 311

	Term1 -> 'let' '{' '(' Var ',' ListVar ')' '=' Term '}' 'in' Term .    (rule 115)

	'$'            reduce using rule 115
	')'            reduce using rule 115
	','            reduce using rule 115
	';'            reduce using rule 115
	']'            reduce using rule 115
	'else'         reduce using rule 115
	'of'           reduce using rule 115
	'then'         reduce using rule 115
	'}'            reduce using rule 115


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 160
Number of terminals: 96
Number of non-terminals: 49
Number of states: 312
