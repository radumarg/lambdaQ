-----------------------------------------------------------------------------
Info file generated by Happy Version 1.20.0 from Frontend/LambdaQ/Par.y
-----------------------------------------------------------------------------

state 50 contains 1 shift/reduce conflicts.
state 60 contains 16 shift/reduce conflicts.
state 127 contains 1 shift/reduce conflicts.
state 216 contains 21 shift/reduce conflicts.

-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_pProgram -> Program                         (0)
	Double -> L_doubl                                  (1)
	Integer -> L_integ                                 (2)
	BitVariable -> L_BitVariable                       (3)
	Var -> L_Var                                       (4)
	Lambda -> L_Lambda                                 (5)
	IntegerExpr -> IntegerExpr '+' IntegerExpr1        (6)
	IntegerExpr -> IntegerExpr '-' IntegerExpr1        (7)
	IntegerExpr -> IntegerExpr1                        (8)
	IntegerExpr1 -> IntegerExpr1 '*' IntegerExpr2      (9)
	IntegerExpr1 -> IntegerExpr1 '/' IntegerExpr2      (10)
	IntegerExpr1 -> IntegerExpr2                       (11)
	IntegerExpr2 -> Integer                            (12)
	IntegerExpr2 -> '(' IntegerExpr ')'                (13)
	Program -> ListFunctionDeclaration                 (14)
	Type -> Type '->' Type1                            (15)
	Type -> Type1                                      (16)
	Type1 -> Type1 '+' Type2                           (17)
	Type1 -> Type2                                     (18)
	Type2 -> Type2 '*' Type3                           (19)
	Type2 -> Type3                                     (20)
	Type3 -> Type4 '**' Integer                        (21)
	Type3 -> '!' Type4                                 (22)
	Type3 -> Type4                                     (23)
	Type5 -> 'Bool'                                    (24)
	Type5 -> 'Bit'                                     (25)
	Type5 -> 'Int'                                     (26)
	Type5 -> 'Qbit'                                    (27)
	Type5 -> '()'                                      (28)
	Type5 -> '[' Type ']'                              (29)
	Type5 -> '(' Type ')'                              (30)
	Type4 -> Type5                                     (31)
	BoolValue -> 'True'                                (32)
	BoolValue -> 'False'                               (33)
	Angle -> Double                                    (34)
	BasisState -> '@0'                                 (35)
	BasisState -> '@1'                                 (36)
	BasisState -> '@+'                                 (37)
	BasisState -> '@-'                                 (38)
	BasisState -> '@+i'                                (39)
	BasisState -> '@-i'                                (40)
	Bit -> BitVariable                                 (41)
	Gate -> 'H'                                        (42)
	Gate -> 'X'                                        (43)
	Gate -> 'Y'                                        (44)
	Gate -> 'Z'                                        (45)
	Gate -> 'ID'                                       (46)
	Gate -> 'ROOT_X' Integer                           (47)
	Gate -> 'ROOT_X_DAG' Integer                       (48)
	Gate -> 'ROOT_Y' Integer                           (49)
	Gate -> 'ROOT_Y_DAG' Integer                       (50)
	Gate -> 'ROOT_Z' Integer                           (51)
	Gate -> 'ROOT_Z_DAG' Integer                       (52)
	Gate -> 'S'                                        (53)
	Gate -> 'S_DAG'                                    (54)
	Gate -> 'T'                                        (55)
	Gate -> 'T_DAG'                                    (56)
	Gate -> 'SQRT_X'                                   (57)
	Gate -> 'SQRT_X_DAG'                               (58)
	Gate -> 'SQRT_Y'                                   (59)
	Gate -> 'SQRT_Y_DAG'                               (60)
	Gate -> 'RX' Angle                                 (61)
	Gate -> 'RY' Angle                                 (62)
	Gate -> 'RZ' Angle                                 (63)
	Gate -> 'U1' Angle                                 (64)
	Gate -> 'U2' '(' Angle ',' Angle ')'               (65)
	Gate -> 'U3' '(' Angle ',' Angle ',' Angle ')'     (66)
	Gate -> 'SWAP'                                     (67)
	Gate -> 'SQRT_SWAP'                                (68)
	Gate -> 'SQRT_SWAP_DAG'                            (69)
	Gate -> 'ISWAP'                                    (70)
	Gate -> 'FSWAP'                                    (71)
	Gate -> 'SWAP_THETA' Angle                         (72)
	Gate -> 'ROOT_SWAP' Integer                        (73)
	Gate -> 'ROOT_SWAP_DAG' Integer                    (74)
	Gate -> 'QFT' Integer                              (75)
	Gate -> 'QFT_DAG' Integer                          (76)
	ListVar -> Var                                     (77)
	ListVar -> Var ',' ListVar                         (78)
	ControlBasisState -> '[' BasisState ']'            (79)
	ControlBasisStates -> '[' BasisState ',' ListBasisState ']'   (80)
	ListBasisState -> BasisState                       (81)
	ListBasisState -> BasisState ',' ListBasisState    (82)
	ControlBit -> '[' Integer ']'                      (83)
	ControlBits -> '[' Integer ',' ListInteger ']'     (84)
	ListInteger -> Integer                             (85)
	ListInteger -> Integer ',' ListInteger             (86)
	Tuple -> '(' Term ',' ListTerm ')'                 (87)
	ControlTerm -> '[' Term ']'                        (88)
	ControlTerms -> '[' Term ',' ListTerm ']'          (89)
	ListTerm -> Term                                   (90)
	ListTerm -> Term ',' ListTerm                      (91)
	Term1 -> 'if' Term 'then' Term 'else' Term         (92)
	Term1 -> 'let' '{' Var '=' Term '}' 'in' Term      (93)
	Term1 -> 'let' '{' '(' Var ',' ListVar ')' '=' Term '}' 'in' Term   (94)
	Term1 -> Var '<-' Term ';' Term                    (95)
	Term1 -> Var ',' ListVar '<-' Term ';' Term        (96)
	Term1 -> 'case' Term 'of' CaseExpression ListCaseExpression   (97)
	Term1 -> Lambda Var Type '.' Term                  (98)
	Term1 -> Term2 '$' Term1                           (99)
	Term1 -> Term2                                     (100)
	Term2 -> 'with' ControlTerm 'ctrl' ControlBasisState   (101)
	Term2 -> 'with' ControlTerms 'ctrl' ControlBasisStates   (102)
	Term2 -> 'with' ControlTerm 'ctrl' ControlBit      (103)
	Term2 -> 'with' ControlTerms 'ctrl' ControlBits    (104)
	Term2 -> Term2 Term3                               (105)
	Term2 -> Term2 '.' Term3                           (106)
	Term2 -> Term3                                     (107)
	Term3 -> Var                                       (108)
	Term3 -> '()'                                      (109)
	Term3 -> BasisState                                (110)
	Term3 -> IntegerExpr                               (111)
	Term3 -> 'gate' Gate                               (112)
	Term3 -> Tuple                                     (113)
	Term3 -> BoolValue                                 (114)
	Term3 -> Bit                                       (115)
	Term3 -> List                                      (116)
	Term3 -> Term4                                     (117)
	Term -> Term1                                      (118)
	Term4 -> '(' Term ')'                              (119)
	List -> '[]'                                       (120)
	List -> '[' Term ']'                               (121)
	List -> '[' Term ',' ListTerm ']'                  (122)
	List -> Term4 ':' List                             (123)
	CaseExpression -> Term '->' Term                   (124)
	ListCaseExpression -> CaseExpression               (125)
	ListCaseExpression -> CaseExpression ListCaseExpression   (126)
	Arg -> Var                                         (127)
	ListArg ->                                         (128)
	ListArg -> Arg ListArg                             (129)
	FunctionDefinition -> Var ListArg '=' Term         (130)
	FunctionDefinition -> FunctionDefinition ';'       (131)
	FunctionType -> Var '::' Type                      (132)
	FunctionType -> FunctionType ';'                   (133)
	FunctionDeclaration -> FunctionType ';' FunctionDefinition ';'   (134)
	ListFunctionDeclaration ->                         (135)
	ListFunctionDeclaration -> FunctionDeclaration ListFunctionDeclaration   (136)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	'!'            { PT _ (TS _ 1) }
	'$'            { PT _ (TS _ 2) }
	'('            { PT _ (TS _ 3) }
	'()'           { PT _ (TS _ 4) }
	')'            { PT _ (TS _ 5) }
	'*'            { PT _ (TS _ 6) }
	'**'           { PT _ (TS _ 7) }
	'+'            { PT _ (TS _ 8) }
	','            { PT _ (TS _ 9) }
	'-'            { PT _ (TS _ 10) }
	'->'           { PT _ (TS _ 11) }
	'.'            { PT _ (TS _ 12) }
	'/'            { PT _ (TS _ 13) }
	':'            { PT _ (TS _ 14) }
	'::'           { PT _ (TS _ 15) }
	';'            { PT _ (TS _ 16) }
	'<-'           { PT _ (TS _ 17) }
	'='            { PT _ (TS _ 18) }
	'@+'           { PT _ (TS _ 19) }
	'@+i'          { PT _ (TS _ 20) }
	'@-'           { PT _ (TS _ 21) }
	'@-i'          { PT _ (TS _ 22) }
	'@0'           { PT _ (TS _ 23) }
	'@1'           { PT _ (TS _ 24) }
	'Bit'          { PT _ (TS _ 25) }
	'Bool'         { PT _ (TS _ 26) }
	'FSWAP'        { PT _ (TS _ 27) }
	'False'        { PT _ (TS _ 28) }
	'H'            { PT _ (TS _ 29) }
	'ID'           { PT _ (TS _ 30) }
	'ISWAP'        { PT _ (TS _ 31) }
	'Int'          { PT _ (TS _ 32) }
	'QFT'          { PT _ (TS _ 33) }
	'QFT_DAG'      { PT _ (TS _ 34) }
	'Qbit'         { PT _ (TS _ 35) }
	'ROOT_SWAP'    { PT _ (TS _ 36) }
	'ROOT_SWAP_DAG'{ PT _ (TS _ 37) }
	'ROOT_X'       { PT _ (TS _ 38) }
	'ROOT_X_DAG'   { PT _ (TS _ 39) }
	'ROOT_Y'       { PT _ (TS _ 40) }
	'ROOT_Y_DAG'   { PT _ (TS _ 41) }
	'ROOT_Z'       { PT _ (TS _ 42) }
	'ROOT_Z_DAG'   { PT _ (TS _ 43) }
	'RX'           { PT _ (TS _ 44) }
	'RY'           { PT _ (TS _ 45) }
	'RZ'           { PT _ (TS _ 46) }
	'S'            { PT _ (TS _ 47) }
	'SQRT_SWAP'    { PT _ (TS _ 48) }
	'SQRT_SWAP_DAG'{ PT _ (TS _ 49) }
	'SQRT_X'       { PT _ (TS _ 50) }
	'SQRT_X_DAG'   { PT _ (TS _ 51) }
	'SQRT_Y'       { PT _ (TS _ 52) }
	'SQRT_Y_DAG'   { PT _ (TS _ 53) }
	'SWAP'         { PT _ (TS _ 54) }
	'SWAP_THETA'   { PT _ (TS _ 55) }
	'S_DAG'        { PT _ (TS _ 56) }
	'T'            { PT _ (TS _ 57) }
	'T_DAG'        { PT _ (TS _ 58) }
	'True'         { PT _ (TS _ 59) }
	'U1'           { PT _ (TS _ 60) }
	'U2'           { PT _ (TS _ 61) }
	'U3'           { PT _ (TS _ 62) }
	'X'            { PT _ (TS _ 63) }
	'Y'            { PT _ (TS _ 64) }
	'Z'            { PT _ (TS _ 65) }
	'['            { PT _ (TS _ 66) }
	'[]'           { PT _ (TS _ 67) }
	']'            { PT _ (TS _ 68) }
	'case'         { PT _ (TS _ 69) }
	'ctrl'         { PT _ (TS _ 70) }
	'else'         { PT _ (TS _ 71) }
	'gate'         { PT _ (TS _ 72) }
	'if'           { PT _ (TS _ 73) }
	'in'           { PT _ (TS _ 74) }
	'let'          { PT _ (TS _ 75) }
	'of'           { PT _ (TS _ 76) }
	'then'         { PT _ (TS _ 77) }
	'with'         { PT _ (TS _ 78) }
	'{'            { PT _ (TS _ 79) }
	'}'            { PT _ (TS _ 80) }
	L_doubl        { PT _ (TD $$) }
	L_integ        { PT _ (TI $$) }
	L_BitVariable  { PT _ (T_BitVariable $$) }
	L_Var          { PT _ (T_Var _) }
	L_Lambda       { PT _ (T_Lambda $$) }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_pProgram rule  0
	Double          rule  1
	Integer         rule  2
	BitVariable     rule  3
	Var             rule  4
	Lambda          rule  5
	IntegerExpr     rules 6, 7, 8
	IntegerExpr1    rules 9, 10, 11
	IntegerExpr2    rules 12, 13
	Program         rule  14
	Type            rules 15, 16
	Type1           rules 17, 18
	Type2           rules 19, 20
	Type3           rules 21, 22, 23
	Type5           rules 24, 25, 26, 27, 28, 29, 30
	Type4           rule  31
	BoolValue       rules 32, 33
	Angle           rule  34
	BasisState      rules 35, 36, 37, 38, 39, 40
	Bit             rule  41
	Gate            rules 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76
	ListVar         rules 77, 78
	ControlBasisState rule  79
	ControlBasisStates rule  80
	ListBasisState  rules 81, 82
	ControlBit      rule  83
	ControlBits     rule  84
	ListInteger     rules 85, 86
	Tuple           rule  87
	ControlTerm     rule  88
	ControlTerms    rule  89
	ListTerm        rules 90, 91
	Term1           rules 92, 93, 94, 95, 96, 97, 98, 99, 100
	Term2           rules 101, 102, 103, 104, 105, 106, 107
	Term3           rules 108, 109, 110, 111, 112, 113, 114, 115, 116, 117
	Term            rule  118
	Term4           rule  119
	List            rules 120, 121, 122, 123
	CaseExpression  rule  124
	ListCaseExpression rules 125, 126
	Arg             rule  127
	ListArg         rules 128, 129
	FunctionDefinition rules 130, 131
	FunctionType    rules 132, 133
	FunctionDeclaration rule  134
	ListFunctionDeclaration rules 135, 136

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0

	%start_pProgram -> . Program                        (rule 0)

	L_Var          shift, and enter state 8
	%eof           reduce using rule 135

	Var            goto state 3
	Program        goto state 4
	FunctionType   goto state 5
	FunctionDeclarationgoto state 6
	ListFunctionDeclarationgoto state 7

State 1

	Double -> . L_doubl                                 (rule 1)

	L_doubl        shift, and enter state 2


State 2

	Double -> L_doubl .                                 (rule 1)

	'$'            reduce using rule 1
	'('            reduce using rule 1
	'()'           reduce using rule 1
	')'            reduce using rule 1
	','            reduce using rule 1
	'->'           reduce using rule 1
	'.'            reduce using rule 1
	';'            reduce using rule 1
	'@+'           reduce using rule 1
	'@+i'          reduce using rule 1
	'@-'           reduce using rule 1
	'@-i'          reduce using rule 1
	'@0'           reduce using rule 1
	'@1'           reduce using rule 1
	'False'        reduce using rule 1
	'True'         reduce using rule 1
	'['            reduce using rule 1
	'[]'           reduce using rule 1
	']'            reduce using rule 1
	'case'         reduce using rule 1
	'else'         reduce using rule 1
	'gate'         reduce using rule 1
	'if'           reduce using rule 1
	'let'          reduce using rule 1
	'of'           reduce using rule 1
	'then'         reduce using rule 1
	'with'         reduce using rule 1
	'}'            reduce using rule 1
	L_integ        reduce using rule 1
	L_BitVariable  reduce using rule 1
	L_Var          reduce using rule 1
	L_Lambda       reduce using rule 1


State 3

	FunctionType -> Var . '::' Type                     (rule 132)

	'::'           shift, and enter state 11


State 4

	%start_pProgram -> Program .                        (rule 0)

	%eof           accept


State 5

	FunctionType -> FunctionType . ';'                  (rule 133)
	FunctionDeclaration -> FunctionType . ';' FunctionDefinition ';'    (rule 134)

	';'            shift, and enter state 10


State 6

	ListFunctionDeclaration -> FunctionDeclaration . ListFunctionDeclaration    (rule 136)

	L_Var          shift, and enter state 8
	%eof           reduce using rule 135

	Var            goto state 3
	FunctionType   goto state 5
	FunctionDeclarationgoto state 6
	ListFunctionDeclarationgoto state 9

State 7

	Program -> ListFunctionDeclaration .                (rule 14)

	%eof           reduce using rule 14


State 8

	Var -> L_Var .                                      (rule 4)

	'!'            reduce using rule 4
	'$'            reduce using rule 4
	'('            reduce using rule 4
	'()'           reduce using rule 4
	')'            reduce using rule 4
	','            reduce using rule 4
	'->'           reduce using rule 4
	'.'            reduce using rule 4
	'::'           reduce using rule 4
	';'            reduce using rule 4
	'<-'           reduce using rule 4
	'='            reduce using rule 4
	'@+'           reduce using rule 4
	'@+i'          reduce using rule 4
	'@-'           reduce using rule 4
	'@-i'          reduce using rule 4
	'@0'           reduce using rule 4
	'@1'           reduce using rule 4
	'Bit'          reduce using rule 4
	'Bool'         reduce using rule 4
	'False'        reduce using rule 4
	'Int'          reduce using rule 4
	'Qbit'         reduce using rule 4
	'True'         reduce using rule 4
	'['            reduce using rule 4
	'[]'           reduce using rule 4
	']'            reduce using rule 4
	'case'         reduce using rule 4
	'else'         reduce using rule 4
	'gate'         reduce using rule 4
	'if'           reduce using rule 4
	'let'          reduce using rule 4
	'of'           reduce using rule 4
	'then'         reduce using rule 4
	'with'         reduce using rule 4
	'}'            reduce using rule 4
	L_integ        reduce using rule 4
	L_BitVariable  reduce using rule 4
	L_Var          reduce using rule 4
	L_Lambda       reduce using rule 4


State 9

	ListFunctionDeclaration -> FunctionDeclaration ListFunctionDeclaration .    (rule 136)

	%eof           reduce using rule 136


State 10

	FunctionType -> FunctionType ';' .                  (rule 133)
	FunctionDeclaration -> FunctionType ';' . FunctionDefinition ';'    (rule 134)

	';'            reduce using rule 133
	L_Var          shift, and enter state 8

	Var            goto state 26
	FunctionDefinitiongoto state 27

State 11

	FunctionType -> Var '::' . Type                     (rule 132)

	'!'            shift, and enter state 18
	'('            shift, and enter state 19
	'()'           shift, and enter state 20
	'Bit'          shift, and enter state 21
	'Bool'         shift, and enter state 22
	'Int'          shift, and enter state 23
	'Qbit'         shift, and enter state 24
	'['            shift, and enter state 25

	Type           goto state 12
	Type1          goto state 13
	Type2          goto state 14
	Type3          goto state 15
	Type5          goto state 16
	Type4          goto state 17

State 12

	Type -> Type . '->' Type1                           (rule 15)
	FunctionType -> Var '::' Type .                     (rule 132)

	'->'           shift, and enter state 38
	';'            reduce using rule 132


State 13

	Type -> Type1 .                                     (rule 16)
	Type1 -> Type1 . '+' Type2                          (rule 17)

	')'            reduce using rule 16
	'+'            shift, and enter state 37
	'->'           reduce using rule 16
	'.'            reduce using rule 16
	';'            reduce using rule 16
	']'            reduce using rule 16


State 14

	Type1 -> Type2 .                                    (rule 18)
	Type2 -> Type2 . '*' Type3                          (rule 19)

	')'            reduce using rule 18
	'*'            shift, and enter state 36
	'+'            reduce using rule 18
	'->'           reduce using rule 18
	'.'            reduce using rule 18
	';'            reduce using rule 18
	']'            reduce using rule 18


State 15

	Type2 -> Type3 .                                    (rule 20)

	')'            reduce using rule 20
	'*'            reduce using rule 20
	'+'            reduce using rule 20
	'->'           reduce using rule 20
	'.'            reduce using rule 20
	';'            reduce using rule 20
	']'            reduce using rule 20


State 16

	Type4 -> Type5 .                                    (rule 31)

	')'            reduce using rule 31
	'*'            reduce using rule 31
	'**'           reduce using rule 31
	'+'            reduce using rule 31
	'->'           reduce using rule 31
	'.'            reduce using rule 31
	';'            reduce using rule 31
	']'            reduce using rule 31


State 17

	Type3 -> Type4 . '**' Integer                       (rule 21)
	Type3 -> Type4 .                                    (rule 23)

	')'            reduce using rule 23
	'*'            reduce using rule 23
	'**'           shift, and enter state 35
	'+'            reduce using rule 23
	'->'           reduce using rule 23
	'.'            reduce using rule 23
	';'            reduce using rule 23
	']'            reduce using rule 23


State 18

	Type3 -> '!' . Type4                                (rule 22)

	'('            shift, and enter state 19
	'()'           shift, and enter state 20
	'Bit'          shift, and enter state 21
	'Bool'         shift, and enter state 22
	'Int'          shift, and enter state 23
	'Qbit'         shift, and enter state 24
	'['            shift, and enter state 25

	Type5          goto state 16
	Type4          goto state 34

State 19

	Type5 -> '(' . Type ')'                             (rule 30)

	'!'            shift, and enter state 18
	'('            shift, and enter state 19
	'()'           shift, and enter state 20
	'Bit'          shift, and enter state 21
	'Bool'         shift, and enter state 22
	'Int'          shift, and enter state 23
	'Qbit'         shift, and enter state 24
	'['            shift, and enter state 25

	Type           goto state 33
	Type1          goto state 13
	Type2          goto state 14
	Type3          goto state 15
	Type5          goto state 16
	Type4          goto state 17

State 20

	Type5 -> '()' .                                     (rule 28)

	')'            reduce using rule 28
	'*'            reduce using rule 28
	'**'           reduce using rule 28
	'+'            reduce using rule 28
	'->'           reduce using rule 28
	'.'            reduce using rule 28
	';'            reduce using rule 28
	']'            reduce using rule 28


State 21

	Type5 -> 'Bit' .                                    (rule 25)

	')'            reduce using rule 25
	'*'            reduce using rule 25
	'**'           reduce using rule 25
	'+'            reduce using rule 25
	'->'           reduce using rule 25
	'.'            reduce using rule 25
	';'            reduce using rule 25
	']'            reduce using rule 25


State 22

	Type5 -> 'Bool' .                                   (rule 24)

	')'            reduce using rule 24
	'*'            reduce using rule 24
	'**'           reduce using rule 24
	'+'            reduce using rule 24
	'->'           reduce using rule 24
	'.'            reduce using rule 24
	';'            reduce using rule 24
	']'            reduce using rule 24


State 23

	Type5 -> 'Int' .                                    (rule 26)

	')'            reduce using rule 26
	'*'            reduce using rule 26
	'**'           reduce using rule 26
	'+'            reduce using rule 26
	'->'           reduce using rule 26
	'.'            reduce using rule 26
	';'            reduce using rule 26
	']'            reduce using rule 26


State 24

	Type5 -> 'Qbit' .                                   (rule 27)

	')'            reduce using rule 27
	'*'            reduce using rule 27
	'**'           reduce using rule 27
	'+'            reduce using rule 27
	'->'           reduce using rule 27
	'.'            reduce using rule 27
	';'            reduce using rule 27
	']'            reduce using rule 27


State 25

	Type5 -> '[' . Type ']'                             (rule 29)

	'!'            shift, and enter state 18
	'('            shift, and enter state 19
	'()'           shift, and enter state 20
	'Bit'          shift, and enter state 21
	'Bool'         shift, and enter state 22
	'Int'          shift, and enter state 23
	'Qbit'         shift, and enter state 24
	'['            shift, and enter state 25

	Type           goto state 32
	Type1          goto state 13
	Type2          goto state 14
	Type3          goto state 15
	Type5          goto state 16
	Type4          goto state 17

State 26

	FunctionDefinition -> Var . ListArg '=' Term        (rule 130)

	'='            reduce using rule 128
	L_Var          shift, and enter state 8

	Var            goto state 29
	Arg            goto state 30
	ListArg        goto state 31

State 27

	FunctionDefinition -> FunctionDefinition . ';'      (rule 131)
	FunctionDeclaration -> FunctionType ';' FunctionDefinition . ';'    (rule 134)

	';'            shift, and enter state 28


State 28

	FunctionDefinition -> FunctionDefinition ';' .      (rule 131)
	FunctionDeclaration -> FunctionType ';' FunctionDefinition ';' .    (rule 134)

	';'            reduce using rule 131
	L_Var          reduce using rule 134
	%eof           reduce using rule 134


State 29

	Arg -> Var .                                        (rule 127)

	'='            reduce using rule 127
	L_Var          reduce using rule 127


State 30

	ListArg -> Arg . ListArg                            (rule 129)

	'='            reduce using rule 128
	L_Var          shift, and enter state 8

	Var            goto state 29
	Arg            goto state 30
	ListArg        goto state 47

State 31

	FunctionDefinition -> Var ListArg . '=' Term        (rule 130)

	'='            shift, and enter state 46


State 32

	Type -> Type . '->' Type1                           (rule 15)
	Type5 -> '[' Type . ']'                             (rule 29)

	'->'           shift, and enter state 38
	']'            shift, and enter state 45


State 33

	Type -> Type . '->' Type1                           (rule 15)
	Type5 -> '(' Type . ')'                             (rule 30)

	')'            shift, and enter state 44
	'->'           shift, and enter state 38


State 34

	Type3 -> '!' Type4 .                                (rule 22)

	')'            reduce using rule 22
	'*'            reduce using rule 22
	'+'            reduce using rule 22
	'->'           reduce using rule 22
	'.'            reduce using rule 22
	';'            reduce using rule 22
	']'            reduce using rule 22


State 35

	Type3 -> Type4 '**' . Integer                       (rule 21)

	L_integ        shift, and enter state 43

	Integer        goto state 42

State 36

	Type2 -> Type2 '*' . Type3                          (rule 19)

	'!'            shift, and enter state 18
	'('            shift, and enter state 19
	'()'           shift, and enter state 20
	'Bit'          shift, and enter state 21
	'Bool'         shift, and enter state 22
	'Int'          shift, and enter state 23
	'Qbit'         shift, and enter state 24
	'['            shift, and enter state 25

	Type3          goto state 41
	Type5          goto state 16
	Type4          goto state 17

State 37

	Type1 -> Type1 '+' . Type2                          (rule 17)

	'!'            shift, and enter state 18
	'('            shift, and enter state 19
	'()'           shift, and enter state 20
	'Bit'          shift, and enter state 21
	'Bool'         shift, and enter state 22
	'Int'          shift, and enter state 23
	'Qbit'         shift, and enter state 24
	'['            shift, and enter state 25

	Type2          goto state 40
	Type3          goto state 15
	Type5          goto state 16
	Type4          goto state 17

State 38

	Type -> Type '->' . Type1                           (rule 15)

	'!'            shift, and enter state 18
	'('            shift, and enter state 19
	'()'           shift, and enter state 20
	'Bit'          shift, and enter state 21
	'Bool'         shift, and enter state 22
	'Int'          shift, and enter state 23
	'Qbit'         shift, and enter state 24
	'['            shift, and enter state 25

	Type1          goto state 39
	Type2          goto state 14
	Type3          goto state 15
	Type5          goto state 16
	Type4          goto state 17

State 39

	Type -> Type '->' Type1 .                           (rule 15)
	Type1 -> Type1 . '+' Type2                          (rule 17)

	')'            reduce using rule 15
	'+'            shift, and enter state 37
	'->'           reduce using rule 15
	'.'            reduce using rule 15
	';'            reduce using rule 15
	']'            reduce using rule 15


State 40

	Type1 -> Type1 '+' Type2 .                          (rule 17)
	Type2 -> Type2 . '*' Type3                          (rule 19)

	')'            reduce using rule 17
	'*'            shift, and enter state 36
	'+'            reduce using rule 17
	'->'           reduce using rule 17
	'.'            reduce using rule 17
	';'            reduce using rule 17
	']'            reduce using rule 17


State 41

	Type2 -> Type2 '*' Type3 .                          (rule 19)

	')'            reduce using rule 19
	'*'            reduce using rule 19
	'+'            reduce using rule 19
	'->'           reduce using rule 19
	'.'            reduce using rule 19
	';'            reduce using rule 19
	']'            reduce using rule 19


State 42

	Type3 -> Type4 '**' Integer .                       (rule 21)

	')'            reduce using rule 21
	'*'            reduce using rule 21
	'+'            reduce using rule 21
	'->'           reduce using rule 21
	'.'            reduce using rule 21
	';'            reduce using rule 21
	']'            reduce using rule 21


State 43

	Integer -> L_integ .                                (rule 2)

	'$'            reduce using rule 2
	'('            reduce using rule 2
	'()'           reduce using rule 2
	')'            reduce using rule 2
	'*'            reduce using rule 2
	'+'            reduce using rule 2
	','            reduce using rule 2
	'-'            reduce using rule 2
	'->'           reduce using rule 2
	'.'            reduce using rule 2
	'/'            reduce using rule 2
	';'            reduce using rule 2
	'@+'           reduce using rule 2
	'@+i'          reduce using rule 2
	'@-'           reduce using rule 2
	'@-i'          reduce using rule 2
	'@0'           reduce using rule 2
	'@1'           reduce using rule 2
	'False'        reduce using rule 2
	'True'         reduce using rule 2
	'['            reduce using rule 2
	'[]'           reduce using rule 2
	']'            reduce using rule 2
	'case'         reduce using rule 2
	'else'         reduce using rule 2
	'gate'         reduce using rule 2
	'if'           reduce using rule 2
	'let'          reduce using rule 2
	'of'           reduce using rule 2
	'then'         reduce using rule 2
	'with'         reduce using rule 2
	'}'            reduce using rule 2
	L_integ        reduce using rule 2
	L_BitVariable  reduce using rule 2
	L_Var          reduce using rule 2
	L_Lambda       reduce using rule 2


State 44

	Type5 -> '(' Type ')' .                             (rule 30)

	')'            reduce using rule 30
	'*'            reduce using rule 30
	'**'           reduce using rule 30
	'+'            reduce using rule 30
	'->'           reduce using rule 30
	'.'            reduce using rule 30
	';'            reduce using rule 30
	']'            reduce using rule 30


State 45

	Type5 -> '[' Type ']' .                             (rule 29)

	')'            reduce using rule 29
	'*'            reduce using rule 29
	'**'           reduce using rule 29
	'+'            reduce using rule 29
	'->'           reduce using rule 29
	'.'            reduce using rule 29
	';'            reduce using rule 29
	']'            reduce using rule 29


State 46

	FunctionDefinition -> Var ListArg '=' . Term        (rule 130)

	'('            shift, and enter state 65
	'()'           shift, and enter state 66
	'@+'           shift, and enter state 67
	'@+i'          shift, and enter state 68
	'@-'           shift, and enter state 69
	'@-i'          shift, and enter state 70
	'@0'           shift, and enter state 71
	'@1'           shift, and enter state 72
	'False'        shift, and enter state 73
	'True'         shift, and enter state 74
	'['            shift, and enter state 75
	'[]'           shift, and enter state 76
	'case'         shift, and enter state 77
	'gate'         shift, and enter state 78
	'if'           shift, and enter state 79
	'let'          shift, and enter state 80
	'with'         shift, and enter state 81
	L_integ        shift, and enter state 43
	L_BitVariable  shift, and enter state 82
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 83

	Integer        goto state 48
	BitVariable    goto state 49
	Var            goto state 50
	Lambda         goto state 51
	IntegerExpr    goto state 52
	IntegerExpr1   goto state 53
	IntegerExpr2   goto state 54
	BoolValue      goto state 55
	BasisState     goto state 56
	Bit            goto state 57
	Tuple          goto state 58
	Term1          goto state 59
	Term2          goto state 60
	Term3          goto state 61
	Term           goto state 62
	Term4          goto state 63
	List           goto state 64

State 47

	ListArg -> Arg ListArg .                            (rule 129)

	'='            reduce using rule 129


State 48

	IntegerExpr2 -> Integer .                           (rule 12)

	'$'            reduce using rule 12
	'('            reduce using rule 12
	'()'           reduce using rule 12
	')'            reduce using rule 12
	'*'            reduce using rule 12
	'+'            reduce using rule 12
	','            reduce using rule 12
	'-'            reduce using rule 12
	'->'           reduce using rule 12
	'.'            reduce using rule 12
	'/'            reduce using rule 12
	';'            reduce using rule 12
	'@+'           reduce using rule 12
	'@+i'          reduce using rule 12
	'@-'           reduce using rule 12
	'@-i'          reduce using rule 12
	'@0'           reduce using rule 12
	'@1'           reduce using rule 12
	'False'        reduce using rule 12
	'True'         reduce using rule 12
	'['            reduce using rule 12
	'[]'           reduce using rule 12
	']'            reduce using rule 12
	'case'         reduce using rule 12
	'else'         reduce using rule 12
	'gate'         reduce using rule 12
	'if'           reduce using rule 12
	'let'          reduce using rule 12
	'of'           reduce using rule 12
	'then'         reduce using rule 12
	'with'         reduce using rule 12
	'}'            reduce using rule 12
	L_integ        reduce using rule 12
	L_BitVariable  reduce using rule 12
	L_Var          reduce using rule 12
	L_Lambda       reduce using rule 12


State 49

	Bit -> BitVariable .                                (rule 41)

	'$'            reduce using rule 41
	'('            reduce using rule 41
	'()'           reduce using rule 41
	')'            reduce using rule 41
	','            reduce using rule 41
	'->'           reduce using rule 41
	'.'            reduce using rule 41
	';'            reduce using rule 41
	'@+'           reduce using rule 41
	'@+i'          reduce using rule 41
	'@-'           reduce using rule 41
	'@-i'          reduce using rule 41
	'@0'           reduce using rule 41
	'@1'           reduce using rule 41
	'False'        reduce using rule 41
	'True'         reduce using rule 41
	'['            reduce using rule 41
	'[]'           reduce using rule 41
	']'            reduce using rule 41
	'case'         reduce using rule 41
	'else'         reduce using rule 41
	'gate'         reduce using rule 41
	'if'           reduce using rule 41
	'let'          reduce using rule 41
	'of'           reduce using rule 41
	'then'         reduce using rule 41
	'with'         reduce using rule 41
	'}'            reduce using rule 41
	L_integ        reduce using rule 41
	L_BitVariable  reduce using rule 41
	L_Var          reduce using rule 41
	L_Lambda       reduce using rule 41


State 50

	Term1 -> Var . '<-' Term ';' Term                   (rule 95)
	Term1 -> Var . ',' ListVar '<-' Term ';' Term       (rule 96)
	Term3 -> Var .                                      (rule 108)

	'$'            reduce using rule 108
	'('            reduce using rule 108
	'()'           reduce using rule 108
	')'            reduce using rule 108
	','            shift, and enter state 139
			(reduce using rule 108)

	'->'           reduce using rule 108
	'.'            reduce using rule 108
	';'            reduce using rule 108
	'<-'           shift, and enter state 140
	'@+'           reduce using rule 108
	'@+i'          reduce using rule 108
	'@-'           reduce using rule 108
	'@-i'          reduce using rule 108
	'@0'           reduce using rule 108
	'@1'           reduce using rule 108
	'False'        reduce using rule 108
	'True'         reduce using rule 108
	'['            reduce using rule 108
	'[]'           reduce using rule 108
	']'            reduce using rule 108
	'case'         reduce using rule 108
	'else'         reduce using rule 108
	'gate'         reduce using rule 108
	'if'           reduce using rule 108
	'let'          reduce using rule 108
	'of'           reduce using rule 108
	'then'         reduce using rule 108
	'with'         reduce using rule 108
	'}'            reduce using rule 108
	L_integ        reduce using rule 108
	L_BitVariable  reduce using rule 108
	L_Var          reduce using rule 108
	L_Lambda       reduce using rule 108


State 51

	Term1 -> Lambda . Var Type '.' Term                 (rule 98)

	L_Var          shift, and enter state 8

	Var            goto state 138

State 52

	IntegerExpr -> IntegerExpr . '+' IntegerExpr1       (rule 6)
	IntegerExpr -> IntegerExpr . '-' IntegerExpr1       (rule 7)
	Term3 -> IntegerExpr .                              (rule 111)

	'$'            reduce using rule 111
	'('            reduce using rule 111
	'()'           reduce using rule 111
	')'            reduce using rule 111
	'+'            shift, and enter state 136
	','            reduce using rule 111
	'-'            shift, and enter state 137
	'->'           reduce using rule 111
	'.'            reduce using rule 111
	';'            reduce using rule 111
	'@+'           reduce using rule 111
	'@+i'          reduce using rule 111
	'@-'           reduce using rule 111
	'@-i'          reduce using rule 111
	'@0'           reduce using rule 111
	'@1'           reduce using rule 111
	'False'        reduce using rule 111
	'True'         reduce using rule 111
	'['            reduce using rule 111
	'[]'           reduce using rule 111
	']'            reduce using rule 111
	'case'         reduce using rule 111
	'else'         reduce using rule 111
	'gate'         reduce using rule 111
	'if'           reduce using rule 111
	'let'          reduce using rule 111
	'of'           reduce using rule 111
	'then'         reduce using rule 111
	'with'         reduce using rule 111
	'}'            reduce using rule 111
	L_integ        reduce using rule 111
	L_BitVariable  reduce using rule 111
	L_Var          reduce using rule 111
	L_Lambda       reduce using rule 111


State 53

	IntegerExpr -> IntegerExpr1 .                       (rule 8)
	IntegerExpr1 -> IntegerExpr1 . '*' IntegerExpr2     (rule 9)
	IntegerExpr1 -> IntegerExpr1 . '/' IntegerExpr2     (rule 10)

	'$'            reduce using rule 8
	'('            reduce using rule 8
	'()'           reduce using rule 8
	')'            reduce using rule 8
	'*'            shift, and enter state 134
	'+'            reduce using rule 8
	','            reduce using rule 8
	'-'            reduce using rule 8
	'->'           reduce using rule 8
	'.'            reduce using rule 8
	'/'            shift, and enter state 135
	';'            reduce using rule 8
	'@+'           reduce using rule 8
	'@+i'          reduce using rule 8
	'@-'           reduce using rule 8
	'@-i'          reduce using rule 8
	'@0'           reduce using rule 8
	'@1'           reduce using rule 8
	'False'        reduce using rule 8
	'True'         reduce using rule 8
	'['            reduce using rule 8
	'[]'           reduce using rule 8
	']'            reduce using rule 8
	'case'         reduce using rule 8
	'else'         reduce using rule 8
	'gate'         reduce using rule 8
	'if'           reduce using rule 8
	'let'          reduce using rule 8
	'of'           reduce using rule 8
	'then'         reduce using rule 8
	'with'         reduce using rule 8
	'}'            reduce using rule 8
	L_integ        reduce using rule 8
	L_BitVariable  reduce using rule 8
	L_Var          reduce using rule 8
	L_Lambda       reduce using rule 8


State 54

	IntegerExpr1 -> IntegerExpr2 .                      (rule 11)

	'$'            reduce using rule 11
	'('            reduce using rule 11
	'()'           reduce using rule 11
	')'            reduce using rule 11
	'*'            reduce using rule 11
	'+'            reduce using rule 11
	','            reduce using rule 11
	'-'            reduce using rule 11
	'->'           reduce using rule 11
	'.'            reduce using rule 11
	'/'            reduce using rule 11
	';'            reduce using rule 11
	'@+'           reduce using rule 11
	'@+i'          reduce using rule 11
	'@-'           reduce using rule 11
	'@-i'          reduce using rule 11
	'@0'           reduce using rule 11
	'@1'           reduce using rule 11
	'False'        reduce using rule 11
	'True'         reduce using rule 11
	'['            reduce using rule 11
	'[]'           reduce using rule 11
	']'            reduce using rule 11
	'case'         reduce using rule 11
	'else'         reduce using rule 11
	'gate'         reduce using rule 11
	'if'           reduce using rule 11
	'let'          reduce using rule 11
	'of'           reduce using rule 11
	'then'         reduce using rule 11
	'with'         reduce using rule 11
	'}'            reduce using rule 11
	L_integ        reduce using rule 11
	L_BitVariable  reduce using rule 11
	L_Var          reduce using rule 11
	L_Lambda       reduce using rule 11


State 55

	Term3 -> BoolValue .                                (rule 114)

	'$'            reduce using rule 114
	'('            reduce using rule 114
	'()'           reduce using rule 114
	')'            reduce using rule 114
	','            reduce using rule 114
	'->'           reduce using rule 114
	'.'            reduce using rule 114
	';'            reduce using rule 114
	'@+'           reduce using rule 114
	'@+i'          reduce using rule 114
	'@-'           reduce using rule 114
	'@-i'          reduce using rule 114
	'@0'           reduce using rule 114
	'@1'           reduce using rule 114
	'False'        reduce using rule 114
	'True'         reduce using rule 114
	'['            reduce using rule 114
	'[]'           reduce using rule 114
	']'            reduce using rule 114
	'case'         reduce using rule 114
	'else'         reduce using rule 114
	'gate'         reduce using rule 114
	'if'           reduce using rule 114
	'let'          reduce using rule 114
	'of'           reduce using rule 114
	'then'         reduce using rule 114
	'with'         reduce using rule 114
	'}'            reduce using rule 114
	L_integ        reduce using rule 114
	L_BitVariable  reduce using rule 114
	L_Var          reduce using rule 114
	L_Lambda       reduce using rule 114


State 56

	Term3 -> BasisState .                               (rule 110)

	'$'            reduce using rule 110
	'('            reduce using rule 110
	'()'           reduce using rule 110
	')'            reduce using rule 110
	','            reduce using rule 110
	'->'           reduce using rule 110
	'.'            reduce using rule 110
	';'            reduce using rule 110
	'@+'           reduce using rule 110
	'@+i'          reduce using rule 110
	'@-'           reduce using rule 110
	'@-i'          reduce using rule 110
	'@0'           reduce using rule 110
	'@1'           reduce using rule 110
	'False'        reduce using rule 110
	'True'         reduce using rule 110
	'['            reduce using rule 110
	'[]'           reduce using rule 110
	']'            reduce using rule 110
	'case'         reduce using rule 110
	'else'         reduce using rule 110
	'gate'         reduce using rule 110
	'if'           reduce using rule 110
	'let'          reduce using rule 110
	'of'           reduce using rule 110
	'then'         reduce using rule 110
	'with'         reduce using rule 110
	'}'            reduce using rule 110
	L_integ        reduce using rule 110
	L_BitVariable  reduce using rule 110
	L_Var          reduce using rule 110
	L_Lambda       reduce using rule 110


State 57

	Term3 -> Bit .                                      (rule 115)

	'$'            reduce using rule 115
	'('            reduce using rule 115
	'()'           reduce using rule 115
	')'            reduce using rule 115
	','            reduce using rule 115
	'->'           reduce using rule 115
	'.'            reduce using rule 115
	';'            reduce using rule 115
	'@+'           reduce using rule 115
	'@+i'          reduce using rule 115
	'@-'           reduce using rule 115
	'@-i'          reduce using rule 115
	'@0'           reduce using rule 115
	'@1'           reduce using rule 115
	'False'        reduce using rule 115
	'True'         reduce using rule 115
	'['            reduce using rule 115
	'[]'           reduce using rule 115
	']'            reduce using rule 115
	'case'         reduce using rule 115
	'else'         reduce using rule 115
	'gate'         reduce using rule 115
	'if'           reduce using rule 115
	'let'          reduce using rule 115
	'of'           reduce using rule 115
	'then'         reduce using rule 115
	'with'         reduce using rule 115
	'}'            reduce using rule 115
	L_integ        reduce using rule 115
	L_BitVariable  reduce using rule 115
	L_Var          reduce using rule 115
	L_Lambda       reduce using rule 115


State 58

	Term3 -> Tuple .                                    (rule 113)

	'$'            reduce using rule 113
	'('            reduce using rule 113
	'()'           reduce using rule 113
	')'            reduce using rule 113
	','            reduce using rule 113
	'->'           reduce using rule 113
	'.'            reduce using rule 113
	';'            reduce using rule 113
	'@+'           reduce using rule 113
	'@+i'          reduce using rule 113
	'@-'           reduce using rule 113
	'@-i'          reduce using rule 113
	'@0'           reduce using rule 113
	'@1'           reduce using rule 113
	'False'        reduce using rule 113
	'True'         reduce using rule 113
	'['            reduce using rule 113
	'[]'           reduce using rule 113
	']'            reduce using rule 113
	'case'         reduce using rule 113
	'else'         reduce using rule 113
	'gate'         reduce using rule 113
	'if'           reduce using rule 113
	'let'          reduce using rule 113
	'of'           reduce using rule 113
	'then'         reduce using rule 113
	'with'         reduce using rule 113
	'}'            reduce using rule 113
	L_integ        reduce using rule 113
	L_BitVariable  reduce using rule 113
	L_Var          reduce using rule 113
	L_Lambda       reduce using rule 113


State 59

	Term -> Term1 .                                     (rule 118)

	'('            reduce using rule 118
	'()'           reduce using rule 118
	')'            reduce using rule 118
	','            reduce using rule 118
	'->'           reduce using rule 118
	';'            reduce using rule 118
	'@+'           reduce using rule 118
	'@+i'          reduce using rule 118
	'@-'           reduce using rule 118
	'@-i'          reduce using rule 118
	'@0'           reduce using rule 118
	'@1'           reduce using rule 118
	'False'        reduce using rule 118
	'True'         reduce using rule 118
	'['            reduce using rule 118
	'[]'           reduce using rule 118
	']'            reduce using rule 118
	'case'         reduce using rule 118
	'else'         reduce using rule 118
	'gate'         reduce using rule 118
	'if'           reduce using rule 118
	'let'          reduce using rule 118
	'of'           reduce using rule 118
	'then'         reduce using rule 118
	'with'         reduce using rule 118
	'}'            reduce using rule 118
	L_integ        reduce using rule 118
	L_BitVariable  reduce using rule 118
	L_Var          reduce using rule 118
	L_Lambda       reduce using rule 118


State 60

	Term1 -> Term2 . '$' Term1                          (rule 99)
	Term1 -> Term2 .                                    (rule 100)
	Term2 -> Term2 . Term3                              (rule 105)
	Term2 -> Term2 . '.' Term3                          (rule 106)

	'$'            shift, and enter state 132
	'('            shift, and enter state 65
			(reduce using rule 100)

	'()'           shift, and enter state 66
			(reduce using rule 100)

	')'            reduce using rule 100
	','            reduce using rule 100
	'->'           reduce using rule 100
	'.'            shift, and enter state 133
	';'            reduce using rule 100
	'@+'           shift, and enter state 67
			(reduce using rule 100)

	'@+i'          shift, and enter state 68
			(reduce using rule 100)

	'@-'           shift, and enter state 69
			(reduce using rule 100)

	'@-i'          shift, and enter state 70
			(reduce using rule 100)

	'@0'           shift, and enter state 71
			(reduce using rule 100)

	'@1'           shift, and enter state 72
			(reduce using rule 100)

	'False'        shift, and enter state 73
			(reduce using rule 100)

	'True'         shift, and enter state 74
			(reduce using rule 100)

	'['            shift, and enter state 75
			(reduce using rule 100)

	'[]'           shift, and enter state 76
			(reduce using rule 100)

	']'            reduce using rule 100
	'case'         reduce using rule 100
	'else'         reduce using rule 100
	'gate'         shift, and enter state 78
			(reduce using rule 100)

	'if'           reduce using rule 100
	'let'          reduce using rule 100
	'of'           reduce using rule 100
	'then'         reduce using rule 100
	'with'         reduce using rule 100
	'}'            reduce using rule 100
	L_integ        shift, and enter state 43
			(reduce using rule 100)

	L_BitVariable  shift, and enter state 82
			(reduce using rule 100)

	L_Var          shift, and enter state 8
			(reduce using rule 100)

	L_Lambda       reduce using rule 100

	Integer        goto state 48
	BitVariable    goto state 49
	Var            goto state 130
	IntegerExpr    goto state 52
	IntegerExpr1   goto state 53
	IntegerExpr2   goto state 54
	BoolValue      goto state 55
	BasisState     goto state 56
	Bit            goto state 57
	Tuple          goto state 58
	Term3          goto state 131
	Term4          goto state 63
	List           goto state 64

State 61

	Term2 -> Term3 .                                    (rule 107)

	'$'            reduce using rule 107
	'('            reduce using rule 107
	'()'           reduce using rule 107
	')'            reduce using rule 107
	','            reduce using rule 107
	'->'           reduce using rule 107
	'.'            reduce using rule 107
	';'            reduce using rule 107
	'@+'           reduce using rule 107
	'@+i'          reduce using rule 107
	'@-'           reduce using rule 107
	'@-i'          reduce using rule 107
	'@0'           reduce using rule 107
	'@1'           reduce using rule 107
	'False'        reduce using rule 107
	'True'         reduce using rule 107
	'['            reduce using rule 107
	'[]'           reduce using rule 107
	']'            reduce using rule 107
	'case'         reduce using rule 107
	'else'         reduce using rule 107
	'gate'         reduce using rule 107
	'if'           reduce using rule 107
	'let'          reduce using rule 107
	'of'           reduce using rule 107
	'then'         reduce using rule 107
	'with'         reduce using rule 107
	'}'            reduce using rule 107
	L_integ        reduce using rule 107
	L_BitVariable  reduce using rule 107
	L_Var          reduce using rule 107
	L_Lambda       reduce using rule 107


State 62

	FunctionDefinition -> Var ListArg '=' Term .        (rule 130)

	';'            reduce using rule 130


State 63

	Term3 -> Term4 .                                    (rule 117)
	List -> Term4 . ':' List                            (rule 123)

	'$'            reduce using rule 117
	'('            reduce using rule 117
	'()'           reduce using rule 117
	')'            reduce using rule 117
	','            reduce using rule 117
	'->'           reduce using rule 117
	'.'            reduce using rule 117
	':'            shift, and enter state 129
	';'            reduce using rule 117
	'@+'           reduce using rule 117
	'@+i'          reduce using rule 117
	'@-'           reduce using rule 117
	'@-i'          reduce using rule 117
	'@0'           reduce using rule 117
	'@1'           reduce using rule 117
	'False'        reduce using rule 117
	'True'         reduce using rule 117
	'['            reduce using rule 117
	'[]'           reduce using rule 117
	']'            reduce using rule 117
	'case'         reduce using rule 117
	'else'         reduce using rule 117
	'gate'         reduce using rule 117
	'if'           reduce using rule 117
	'let'          reduce using rule 117
	'of'           reduce using rule 117
	'then'         reduce using rule 117
	'with'         reduce using rule 117
	'}'            reduce using rule 117
	L_integ        reduce using rule 117
	L_BitVariable  reduce using rule 117
	L_Var          reduce using rule 117
	L_Lambda       reduce using rule 117


State 64

	Term3 -> List .                                     (rule 116)

	'$'            reduce using rule 116
	'('            reduce using rule 116
	'()'           reduce using rule 116
	')'            reduce using rule 116
	','            reduce using rule 116
	'->'           reduce using rule 116
	'.'            reduce using rule 116
	';'            reduce using rule 116
	'@+'           reduce using rule 116
	'@+i'          reduce using rule 116
	'@-'           reduce using rule 116
	'@-i'          reduce using rule 116
	'@0'           reduce using rule 116
	'@1'           reduce using rule 116
	'False'        reduce using rule 116
	'True'         reduce using rule 116
	'['            reduce using rule 116
	'[]'           reduce using rule 116
	']'            reduce using rule 116
	'case'         reduce using rule 116
	'else'         reduce using rule 116
	'gate'         reduce using rule 116
	'if'           reduce using rule 116
	'let'          reduce using rule 116
	'of'           reduce using rule 116
	'then'         reduce using rule 116
	'with'         reduce using rule 116
	'}'            reduce using rule 116
	L_integ        reduce using rule 116
	L_BitVariable  reduce using rule 116
	L_Var          reduce using rule 116
	L_Lambda       reduce using rule 116


State 65

	IntegerExpr2 -> '(' . IntegerExpr ')'               (rule 13)
	Tuple -> '(' . Term ',' ListTerm ')'                (rule 87)
	Term4 -> '(' . Term ')'                             (rule 119)

	'('            shift, and enter state 65
	'()'           shift, and enter state 66
	'@+'           shift, and enter state 67
	'@+i'          shift, and enter state 68
	'@-'           shift, and enter state 69
	'@-i'          shift, and enter state 70
	'@0'           shift, and enter state 71
	'@1'           shift, and enter state 72
	'False'        shift, and enter state 73
	'True'         shift, and enter state 74
	'['            shift, and enter state 75
	'[]'           shift, and enter state 76
	'case'         shift, and enter state 77
	'gate'         shift, and enter state 78
	'if'           shift, and enter state 79
	'let'          shift, and enter state 80
	'with'         shift, and enter state 81
	L_integ        shift, and enter state 43
	L_BitVariable  shift, and enter state 82
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 83

	Integer        goto state 48
	BitVariable    goto state 49
	Var            goto state 50
	Lambda         goto state 51
	IntegerExpr    goto state 127
	IntegerExpr1   goto state 53
	IntegerExpr2   goto state 54
	BoolValue      goto state 55
	BasisState     goto state 56
	Bit            goto state 57
	Tuple          goto state 58
	Term1          goto state 59
	Term2          goto state 60
	Term3          goto state 61
	Term           goto state 128
	Term4          goto state 63
	List           goto state 64

State 66

	Term3 -> '()' .                                     (rule 109)

	'$'            reduce using rule 109
	'('            reduce using rule 109
	'()'           reduce using rule 109
	')'            reduce using rule 109
	','            reduce using rule 109
	'->'           reduce using rule 109
	'.'            reduce using rule 109
	';'            reduce using rule 109
	'@+'           reduce using rule 109
	'@+i'          reduce using rule 109
	'@-'           reduce using rule 109
	'@-i'          reduce using rule 109
	'@0'           reduce using rule 109
	'@1'           reduce using rule 109
	'False'        reduce using rule 109
	'True'         reduce using rule 109
	'['            reduce using rule 109
	'[]'           reduce using rule 109
	']'            reduce using rule 109
	'case'         reduce using rule 109
	'else'         reduce using rule 109
	'gate'         reduce using rule 109
	'if'           reduce using rule 109
	'let'          reduce using rule 109
	'of'           reduce using rule 109
	'then'         reduce using rule 109
	'with'         reduce using rule 109
	'}'            reduce using rule 109
	L_integ        reduce using rule 109
	L_BitVariable  reduce using rule 109
	L_Var          reduce using rule 109
	L_Lambda       reduce using rule 109


State 67

	BasisState -> '@+' .                                (rule 37)

	'$'            reduce using rule 37
	'('            reduce using rule 37
	'()'           reduce using rule 37
	')'            reduce using rule 37
	','            reduce using rule 37
	'->'           reduce using rule 37
	'.'            reduce using rule 37
	';'            reduce using rule 37
	'@+'           reduce using rule 37
	'@+i'          reduce using rule 37
	'@-'           reduce using rule 37
	'@-i'          reduce using rule 37
	'@0'           reduce using rule 37
	'@1'           reduce using rule 37
	'False'        reduce using rule 37
	'True'         reduce using rule 37
	'['            reduce using rule 37
	'[]'           reduce using rule 37
	']'            reduce using rule 37
	'case'         reduce using rule 37
	'else'         reduce using rule 37
	'gate'         reduce using rule 37
	'if'           reduce using rule 37
	'let'          reduce using rule 37
	'of'           reduce using rule 37
	'then'         reduce using rule 37
	'with'         reduce using rule 37
	'}'            reduce using rule 37
	L_integ        reduce using rule 37
	L_BitVariable  reduce using rule 37
	L_Var          reduce using rule 37
	L_Lambda       reduce using rule 37


State 68

	BasisState -> '@+i' .                               (rule 39)

	'$'            reduce using rule 39
	'('            reduce using rule 39
	'()'           reduce using rule 39
	')'            reduce using rule 39
	','            reduce using rule 39
	'->'           reduce using rule 39
	'.'            reduce using rule 39
	';'            reduce using rule 39
	'@+'           reduce using rule 39
	'@+i'          reduce using rule 39
	'@-'           reduce using rule 39
	'@-i'          reduce using rule 39
	'@0'           reduce using rule 39
	'@1'           reduce using rule 39
	'False'        reduce using rule 39
	'True'         reduce using rule 39
	'['            reduce using rule 39
	'[]'           reduce using rule 39
	']'            reduce using rule 39
	'case'         reduce using rule 39
	'else'         reduce using rule 39
	'gate'         reduce using rule 39
	'if'           reduce using rule 39
	'let'          reduce using rule 39
	'of'           reduce using rule 39
	'then'         reduce using rule 39
	'with'         reduce using rule 39
	'}'            reduce using rule 39
	L_integ        reduce using rule 39
	L_BitVariable  reduce using rule 39
	L_Var          reduce using rule 39
	L_Lambda       reduce using rule 39


State 69

	BasisState -> '@-' .                                (rule 38)

	'$'            reduce using rule 38
	'('            reduce using rule 38
	'()'           reduce using rule 38
	')'            reduce using rule 38
	','            reduce using rule 38
	'->'           reduce using rule 38
	'.'            reduce using rule 38
	';'            reduce using rule 38
	'@+'           reduce using rule 38
	'@+i'          reduce using rule 38
	'@-'           reduce using rule 38
	'@-i'          reduce using rule 38
	'@0'           reduce using rule 38
	'@1'           reduce using rule 38
	'False'        reduce using rule 38
	'True'         reduce using rule 38
	'['            reduce using rule 38
	'[]'           reduce using rule 38
	']'            reduce using rule 38
	'case'         reduce using rule 38
	'else'         reduce using rule 38
	'gate'         reduce using rule 38
	'if'           reduce using rule 38
	'let'          reduce using rule 38
	'of'           reduce using rule 38
	'then'         reduce using rule 38
	'with'         reduce using rule 38
	'}'            reduce using rule 38
	L_integ        reduce using rule 38
	L_BitVariable  reduce using rule 38
	L_Var          reduce using rule 38
	L_Lambda       reduce using rule 38


State 70

	BasisState -> '@-i' .                               (rule 40)

	'$'            reduce using rule 40
	'('            reduce using rule 40
	'()'           reduce using rule 40
	')'            reduce using rule 40
	','            reduce using rule 40
	'->'           reduce using rule 40
	'.'            reduce using rule 40
	';'            reduce using rule 40
	'@+'           reduce using rule 40
	'@+i'          reduce using rule 40
	'@-'           reduce using rule 40
	'@-i'          reduce using rule 40
	'@0'           reduce using rule 40
	'@1'           reduce using rule 40
	'False'        reduce using rule 40
	'True'         reduce using rule 40
	'['            reduce using rule 40
	'[]'           reduce using rule 40
	']'            reduce using rule 40
	'case'         reduce using rule 40
	'else'         reduce using rule 40
	'gate'         reduce using rule 40
	'if'           reduce using rule 40
	'let'          reduce using rule 40
	'of'           reduce using rule 40
	'then'         reduce using rule 40
	'with'         reduce using rule 40
	'}'            reduce using rule 40
	L_integ        reduce using rule 40
	L_BitVariable  reduce using rule 40
	L_Var          reduce using rule 40
	L_Lambda       reduce using rule 40


State 71

	BasisState -> '@0' .                                (rule 35)

	'$'            reduce using rule 35
	'('            reduce using rule 35
	'()'           reduce using rule 35
	')'            reduce using rule 35
	','            reduce using rule 35
	'->'           reduce using rule 35
	'.'            reduce using rule 35
	';'            reduce using rule 35
	'@+'           reduce using rule 35
	'@+i'          reduce using rule 35
	'@-'           reduce using rule 35
	'@-i'          reduce using rule 35
	'@0'           reduce using rule 35
	'@1'           reduce using rule 35
	'False'        reduce using rule 35
	'True'         reduce using rule 35
	'['            reduce using rule 35
	'[]'           reduce using rule 35
	']'            reduce using rule 35
	'case'         reduce using rule 35
	'else'         reduce using rule 35
	'gate'         reduce using rule 35
	'if'           reduce using rule 35
	'let'          reduce using rule 35
	'of'           reduce using rule 35
	'then'         reduce using rule 35
	'with'         reduce using rule 35
	'}'            reduce using rule 35
	L_integ        reduce using rule 35
	L_BitVariable  reduce using rule 35
	L_Var          reduce using rule 35
	L_Lambda       reduce using rule 35


State 72

	BasisState -> '@1' .                                (rule 36)

	'$'            reduce using rule 36
	'('            reduce using rule 36
	'()'           reduce using rule 36
	')'            reduce using rule 36
	','            reduce using rule 36
	'->'           reduce using rule 36
	'.'            reduce using rule 36
	';'            reduce using rule 36
	'@+'           reduce using rule 36
	'@+i'          reduce using rule 36
	'@-'           reduce using rule 36
	'@-i'          reduce using rule 36
	'@0'           reduce using rule 36
	'@1'           reduce using rule 36
	'False'        reduce using rule 36
	'True'         reduce using rule 36
	'['            reduce using rule 36
	'[]'           reduce using rule 36
	']'            reduce using rule 36
	'case'         reduce using rule 36
	'else'         reduce using rule 36
	'gate'         reduce using rule 36
	'if'           reduce using rule 36
	'let'          reduce using rule 36
	'of'           reduce using rule 36
	'then'         reduce using rule 36
	'with'         reduce using rule 36
	'}'            reduce using rule 36
	L_integ        reduce using rule 36
	L_BitVariable  reduce using rule 36
	L_Var          reduce using rule 36
	L_Lambda       reduce using rule 36


State 73

	BoolValue -> 'False' .                              (rule 33)

	'$'            reduce using rule 33
	'('            reduce using rule 33
	'()'           reduce using rule 33
	')'            reduce using rule 33
	','            reduce using rule 33
	'->'           reduce using rule 33
	'.'            reduce using rule 33
	';'            reduce using rule 33
	'@+'           reduce using rule 33
	'@+i'          reduce using rule 33
	'@-'           reduce using rule 33
	'@-i'          reduce using rule 33
	'@0'           reduce using rule 33
	'@1'           reduce using rule 33
	'False'        reduce using rule 33
	'True'         reduce using rule 33
	'['            reduce using rule 33
	'[]'           reduce using rule 33
	']'            reduce using rule 33
	'case'         reduce using rule 33
	'else'         reduce using rule 33
	'gate'         reduce using rule 33
	'if'           reduce using rule 33
	'let'          reduce using rule 33
	'of'           reduce using rule 33
	'then'         reduce using rule 33
	'with'         reduce using rule 33
	'}'            reduce using rule 33
	L_integ        reduce using rule 33
	L_BitVariable  reduce using rule 33
	L_Var          reduce using rule 33
	L_Lambda       reduce using rule 33


State 74

	BoolValue -> 'True' .                               (rule 32)

	'$'            reduce using rule 32
	'('            reduce using rule 32
	'()'           reduce using rule 32
	')'            reduce using rule 32
	','            reduce using rule 32
	'->'           reduce using rule 32
	'.'            reduce using rule 32
	';'            reduce using rule 32
	'@+'           reduce using rule 32
	'@+i'          reduce using rule 32
	'@-'           reduce using rule 32
	'@-i'          reduce using rule 32
	'@0'           reduce using rule 32
	'@1'           reduce using rule 32
	'False'        reduce using rule 32
	'True'         reduce using rule 32
	'['            reduce using rule 32
	'[]'           reduce using rule 32
	']'            reduce using rule 32
	'case'         reduce using rule 32
	'else'         reduce using rule 32
	'gate'         reduce using rule 32
	'if'           reduce using rule 32
	'let'          reduce using rule 32
	'of'           reduce using rule 32
	'then'         reduce using rule 32
	'with'         reduce using rule 32
	'}'            reduce using rule 32
	L_integ        reduce using rule 32
	L_BitVariable  reduce using rule 32
	L_Var          reduce using rule 32
	L_Lambda       reduce using rule 32


State 75

	List -> '[' . Term ']'                              (rule 121)
	List -> '[' . Term ',' ListTerm ']'                 (rule 122)

	'('            shift, and enter state 65
	'()'           shift, and enter state 66
	'@+'           shift, and enter state 67
	'@+i'          shift, and enter state 68
	'@-'           shift, and enter state 69
	'@-i'          shift, and enter state 70
	'@0'           shift, and enter state 71
	'@1'           shift, and enter state 72
	'False'        shift, and enter state 73
	'True'         shift, and enter state 74
	'['            shift, and enter state 75
	'[]'           shift, and enter state 76
	'case'         shift, and enter state 77
	'gate'         shift, and enter state 78
	'if'           shift, and enter state 79
	'let'          shift, and enter state 80
	'with'         shift, and enter state 81
	L_integ        shift, and enter state 43
	L_BitVariable  shift, and enter state 82
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 83

	Integer        goto state 48
	BitVariable    goto state 49
	Var            goto state 50
	Lambda         goto state 51
	IntegerExpr    goto state 52
	IntegerExpr1   goto state 53
	IntegerExpr2   goto state 54
	BoolValue      goto state 55
	BasisState     goto state 56
	Bit            goto state 57
	Tuple          goto state 58
	Term1          goto state 59
	Term2          goto state 60
	Term3          goto state 61
	Term           goto state 126
	Term4          goto state 63
	List           goto state 64

State 76

	List -> '[]' .                                      (rule 120)

	'$'            reduce using rule 120
	'('            reduce using rule 120
	'()'           reduce using rule 120
	')'            reduce using rule 120
	','            reduce using rule 120
	'->'           reduce using rule 120
	'.'            reduce using rule 120
	';'            reduce using rule 120
	'@+'           reduce using rule 120
	'@+i'          reduce using rule 120
	'@-'           reduce using rule 120
	'@-i'          reduce using rule 120
	'@0'           reduce using rule 120
	'@1'           reduce using rule 120
	'False'        reduce using rule 120
	'True'         reduce using rule 120
	'['            reduce using rule 120
	'[]'           reduce using rule 120
	']'            reduce using rule 120
	'case'         reduce using rule 120
	'else'         reduce using rule 120
	'gate'         reduce using rule 120
	'if'           reduce using rule 120
	'let'          reduce using rule 120
	'of'           reduce using rule 120
	'then'         reduce using rule 120
	'with'         reduce using rule 120
	'}'            reduce using rule 120
	L_integ        reduce using rule 120
	L_BitVariable  reduce using rule 120
	L_Var          reduce using rule 120
	L_Lambda       reduce using rule 120


State 77

	Term1 -> 'case' . Term 'of' CaseExpression ListCaseExpression    (rule 97)

	'('            shift, and enter state 65
	'()'           shift, and enter state 66
	'@+'           shift, and enter state 67
	'@+i'          shift, and enter state 68
	'@-'           shift, and enter state 69
	'@-i'          shift, and enter state 70
	'@0'           shift, and enter state 71
	'@1'           shift, and enter state 72
	'False'        shift, and enter state 73
	'True'         shift, and enter state 74
	'['            shift, and enter state 75
	'[]'           shift, and enter state 76
	'case'         shift, and enter state 77
	'gate'         shift, and enter state 78
	'if'           shift, and enter state 79
	'let'          shift, and enter state 80
	'with'         shift, and enter state 81
	L_integ        shift, and enter state 43
	L_BitVariable  shift, and enter state 82
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 83

	Integer        goto state 48
	BitVariable    goto state 49
	Var            goto state 50
	Lambda         goto state 51
	IntegerExpr    goto state 52
	IntegerExpr1   goto state 53
	IntegerExpr2   goto state 54
	BoolValue      goto state 55
	BasisState     goto state 56
	Bit            goto state 57
	Tuple          goto state 58
	Term1          goto state 59
	Term2          goto state 60
	Term3          goto state 61
	Term           goto state 125
	Term4          goto state 63
	List           goto state 64

State 78

	Term3 -> 'gate' . Gate                              (rule 112)

	'FSWAP'        shift, and enter state 90
	'H'            shift, and enter state 91
	'ID'           shift, and enter state 92
	'ISWAP'        shift, and enter state 93
	'QFT'          shift, and enter state 94
	'QFT_DAG'      shift, and enter state 95
	'ROOT_SWAP'    shift, and enter state 96
	'ROOT_SWAP_DAG'shift, and enter state 97
	'ROOT_X'       shift, and enter state 98
	'ROOT_X_DAG'   shift, and enter state 99
	'ROOT_Y'       shift, and enter state 100
	'ROOT_Y_DAG'   shift, and enter state 101
	'ROOT_Z'       shift, and enter state 102
	'ROOT_Z_DAG'   shift, and enter state 103
	'RX'           shift, and enter state 104
	'RY'           shift, and enter state 105
	'RZ'           shift, and enter state 106
	'S'            shift, and enter state 107
	'SQRT_SWAP'    shift, and enter state 108
	'SQRT_SWAP_DAG'shift, and enter state 109
	'SQRT_X'       shift, and enter state 110
	'SQRT_X_DAG'   shift, and enter state 111
	'SQRT_Y'       shift, and enter state 112
	'SQRT_Y_DAG'   shift, and enter state 113
	'SWAP'         shift, and enter state 114
	'SWAP_THETA'   shift, and enter state 115
	'S_DAG'        shift, and enter state 116
	'T'            shift, and enter state 117
	'T_DAG'        shift, and enter state 118
	'U1'           shift, and enter state 119
	'U2'           shift, and enter state 120
	'U3'           shift, and enter state 121
	'X'            shift, and enter state 122
	'Y'            shift, and enter state 123
	'Z'            shift, and enter state 124

	Gate           goto state 89

State 79

	Term1 -> 'if' . Term 'then' Term 'else' Term        (rule 92)

	'('            shift, and enter state 65
	'()'           shift, and enter state 66
	'@+'           shift, and enter state 67
	'@+i'          shift, and enter state 68
	'@-'           shift, and enter state 69
	'@-i'          shift, and enter state 70
	'@0'           shift, and enter state 71
	'@1'           shift, and enter state 72
	'False'        shift, and enter state 73
	'True'         shift, and enter state 74
	'['            shift, and enter state 75
	'[]'           shift, and enter state 76
	'case'         shift, and enter state 77
	'gate'         shift, and enter state 78
	'if'           shift, and enter state 79
	'let'          shift, and enter state 80
	'with'         shift, and enter state 81
	L_integ        shift, and enter state 43
	L_BitVariable  shift, and enter state 82
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 83

	Integer        goto state 48
	BitVariable    goto state 49
	Var            goto state 50
	Lambda         goto state 51
	IntegerExpr    goto state 52
	IntegerExpr1   goto state 53
	IntegerExpr2   goto state 54
	BoolValue      goto state 55
	BasisState     goto state 56
	Bit            goto state 57
	Tuple          goto state 58
	Term1          goto state 59
	Term2          goto state 60
	Term3          goto state 61
	Term           goto state 88
	Term4          goto state 63
	List           goto state 64

State 80

	Term1 -> 'let' . '{' Var '=' Term '}' 'in' Term     (rule 93)
	Term1 -> 'let' . '{' '(' Var ',' ListVar ')' '=' Term '}' 'in' Term    (rule 94)

	'{'            shift, and enter state 87


State 81

	Term2 -> 'with' . ControlTerm 'ctrl' ControlBasisState    (rule 101)
	Term2 -> 'with' . ControlTerms 'ctrl' ControlBasisStates    (rule 102)
	Term2 -> 'with' . ControlTerm 'ctrl' ControlBit     (rule 103)
	Term2 -> 'with' . ControlTerms 'ctrl' ControlBits    (rule 104)

	'['            shift, and enter state 86

	ControlTerm    goto state 84
	ControlTerms   goto state 85

State 82

	BitVariable -> L_BitVariable .                      (rule 3)

	'$'            reduce using rule 3
	'('            reduce using rule 3
	'()'           reduce using rule 3
	')'            reduce using rule 3
	','            reduce using rule 3
	'->'           reduce using rule 3
	'.'            reduce using rule 3
	';'            reduce using rule 3
	'@+'           reduce using rule 3
	'@+i'          reduce using rule 3
	'@-'           reduce using rule 3
	'@-i'          reduce using rule 3
	'@0'           reduce using rule 3
	'@1'           reduce using rule 3
	'False'        reduce using rule 3
	'True'         reduce using rule 3
	'['            reduce using rule 3
	'[]'           reduce using rule 3
	']'            reduce using rule 3
	'case'         reduce using rule 3
	'else'         reduce using rule 3
	'gate'         reduce using rule 3
	'if'           reduce using rule 3
	'let'          reduce using rule 3
	'of'           reduce using rule 3
	'then'         reduce using rule 3
	'with'         reduce using rule 3
	'}'            reduce using rule 3
	L_integ        reduce using rule 3
	L_BitVariable  reduce using rule 3
	L_Var          reduce using rule 3
	L_Lambda       reduce using rule 3


State 83

	Lambda -> L_Lambda .                                (rule 5)

	L_Var          reduce using rule 5


State 84

	Term2 -> 'with' ControlTerm . 'ctrl' ControlBasisState    (rule 101)
	Term2 -> 'with' ControlTerm . 'ctrl' ControlBit     (rule 103)

	'ctrl'         shift, and enter state 184


State 85

	Term2 -> 'with' ControlTerms . 'ctrl' ControlBasisStates    (rule 102)
	Term2 -> 'with' ControlTerms . 'ctrl' ControlBits    (rule 104)

	'ctrl'         shift, and enter state 183


State 86

	ControlTerm -> '[' . Term ']'                       (rule 88)
	ControlTerms -> '[' . Term ',' ListTerm ']'         (rule 89)

	'('            shift, and enter state 65
	'()'           shift, and enter state 66
	'@+'           shift, and enter state 67
	'@+i'          shift, and enter state 68
	'@-'           shift, and enter state 69
	'@-i'          shift, and enter state 70
	'@0'           shift, and enter state 71
	'@1'           shift, and enter state 72
	'False'        shift, and enter state 73
	'True'         shift, and enter state 74
	'['            shift, and enter state 75
	'[]'           shift, and enter state 76
	'case'         shift, and enter state 77
	'gate'         shift, and enter state 78
	'if'           shift, and enter state 79
	'let'          shift, and enter state 80
	'with'         shift, and enter state 81
	L_integ        shift, and enter state 43
	L_BitVariable  shift, and enter state 82
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 83

	Integer        goto state 48
	BitVariable    goto state 49
	Var            goto state 50
	Lambda         goto state 51
	IntegerExpr    goto state 52
	IntegerExpr1   goto state 53
	IntegerExpr2   goto state 54
	BoolValue      goto state 55
	BasisState     goto state 56
	Bit            goto state 57
	Tuple          goto state 58
	Term1          goto state 59
	Term2          goto state 60
	Term3          goto state 61
	Term           goto state 182
	Term4          goto state 63
	List           goto state 64

State 87

	Term1 -> 'let' '{' . Var '=' Term '}' 'in' Term     (rule 93)
	Term1 -> 'let' '{' . '(' Var ',' ListVar ')' '=' Term '}' 'in' Term    (rule 94)

	'('            shift, and enter state 181
	L_Var          shift, and enter state 8

	Var            goto state 180

State 88

	Term1 -> 'if' Term . 'then' Term 'else' Term        (rule 92)

	'then'         shift, and enter state 179


State 89

	Term3 -> 'gate' Gate .                              (rule 112)

	'$'            reduce using rule 112
	'('            reduce using rule 112
	'()'           reduce using rule 112
	')'            reduce using rule 112
	','            reduce using rule 112
	'->'           reduce using rule 112
	'.'            reduce using rule 112
	';'            reduce using rule 112
	'@+'           reduce using rule 112
	'@+i'          reduce using rule 112
	'@-'           reduce using rule 112
	'@-i'          reduce using rule 112
	'@0'           reduce using rule 112
	'@1'           reduce using rule 112
	'False'        reduce using rule 112
	'True'         reduce using rule 112
	'['            reduce using rule 112
	'[]'           reduce using rule 112
	']'            reduce using rule 112
	'case'         reduce using rule 112
	'else'         reduce using rule 112
	'gate'         reduce using rule 112
	'if'           reduce using rule 112
	'let'          reduce using rule 112
	'of'           reduce using rule 112
	'then'         reduce using rule 112
	'with'         reduce using rule 112
	'}'            reduce using rule 112
	L_integ        reduce using rule 112
	L_BitVariable  reduce using rule 112
	L_Var          reduce using rule 112
	L_Lambda       reduce using rule 112


State 90

	Gate -> 'FSWAP' .                                   (rule 71)

	'$'            reduce using rule 71
	'('            reduce using rule 71
	'()'           reduce using rule 71
	')'            reduce using rule 71
	','            reduce using rule 71
	'->'           reduce using rule 71
	'.'            reduce using rule 71
	';'            reduce using rule 71
	'@+'           reduce using rule 71
	'@+i'          reduce using rule 71
	'@-'           reduce using rule 71
	'@-i'          reduce using rule 71
	'@0'           reduce using rule 71
	'@1'           reduce using rule 71
	'False'        reduce using rule 71
	'True'         reduce using rule 71
	'['            reduce using rule 71
	'[]'           reduce using rule 71
	']'            reduce using rule 71
	'case'         reduce using rule 71
	'else'         reduce using rule 71
	'gate'         reduce using rule 71
	'if'           reduce using rule 71
	'let'          reduce using rule 71
	'of'           reduce using rule 71
	'then'         reduce using rule 71
	'with'         reduce using rule 71
	'}'            reduce using rule 71
	L_integ        reduce using rule 71
	L_BitVariable  reduce using rule 71
	L_Var          reduce using rule 71
	L_Lambda       reduce using rule 71


State 91

	Gate -> 'H' .                                       (rule 42)

	'$'            reduce using rule 42
	'('            reduce using rule 42
	'()'           reduce using rule 42
	')'            reduce using rule 42
	','            reduce using rule 42
	'->'           reduce using rule 42
	'.'            reduce using rule 42
	';'            reduce using rule 42
	'@+'           reduce using rule 42
	'@+i'          reduce using rule 42
	'@-'           reduce using rule 42
	'@-i'          reduce using rule 42
	'@0'           reduce using rule 42
	'@1'           reduce using rule 42
	'False'        reduce using rule 42
	'True'         reduce using rule 42
	'['            reduce using rule 42
	'[]'           reduce using rule 42
	']'            reduce using rule 42
	'case'         reduce using rule 42
	'else'         reduce using rule 42
	'gate'         reduce using rule 42
	'if'           reduce using rule 42
	'let'          reduce using rule 42
	'of'           reduce using rule 42
	'then'         reduce using rule 42
	'with'         reduce using rule 42
	'}'            reduce using rule 42
	L_integ        reduce using rule 42
	L_BitVariable  reduce using rule 42
	L_Var          reduce using rule 42
	L_Lambda       reduce using rule 42


State 92

	Gate -> 'ID' .                                      (rule 46)

	'$'            reduce using rule 46
	'('            reduce using rule 46
	'()'           reduce using rule 46
	')'            reduce using rule 46
	','            reduce using rule 46
	'->'           reduce using rule 46
	'.'            reduce using rule 46
	';'            reduce using rule 46
	'@+'           reduce using rule 46
	'@+i'          reduce using rule 46
	'@-'           reduce using rule 46
	'@-i'          reduce using rule 46
	'@0'           reduce using rule 46
	'@1'           reduce using rule 46
	'False'        reduce using rule 46
	'True'         reduce using rule 46
	'['            reduce using rule 46
	'[]'           reduce using rule 46
	']'            reduce using rule 46
	'case'         reduce using rule 46
	'else'         reduce using rule 46
	'gate'         reduce using rule 46
	'if'           reduce using rule 46
	'let'          reduce using rule 46
	'of'           reduce using rule 46
	'then'         reduce using rule 46
	'with'         reduce using rule 46
	'}'            reduce using rule 46
	L_integ        reduce using rule 46
	L_BitVariable  reduce using rule 46
	L_Var          reduce using rule 46
	L_Lambda       reduce using rule 46


State 93

	Gate -> 'ISWAP' .                                   (rule 70)

	'$'            reduce using rule 70
	'('            reduce using rule 70
	'()'           reduce using rule 70
	')'            reduce using rule 70
	','            reduce using rule 70
	'->'           reduce using rule 70
	'.'            reduce using rule 70
	';'            reduce using rule 70
	'@+'           reduce using rule 70
	'@+i'          reduce using rule 70
	'@-'           reduce using rule 70
	'@-i'          reduce using rule 70
	'@0'           reduce using rule 70
	'@1'           reduce using rule 70
	'False'        reduce using rule 70
	'True'         reduce using rule 70
	'['            reduce using rule 70
	'[]'           reduce using rule 70
	']'            reduce using rule 70
	'case'         reduce using rule 70
	'else'         reduce using rule 70
	'gate'         reduce using rule 70
	'if'           reduce using rule 70
	'let'          reduce using rule 70
	'of'           reduce using rule 70
	'then'         reduce using rule 70
	'with'         reduce using rule 70
	'}'            reduce using rule 70
	L_integ        reduce using rule 70
	L_BitVariable  reduce using rule 70
	L_Var          reduce using rule 70
	L_Lambda       reduce using rule 70


State 94

	Gate -> 'QFT' . Integer                             (rule 75)

	L_integ        shift, and enter state 43

	Integer        goto state 178

State 95

	Gate -> 'QFT_DAG' . Integer                         (rule 76)

	L_integ        shift, and enter state 43

	Integer        goto state 177

State 96

	Gate -> 'ROOT_SWAP' . Integer                       (rule 73)

	L_integ        shift, and enter state 43

	Integer        goto state 176

State 97

	Gate -> 'ROOT_SWAP_DAG' . Integer                   (rule 74)

	L_integ        shift, and enter state 43

	Integer        goto state 175

State 98

	Gate -> 'ROOT_X' . Integer                          (rule 47)

	L_integ        shift, and enter state 43

	Integer        goto state 174

State 99

	Gate -> 'ROOT_X_DAG' . Integer                      (rule 48)

	L_integ        shift, and enter state 43

	Integer        goto state 173

State 100

	Gate -> 'ROOT_Y' . Integer                          (rule 49)

	L_integ        shift, and enter state 43

	Integer        goto state 172

State 101

	Gate -> 'ROOT_Y_DAG' . Integer                      (rule 50)

	L_integ        shift, and enter state 43

	Integer        goto state 171

State 102

	Gate -> 'ROOT_Z' . Integer                          (rule 51)

	L_integ        shift, and enter state 43

	Integer        goto state 170

State 103

	Gate -> 'ROOT_Z_DAG' . Integer                      (rule 52)

	L_integ        shift, and enter state 43

	Integer        goto state 169

State 104

	Gate -> 'RX' . Angle                                (rule 61)

	L_doubl        shift, and enter state 2

	Double         goto state 163
	Angle          goto state 168

State 105

	Gate -> 'RY' . Angle                                (rule 62)

	L_doubl        shift, and enter state 2

	Double         goto state 163
	Angle          goto state 167

State 106

	Gate -> 'RZ' . Angle                                (rule 63)

	L_doubl        shift, and enter state 2

	Double         goto state 163
	Angle          goto state 166

State 107

	Gate -> 'S' .                                       (rule 53)

	'$'            reduce using rule 53
	'('            reduce using rule 53
	'()'           reduce using rule 53
	')'            reduce using rule 53
	','            reduce using rule 53
	'->'           reduce using rule 53
	'.'            reduce using rule 53
	';'            reduce using rule 53
	'@+'           reduce using rule 53
	'@+i'          reduce using rule 53
	'@-'           reduce using rule 53
	'@-i'          reduce using rule 53
	'@0'           reduce using rule 53
	'@1'           reduce using rule 53
	'False'        reduce using rule 53
	'True'         reduce using rule 53
	'['            reduce using rule 53
	'[]'           reduce using rule 53
	']'            reduce using rule 53
	'case'         reduce using rule 53
	'else'         reduce using rule 53
	'gate'         reduce using rule 53
	'if'           reduce using rule 53
	'let'          reduce using rule 53
	'of'           reduce using rule 53
	'then'         reduce using rule 53
	'with'         reduce using rule 53
	'}'            reduce using rule 53
	L_integ        reduce using rule 53
	L_BitVariable  reduce using rule 53
	L_Var          reduce using rule 53
	L_Lambda       reduce using rule 53


State 108

	Gate -> 'SQRT_SWAP' .                               (rule 68)

	'$'            reduce using rule 68
	'('            reduce using rule 68
	'()'           reduce using rule 68
	')'            reduce using rule 68
	','            reduce using rule 68
	'->'           reduce using rule 68
	'.'            reduce using rule 68
	';'            reduce using rule 68
	'@+'           reduce using rule 68
	'@+i'          reduce using rule 68
	'@-'           reduce using rule 68
	'@-i'          reduce using rule 68
	'@0'           reduce using rule 68
	'@1'           reduce using rule 68
	'False'        reduce using rule 68
	'True'         reduce using rule 68
	'['            reduce using rule 68
	'[]'           reduce using rule 68
	']'            reduce using rule 68
	'case'         reduce using rule 68
	'else'         reduce using rule 68
	'gate'         reduce using rule 68
	'if'           reduce using rule 68
	'let'          reduce using rule 68
	'of'           reduce using rule 68
	'then'         reduce using rule 68
	'with'         reduce using rule 68
	'}'            reduce using rule 68
	L_integ        reduce using rule 68
	L_BitVariable  reduce using rule 68
	L_Var          reduce using rule 68
	L_Lambda       reduce using rule 68


State 109

	Gate -> 'SQRT_SWAP_DAG' .                           (rule 69)

	'$'            reduce using rule 69
	'('            reduce using rule 69
	'()'           reduce using rule 69
	')'            reduce using rule 69
	','            reduce using rule 69
	'->'           reduce using rule 69
	'.'            reduce using rule 69
	';'            reduce using rule 69
	'@+'           reduce using rule 69
	'@+i'          reduce using rule 69
	'@-'           reduce using rule 69
	'@-i'          reduce using rule 69
	'@0'           reduce using rule 69
	'@1'           reduce using rule 69
	'False'        reduce using rule 69
	'True'         reduce using rule 69
	'['            reduce using rule 69
	'[]'           reduce using rule 69
	']'            reduce using rule 69
	'case'         reduce using rule 69
	'else'         reduce using rule 69
	'gate'         reduce using rule 69
	'if'           reduce using rule 69
	'let'          reduce using rule 69
	'of'           reduce using rule 69
	'then'         reduce using rule 69
	'with'         reduce using rule 69
	'}'            reduce using rule 69
	L_integ        reduce using rule 69
	L_BitVariable  reduce using rule 69
	L_Var          reduce using rule 69
	L_Lambda       reduce using rule 69


State 110

	Gate -> 'SQRT_X' .                                  (rule 57)

	'$'            reduce using rule 57
	'('            reduce using rule 57
	'()'           reduce using rule 57
	')'            reduce using rule 57
	','            reduce using rule 57
	'->'           reduce using rule 57
	'.'            reduce using rule 57
	';'            reduce using rule 57
	'@+'           reduce using rule 57
	'@+i'          reduce using rule 57
	'@-'           reduce using rule 57
	'@-i'          reduce using rule 57
	'@0'           reduce using rule 57
	'@1'           reduce using rule 57
	'False'        reduce using rule 57
	'True'         reduce using rule 57
	'['            reduce using rule 57
	'[]'           reduce using rule 57
	']'            reduce using rule 57
	'case'         reduce using rule 57
	'else'         reduce using rule 57
	'gate'         reduce using rule 57
	'if'           reduce using rule 57
	'let'          reduce using rule 57
	'of'           reduce using rule 57
	'then'         reduce using rule 57
	'with'         reduce using rule 57
	'}'            reduce using rule 57
	L_integ        reduce using rule 57
	L_BitVariable  reduce using rule 57
	L_Var          reduce using rule 57
	L_Lambda       reduce using rule 57


State 111

	Gate -> 'SQRT_X_DAG' .                              (rule 58)

	'$'            reduce using rule 58
	'('            reduce using rule 58
	'()'           reduce using rule 58
	')'            reduce using rule 58
	','            reduce using rule 58
	'->'           reduce using rule 58
	'.'            reduce using rule 58
	';'            reduce using rule 58
	'@+'           reduce using rule 58
	'@+i'          reduce using rule 58
	'@-'           reduce using rule 58
	'@-i'          reduce using rule 58
	'@0'           reduce using rule 58
	'@1'           reduce using rule 58
	'False'        reduce using rule 58
	'True'         reduce using rule 58
	'['            reduce using rule 58
	'[]'           reduce using rule 58
	']'            reduce using rule 58
	'case'         reduce using rule 58
	'else'         reduce using rule 58
	'gate'         reduce using rule 58
	'if'           reduce using rule 58
	'let'          reduce using rule 58
	'of'           reduce using rule 58
	'then'         reduce using rule 58
	'with'         reduce using rule 58
	'}'            reduce using rule 58
	L_integ        reduce using rule 58
	L_BitVariable  reduce using rule 58
	L_Var          reduce using rule 58
	L_Lambda       reduce using rule 58


State 112

	Gate -> 'SQRT_Y' .                                  (rule 59)

	'$'            reduce using rule 59
	'('            reduce using rule 59
	'()'           reduce using rule 59
	')'            reduce using rule 59
	','            reduce using rule 59
	'->'           reduce using rule 59
	'.'            reduce using rule 59
	';'            reduce using rule 59
	'@+'           reduce using rule 59
	'@+i'          reduce using rule 59
	'@-'           reduce using rule 59
	'@-i'          reduce using rule 59
	'@0'           reduce using rule 59
	'@1'           reduce using rule 59
	'False'        reduce using rule 59
	'True'         reduce using rule 59
	'['            reduce using rule 59
	'[]'           reduce using rule 59
	']'            reduce using rule 59
	'case'         reduce using rule 59
	'else'         reduce using rule 59
	'gate'         reduce using rule 59
	'if'           reduce using rule 59
	'let'          reduce using rule 59
	'of'           reduce using rule 59
	'then'         reduce using rule 59
	'with'         reduce using rule 59
	'}'            reduce using rule 59
	L_integ        reduce using rule 59
	L_BitVariable  reduce using rule 59
	L_Var          reduce using rule 59
	L_Lambda       reduce using rule 59


State 113

	Gate -> 'SQRT_Y_DAG' .                              (rule 60)

	'$'            reduce using rule 60
	'('            reduce using rule 60
	'()'           reduce using rule 60
	')'            reduce using rule 60
	','            reduce using rule 60
	'->'           reduce using rule 60
	'.'            reduce using rule 60
	';'            reduce using rule 60
	'@+'           reduce using rule 60
	'@+i'          reduce using rule 60
	'@-'           reduce using rule 60
	'@-i'          reduce using rule 60
	'@0'           reduce using rule 60
	'@1'           reduce using rule 60
	'False'        reduce using rule 60
	'True'         reduce using rule 60
	'['            reduce using rule 60
	'[]'           reduce using rule 60
	']'            reduce using rule 60
	'case'         reduce using rule 60
	'else'         reduce using rule 60
	'gate'         reduce using rule 60
	'if'           reduce using rule 60
	'let'          reduce using rule 60
	'of'           reduce using rule 60
	'then'         reduce using rule 60
	'with'         reduce using rule 60
	'}'            reduce using rule 60
	L_integ        reduce using rule 60
	L_BitVariable  reduce using rule 60
	L_Var          reduce using rule 60
	L_Lambda       reduce using rule 60


State 114

	Gate -> 'SWAP' .                                    (rule 67)

	'$'            reduce using rule 67
	'('            reduce using rule 67
	'()'           reduce using rule 67
	')'            reduce using rule 67
	','            reduce using rule 67
	'->'           reduce using rule 67
	'.'            reduce using rule 67
	';'            reduce using rule 67
	'@+'           reduce using rule 67
	'@+i'          reduce using rule 67
	'@-'           reduce using rule 67
	'@-i'          reduce using rule 67
	'@0'           reduce using rule 67
	'@1'           reduce using rule 67
	'False'        reduce using rule 67
	'True'         reduce using rule 67
	'['            reduce using rule 67
	'[]'           reduce using rule 67
	']'            reduce using rule 67
	'case'         reduce using rule 67
	'else'         reduce using rule 67
	'gate'         reduce using rule 67
	'if'           reduce using rule 67
	'let'          reduce using rule 67
	'of'           reduce using rule 67
	'then'         reduce using rule 67
	'with'         reduce using rule 67
	'}'            reduce using rule 67
	L_integ        reduce using rule 67
	L_BitVariable  reduce using rule 67
	L_Var          reduce using rule 67
	L_Lambda       reduce using rule 67


State 115

	Gate -> 'SWAP_THETA' . Angle                        (rule 72)

	L_doubl        shift, and enter state 2

	Double         goto state 163
	Angle          goto state 165

State 116

	Gate -> 'S_DAG' .                                   (rule 54)

	'$'            reduce using rule 54
	'('            reduce using rule 54
	'()'           reduce using rule 54
	')'            reduce using rule 54
	','            reduce using rule 54
	'->'           reduce using rule 54
	'.'            reduce using rule 54
	';'            reduce using rule 54
	'@+'           reduce using rule 54
	'@+i'          reduce using rule 54
	'@-'           reduce using rule 54
	'@-i'          reduce using rule 54
	'@0'           reduce using rule 54
	'@1'           reduce using rule 54
	'False'        reduce using rule 54
	'True'         reduce using rule 54
	'['            reduce using rule 54
	'[]'           reduce using rule 54
	']'            reduce using rule 54
	'case'         reduce using rule 54
	'else'         reduce using rule 54
	'gate'         reduce using rule 54
	'if'           reduce using rule 54
	'let'          reduce using rule 54
	'of'           reduce using rule 54
	'then'         reduce using rule 54
	'with'         reduce using rule 54
	'}'            reduce using rule 54
	L_integ        reduce using rule 54
	L_BitVariable  reduce using rule 54
	L_Var          reduce using rule 54
	L_Lambda       reduce using rule 54


State 117

	Gate -> 'T' .                                       (rule 55)

	'$'            reduce using rule 55
	'('            reduce using rule 55
	'()'           reduce using rule 55
	')'            reduce using rule 55
	','            reduce using rule 55
	'->'           reduce using rule 55
	'.'            reduce using rule 55
	';'            reduce using rule 55
	'@+'           reduce using rule 55
	'@+i'          reduce using rule 55
	'@-'           reduce using rule 55
	'@-i'          reduce using rule 55
	'@0'           reduce using rule 55
	'@1'           reduce using rule 55
	'False'        reduce using rule 55
	'True'         reduce using rule 55
	'['            reduce using rule 55
	'[]'           reduce using rule 55
	']'            reduce using rule 55
	'case'         reduce using rule 55
	'else'         reduce using rule 55
	'gate'         reduce using rule 55
	'if'           reduce using rule 55
	'let'          reduce using rule 55
	'of'           reduce using rule 55
	'then'         reduce using rule 55
	'with'         reduce using rule 55
	'}'            reduce using rule 55
	L_integ        reduce using rule 55
	L_BitVariable  reduce using rule 55
	L_Var          reduce using rule 55
	L_Lambda       reduce using rule 55


State 118

	Gate -> 'T_DAG' .                                   (rule 56)

	'$'            reduce using rule 56
	'('            reduce using rule 56
	'()'           reduce using rule 56
	')'            reduce using rule 56
	','            reduce using rule 56
	'->'           reduce using rule 56
	'.'            reduce using rule 56
	';'            reduce using rule 56
	'@+'           reduce using rule 56
	'@+i'          reduce using rule 56
	'@-'           reduce using rule 56
	'@-i'          reduce using rule 56
	'@0'           reduce using rule 56
	'@1'           reduce using rule 56
	'False'        reduce using rule 56
	'True'         reduce using rule 56
	'['            reduce using rule 56
	'[]'           reduce using rule 56
	']'            reduce using rule 56
	'case'         reduce using rule 56
	'else'         reduce using rule 56
	'gate'         reduce using rule 56
	'if'           reduce using rule 56
	'let'          reduce using rule 56
	'of'           reduce using rule 56
	'then'         reduce using rule 56
	'with'         reduce using rule 56
	'}'            reduce using rule 56
	L_integ        reduce using rule 56
	L_BitVariable  reduce using rule 56
	L_Var          reduce using rule 56
	L_Lambda       reduce using rule 56


State 119

	Gate -> 'U1' . Angle                                (rule 64)

	L_doubl        shift, and enter state 2

	Double         goto state 163
	Angle          goto state 164

State 120

	Gate -> 'U2' . '(' Angle ',' Angle ')'              (rule 65)

	'('            shift, and enter state 162


State 121

	Gate -> 'U3' . '(' Angle ',' Angle ',' Angle ')'    (rule 66)

	'('            shift, and enter state 161


State 122

	Gate -> 'X' .                                       (rule 43)

	'$'            reduce using rule 43
	'('            reduce using rule 43
	'()'           reduce using rule 43
	')'            reduce using rule 43
	','            reduce using rule 43
	'->'           reduce using rule 43
	'.'            reduce using rule 43
	';'            reduce using rule 43
	'@+'           reduce using rule 43
	'@+i'          reduce using rule 43
	'@-'           reduce using rule 43
	'@-i'          reduce using rule 43
	'@0'           reduce using rule 43
	'@1'           reduce using rule 43
	'False'        reduce using rule 43
	'True'         reduce using rule 43
	'['            reduce using rule 43
	'[]'           reduce using rule 43
	']'            reduce using rule 43
	'case'         reduce using rule 43
	'else'         reduce using rule 43
	'gate'         reduce using rule 43
	'if'           reduce using rule 43
	'let'          reduce using rule 43
	'of'           reduce using rule 43
	'then'         reduce using rule 43
	'with'         reduce using rule 43
	'}'            reduce using rule 43
	L_integ        reduce using rule 43
	L_BitVariable  reduce using rule 43
	L_Var          reduce using rule 43
	L_Lambda       reduce using rule 43


State 123

	Gate -> 'Y' .                                       (rule 44)

	'$'            reduce using rule 44
	'('            reduce using rule 44
	'()'           reduce using rule 44
	')'            reduce using rule 44
	','            reduce using rule 44
	'->'           reduce using rule 44
	'.'            reduce using rule 44
	';'            reduce using rule 44
	'@+'           reduce using rule 44
	'@+i'          reduce using rule 44
	'@-'           reduce using rule 44
	'@-i'          reduce using rule 44
	'@0'           reduce using rule 44
	'@1'           reduce using rule 44
	'False'        reduce using rule 44
	'True'         reduce using rule 44
	'['            reduce using rule 44
	'[]'           reduce using rule 44
	']'            reduce using rule 44
	'case'         reduce using rule 44
	'else'         reduce using rule 44
	'gate'         reduce using rule 44
	'if'           reduce using rule 44
	'let'          reduce using rule 44
	'of'           reduce using rule 44
	'then'         reduce using rule 44
	'with'         reduce using rule 44
	'}'            reduce using rule 44
	L_integ        reduce using rule 44
	L_BitVariable  reduce using rule 44
	L_Var          reduce using rule 44
	L_Lambda       reduce using rule 44


State 124

	Gate -> 'Z' .                                       (rule 45)

	'$'            reduce using rule 45
	'('            reduce using rule 45
	'()'           reduce using rule 45
	')'            reduce using rule 45
	','            reduce using rule 45
	'->'           reduce using rule 45
	'.'            reduce using rule 45
	';'            reduce using rule 45
	'@+'           reduce using rule 45
	'@+i'          reduce using rule 45
	'@-'           reduce using rule 45
	'@-i'          reduce using rule 45
	'@0'           reduce using rule 45
	'@1'           reduce using rule 45
	'False'        reduce using rule 45
	'True'         reduce using rule 45
	'['            reduce using rule 45
	'[]'           reduce using rule 45
	']'            reduce using rule 45
	'case'         reduce using rule 45
	'else'         reduce using rule 45
	'gate'         reduce using rule 45
	'if'           reduce using rule 45
	'let'          reduce using rule 45
	'of'           reduce using rule 45
	'then'         reduce using rule 45
	'with'         reduce using rule 45
	'}'            reduce using rule 45
	L_integ        reduce using rule 45
	L_BitVariable  reduce using rule 45
	L_Var          reduce using rule 45
	L_Lambda       reduce using rule 45


State 125

	Term1 -> 'case' Term . 'of' CaseExpression ListCaseExpression    (rule 97)

	'of'           shift, and enter state 160


State 126

	List -> '[' Term . ']'                              (rule 121)
	List -> '[' Term . ',' ListTerm ']'                 (rule 122)

	','            shift, and enter state 158
	']'            shift, and enter state 159


State 127

	IntegerExpr -> IntegerExpr . '+' IntegerExpr1       (rule 6)
	IntegerExpr -> IntegerExpr . '-' IntegerExpr1       (rule 7)
	IntegerExpr2 -> '(' IntegerExpr . ')'               (rule 13)
	Term3 -> IntegerExpr .                              (rule 111)

	'$'            reduce using rule 111
	'('            reduce using rule 111
	'()'           reduce using rule 111
	')'            shift, and enter state 157
			(reduce using rule 111)

	'+'            shift, and enter state 136
	','            reduce using rule 111
	'-'            shift, and enter state 137
	'.'            reduce using rule 111
	'@+'           reduce using rule 111
	'@+i'          reduce using rule 111
	'@-'           reduce using rule 111
	'@-i'          reduce using rule 111
	'@0'           reduce using rule 111
	'@1'           reduce using rule 111
	'False'        reduce using rule 111
	'True'         reduce using rule 111
	'['            reduce using rule 111
	'[]'           reduce using rule 111
	'gate'         reduce using rule 111
	L_integ        reduce using rule 111
	L_BitVariable  reduce using rule 111
	L_Var          reduce using rule 111


State 128

	Tuple -> '(' Term . ',' ListTerm ')'                (rule 87)
	Term4 -> '(' Term . ')'                             (rule 119)

	')'            shift, and enter state 155
	','            shift, and enter state 156


State 129

	List -> Term4 ':' . List                            (rule 123)

	'('            shift, and enter state 154
	'['            shift, and enter state 75
	'[]'           shift, and enter state 76

	Term4          goto state 152
	List           goto state 153

State 130

	Term3 -> Var .                                      (rule 108)

	'$'            reduce using rule 108
	'('            reduce using rule 108
	'()'           reduce using rule 108
	')'            reduce using rule 108
	','            reduce using rule 108
	'->'           reduce using rule 108
	'.'            reduce using rule 108
	';'            reduce using rule 108
	'@+'           reduce using rule 108
	'@+i'          reduce using rule 108
	'@-'           reduce using rule 108
	'@-i'          reduce using rule 108
	'@0'           reduce using rule 108
	'@1'           reduce using rule 108
	'False'        reduce using rule 108
	'True'         reduce using rule 108
	'['            reduce using rule 108
	'[]'           reduce using rule 108
	']'            reduce using rule 108
	'case'         reduce using rule 108
	'else'         reduce using rule 108
	'gate'         reduce using rule 108
	'if'           reduce using rule 108
	'let'          reduce using rule 108
	'of'           reduce using rule 108
	'then'         reduce using rule 108
	'with'         reduce using rule 108
	'}'            reduce using rule 108
	L_integ        reduce using rule 108
	L_BitVariable  reduce using rule 108
	L_Var          reduce using rule 108
	L_Lambda       reduce using rule 108


State 131

	Term2 -> Term2 Term3 .                              (rule 105)

	'$'            reduce using rule 105
	'('            reduce using rule 105
	'()'           reduce using rule 105
	')'            reduce using rule 105
	','            reduce using rule 105
	'->'           reduce using rule 105
	'.'            reduce using rule 105
	';'            reduce using rule 105
	'@+'           reduce using rule 105
	'@+i'          reduce using rule 105
	'@-'           reduce using rule 105
	'@-i'          reduce using rule 105
	'@0'           reduce using rule 105
	'@1'           reduce using rule 105
	'False'        reduce using rule 105
	'True'         reduce using rule 105
	'['            reduce using rule 105
	'[]'           reduce using rule 105
	']'            reduce using rule 105
	'case'         reduce using rule 105
	'else'         reduce using rule 105
	'gate'         reduce using rule 105
	'if'           reduce using rule 105
	'let'          reduce using rule 105
	'of'           reduce using rule 105
	'then'         reduce using rule 105
	'with'         reduce using rule 105
	'}'            reduce using rule 105
	L_integ        reduce using rule 105
	L_BitVariable  reduce using rule 105
	L_Var          reduce using rule 105
	L_Lambda       reduce using rule 105


State 132

	Term1 -> Term2 '$' . Term1                          (rule 99)

	'('            shift, and enter state 65
	'()'           shift, and enter state 66
	'@+'           shift, and enter state 67
	'@+i'          shift, and enter state 68
	'@-'           shift, and enter state 69
	'@-i'          shift, and enter state 70
	'@0'           shift, and enter state 71
	'@1'           shift, and enter state 72
	'False'        shift, and enter state 73
	'True'         shift, and enter state 74
	'['            shift, and enter state 75
	'[]'           shift, and enter state 76
	'case'         shift, and enter state 77
	'gate'         shift, and enter state 78
	'if'           shift, and enter state 79
	'let'          shift, and enter state 80
	'with'         shift, and enter state 81
	L_integ        shift, and enter state 43
	L_BitVariable  shift, and enter state 82
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 83

	Integer        goto state 48
	BitVariable    goto state 49
	Var            goto state 50
	Lambda         goto state 51
	IntegerExpr    goto state 52
	IntegerExpr1   goto state 53
	IntegerExpr2   goto state 54
	BoolValue      goto state 55
	BasisState     goto state 56
	Bit            goto state 57
	Tuple          goto state 58
	Term1          goto state 151
	Term2          goto state 60
	Term3          goto state 61
	Term4          goto state 63
	List           goto state 64

State 133

	Term2 -> Term2 '.' . Term3                          (rule 106)

	'('            shift, and enter state 65
	'()'           shift, and enter state 66
	'@+'           shift, and enter state 67
	'@+i'          shift, and enter state 68
	'@-'           shift, and enter state 69
	'@-i'          shift, and enter state 70
	'@0'           shift, and enter state 71
	'@1'           shift, and enter state 72
	'False'        shift, and enter state 73
	'True'         shift, and enter state 74
	'['            shift, and enter state 75
	'[]'           shift, and enter state 76
	'gate'         shift, and enter state 78
	L_integ        shift, and enter state 43
	L_BitVariable  shift, and enter state 82
	L_Var          shift, and enter state 8

	Integer        goto state 48
	BitVariable    goto state 49
	Var            goto state 130
	IntegerExpr    goto state 52
	IntegerExpr1   goto state 53
	IntegerExpr2   goto state 54
	BoolValue      goto state 55
	BasisState     goto state 56
	Bit            goto state 57
	Tuple          goto state 58
	Term3          goto state 150
	Term4          goto state 63
	List           goto state 64

State 134

	IntegerExpr1 -> IntegerExpr1 '*' . IntegerExpr2     (rule 9)

	'('            shift, and enter state 146
	L_integ        shift, and enter state 43

	Integer        goto state 48
	IntegerExpr2   goto state 149

State 135

	IntegerExpr1 -> IntegerExpr1 '/' . IntegerExpr2     (rule 10)

	'('            shift, and enter state 146
	L_integ        shift, and enter state 43

	Integer        goto state 48
	IntegerExpr2   goto state 148

State 136

	IntegerExpr -> IntegerExpr '+' . IntegerExpr1       (rule 6)

	'('            shift, and enter state 146
	L_integ        shift, and enter state 43

	Integer        goto state 48
	IntegerExpr1   goto state 147
	IntegerExpr2   goto state 54

State 137

	IntegerExpr -> IntegerExpr '-' . IntegerExpr1       (rule 7)

	'('            shift, and enter state 146
	L_integ        shift, and enter state 43

	Integer        goto state 48
	IntegerExpr1   goto state 145
	IntegerExpr2   goto state 54

State 138

	Term1 -> Lambda Var . Type '.' Term                 (rule 98)

	'!'            shift, and enter state 18
	'('            shift, and enter state 19
	'()'           shift, and enter state 20
	'Bit'          shift, and enter state 21
	'Bool'         shift, and enter state 22
	'Int'          shift, and enter state 23
	'Qbit'         shift, and enter state 24
	'['            shift, and enter state 25

	Type           goto state 144
	Type1          goto state 13
	Type2          goto state 14
	Type3          goto state 15
	Type5          goto state 16
	Type4          goto state 17

State 139

	Term1 -> Var ',' . ListVar '<-' Term ';' Term       (rule 96)

	L_Var          shift, and enter state 8

	Var            goto state 142
	ListVar        goto state 143

State 140

	Term1 -> Var '<-' . Term ';' Term                   (rule 95)

	'('            shift, and enter state 65
	'()'           shift, and enter state 66
	'@+'           shift, and enter state 67
	'@+i'          shift, and enter state 68
	'@-'           shift, and enter state 69
	'@-i'          shift, and enter state 70
	'@0'           shift, and enter state 71
	'@1'           shift, and enter state 72
	'False'        shift, and enter state 73
	'True'         shift, and enter state 74
	'['            shift, and enter state 75
	'[]'           shift, and enter state 76
	'case'         shift, and enter state 77
	'gate'         shift, and enter state 78
	'if'           shift, and enter state 79
	'let'          shift, and enter state 80
	'with'         shift, and enter state 81
	L_integ        shift, and enter state 43
	L_BitVariable  shift, and enter state 82
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 83

	Integer        goto state 48
	BitVariable    goto state 49
	Var            goto state 50
	Lambda         goto state 51
	IntegerExpr    goto state 52
	IntegerExpr1   goto state 53
	IntegerExpr2   goto state 54
	BoolValue      goto state 55
	BasisState     goto state 56
	Bit            goto state 57
	Tuple          goto state 58
	Term1          goto state 59
	Term2          goto state 60
	Term3          goto state 61
	Term           goto state 141
	Term4          goto state 63
	List           goto state 64

State 141

	Term1 -> Var '<-' Term . ';' Term                   (rule 95)

	';'            shift, and enter state 208


State 142

	ListVar -> Var .                                    (rule 77)
	ListVar -> Var . ',' ListVar                        (rule 78)

	')'            reduce using rule 77
	','            shift, and enter state 207
	'<-'           reduce using rule 77


State 143

	Term1 -> Var ',' ListVar . '<-' Term ';' Term       (rule 96)

	'<-'           shift, and enter state 206


State 144

	Type -> Type . '->' Type1                           (rule 15)
	Term1 -> Lambda Var Type . '.' Term                 (rule 98)

	'->'           shift, and enter state 38
	'.'            shift, and enter state 205


State 145

	IntegerExpr -> IntegerExpr '-' IntegerExpr1 .       (rule 7)
	IntegerExpr1 -> IntegerExpr1 . '*' IntegerExpr2     (rule 9)
	IntegerExpr1 -> IntegerExpr1 . '/' IntegerExpr2     (rule 10)

	'$'            reduce using rule 7
	'('            reduce using rule 7
	'()'           reduce using rule 7
	')'            reduce using rule 7
	'*'            shift, and enter state 134
	'+'            reduce using rule 7
	','            reduce using rule 7
	'-'            reduce using rule 7
	'->'           reduce using rule 7
	'.'            reduce using rule 7
	'/'            shift, and enter state 135
	';'            reduce using rule 7
	'@+'           reduce using rule 7
	'@+i'          reduce using rule 7
	'@-'           reduce using rule 7
	'@-i'          reduce using rule 7
	'@0'           reduce using rule 7
	'@1'           reduce using rule 7
	'False'        reduce using rule 7
	'True'         reduce using rule 7
	'['            reduce using rule 7
	'[]'           reduce using rule 7
	']'            reduce using rule 7
	'case'         reduce using rule 7
	'else'         reduce using rule 7
	'gate'         reduce using rule 7
	'if'           reduce using rule 7
	'let'          reduce using rule 7
	'of'           reduce using rule 7
	'then'         reduce using rule 7
	'with'         reduce using rule 7
	'}'            reduce using rule 7
	L_integ        reduce using rule 7
	L_BitVariable  reduce using rule 7
	L_Var          reduce using rule 7
	L_Lambda       reduce using rule 7


State 146

	IntegerExpr2 -> '(' . IntegerExpr ')'               (rule 13)

	'('            shift, and enter state 146
	L_integ        shift, and enter state 43

	Integer        goto state 48
	IntegerExpr    goto state 204
	IntegerExpr1   goto state 53
	IntegerExpr2   goto state 54

State 147

	IntegerExpr -> IntegerExpr '+' IntegerExpr1 .       (rule 6)
	IntegerExpr1 -> IntegerExpr1 . '*' IntegerExpr2     (rule 9)
	IntegerExpr1 -> IntegerExpr1 . '/' IntegerExpr2     (rule 10)

	'$'            reduce using rule 6
	'('            reduce using rule 6
	'()'           reduce using rule 6
	')'            reduce using rule 6
	'*'            shift, and enter state 134
	'+'            reduce using rule 6
	','            reduce using rule 6
	'-'            reduce using rule 6
	'->'           reduce using rule 6
	'.'            reduce using rule 6
	'/'            shift, and enter state 135
	';'            reduce using rule 6
	'@+'           reduce using rule 6
	'@+i'          reduce using rule 6
	'@-'           reduce using rule 6
	'@-i'          reduce using rule 6
	'@0'           reduce using rule 6
	'@1'           reduce using rule 6
	'False'        reduce using rule 6
	'True'         reduce using rule 6
	'['            reduce using rule 6
	'[]'           reduce using rule 6
	']'            reduce using rule 6
	'case'         reduce using rule 6
	'else'         reduce using rule 6
	'gate'         reduce using rule 6
	'if'           reduce using rule 6
	'let'          reduce using rule 6
	'of'           reduce using rule 6
	'then'         reduce using rule 6
	'with'         reduce using rule 6
	'}'            reduce using rule 6
	L_integ        reduce using rule 6
	L_BitVariable  reduce using rule 6
	L_Var          reduce using rule 6
	L_Lambda       reduce using rule 6


State 148

	IntegerExpr1 -> IntegerExpr1 '/' IntegerExpr2 .     (rule 10)

	'$'            reduce using rule 10
	'('            reduce using rule 10
	'()'           reduce using rule 10
	')'            reduce using rule 10
	'*'            reduce using rule 10
	'+'            reduce using rule 10
	','            reduce using rule 10
	'-'            reduce using rule 10
	'->'           reduce using rule 10
	'.'            reduce using rule 10
	'/'            reduce using rule 10
	';'            reduce using rule 10
	'@+'           reduce using rule 10
	'@+i'          reduce using rule 10
	'@-'           reduce using rule 10
	'@-i'          reduce using rule 10
	'@0'           reduce using rule 10
	'@1'           reduce using rule 10
	'False'        reduce using rule 10
	'True'         reduce using rule 10
	'['            reduce using rule 10
	'[]'           reduce using rule 10
	']'            reduce using rule 10
	'case'         reduce using rule 10
	'else'         reduce using rule 10
	'gate'         reduce using rule 10
	'if'           reduce using rule 10
	'let'          reduce using rule 10
	'of'           reduce using rule 10
	'then'         reduce using rule 10
	'with'         reduce using rule 10
	'}'            reduce using rule 10
	L_integ        reduce using rule 10
	L_BitVariable  reduce using rule 10
	L_Var          reduce using rule 10
	L_Lambda       reduce using rule 10


State 149

	IntegerExpr1 -> IntegerExpr1 '*' IntegerExpr2 .     (rule 9)

	'$'            reduce using rule 9
	'('            reduce using rule 9
	'()'           reduce using rule 9
	')'            reduce using rule 9
	'*'            reduce using rule 9
	'+'            reduce using rule 9
	','            reduce using rule 9
	'-'            reduce using rule 9
	'->'           reduce using rule 9
	'.'            reduce using rule 9
	'/'            reduce using rule 9
	';'            reduce using rule 9
	'@+'           reduce using rule 9
	'@+i'          reduce using rule 9
	'@-'           reduce using rule 9
	'@-i'          reduce using rule 9
	'@0'           reduce using rule 9
	'@1'           reduce using rule 9
	'False'        reduce using rule 9
	'True'         reduce using rule 9
	'['            reduce using rule 9
	'[]'           reduce using rule 9
	']'            reduce using rule 9
	'case'         reduce using rule 9
	'else'         reduce using rule 9
	'gate'         reduce using rule 9
	'if'           reduce using rule 9
	'let'          reduce using rule 9
	'of'           reduce using rule 9
	'then'         reduce using rule 9
	'with'         reduce using rule 9
	'}'            reduce using rule 9
	L_integ        reduce using rule 9
	L_BitVariable  reduce using rule 9
	L_Var          reduce using rule 9
	L_Lambda       reduce using rule 9


State 150

	Term2 -> Term2 '.' Term3 .                          (rule 106)

	'$'            reduce using rule 106
	'('            reduce using rule 106
	'()'           reduce using rule 106
	')'            reduce using rule 106
	','            reduce using rule 106
	'->'           reduce using rule 106
	'.'            reduce using rule 106
	';'            reduce using rule 106
	'@+'           reduce using rule 106
	'@+i'          reduce using rule 106
	'@-'           reduce using rule 106
	'@-i'          reduce using rule 106
	'@0'           reduce using rule 106
	'@1'           reduce using rule 106
	'False'        reduce using rule 106
	'True'         reduce using rule 106
	'['            reduce using rule 106
	'[]'           reduce using rule 106
	']'            reduce using rule 106
	'case'         reduce using rule 106
	'else'         reduce using rule 106
	'gate'         reduce using rule 106
	'if'           reduce using rule 106
	'let'          reduce using rule 106
	'of'           reduce using rule 106
	'then'         reduce using rule 106
	'with'         reduce using rule 106
	'}'            reduce using rule 106
	L_integ        reduce using rule 106
	L_BitVariable  reduce using rule 106
	L_Var          reduce using rule 106
	L_Lambda       reduce using rule 106


State 151

	Term1 -> Term2 '$' Term1 .                          (rule 99)

	'('            reduce using rule 99
	'()'           reduce using rule 99
	')'            reduce using rule 99
	','            reduce using rule 99
	'->'           reduce using rule 99
	';'            reduce using rule 99
	'@+'           reduce using rule 99
	'@+i'          reduce using rule 99
	'@-'           reduce using rule 99
	'@-i'          reduce using rule 99
	'@0'           reduce using rule 99
	'@1'           reduce using rule 99
	'False'        reduce using rule 99
	'True'         reduce using rule 99
	'['            reduce using rule 99
	'[]'           reduce using rule 99
	']'            reduce using rule 99
	'case'         reduce using rule 99
	'else'         reduce using rule 99
	'gate'         reduce using rule 99
	'if'           reduce using rule 99
	'let'          reduce using rule 99
	'of'           reduce using rule 99
	'then'         reduce using rule 99
	'with'         reduce using rule 99
	'}'            reduce using rule 99
	L_integ        reduce using rule 99
	L_BitVariable  reduce using rule 99
	L_Var          reduce using rule 99
	L_Lambda       reduce using rule 99


State 152

	List -> Term4 . ':' List                            (rule 123)

	':'            shift, and enter state 129


State 153

	List -> Term4 ':' List .                            (rule 123)

	'$'            reduce using rule 123
	'('            reduce using rule 123
	'()'           reduce using rule 123
	')'            reduce using rule 123
	','            reduce using rule 123
	'->'           reduce using rule 123
	'.'            reduce using rule 123
	';'            reduce using rule 123
	'@+'           reduce using rule 123
	'@+i'          reduce using rule 123
	'@-'           reduce using rule 123
	'@-i'          reduce using rule 123
	'@0'           reduce using rule 123
	'@1'           reduce using rule 123
	'False'        reduce using rule 123
	'True'         reduce using rule 123
	'['            reduce using rule 123
	'[]'           reduce using rule 123
	']'            reduce using rule 123
	'case'         reduce using rule 123
	'else'         reduce using rule 123
	'gate'         reduce using rule 123
	'if'           reduce using rule 123
	'let'          reduce using rule 123
	'of'           reduce using rule 123
	'then'         reduce using rule 123
	'with'         reduce using rule 123
	'}'            reduce using rule 123
	L_integ        reduce using rule 123
	L_BitVariable  reduce using rule 123
	L_Var          reduce using rule 123
	L_Lambda       reduce using rule 123


State 154

	Term4 -> '(' . Term ')'                             (rule 119)

	'('            shift, and enter state 65
	'()'           shift, and enter state 66
	'@+'           shift, and enter state 67
	'@+i'          shift, and enter state 68
	'@-'           shift, and enter state 69
	'@-i'          shift, and enter state 70
	'@0'           shift, and enter state 71
	'@1'           shift, and enter state 72
	'False'        shift, and enter state 73
	'True'         shift, and enter state 74
	'['            shift, and enter state 75
	'[]'           shift, and enter state 76
	'case'         shift, and enter state 77
	'gate'         shift, and enter state 78
	'if'           shift, and enter state 79
	'let'          shift, and enter state 80
	'with'         shift, and enter state 81
	L_integ        shift, and enter state 43
	L_BitVariable  shift, and enter state 82
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 83

	Integer        goto state 48
	BitVariable    goto state 49
	Var            goto state 50
	Lambda         goto state 51
	IntegerExpr    goto state 52
	IntegerExpr1   goto state 53
	IntegerExpr2   goto state 54
	BoolValue      goto state 55
	BasisState     goto state 56
	Bit            goto state 57
	Tuple          goto state 58
	Term1          goto state 59
	Term2          goto state 60
	Term3          goto state 61
	Term           goto state 203
	Term4          goto state 63
	List           goto state 64

State 155

	Term4 -> '(' Term ')' .                             (rule 119)

	'$'            reduce using rule 119
	'('            reduce using rule 119
	'()'           reduce using rule 119
	')'            reduce using rule 119
	','            reduce using rule 119
	'->'           reduce using rule 119
	'.'            reduce using rule 119
	':'            reduce using rule 119
	';'            reduce using rule 119
	'@+'           reduce using rule 119
	'@+i'          reduce using rule 119
	'@-'           reduce using rule 119
	'@-i'          reduce using rule 119
	'@0'           reduce using rule 119
	'@1'           reduce using rule 119
	'False'        reduce using rule 119
	'True'         reduce using rule 119
	'['            reduce using rule 119
	'[]'           reduce using rule 119
	']'            reduce using rule 119
	'case'         reduce using rule 119
	'else'         reduce using rule 119
	'gate'         reduce using rule 119
	'if'           reduce using rule 119
	'let'          reduce using rule 119
	'of'           reduce using rule 119
	'then'         reduce using rule 119
	'with'         reduce using rule 119
	'}'            reduce using rule 119
	L_integ        reduce using rule 119
	L_BitVariable  reduce using rule 119
	L_Var          reduce using rule 119
	L_Lambda       reduce using rule 119


State 156

	Tuple -> '(' Term ',' . ListTerm ')'                (rule 87)

	'('            shift, and enter state 65
	'()'           shift, and enter state 66
	'@+'           shift, and enter state 67
	'@+i'          shift, and enter state 68
	'@-'           shift, and enter state 69
	'@-i'          shift, and enter state 70
	'@0'           shift, and enter state 71
	'@1'           shift, and enter state 72
	'False'        shift, and enter state 73
	'True'         shift, and enter state 74
	'['            shift, and enter state 75
	'[]'           shift, and enter state 76
	'case'         shift, and enter state 77
	'gate'         shift, and enter state 78
	'if'           shift, and enter state 79
	'let'          shift, and enter state 80
	'with'         shift, and enter state 81
	L_integ        shift, and enter state 43
	L_BitVariable  shift, and enter state 82
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 83

	Integer        goto state 48
	BitVariable    goto state 49
	Var            goto state 50
	Lambda         goto state 51
	IntegerExpr    goto state 52
	IntegerExpr1   goto state 53
	IntegerExpr2   goto state 54
	BoolValue      goto state 55
	BasisState     goto state 56
	Bit            goto state 57
	Tuple          goto state 58
	ListTerm       goto state 202
	Term1          goto state 59
	Term2          goto state 60
	Term3          goto state 61
	Term           goto state 201
	Term4          goto state 63
	List           goto state 64

State 157

	IntegerExpr2 -> '(' IntegerExpr ')' .               (rule 13)

	'$'            reduce using rule 13
	'('            reduce using rule 13
	'()'           reduce using rule 13
	')'            reduce using rule 13
	'*'            reduce using rule 13
	'+'            reduce using rule 13
	','            reduce using rule 13
	'-'            reduce using rule 13
	'->'           reduce using rule 13
	'.'            reduce using rule 13
	'/'            reduce using rule 13
	';'            reduce using rule 13
	'@+'           reduce using rule 13
	'@+i'          reduce using rule 13
	'@-'           reduce using rule 13
	'@-i'          reduce using rule 13
	'@0'           reduce using rule 13
	'@1'           reduce using rule 13
	'False'        reduce using rule 13
	'True'         reduce using rule 13
	'['            reduce using rule 13
	'[]'           reduce using rule 13
	']'            reduce using rule 13
	'case'         reduce using rule 13
	'else'         reduce using rule 13
	'gate'         reduce using rule 13
	'if'           reduce using rule 13
	'let'          reduce using rule 13
	'of'           reduce using rule 13
	'then'         reduce using rule 13
	'with'         reduce using rule 13
	'}'            reduce using rule 13
	L_integ        reduce using rule 13
	L_BitVariable  reduce using rule 13
	L_Var          reduce using rule 13
	L_Lambda       reduce using rule 13


State 158

	List -> '[' Term ',' . ListTerm ']'                 (rule 122)

	'('            shift, and enter state 65
	'()'           shift, and enter state 66
	'@+'           shift, and enter state 67
	'@+i'          shift, and enter state 68
	'@-'           shift, and enter state 69
	'@-i'          shift, and enter state 70
	'@0'           shift, and enter state 71
	'@1'           shift, and enter state 72
	'False'        shift, and enter state 73
	'True'         shift, and enter state 74
	'['            shift, and enter state 75
	'[]'           shift, and enter state 76
	'case'         shift, and enter state 77
	'gate'         shift, and enter state 78
	'if'           shift, and enter state 79
	'let'          shift, and enter state 80
	'with'         shift, and enter state 81
	L_integ        shift, and enter state 43
	L_BitVariable  shift, and enter state 82
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 83

	Integer        goto state 48
	BitVariable    goto state 49
	Var            goto state 50
	Lambda         goto state 51
	IntegerExpr    goto state 52
	IntegerExpr1   goto state 53
	IntegerExpr2   goto state 54
	BoolValue      goto state 55
	BasisState     goto state 56
	Bit            goto state 57
	Tuple          goto state 58
	ListTerm       goto state 200
	Term1          goto state 59
	Term2          goto state 60
	Term3          goto state 61
	Term           goto state 201
	Term4          goto state 63
	List           goto state 64

State 159

	List -> '[' Term ']' .                              (rule 121)

	'$'            reduce using rule 121
	'('            reduce using rule 121
	'()'           reduce using rule 121
	')'            reduce using rule 121
	','            reduce using rule 121
	'->'           reduce using rule 121
	'.'            reduce using rule 121
	';'            reduce using rule 121
	'@+'           reduce using rule 121
	'@+i'          reduce using rule 121
	'@-'           reduce using rule 121
	'@-i'          reduce using rule 121
	'@0'           reduce using rule 121
	'@1'           reduce using rule 121
	'False'        reduce using rule 121
	'True'         reduce using rule 121
	'['            reduce using rule 121
	'[]'           reduce using rule 121
	']'            reduce using rule 121
	'case'         reduce using rule 121
	'else'         reduce using rule 121
	'gate'         reduce using rule 121
	'if'           reduce using rule 121
	'let'          reduce using rule 121
	'of'           reduce using rule 121
	'then'         reduce using rule 121
	'with'         reduce using rule 121
	'}'            reduce using rule 121
	L_integ        reduce using rule 121
	L_BitVariable  reduce using rule 121
	L_Var          reduce using rule 121
	L_Lambda       reduce using rule 121


State 160

	Term1 -> 'case' Term 'of' . CaseExpression ListCaseExpression    (rule 97)

	'('            shift, and enter state 65
	'()'           shift, and enter state 66
	'@+'           shift, and enter state 67
	'@+i'          shift, and enter state 68
	'@-'           shift, and enter state 69
	'@-i'          shift, and enter state 70
	'@0'           shift, and enter state 71
	'@1'           shift, and enter state 72
	'False'        shift, and enter state 73
	'True'         shift, and enter state 74
	'['            shift, and enter state 75
	'[]'           shift, and enter state 76
	'case'         shift, and enter state 77
	'gate'         shift, and enter state 78
	'if'           shift, and enter state 79
	'let'          shift, and enter state 80
	'with'         shift, and enter state 81
	L_integ        shift, and enter state 43
	L_BitVariable  shift, and enter state 82
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 83

	Integer        goto state 48
	BitVariable    goto state 49
	Var            goto state 50
	Lambda         goto state 51
	IntegerExpr    goto state 52
	IntegerExpr1   goto state 53
	IntegerExpr2   goto state 54
	BoolValue      goto state 55
	BasisState     goto state 56
	Bit            goto state 57
	Tuple          goto state 58
	Term1          goto state 59
	Term2          goto state 60
	Term3          goto state 61
	Term           goto state 198
	Term4          goto state 63
	List           goto state 64
	CaseExpression goto state 199

State 161

	Gate -> 'U3' '(' . Angle ',' Angle ',' Angle ')'    (rule 66)

	L_doubl        shift, and enter state 2

	Double         goto state 163
	Angle          goto state 197

State 162

	Gate -> 'U2' '(' . Angle ',' Angle ')'              (rule 65)

	L_doubl        shift, and enter state 2

	Double         goto state 163
	Angle          goto state 196

State 163

	Angle -> Double .                                   (rule 34)

	'$'            reduce using rule 34
	'('            reduce using rule 34
	'()'           reduce using rule 34
	')'            reduce using rule 34
	','            reduce using rule 34
	'->'           reduce using rule 34
	'.'            reduce using rule 34
	';'            reduce using rule 34
	'@+'           reduce using rule 34
	'@+i'          reduce using rule 34
	'@-'           reduce using rule 34
	'@-i'          reduce using rule 34
	'@0'           reduce using rule 34
	'@1'           reduce using rule 34
	'False'        reduce using rule 34
	'True'         reduce using rule 34
	'['            reduce using rule 34
	'[]'           reduce using rule 34
	']'            reduce using rule 34
	'case'         reduce using rule 34
	'else'         reduce using rule 34
	'gate'         reduce using rule 34
	'if'           reduce using rule 34
	'let'          reduce using rule 34
	'of'           reduce using rule 34
	'then'         reduce using rule 34
	'with'         reduce using rule 34
	'}'            reduce using rule 34
	L_integ        reduce using rule 34
	L_BitVariable  reduce using rule 34
	L_Var          reduce using rule 34
	L_Lambda       reduce using rule 34


State 164

	Gate -> 'U1' Angle .                                (rule 64)

	'$'            reduce using rule 64
	'('            reduce using rule 64
	'()'           reduce using rule 64
	')'            reduce using rule 64
	','            reduce using rule 64
	'->'           reduce using rule 64
	'.'            reduce using rule 64
	';'            reduce using rule 64
	'@+'           reduce using rule 64
	'@+i'          reduce using rule 64
	'@-'           reduce using rule 64
	'@-i'          reduce using rule 64
	'@0'           reduce using rule 64
	'@1'           reduce using rule 64
	'False'        reduce using rule 64
	'True'         reduce using rule 64
	'['            reduce using rule 64
	'[]'           reduce using rule 64
	']'            reduce using rule 64
	'case'         reduce using rule 64
	'else'         reduce using rule 64
	'gate'         reduce using rule 64
	'if'           reduce using rule 64
	'let'          reduce using rule 64
	'of'           reduce using rule 64
	'then'         reduce using rule 64
	'with'         reduce using rule 64
	'}'            reduce using rule 64
	L_integ        reduce using rule 64
	L_BitVariable  reduce using rule 64
	L_Var          reduce using rule 64
	L_Lambda       reduce using rule 64


State 165

	Gate -> 'SWAP_THETA' Angle .                        (rule 72)

	'$'            reduce using rule 72
	'('            reduce using rule 72
	'()'           reduce using rule 72
	')'            reduce using rule 72
	','            reduce using rule 72
	'->'           reduce using rule 72
	'.'            reduce using rule 72
	';'            reduce using rule 72
	'@+'           reduce using rule 72
	'@+i'          reduce using rule 72
	'@-'           reduce using rule 72
	'@-i'          reduce using rule 72
	'@0'           reduce using rule 72
	'@1'           reduce using rule 72
	'False'        reduce using rule 72
	'True'         reduce using rule 72
	'['            reduce using rule 72
	'[]'           reduce using rule 72
	']'            reduce using rule 72
	'case'         reduce using rule 72
	'else'         reduce using rule 72
	'gate'         reduce using rule 72
	'if'           reduce using rule 72
	'let'          reduce using rule 72
	'of'           reduce using rule 72
	'then'         reduce using rule 72
	'with'         reduce using rule 72
	'}'            reduce using rule 72
	L_integ        reduce using rule 72
	L_BitVariable  reduce using rule 72
	L_Var          reduce using rule 72
	L_Lambda       reduce using rule 72


State 166

	Gate -> 'RZ' Angle .                                (rule 63)

	'$'            reduce using rule 63
	'('            reduce using rule 63
	'()'           reduce using rule 63
	')'            reduce using rule 63
	','            reduce using rule 63
	'->'           reduce using rule 63
	'.'            reduce using rule 63
	';'            reduce using rule 63
	'@+'           reduce using rule 63
	'@+i'          reduce using rule 63
	'@-'           reduce using rule 63
	'@-i'          reduce using rule 63
	'@0'           reduce using rule 63
	'@1'           reduce using rule 63
	'False'        reduce using rule 63
	'True'         reduce using rule 63
	'['            reduce using rule 63
	'[]'           reduce using rule 63
	']'            reduce using rule 63
	'case'         reduce using rule 63
	'else'         reduce using rule 63
	'gate'         reduce using rule 63
	'if'           reduce using rule 63
	'let'          reduce using rule 63
	'of'           reduce using rule 63
	'then'         reduce using rule 63
	'with'         reduce using rule 63
	'}'            reduce using rule 63
	L_integ        reduce using rule 63
	L_BitVariable  reduce using rule 63
	L_Var          reduce using rule 63
	L_Lambda       reduce using rule 63


State 167

	Gate -> 'RY' Angle .                                (rule 62)

	'$'            reduce using rule 62
	'('            reduce using rule 62
	'()'           reduce using rule 62
	')'            reduce using rule 62
	','            reduce using rule 62
	'->'           reduce using rule 62
	'.'            reduce using rule 62
	';'            reduce using rule 62
	'@+'           reduce using rule 62
	'@+i'          reduce using rule 62
	'@-'           reduce using rule 62
	'@-i'          reduce using rule 62
	'@0'           reduce using rule 62
	'@1'           reduce using rule 62
	'False'        reduce using rule 62
	'True'         reduce using rule 62
	'['            reduce using rule 62
	'[]'           reduce using rule 62
	']'            reduce using rule 62
	'case'         reduce using rule 62
	'else'         reduce using rule 62
	'gate'         reduce using rule 62
	'if'           reduce using rule 62
	'let'          reduce using rule 62
	'of'           reduce using rule 62
	'then'         reduce using rule 62
	'with'         reduce using rule 62
	'}'            reduce using rule 62
	L_integ        reduce using rule 62
	L_BitVariable  reduce using rule 62
	L_Var          reduce using rule 62
	L_Lambda       reduce using rule 62


State 168

	Gate -> 'RX' Angle .                                (rule 61)

	'$'            reduce using rule 61
	'('            reduce using rule 61
	'()'           reduce using rule 61
	')'            reduce using rule 61
	','            reduce using rule 61
	'->'           reduce using rule 61
	'.'            reduce using rule 61
	';'            reduce using rule 61
	'@+'           reduce using rule 61
	'@+i'          reduce using rule 61
	'@-'           reduce using rule 61
	'@-i'          reduce using rule 61
	'@0'           reduce using rule 61
	'@1'           reduce using rule 61
	'False'        reduce using rule 61
	'True'         reduce using rule 61
	'['            reduce using rule 61
	'[]'           reduce using rule 61
	']'            reduce using rule 61
	'case'         reduce using rule 61
	'else'         reduce using rule 61
	'gate'         reduce using rule 61
	'if'           reduce using rule 61
	'let'          reduce using rule 61
	'of'           reduce using rule 61
	'then'         reduce using rule 61
	'with'         reduce using rule 61
	'}'            reduce using rule 61
	L_integ        reduce using rule 61
	L_BitVariable  reduce using rule 61
	L_Var          reduce using rule 61
	L_Lambda       reduce using rule 61


State 169

	Gate -> 'ROOT_Z_DAG' Integer .                      (rule 52)

	'$'            reduce using rule 52
	'('            reduce using rule 52
	'()'           reduce using rule 52
	')'            reduce using rule 52
	','            reduce using rule 52
	'->'           reduce using rule 52
	'.'            reduce using rule 52
	';'            reduce using rule 52
	'@+'           reduce using rule 52
	'@+i'          reduce using rule 52
	'@-'           reduce using rule 52
	'@-i'          reduce using rule 52
	'@0'           reduce using rule 52
	'@1'           reduce using rule 52
	'False'        reduce using rule 52
	'True'         reduce using rule 52
	'['            reduce using rule 52
	'[]'           reduce using rule 52
	']'            reduce using rule 52
	'case'         reduce using rule 52
	'else'         reduce using rule 52
	'gate'         reduce using rule 52
	'if'           reduce using rule 52
	'let'          reduce using rule 52
	'of'           reduce using rule 52
	'then'         reduce using rule 52
	'with'         reduce using rule 52
	'}'            reduce using rule 52
	L_integ        reduce using rule 52
	L_BitVariable  reduce using rule 52
	L_Var          reduce using rule 52
	L_Lambda       reduce using rule 52


State 170

	Gate -> 'ROOT_Z' Integer .                          (rule 51)

	'$'            reduce using rule 51
	'('            reduce using rule 51
	'()'           reduce using rule 51
	')'            reduce using rule 51
	','            reduce using rule 51
	'->'           reduce using rule 51
	'.'            reduce using rule 51
	';'            reduce using rule 51
	'@+'           reduce using rule 51
	'@+i'          reduce using rule 51
	'@-'           reduce using rule 51
	'@-i'          reduce using rule 51
	'@0'           reduce using rule 51
	'@1'           reduce using rule 51
	'False'        reduce using rule 51
	'True'         reduce using rule 51
	'['            reduce using rule 51
	'[]'           reduce using rule 51
	']'            reduce using rule 51
	'case'         reduce using rule 51
	'else'         reduce using rule 51
	'gate'         reduce using rule 51
	'if'           reduce using rule 51
	'let'          reduce using rule 51
	'of'           reduce using rule 51
	'then'         reduce using rule 51
	'with'         reduce using rule 51
	'}'            reduce using rule 51
	L_integ        reduce using rule 51
	L_BitVariable  reduce using rule 51
	L_Var          reduce using rule 51
	L_Lambda       reduce using rule 51


State 171

	Gate -> 'ROOT_Y_DAG' Integer .                      (rule 50)

	'$'            reduce using rule 50
	'('            reduce using rule 50
	'()'           reduce using rule 50
	')'            reduce using rule 50
	','            reduce using rule 50
	'->'           reduce using rule 50
	'.'            reduce using rule 50
	';'            reduce using rule 50
	'@+'           reduce using rule 50
	'@+i'          reduce using rule 50
	'@-'           reduce using rule 50
	'@-i'          reduce using rule 50
	'@0'           reduce using rule 50
	'@1'           reduce using rule 50
	'False'        reduce using rule 50
	'True'         reduce using rule 50
	'['            reduce using rule 50
	'[]'           reduce using rule 50
	']'            reduce using rule 50
	'case'         reduce using rule 50
	'else'         reduce using rule 50
	'gate'         reduce using rule 50
	'if'           reduce using rule 50
	'let'          reduce using rule 50
	'of'           reduce using rule 50
	'then'         reduce using rule 50
	'with'         reduce using rule 50
	'}'            reduce using rule 50
	L_integ        reduce using rule 50
	L_BitVariable  reduce using rule 50
	L_Var          reduce using rule 50
	L_Lambda       reduce using rule 50


State 172

	Gate -> 'ROOT_Y' Integer .                          (rule 49)

	'$'            reduce using rule 49
	'('            reduce using rule 49
	'()'           reduce using rule 49
	')'            reduce using rule 49
	','            reduce using rule 49
	'->'           reduce using rule 49
	'.'            reduce using rule 49
	';'            reduce using rule 49
	'@+'           reduce using rule 49
	'@+i'          reduce using rule 49
	'@-'           reduce using rule 49
	'@-i'          reduce using rule 49
	'@0'           reduce using rule 49
	'@1'           reduce using rule 49
	'False'        reduce using rule 49
	'True'         reduce using rule 49
	'['            reduce using rule 49
	'[]'           reduce using rule 49
	']'            reduce using rule 49
	'case'         reduce using rule 49
	'else'         reduce using rule 49
	'gate'         reduce using rule 49
	'if'           reduce using rule 49
	'let'          reduce using rule 49
	'of'           reduce using rule 49
	'then'         reduce using rule 49
	'with'         reduce using rule 49
	'}'            reduce using rule 49
	L_integ        reduce using rule 49
	L_BitVariable  reduce using rule 49
	L_Var          reduce using rule 49
	L_Lambda       reduce using rule 49


State 173

	Gate -> 'ROOT_X_DAG' Integer .                      (rule 48)

	'$'            reduce using rule 48
	'('            reduce using rule 48
	'()'           reduce using rule 48
	')'            reduce using rule 48
	','            reduce using rule 48
	'->'           reduce using rule 48
	'.'            reduce using rule 48
	';'            reduce using rule 48
	'@+'           reduce using rule 48
	'@+i'          reduce using rule 48
	'@-'           reduce using rule 48
	'@-i'          reduce using rule 48
	'@0'           reduce using rule 48
	'@1'           reduce using rule 48
	'False'        reduce using rule 48
	'True'         reduce using rule 48
	'['            reduce using rule 48
	'[]'           reduce using rule 48
	']'            reduce using rule 48
	'case'         reduce using rule 48
	'else'         reduce using rule 48
	'gate'         reduce using rule 48
	'if'           reduce using rule 48
	'let'          reduce using rule 48
	'of'           reduce using rule 48
	'then'         reduce using rule 48
	'with'         reduce using rule 48
	'}'            reduce using rule 48
	L_integ        reduce using rule 48
	L_BitVariable  reduce using rule 48
	L_Var          reduce using rule 48
	L_Lambda       reduce using rule 48


State 174

	Gate -> 'ROOT_X' Integer .                          (rule 47)

	'$'            reduce using rule 47
	'('            reduce using rule 47
	'()'           reduce using rule 47
	')'            reduce using rule 47
	','            reduce using rule 47
	'->'           reduce using rule 47
	'.'            reduce using rule 47
	';'            reduce using rule 47
	'@+'           reduce using rule 47
	'@+i'          reduce using rule 47
	'@-'           reduce using rule 47
	'@-i'          reduce using rule 47
	'@0'           reduce using rule 47
	'@1'           reduce using rule 47
	'False'        reduce using rule 47
	'True'         reduce using rule 47
	'['            reduce using rule 47
	'[]'           reduce using rule 47
	']'            reduce using rule 47
	'case'         reduce using rule 47
	'else'         reduce using rule 47
	'gate'         reduce using rule 47
	'if'           reduce using rule 47
	'let'          reduce using rule 47
	'of'           reduce using rule 47
	'then'         reduce using rule 47
	'with'         reduce using rule 47
	'}'            reduce using rule 47
	L_integ        reduce using rule 47
	L_BitVariable  reduce using rule 47
	L_Var          reduce using rule 47
	L_Lambda       reduce using rule 47


State 175

	Gate -> 'ROOT_SWAP_DAG' Integer .                   (rule 74)

	'$'            reduce using rule 74
	'('            reduce using rule 74
	'()'           reduce using rule 74
	')'            reduce using rule 74
	','            reduce using rule 74
	'->'           reduce using rule 74
	'.'            reduce using rule 74
	';'            reduce using rule 74
	'@+'           reduce using rule 74
	'@+i'          reduce using rule 74
	'@-'           reduce using rule 74
	'@-i'          reduce using rule 74
	'@0'           reduce using rule 74
	'@1'           reduce using rule 74
	'False'        reduce using rule 74
	'True'         reduce using rule 74
	'['            reduce using rule 74
	'[]'           reduce using rule 74
	']'            reduce using rule 74
	'case'         reduce using rule 74
	'else'         reduce using rule 74
	'gate'         reduce using rule 74
	'if'           reduce using rule 74
	'let'          reduce using rule 74
	'of'           reduce using rule 74
	'then'         reduce using rule 74
	'with'         reduce using rule 74
	'}'            reduce using rule 74
	L_integ        reduce using rule 74
	L_BitVariable  reduce using rule 74
	L_Var          reduce using rule 74
	L_Lambda       reduce using rule 74


State 176

	Gate -> 'ROOT_SWAP' Integer .                       (rule 73)

	'$'            reduce using rule 73
	'('            reduce using rule 73
	'()'           reduce using rule 73
	')'            reduce using rule 73
	','            reduce using rule 73
	'->'           reduce using rule 73
	'.'            reduce using rule 73
	';'            reduce using rule 73
	'@+'           reduce using rule 73
	'@+i'          reduce using rule 73
	'@-'           reduce using rule 73
	'@-i'          reduce using rule 73
	'@0'           reduce using rule 73
	'@1'           reduce using rule 73
	'False'        reduce using rule 73
	'True'         reduce using rule 73
	'['            reduce using rule 73
	'[]'           reduce using rule 73
	']'            reduce using rule 73
	'case'         reduce using rule 73
	'else'         reduce using rule 73
	'gate'         reduce using rule 73
	'if'           reduce using rule 73
	'let'          reduce using rule 73
	'of'           reduce using rule 73
	'then'         reduce using rule 73
	'with'         reduce using rule 73
	'}'            reduce using rule 73
	L_integ        reduce using rule 73
	L_BitVariable  reduce using rule 73
	L_Var          reduce using rule 73
	L_Lambda       reduce using rule 73


State 177

	Gate -> 'QFT_DAG' Integer .                         (rule 76)

	'$'            reduce using rule 76
	'('            reduce using rule 76
	'()'           reduce using rule 76
	')'            reduce using rule 76
	','            reduce using rule 76
	'->'           reduce using rule 76
	'.'            reduce using rule 76
	';'            reduce using rule 76
	'@+'           reduce using rule 76
	'@+i'          reduce using rule 76
	'@-'           reduce using rule 76
	'@-i'          reduce using rule 76
	'@0'           reduce using rule 76
	'@1'           reduce using rule 76
	'False'        reduce using rule 76
	'True'         reduce using rule 76
	'['            reduce using rule 76
	'[]'           reduce using rule 76
	']'            reduce using rule 76
	'case'         reduce using rule 76
	'else'         reduce using rule 76
	'gate'         reduce using rule 76
	'if'           reduce using rule 76
	'let'          reduce using rule 76
	'of'           reduce using rule 76
	'then'         reduce using rule 76
	'with'         reduce using rule 76
	'}'            reduce using rule 76
	L_integ        reduce using rule 76
	L_BitVariable  reduce using rule 76
	L_Var          reduce using rule 76
	L_Lambda       reduce using rule 76


State 178

	Gate -> 'QFT' Integer .                             (rule 75)

	'$'            reduce using rule 75
	'('            reduce using rule 75
	'()'           reduce using rule 75
	')'            reduce using rule 75
	','            reduce using rule 75
	'->'           reduce using rule 75
	'.'            reduce using rule 75
	';'            reduce using rule 75
	'@+'           reduce using rule 75
	'@+i'          reduce using rule 75
	'@-'           reduce using rule 75
	'@-i'          reduce using rule 75
	'@0'           reduce using rule 75
	'@1'           reduce using rule 75
	'False'        reduce using rule 75
	'True'         reduce using rule 75
	'['            reduce using rule 75
	'[]'           reduce using rule 75
	']'            reduce using rule 75
	'case'         reduce using rule 75
	'else'         reduce using rule 75
	'gate'         reduce using rule 75
	'if'           reduce using rule 75
	'let'          reduce using rule 75
	'of'           reduce using rule 75
	'then'         reduce using rule 75
	'with'         reduce using rule 75
	'}'            reduce using rule 75
	L_integ        reduce using rule 75
	L_BitVariable  reduce using rule 75
	L_Var          reduce using rule 75
	L_Lambda       reduce using rule 75


State 179

	Term1 -> 'if' Term 'then' . Term 'else' Term        (rule 92)

	'('            shift, and enter state 65
	'()'           shift, and enter state 66
	'@+'           shift, and enter state 67
	'@+i'          shift, and enter state 68
	'@-'           shift, and enter state 69
	'@-i'          shift, and enter state 70
	'@0'           shift, and enter state 71
	'@1'           shift, and enter state 72
	'False'        shift, and enter state 73
	'True'         shift, and enter state 74
	'['            shift, and enter state 75
	'[]'           shift, and enter state 76
	'case'         shift, and enter state 77
	'gate'         shift, and enter state 78
	'if'           shift, and enter state 79
	'let'          shift, and enter state 80
	'with'         shift, and enter state 81
	L_integ        shift, and enter state 43
	L_BitVariable  shift, and enter state 82
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 83

	Integer        goto state 48
	BitVariable    goto state 49
	Var            goto state 50
	Lambda         goto state 51
	IntegerExpr    goto state 52
	IntegerExpr1   goto state 53
	IntegerExpr2   goto state 54
	BoolValue      goto state 55
	BasisState     goto state 56
	Bit            goto state 57
	Tuple          goto state 58
	Term1          goto state 59
	Term2          goto state 60
	Term3          goto state 61
	Term           goto state 195
	Term4          goto state 63
	List           goto state 64

State 180

	Term1 -> 'let' '{' Var . '=' Term '}' 'in' Term     (rule 93)

	'='            shift, and enter state 194


State 181

	Term1 -> 'let' '{' '(' . Var ',' ListVar ')' '=' Term '}' 'in' Term    (rule 94)

	L_Var          shift, and enter state 8

	Var            goto state 193

State 182

	ControlTerm -> '[' Term . ']'                       (rule 88)
	ControlTerms -> '[' Term . ',' ListTerm ']'         (rule 89)

	','            shift, and enter state 191
	']'            shift, and enter state 192


State 183

	Term2 -> 'with' ControlTerms 'ctrl' . ControlBasisStates    (rule 102)
	Term2 -> 'with' ControlTerms 'ctrl' . ControlBits    (rule 104)

	'['            shift, and enter state 190

	ControlBasisStatesgoto state 188
	ControlBits    goto state 189

State 184

	Term2 -> 'with' ControlTerm 'ctrl' . ControlBasisState    (rule 101)
	Term2 -> 'with' ControlTerm 'ctrl' . ControlBit     (rule 103)

	'['            shift, and enter state 187

	ControlBasisStategoto state 185
	ControlBit     goto state 186

State 185

	Term2 -> 'with' ControlTerm 'ctrl' ControlBasisState .    (rule 101)

	'$'            reduce using rule 101
	'('            reduce using rule 101
	'()'           reduce using rule 101
	')'            reduce using rule 101
	','            reduce using rule 101
	'->'           reduce using rule 101
	'.'            reduce using rule 101
	';'            reduce using rule 101
	'@+'           reduce using rule 101
	'@+i'          reduce using rule 101
	'@-'           reduce using rule 101
	'@-i'          reduce using rule 101
	'@0'           reduce using rule 101
	'@1'           reduce using rule 101
	'False'        reduce using rule 101
	'True'         reduce using rule 101
	'['            reduce using rule 101
	'[]'           reduce using rule 101
	']'            reduce using rule 101
	'case'         reduce using rule 101
	'else'         reduce using rule 101
	'gate'         reduce using rule 101
	'if'           reduce using rule 101
	'let'          reduce using rule 101
	'of'           reduce using rule 101
	'then'         reduce using rule 101
	'with'         reduce using rule 101
	'}'            reduce using rule 101
	L_integ        reduce using rule 101
	L_BitVariable  reduce using rule 101
	L_Var          reduce using rule 101
	L_Lambda       reduce using rule 101


State 186

	Term2 -> 'with' ControlTerm 'ctrl' ControlBit .     (rule 103)

	'$'            reduce using rule 103
	'('            reduce using rule 103
	'()'           reduce using rule 103
	')'            reduce using rule 103
	','            reduce using rule 103
	'->'           reduce using rule 103
	'.'            reduce using rule 103
	';'            reduce using rule 103
	'@+'           reduce using rule 103
	'@+i'          reduce using rule 103
	'@-'           reduce using rule 103
	'@-i'          reduce using rule 103
	'@0'           reduce using rule 103
	'@1'           reduce using rule 103
	'False'        reduce using rule 103
	'True'         reduce using rule 103
	'['            reduce using rule 103
	'[]'           reduce using rule 103
	']'            reduce using rule 103
	'case'         reduce using rule 103
	'else'         reduce using rule 103
	'gate'         reduce using rule 103
	'if'           reduce using rule 103
	'let'          reduce using rule 103
	'of'           reduce using rule 103
	'then'         reduce using rule 103
	'with'         reduce using rule 103
	'}'            reduce using rule 103
	L_integ        reduce using rule 103
	L_BitVariable  reduce using rule 103
	L_Var          reduce using rule 103
	L_Lambda       reduce using rule 103


State 187

	ControlBasisState -> '[' . BasisState ']'           (rule 79)
	ControlBit -> '[' . Integer ']'                     (rule 83)

	'@+'           shift, and enter state 67
	'@+i'          shift, and enter state 68
	'@-'           shift, and enter state 69
	'@-i'          shift, and enter state 70
	'@0'           shift, and enter state 71
	'@1'           shift, and enter state 72
	L_integ        shift, and enter state 43

	Integer        goto state 227
	BasisState     goto state 228

State 188

	Term2 -> 'with' ControlTerms 'ctrl' ControlBasisStates .    (rule 102)

	'$'            reduce using rule 102
	'('            reduce using rule 102
	'()'           reduce using rule 102
	')'            reduce using rule 102
	','            reduce using rule 102
	'->'           reduce using rule 102
	'.'            reduce using rule 102
	';'            reduce using rule 102
	'@+'           reduce using rule 102
	'@+i'          reduce using rule 102
	'@-'           reduce using rule 102
	'@-i'          reduce using rule 102
	'@0'           reduce using rule 102
	'@1'           reduce using rule 102
	'False'        reduce using rule 102
	'True'         reduce using rule 102
	'['            reduce using rule 102
	'[]'           reduce using rule 102
	']'            reduce using rule 102
	'case'         reduce using rule 102
	'else'         reduce using rule 102
	'gate'         reduce using rule 102
	'if'           reduce using rule 102
	'let'          reduce using rule 102
	'of'           reduce using rule 102
	'then'         reduce using rule 102
	'with'         reduce using rule 102
	'}'            reduce using rule 102
	L_integ        reduce using rule 102
	L_BitVariable  reduce using rule 102
	L_Var          reduce using rule 102
	L_Lambda       reduce using rule 102


State 189

	Term2 -> 'with' ControlTerms 'ctrl' ControlBits .    (rule 104)

	'$'            reduce using rule 104
	'('            reduce using rule 104
	'()'           reduce using rule 104
	')'            reduce using rule 104
	','            reduce using rule 104
	'->'           reduce using rule 104
	'.'            reduce using rule 104
	';'            reduce using rule 104
	'@+'           reduce using rule 104
	'@+i'          reduce using rule 104
	'@-'           reduce using rule 104
	'@-i'          reduce using rule 104
	'@0'           reduce using rule 104
	'@1'           reduce using rule 104
	'False'        reduce using rule 104
	'True'         reduce using rule 104
	'['            reduce using rule 104
	'[]'           reduce using rule 104
	']'            reduce using rule 104
	'case'         reduce using rule 104
	'else'         reduce using rule 104
	'gate'         reduce using rule 104
	'if'           reduce using rule 104
	'let'          reduce using rule 104
	'of'           reduce using rule 104
	'then'         reduce using rule 104
	'with'         reduce using rule 104
	'}'            reduce using rule 104
	L_integ        reduce using rule 104
	L_BitVariable  reduce using rule 104
	L_Var          reduce using rule 104
	L_Lambda       reduce using rule 104


State 190

	ControlBasisStates -> '[' . BasisState ',' ListBasisState ']'    (rule 80)
	ControlBits -> '[' . Integer ',' ListInteger ']'    (rule 84)

	'@+'           shift, and enter state 67
	'@+i'          shift, and enter state 68
	'@-'           shift, and enter state 69
	'@-i'          shift, and enter state 70
	'@0'           shift, and enter state 71
	'@1'           shift, and enter state 72
	L_integ        shift, and enter state 43

	Integer        goto state 225
	BasisState     goto state 226

State 191

	ControlTerms -> '[' Term ',' . ListTerm ']'         (rule 89)

	'('            shift, and enter state 65
	'()'           shift, and enter state 66
	'@+'           shift, and enter state 67
	'@+i'          shift, and enter state 68
	'@-'           shift, and enter state 69
	'@-i'          shift, and enter state 70
	'@0'           shift, and enter state 71
	'@1'           shift, and enter state 72
	'False'        shift, and enter state 73
	'True'         shift, and enter state 74
	'['            shift, and enter state 75
	'[]'           shift, and enter state 76
	'case'         shift, and enter state 77
	'gate'         shift, and enter state 78
	'if'           shift, and enter state 79
	'let'          shift, and enter state 80
	'with'         shift, and enter state 81
	L_integ        shift, and enter state 43
	L_BitVariable  shift, and enter state 82
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 83

	Integer        goto state 48
	BitVariable    goto state 49
	Var            goto state 50
	Lambda         goto state 51
	IntegerExpr    goto state 52
	IntegerExpr1   goto state 53
	IntegerExpr2   goto state 54
	BoolValue      goto state 55
	BasisState     goto state 56
	Bit            goto state 57
	Tuple          goto state 58
	ListTerm       goto state 224
	Term1          goto state 59
	Term2          goto state 60
	Term3          goto state 61
	Term           goto state 201
	Term4          goto state 63
	List           goto state 64

State 192

	ControlTerm -> '[' Term ']' .                       (rule 88)

	'ctrl'         reduce using rule 88


State 193

	Term1 -> 'let' '{' '(' Var . ',' ListVar ')' '=' Term '}' 'in' Term    (rule 94)

	','            shift, and enter state 223


State 194

	Term1 -> 'let' '{' Var '=' . Term '}' 'in' Term     (rule 93)

	'('            shift, and enter state 65
	'()'           shift, and enter state 66
	'@+'           shift, and enter state 67
	'@+i'          shift, and enter state 68
	'@-'           shift, and enter state 69
	'@-i'          shift, and enter state 70
	'@0'           shift, and enter state 71
	'@1'           shift, and enter state 72
	'False'        shift, and enter state 73
	'True'         shift, and enter state 74
	'['            shift, and enter state 75
	'[]'           shift, and enter state 76
	'case'         shift, and enter state 77
	'gate'         shift, and enter state 78
	'if'           shift, and enter state 79
	'let'          shift, and enter state 80
	'with'         shift, and enter state 81
	L_integ        shift, and enter state 43
	L_BitVariable  shift, and enter state 82
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 83

	Integer        goto state 48
	BitVariable    goto state 49
	Var            goto state 50
	Lambda         goto state 51
	IntegerExpr    goto state 52
	IntegerExpr1   goto state 53
	IntegerExpr2   goto state 54
	BoolValue      goto state 55
	BasisState     goto state 56
	Bit            goto state 57
	Tuple          goto state 58
	Term1          goto state 59
	Term2          goto state 60
	Term3          goto state 61
	Term           goto state 222
	Term4          goto state 63
	List           goto state 64

State 195

	Term1 -> 'if' Term 'then' Term . 'else' Term        (rule 92)

	'else'         shift, and enter state 221


State 196

	Gate -> 'U2' '(' Angle . ',' Angle ')'              (rule 65)

	','            shift, and enter state 220


State 197

	Gate -> 'U3' '(' Angle . ',' Angle ',' Angle ')'    (rule 66)

	','            shift, and enter state 219


State 198

	CaseExpression -> Term . '->' Term                  (rule 124)

	'->'           shift, and enter state 218


State 199

	Term1 -> 'case' Term 'of' CaseExpression . ListCaseExpression    (rule 97)

	'('            shift, and enter state 65
	'()'           shift, and enter state 66
	'@+'           shift, and enter state 67
	'@+i'          shift, and enter state 68
	'@-'           shift, and enter state 69
	'@-i'          shift, and enter state 70
	'@0'           shift, and enter state 71
	'@1'           shift, and enter state 72
	'False'        shift, and enter state 73
	'True'         shift, and enter state 74
	'['            shift, and enter state 75
	'[]'           shift, and enter state 76
	'case'         shift, and enter state 77
	'gate'         shift, and enter state 78
	'if'           shift, and enter state 79
	'let'          shift, and enter state 80
	'with'         shift, and enter state 81
	L_integ        shift, and enter state 43
	L_BitVariable  shift, and enter state 82
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 83

	Integer        goto state 48
	BitVariable    goto state 49
	Var            goto state 50
	Lambda         goto state 51
	IntegerExpr    goto state 52
	IntegerExpr1   goto state 53
	IntegerExpr2   goto state 54
	BoolValue      goto state 55
	BasisState     goto state 56
	Bit            goto state 57
	Tuple          goto state 58
	Term1          goto state 59
	Term2          goto state 60
	Term3          goto state 61
	Term           goto state 198
	Term4          goto state 63
	List           goto state 64
	CaseExpression goto state 216
	ListCaseExpressiongoto state 217

State 200

	List -> '[' Term ',' ListTerm . ']'                 (rule 122)

	']'            shift, and enter state 215


State 201

	ListTerm -> Term .                                  (rule 90)
	ListTerm -> Term . ',' ListTerm                     (rule 91)

	')'            reduce using rule 90
	','            shift, and enter state 214
	']'            reduce using rule 90


State 202

	Tuple -> '(' Term ',' ListTerm . ')'                (rule 87)

	')'            shift, and enter state 213


State 203

	Term4 -> '(' Term . ')'                             (rule 119)

	')'            shift, and enter state 155


State 204

	IntegerExpr -> IntegerExpr . '+' IntegerExpr1       (rule 6)
	IntegerExpr -> IntegerExpr . '-' IntegerExpr1       (rule 7)
	IntegerExpr2 -> '(' IntegerExpr . ')'               (rule 13)

	')'            shift, and enter state 157
	'+'            shift, and enter state 136
	'-'            shift, and enter state 137


State 205

	Term1 -> Lambda Var Type '.' . Term                 (rule 98)

	'('            shift, and enter state 65
	'()'           shift, and enter state 66
	'@+'           shift, and enter state 67
	'@+i'          shift, and enter state 68
	'@-'           shift, and enter state 69
	'@-i'          shift, and enter state 70
	'@0'           shift, and enter state 71
	'@1'           shift, and enter state 72
	'False'        shift, and enter state 73
	'True'         shift, and enter state 74
	'['            shift, and enter state 75
	'[]'           shift, and enter state 76
	'case'         shift, and enter state 77
	'gate'         shift, and enter state 78
	'if'           shift, and enter state 79
	'let'          shift, and enter state 80
	'with'         shift, and enter state 81
	L_integ        shift, and enter state 43
	L_BitVariable  shift, and enter state 82
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 83

	Integer        goto state 48
	BitVariable    goto state 49
	Var            goto state 50
	Lambda         goto state 51
	IntegerExpr    goto state 52
	IntegerExpr1   goto state 53
	IntegerExpr2   goto state 54
	BoolValue      goto state 55
	BasisState     goto state 56
	Bit            goto state 57
	Tuple          goto state 58
	Term1          goto state 59
	Term2          goto state 60
	Term3          goto state 61
	Term           goto state 212
	Term4          goto state 63
	List           goto state 64

State 206

	Term1 -> Var ',' ListVar '<-' . Term ';' Term       (rule 96)

	'('            shift, and enter state 65
	'()'           shift, and enter state 66
	'@+'           shift, and enter state 67
	'@+i'          shift, and enter state 68
	'@-'           shift, and enter state 69
	'@-i'          shift, and enter state 70
	'@0'           shift, and enter state 71
	'@1'           shift, and enter state 72
	'False'        shift, and enter state 73
	'True'         shift, and enter state 74
	'['            shift, and enter state 75
	'[]'           shift, and enter state 76
	'case'         shift, and enter state 77
	'gate'         shift, and enter state 78
	'if'           shift, and enter state 79
	'let'          shift, and enter state 80
	'with'         shift, and enter state 81
	L_integ        shift, and enter state 43
	L_BitVariable  shift, and enter state 82
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 83

	Integer        goto state 48
	BitVariable    goto state 49
	Var            goto state 50
	Lambda         goto state 51
	IntegerExpr    goto state 52
	IntegerExpr1   goto state 53
	IntegerExpr2   goto state 54
	BoolValue      goto state 55
	BasisState     goto state 56
	Bit            goto state 57
	Tuple          goto state 58
	Term1          goto state 59
	Term2          goto state 60
	Term3          goto state 61
	Term           goto state 211
	Term4          goto state 63
	List           goto state 64

State 207

	ListVar -> Var ',' . ListVar                        (rule 78)

	L_Var          shift, and enter state 8

	Var            goto state 142
	ListVar        goto state 210

State 208

	Term1 -> Var '<-' Term ';' . Term                   (rule 95)

	'('            shift, and enter state 65
	'()'           shift, and enter state 66
	'@+'           shift, and enter state 67
	'@+i'          shift, and enter state 68
	'@-'           shift, and enter state 69
	'@-i'          shift, and enter state 70
	'@0'           shift, and enter state 71
	'@1'           shift, and enter state 72
	'False'        shift, and enter state 73
	'True'         shift, and enter state 74
	'['            shift, and enter state 75
	'[]'           shift, and enter state 76
	'case'         shift, and enter state 77
	'gate'         shift, and enter state 78
	'if'           shift, and enter state 79
	'let'          shift, and enter state 80
	'with'         shift, and enter state 81
	L_integ        shift, and enter state 43
	L_BitVariable  shift, and enter state 82
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 83

	Integer        goto state 48
	BitVariable    goto state 49
	Var            goto state 50
	Lambda         goto state 51
	IntegerExpr    goto state 52
	IntegerExpr1   goto state 53
	IntegerExpr2   goto state 54
	BoolValue      goto state 55
	BasisState     goto state 56
	Bit            goto state 57
	Tuple          goto state 58
	Term1          goto state 59
	Term2          goto state 60
	Term3          goto state 61
	Term           goto state 209
	Term4          goto state 63
	List           goto state 64

State 209

	Term1 -> Var '<-' Term ';' Term .                   (rule 95)

	'('            reduce using rule 95
	'()'           reduce using rule 95
	')'            reduce using rule 95
	','            reduce using rule 95
	'->'           reduce using rule 95
	';'            reduce using rule 95
	'@+'           reduce using rule 95
	'@+i'          reduce using rule 95
	'@-'           reduce using rule 95
	'@-i'          reduce using rule 95
	'@0'           reduce using rule 95
	'@1'           reduce using rule 95
	'False'        reduce using rule 95
	'True'         reduce using rule 95
	'['            reduce using rule 95
	'[]'           reduce using rule 95
	']'            reduce using rule 95
	'case'         reduce using rule 95
	'else'         reduce using rule 95
	'gate'         reduce using rule 95
	'if'           reduce using rule 95
	'let'          reduce using rule 95
	'of'           reduce using rule 95
	'then'         reduce using rule 95
	'with'         reduce using rule 95
	'}'            reduce using rule 95
	L_integ        reduce using rule 95
	L_BitVariable  reduce using rule 95
	L_Var          reduce using rule 95
	L_Lambda       reduce using rule 95


State 210

	ListVar -> Var ',' ListVar .                        (rule 78)

	')'            reduce using rule 78
	'<-'           reduce using rule 78


State 211

	Term1 -> Var ',' ListVar '<-' Term . ';' Term       (rule 96)

	';'            shift, and enter state 242


State 212

	Term1 -> Lambda Var Type '.' Term .                 (rule 98)

	'('            reduce using rule 98
	'()'           reduce using rule 98
	')'            reduce using rule 98
	','            reduce using rule 98
	'->'           reduce using rule 98
	';'            reduce using rule 98
	'@+'           reduce using rule 98
	'@+i'          reduce using rule 98
	'@-'           reduce using rule 98
	'@-i'          reduce using rule 98
	'@0'           reduce using rule 98
	'@1'           reduce using rule 98
	'False'        reduce using rule 98
	'True'         reduce using rule 98
	'['            reduce using rule 98
	'[]'           reduce using rule 98
	']'            reduce using rule 98
	'case'         reduce using rule 98
	'else'         reduce using rule 98
	'gate'         reduce using rule 98
	'if'           reduce using rule 98
	'let'          reduce using rule 98
	'of'           reduce using rule 98
	'then'         reduce using rule 98
	'with'         reduce using rule 98
	'}'            reduce using rule 98
	L_integ        reduce using rule 98
	L_BitVariable  reduce using rule 98
	L_Var          reduce using rule 98
	L_Lambda       reduce using rule 98


State 213

	Tuple -> '(' Term ',' ListTerm ')' .                (rule 87)

	'$'            reduce using rule 87
	'('            reduce using rule 87
	'()'           reduce using rule 87
	')'            reduce using rule 87
	','            reduce using rule 87
	'->'           reduce using rule 87
	'.'            reduce using rule 87
	';'            reduce using rule 87
	'@+'           reduce using rule 87
	'@+i'          reduce using rule 87
	'@-'           reduce using rule 87
	'@-i'          reduce using rule 87
	'@0'           reduce using rule 87
	'@1'           reduce using rule 87
	'False'        reduce using rule 87
	'True'         reduce using rule 87
	'['            reduce using rule 87
	'[]'           reduce using rule 87
	']'            reduce using rule 87
	'case'         reduce using rule 87
	'else'         reduce using rule 87
	'gate'         reduce using rule 87
	'if'           reduce using rule 87
	'let'          reduce using rule 87
	'of'           reduce using rule 87
	'then'         reduce using rule 87
	'with'         reduce using rule 87
	'}'            reduce using rule 87
	L_integ        reduce using rule 87
	L_BitVariable  reduce using rule 87
	L_Var          reduce using rule 87
	L_Lambda       reduce using rule 87


State 214

	ListTerm -> Term ',' . ListTerm                     (rule 91)

	'('            shift, and enter state 65
	'()'           shift, and enter state 66
	'@+'           shift, and enter state 67
	'@+i'          shift, and enter state 68
	'@-'           shift, and enter state 69
	'@-i'          shift, and enter state 70
	'@0'           shift, and enter state 71
	'@1'           shift, and enter state 72
	'False'        shift, and enter state 73
	'True'         shift, and enter state 74
	'['            shift, and enter state 75
	'[]'           shift, and enter state 76
	'case'         shift, and enter state 77
	'gate'         shift, and enter state 78
	'if'           shift, and enter state 79
	'let'          shift, and enter state 80
	'with'         shift, and enter state 81
	L_integ        shift, and enter state 43
	L_BitVariable  shift, and enter state 82
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 83

	Integer        goto state 48
	BitVariable    goto state 49
	Var            goto state 50
	Lambda         goto state 51
	IntegerExpr    goto state 52
	IntegerExpr1   goto state 53
	IntegerExpr2   goto state 54
	BoolValue      goto state 55
	BasisState     goto state 56
	Bit            goto state 57
	Tuple          goto state 58
	ListTerm       goto state 241
	Term1          goto state 59
	Term2          goto state 60
	Term3          goto state 61
	Term           goto state 201
	Term4          goto state 63
	List           goto state 64

State 215

	List -> '[' Term ',' ListTerm ']' .                 (rule 122)

	'$'            reduce using rule 122
	'('            reduce using rule 122
	'()'           reduce using rule 122
	')'            reduce using rule 122
	','            reduce using rule 122
	'->'           reduce using rule 122
	'.'            reduce using rule 122
	';'            reduce using rule 122
	'@+'           reduce using rule 122
	'@+i'          reduce using rule 122
	'@-'           reduce using rule 122
	'@-i'          reduce using rule 122
	'@0'           reduce using rule 122
	'@1'           reduce using rule 122
	'False'        reduce using rule 122
	'True'         reduce using rule 122
	'['            reduce using rule 122
	'[]'           reduce using rule 122
	']'            reduce using rule 122
	'case'         reduce using rule 122
	'else'         reduce using rule 122
	'gate'         reduce using rule 122
	'if'           reduce using rule 122
	'let'          reduce using rule 122
	'of'           reduce using rule 122
	'then'         reduce using rule 122
	'with'         reduce using rule 122
	'}'            reduce using rule 122
	L_integ        reduce using rule 122
	L_BitVariable  reduce using rule 122
	L_Var          reduce using rule 122
	L_Lambda       reduce using rule 122


State 216

	ListCaseExpression -> CaseExpression .              (rule 125)
	ListCaseExpression -> CaseExpression . ListCaseExpression    (rule 126)

	'('            shift, and enter state 65
			(reduce using rule 125)

	'()'           shift, and enter state 66
			(reduce using rule 125)

	')'            reduce using rule 125
	','            reduce using rule 125
	'->'           reduce using rule 125
	';'            reduce using rule 125
	'@+'           shift, and enter state 67
			(reduce using rule 125)

	'@+i'          shift, and enter state 68
			(reduce using rule 125)

	'@-'           shift, and enter state 69
			(reduce using rule 125)

	'@-i'          shift, and enter state 70
			(reduce using rule 125)

	'@0'           shift, and enter state 71
			(reduce using rule 125)

	'@1'           shift, and enter state 72
			(reduce using rule 125)

	'False'        shift, and enter state 73
			(reduce using rule 125)

	'True'         shift, and enter state 74
			(reduce using rule 125)

	'['            shift, and enter state 75
			(reduce using rule 125)

	'[]'           shift, and enter state 76
			(reduce using rule 125)

	']'            reduce using rule 125
	'case'         shift, and enter state 77
			(reduce using rule 125)

	'else'         reduce using rule 125
	'gate'         shift, and enter state 78
			(reduce using rule 125)

	'if'           shift, and enter state 79
			(reduce using rule 125)

	'let'          shift, and enter state 80
			(reduce using rule 125)

	'of'           reduce using rule 125
	'then'         reduce using rule 125
	'with'         shift, and enter state 81
			(reduce using rule 125)

	'}'            reduce using rule 125
	L_integ        shift, and enter state 43
			(reduce using rule 125)

	L_BitVariable  shift, and enter state 82
			(reduce using rule 125)

	L_Var          shift, and enter state 8
			(reduce using rule 125)

	L_Lambda       shift, and enter state 83
			(reduce using rule 125)


	Integer        goto state 48
	BitVariable    goto state 49
	Var            goto state 50
	Lambda         goto state 51
	IntegerExpr    goto state 52
	IntegerExpr1   goto state 53
	IntegerExpr2   goto state 54
	BoolValue      goto state 55
	BasisState     goto state 56
	Bit            goto state 57
	Tuple          goto state 58
	Term1          goto state 59
	Term2          goto state 60
	Term3          goto state 61
	Term           goto state 198
	Term4          goto state 63
	List           goto state 64
	CaseExpression goto state 216
	ListCaseExpressiongoto state 240

State 217

	Term1 -> 'case' Term 'of' CaseExpression ListCaseExpression .    (rule 97)

	'('            reduce using rule 97
	'()'           reduce using rule 97
	')'            reduce using rule 97
	','            reduce using rule 97
	'->'           reduce using rule 97
	';'            reduce using rule 97
	'@+'           reduce using rule 97
	'@+i'          reduce using rule 97
	'@-'           reduce using rule 97
	'@-i'          reduce using rule 97
	'@0'           reduce using rule 97
	'@1'           reduce using rule 97
	'False'        reduce using rule 97
	'True'         reduce using rule 97
	'['            reduce using rule 97
	'[]'           reduce using rule 97
	']'            reduce using rule 97
	'case'         reduce using rule 97
	'else'         reduce using rule 97
	'gate'         reduce using rule 97
	'if'           reduce using rule 97
	'let'          reduce using rule 97
	'of'           reduce using rule 97
	'then'         reduce using rule 97
	'with'         reduce using rule 97
	'}'            reduce using rule 97
	L_integ        reduce using rule 97
	L_BitVariable  reduce using rule 97
	L_Var          reduce using rule 97
	L_Lambda       reduce using rule 97


State 218

	CaseExpression -> Term '->' . Term                  (rule 124)

	'('            shift, and enter state 65
	'()'           shift, and enter state 66
	'@+'           shift, and enter state 67
	'@+i'          shift, and enter state 68
	'@-'           shift, and enter state 69
	'@-i'          shift, and enter state 70
	'@0'           shift, and enter state 71
	'@1'           shift, and enter state 72
	'False'        shift, and enter state 73
	'True'         shift, and enter state 74
	'['            shift, and enter state 75
	'[]'           shift, and enter state 76
	'case'         shift, and enter state 77
	'gate'         shift, and enter state 78
	'if'           shift, and enter state 79
	'let'          shift, and enter state 80
	'with'         shift, and enter state 81
	L_integ        shift, and enter state 43
	L_BitVariable  shift, and enter state 82
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 83

	Integer        goto state 48
	BitVariable    goto state 49
	Var            goto state 50
	Lambda         goto state 51
	IntegerExpr    goto state 52
	IntegerExpr1   goto state 53
	IntegerExpr2   goto state 54
	BoolValue      goto state 55
	BasisState     goto state 56
	Bit            goto state 57
	Tuple          goto state 58
	Term1          goto state 59
	Term2          goto state 60
	Term3          goto state 61
	Term           goto state 239
	Term4          goto state 63
	List           goto state 64

State 219

	Gate -> 'U3' '(' Angle ',' . Angle ',' Angle ')'    (rule 66)

	L_doubl        shift, and enter state 2

	Double         goto state 163
	Angle          goto state 238

State 220

	Gate -> 'U2' '(' Angle ',' . Angle ')'              (rule 65)

	L_doubl        shift, and enter state 2

	Double         goto state 163
	Angle          goto state 237

State 221

	Term1 -> 'if' Term 'then' Term 'else' . Term        (rule 92)

	'('            shift, and enter state 65
	'()'           shift, and enter state 66
	'@+'           shift, and enter state 67
	'@+i'          shift, and enter state 68
	'@-'           shift, and enter state 69
	'@-i'          shift, and enter state 70
	'@0'           shift, and enter state 71
	'@1'           shift, and enter state 72
	'False'        shift, and enter state 73
	'True'         shift, and enter state 74
	'['            shift, and enter state 75
	'[]'           shift, and enter state 76
	'case'         shift, and enter state 77
	'gate'         shift, and enter state 78
	'if'           shift, and enter state 79
	'let'          shift, and enter state 80
	'with'         shift, and enter state 81
	L_integ        shift, and enter state 43
	L_BitVariable  shift, and enter state 82
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 83

	Integer        goto state 48
	BitVariable    goto state 49
	Var            goto state 50
	Lambda         goto state 51
	IntegerExpr    goto state 52
	IntegerExpr1   goto state 53
	IntegerExpr2   goto state 54
	BoolValue      goto state 55
	BasisState     goto state 56
	Bit            goto state 57
	Tuple          goto state 58
	Term1          goto state 59
	Term2          goto state 60
	Term3          goto state 61
	Term           goto state 236
	Term4          goto state 63
	List           goto state 64

State 222

	Term1 -> 'let' '{' Var '=' Term . '}' 'in' Term     (rule 93)

	'}'            shift, and enter state 235


State 223

	Term1 -> 'let' '{' '(' Var ',' . ListVar ')' '=' Term '}' 'in' Term    (rule 94)

	L_Var          shift, and enter state 8

	Var            goto state 142
	ListVar        goto state 234

State 224

	ControlTerms -> '[' Term ',' ListTerm . ']'         (rule 89)

	']'            shift, and enter state 233


State 225

	ControlBits -> '[' Integer . ',' ListInteger ']'    (rule 84)

	','            shift, and enter state 232


State 226

	ControlBasisStates -> '[' BasisState . ',' ListBasisState ']'    (rule 80)

	','            shift, and enter state 231


State 227

	ControlBit -> '[' Integer . ']'                     (rule 83)

	']'            shift, and enter state 230


State 228

	ControlBasisState -> '[' BasisState . ']'           (rule 79)

	']'            shift, and enter state 229


State 229

	ControlBasisState -> '[' BasisState ']' .           (rule 79)

	'$'            reduce using rule 79
	'('            reduce using rule 79
	'()'           reduce using rule 79
	')'            reduce using rule 79
	','            reduce using rule 79
	'->'           reduce using rule 79
	'.'            reduce using rule 79
	';'            reduce using rule 79
	'@+'           reduce using rule 79
	'@+i'          reduce using rule 79
	'@-'           reduce using rule 79
	'@-i'          reduce using rule 79
	'@0'           reduce using rule 79
	'@1'           reduce using rule 79
	'False'        reduce using rule 79
	'True'         reduce using rule 79
	'['            reduce using rule 79
	'[]'           reduce using rule 79
	']'            reduce using rule 79
	'case'         reduce using rule 79
	'else'         reduce using rule 79
	'gate'         reduce using rule 79
	'if'           reduce using rule 79
	'let'          reduce using rule 79
	'of'           reduce using rule 79
	'then'         reduce using rule 79
	'with'         reduce using rule 79
	'}'            reduce using rule 79
	L_integ        reduce using rule 79
	L_BitVariable  reduce using rule 79
	L_Var          reduce using rule 79
	L_Lambda       reduce using rule 79


State 230

	ControlBit -> '[' Integer ']' .                     (rule 83)

	'$'            reduce using rule 83
	'('            reduce using rule 83
	'()'           reduce using rule 83
	')'            reduce using rule 83
	','            reduce using rule 83
	'->'           reduce using rule 83
	'.'            reduce using rule 83
	';'            reduce using rule 83
	'@+'           reduce using rule 83
	'@+i'          reduce using rule 83
	'@-'           reduce using rule 83
	'@-i'          reduce using rule 83
	'@0'           reduce using rule 83
	'@1'           reduce using rule 83
	'False'        reduce using rule 83
	'True'         reduce using rule 83
	'['            reduce using rule 83
	'[]'           reduce using rule 83
	']'            reduce using rule 83
	'case'         reduce using rule 83
	'else'         reduce using rule 83
	'gate'         reduce using rule 83
	'if'           reduce using rule 83
	'let'          reduce using rule 83
	'of'           reduce using rule 83
	'then'         reduce using rule 83
	'with'         reduce using rule 83
	'}'            reduce using rule 83
	L_integ        reduce using rule 83
	L_BitVariable  reduce using rule 83
	L_Var          reduce using rule 83
	L_Lambda       reduce using rule 83


State 231

	ControlBasisStates -> '[' BasisState ',' . ListBasisState ']'    (rule 80)

	'@+'           shift, and enter state 67
	'@+i'          shift, and enter state 68
	'@-'           shift, and enter state 69
	'@-i'          shift, and enter state 70
	'@0'           shift, and enter state 71
	'@1'           shift, and enter state 72

	BasisState     goto state 250
	ListBasisState goto state 251

State 232

	ControlBits -> '[' Integer ',' . ListInteger ']'    (rule 84)

	L_integ        shift, and enter state 43

	Integer        goto state 248
	ListInteger    goto state 249

State 233

	ControlTerms -> '[' Term ',' ListTerm ']' .         (rule 89)

	'ctrl'         reduce using rule 89


State 234

	Term1 -> 'let' '{' '(' Var ',' ListVar . ')' '=' Term '}' 'in' Term    (rule 94)

	')'            shift, and enter state 247


State 235

	Term1 -> 'let' '{' Var '=' Term '}' . 'in' Term     (rule 93)

	'in'           shift, and enter state 246


State 236

	Term1 -> 'if' Term 'then' Term 'else' Term .        (rule 92)

	'('            reduce using rule 92
	'()'           reduce using rule 92
	')'            reduce using rule 92
	','            reduce using rule 92
	'->'           reduce using rule 92
	';'            reduce using rule 92
	'@+'           reduce using rule 92
	'@+i'          reduce using rule 92
	'@-'           reduce using rule 92
	'@-i'          reduce using rule 92
	'@0'           reduce using rule 92
	'@1'           reduce using rule 92
	'False'        reduce using rule 92
	'True'         reduce using rule 92
	'['            reduce using rule 92
	'[]'           reduce using rule 92
	']'            reduce using rule 92
	'case'         reduce using rule 92
	'else'         reduce using rule 92
	'gate'         reduce using rule 92
	'if'           reduce using rule 92
	'let'          reduce using rule 92
	'of'           reduce using rule 92
	'then'         reduce using rule 92
	'with'         reduce using rule 92
	'}'            reduce using rule 92
	L_integ        reduce using rule 92
	L_BitVariable  reduce using rule 92
	L_Var          reduce using rule 92
	L_Lambda       reduce using rule 92


State 237

	Gate -> 'U2' '(' Angle ',' Angle . ')'              (rule 65)

	')'            shift, and enter state 245


State 238

	Gate -> 'U3' '(' Angle ',' Angle . ',' Angle ')'    (rule 66)

	','            shift, and enter state 244


State 239

	CaseExpression -> Term '->' Term .                  (rule 124)

	'('            reduce using rule 124
	'()'           reduce using rule 124
	')'            reduce using rule 124
	','            reduce using rule 124
	'->'           reduce using rule 124
	';'            reduce using rule 124
	'@+'           reduce using rule 124
	'@+i'          reduce using rule 124
	'@-'           reduce using rule 124
	'@-i'          reduce using rule 124
	'@0'           reduce using rule 124
	'@1'           reduce using rule 124
	'False'        reduce using rule 124
	'True'         reduce using rule 124
	'['            reduce using rule 124
	'[]'           reduce using rule 124
	']'            reduce using rule 124
	'case'         reduce using rule 124
	'else'         reduce using rule 124
	'gate'         reduce using rule 124
	'if'           reduce using rule 124
	'let'          reduce using rule 124
	'of'           reduce using rule 124
	'then'         reduce using rule 124
	'with'         reduce using rule 124
	'}'            reduce using rule 124
	L_integ        reduce using rule 124
	L_BitVariable  reduce using rule 124
	L_Var          reduce using rule 124
	L_Lambda       reduce using rule 124


State 240

	ListCaseExpression -> CaseExpression ListCaseExpression .    (rule 126)

	'('            reduce using rule 126
	'()'           reduce using rule 126
	')'            reduce using rule 126
	','            reduce using rule 126
	'->'           reduce using rule 126
	';'            reduce using rule 126
	'@+'           reduce using rule 126
	'@+i'          reduce using rule 126
	'@-'           reduce using rule 126
	'@-i'          reduce using rule 126
	'@0'           reduce using rule 126
	'@1'           reduce using rule 126
	'False'        reduce using rule 126
	'True'         reduce using rule 126
	'['            reduce using rule 126
	'[]'           reduce using rule 126
	']'            reduce using rule 126
	'case'         reduce using rule 126
	'else'         reduce using rule 126
	'gate'         reduce using rule 126
	'if'           reduce using rule 126
	'let'          reduce using rule 126
	'of'           reduce using rule 126
	'then'         reduce using rule 126
	'with'         reduce using rule 126
	'}'            reduce using rule 126
	L_integ        reduce using rule 126
	L_BitVariable  reduce using rule 126
	L_Var          reduce using rule 126
	L_Lambda       reduce using rule 126


State 241

	ListTerm -> Term ',' ListTerm .                     (rule 91)

	')'            reduce using rule 91
	']'            reduce using rule 91


State 242

	Term1 -> Var ',' ListVar '<-' Term ';' . Term       (rule 96)

	'('            shift, and enter state 65
	'()'           shift, and enter state 66
	'@+'           shift, and enter state 67
	'@+i'          shift, and enter state 68
	'@-'           shift, and enter state 69
	'@-i'          shift, and enter state 70
	'@0'           shift, and enter state 71
	'@1'           shift, and enter state 72
	'False'        shift, and enter state 73
	'True'         shift, and enter state 74
	'['            shift, and enter state 75
	'[]'           shift, and enter state 76
	'case'         shift, and enter state 77
	'gate'         shift, and enter state 78
	'if'           shift, and enter state 79
	'let'          shift, and enter state 80
	'with'         shift, and enter state 81
	L_integ        shift, and enter state 43
	L_BitVariable  shift, and enter state 82
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 83

	Integer        goto state 48
	BitVariable    goto state 49
	Var            goto state 50
	Lambda         goto state 51
	IntegerExpr    goto state 52
	IntegerExpr1   goto state 53
	IntegerExpr2   goto state 54
	BoolValue      goto state 55
	BasisState     goto state 56
	Bit            goto state 57
	Tuple          goto state 58
	Term1          goto state 59
	Term2          goto state 60
	Term3          goto state 61
	Term           goto state 243
	Term4          goto state 63
	List           goto state 64

State 243

	Term1 -> Var ',' ListVar '<-' Term ';' Term .       (rule 96)

	'('            reduce using rule 96
	'()'           reduce using rule 96
	')'            reduce using rule 96
	','            reduce using rule 96
	'->'           reduce using rule 96
	';'            reduce using rule 96
	'@+'           reduce using rule 96
	'@+i'          reduce using rule 96
	'@-'           reduce using rule 96
	'@-i'          reduce using rule 96
	'@0'           reduce using rule 96
	'@1'           reduce using rule 96
	'False'        reduce using rule 96
	'True'         reduce using rule 96
	'['            reduce using rule 96
	'[]'           reduce using rule 96
	']'            reduce using rule 96
	'case'         reduce using rule 96
	'else'         reduce using rule 96
	'gate'         reduce using rule 96
	'if'           reduce using rule 96
	'let'          reduce using rule 96
	'of'           reduce using rule 96
	'then'         reduce using rule 96
	'with'         reduce using rule 96
	'}'            reduce using rule 96
	L_integ        reduce using rule 96
	L_BitVariable  reduce using rule 96
	L_Var          reduce using rule 96
	L_Lambda       reduce using rule 96


State 244

	Gate -> 'U3' '(' Angle ',' Angle ',' . Angle ')'    (rule 66)

	L_doubl        shift, and enter state 2

	Double         goto state 163
	Angle          goto state 258

State 245

	Gate -> 'U2' '(' Angle ',' Angle ')' .              (rule 65)

	'$'            reduce using rule 65
	'('            reduce using rule 65
	'()'           reduce using rule 65
	')'            reduce using rule 65
	','            reduce using rule 65
	'->'           reduce using rule 65
	'.'            reduce using rule 65
	';'            reduce using rule 65
	'@+'           reduce using rule 65
	'@+i'          reduce using rule 65
	'@-'           reduce using rule 65
	'@-i'          reduce using rule 65
	'@0'           reduce using rule 65
	'@1'           reduce using rule 65
	'False'        reduce using rule 65
	'True'         reduce using rule 65
	'['            reduce using rule 65
	'[]'           reduce using rule 65
	']'            reduce using rule 65
	'case'         reduce using rule 65
	'else'         reduce using rule 65
	'gate'         reduce using rule 65
	'if'           reduce using rule 65
	'let'          reduce using rule 65
	'of'           reduce using rule 65
	'then'         reduce using rule 65
	'with'         reduce using rule 65
	'}'            reduce using rule 65
	L_integ        reduce using rule 65
	L_BitVariable  reduce using rule 65
	L_Var          reduce using rule 65
	L_Lambda       reduce using rule 65


State 246

	Term1 -> 'let' '{' Var '=' Term '}' 'in' . Term     (rule 93)

	'('            shift, and enter state 65
	'()'           shift, and enter state 66
	'@+'           shift, and enter state 67
	'@+i'          shift, and enter state 68
	'@-'           shift, and enter state 69
	'@-i'          shift, and enter state 70
	'@0'           shift, and enter state 71
	'@1'           shift, and enter state 72
	'False'        shift, and enter state 73
	'True'         shift, and enter state 74
	'['            shift, and enter state 75
	'[]'           shift, and enter state 76
	'case'         shift, and enter state 77
	'gate'         shift, and enter state 78
	'if'           shift, and enter state 79
	'let'          shift, and enter state 80
	'with'         shift, and enter state 81
	L_integ        shift, and enter state 43
	L_BitVariable  shift, and enter state 82
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 83

	Integer        goto state 48
	BitVariable    goto state 49
	Var            goto state 50
	Lambda         goto state 51
	IntegerExpr    goto state 52
	IntegerExpr1   goto state 53
	IntegerExpr2   goto state 54
	BoolValue      goto state 55
	BasisState     goto state 56
	Bit            goto state 57
	Tuple          goto state 58
	Term1          goto state 59
	Term2          goto state 60
	Term3          goto state 61
	Term           goto state 257
	Term4          goto state 63
	List           goto state 64

State 247

	Term1 -> 'let' '{' '(' Var ',' ListVar ')' . '=' Term '}' 'in' Term    (rule 94)

	'='            shift, and enter state 256


State 248

	ListInteger -> Integer .                            (rule 85)
	ListInteger -> Integer . ',' ListInteger            (rule 86)

	','            shift, and enter state 255
	']'            reduce using rule 85


State 249

	ControlBits -> '[' Integer ',' ListInteger . ']'    (rule 84)

	']'            shift, and enter state 254


State 250

	ListBasisState -> BasisState .                      (rule 81)
	ListBasisState -> BasisState . ',' ListBasisState    (rule 82)

	','            shift, and enter state 253
	']'            reduce using rule 81


State 251

	ControlBasisStates -> '[' BasisState ',' ListBasisState . ']'    (rule 80)

	']'            shift, and enter state 252


State 252

	ControlBasisStates -> '[' BasisState ',' ListBasisState ']' .    (rule 80)

	'$'            reduce using rule 80
	'('            reduce using rule 80
	'()'           reduce using rule 80
	')'            reduce using rule 80
	','            reduce using rule 80
	'->'           reduce using rule 80
	'.'            reduce using rule 80
	';'            reduce using rule 80
	'@+'           reduce using rule 80
	'@+i'          reduce using rule 80
	'@-'           reduce using rule 80
	'@-i'          reduce using rule 80
	'@0'           reduce using rule 80
	'@1'           reduce using rule 80
	'False'        reduce using rule 80
	'True'         reduce using rule 80
	'['            reduce using rule 80
	'[]'           reduce using rule 80
	']'            reduce using rule 80
	'case'         reduce using rule 80
	'else'         reduce using rule 80
	'gate'         reduce using rule 80
	'if'           reduce using rule 80
	'let'          reduce using rule 80
	'of'           reduce using rule 80
	'then'         reduce using rule 80
	'with'         reduce using rule 80
	'}'            reduce using rule 80
	L_integ        reduce using rule 80
	L_BitVariable  reduce using rule 80
	L_Var          reduce using rule 80
	L_Lambda       reduce using rule 80


State 253

	ListBasisState -> BasisState ',' . ListBasisState    (rule 82)

	'@+'           shift, and enter state 67
	'@+i'          shift, and enter state 68
	'@-'           shift, and enter state 69
	'@-i'          shift, and enter state 70
	'@0'           shift, and enter state 71
	'@1'           shift, and enter state 72

	BasisState     goto state 250
	ListBasisState goto state 262

State 254

	ControlBits -> '[' Integer ',' ListInteger ']' .    (rule 84)

	'$'            reduce using rule 84
	'('            reduce using rule 84
	'()'           reduce using rule 84
	')'            reduce using rule 84
	','            reduce using rule 84
	'->'           reduce using rule 84
	'.'            reduce using rule 84
	';'            reduce using rule 84
	'@+'           reduce using rule 84
	'@+i'          reduce using rule 84
	'@-'           reduce using rule 84
	'@-i'          reduce using rule 84
	'@0'           reduce using rule 84
	'@1'           reduce using rule 84
	'False'        reduce using rule 84
	'True'         reduce using rule 84
	'['            reduce using rule 84
	'[]'           reduce using rule 84
	']'            reduce using rule 84
	'case'         reduce using rule 84
	'else'         reduce using rule 84
	'gate'         reduce using rule 84
	'if'           reduce using rule 84
	'let'          reduce using rule 84
	'of'           reduce using rule 84
	'then'         reduce using rule 84
	'with'         reduce using rule 84
	'}'            reduce using rule 84
	L_integ        reduce using rule 84
	L_BitVariable  reduce using rule 84
	L_Var          reduce using rule 84
	L_Lambda       reduce using rule 84


State 255

	ListInteger -> Integer ',' . ListInteger            (rule 86)

	L_integ        shift, and enter state 43

	Integer        goto state 248
	ListInteger    goto state 261

State 256

	Term1 -> 'let' '{' '(' Var ',' ListVar ')' '=' . Term '}' 'in' Term    (rule 94)

	'('            shift, and enter state 65
	'()'           shift, and enter state 66
	'@+'           shift, and enter state 67
	'@+i'          shift, and enter state 68
	'@-'           shift, and enter state 69
	'@-i'          shift, and enter state 70
	'@0'           shift, and enter state 71
	'@1'           shift, and enter state 72
	'False'        shift, and enter state 73
	'True'         shift, and enter state 74
	'['            shift, and enter state 75
	'[]'           shift, and enter state 76
	'case'         shift, and enter state 77
	'gate'         shift, and enter state 78
	'if'           shift, and enter state 79
	'let'          shift, and enter state 80
	'with'         shift, and enter state 81
	L_integ        shift, and enter state 43
	L_BitVariable  shift, and enter state 82
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 83

	Integer        goto state 48
	BitVariable    goto state 49
	Var            goto state 50
	Lambda         goto state 51
	IntegerExpr    goto state 52
	IntegerExpr1   goto state 53
	IntegerExpr2   goto state 54
	BoolValue      goto state 55
	BasisState     goto state 56
	Bit            goto state 57
	Tuple          goto state 58
	Term1          goto state 59
	Term2          goto state 60
	Term3          goto state 61
	Term           goto state 260
	Term4          goto state 63
	List           goto state 64

State 257

	Term1 -> 'let' '{' Var '=' Term '}' 'in' Term .     (rule 93)

	'('            reduce using rule 93
	'()'           reduce using rule 93
	')'            reduce using rule 93
	','            reduce using rule 93
	'->'           reduce using rule 93
	';'            reduce using rule 93
	'@+'           reduce using rule 93
	'@+i'          reduce using rule 93
	'@-'           reduce using rule 93
	'@-i'          reduce using rule 93
	'@0'           reduce using rule 93
	'@1'           reduce using rule 93
	'False'        reduce using rule 93
	'True'         reduce using rule 93
	'['            reduce using rule 93
	'[]'           reduce using rule 93
	']'            reduce using rule 93
	'case'         reduce using rule 93
	'else'         reduce using rule 93
	'gate'         reduce using rule 93
	'if'           reduce using rule 93
	'let'          reduce using rule 93
	'of'           reduce using rule 93
	'then'         reduce using rule 93
	'with'         reduce using rule 93
	'}'            reduce using rule 93
	L_integ        reduce using rule 93
	L_BitVariable  reduce using rule 93
	L_Var          reduce using rule 93
	L_Lambda       reduce using rule 93


State 258

	Gate -> 'U3' '(' Angle ',' Angle ',' Angle . ')'    (rule 66)

	')'            shift, and enter state 259


State 259

	Gate -> 'U3' '(' Angle ',' Angle ',' Angle ')' .    (rule 66)

	'$'            reduce using rule 66
	'('            reduce using rule 66
	'()'           reduce using rule 66
	')'            reduce using rule 66
	','            reduce using rule 66
	'->'           reduce using rule 66
	'.'            reduce using rule 66
	';'            reduce using rule 66
	'@+'           reduce using rule 66
	'@+i'          reduce using rule 66
	'@-'           reduce using rule 66
	'@-i'          reduce using rule 66
	'@0'           reduce using rule 66
	'@1'           reduce using rule 66
	'False'        reduce using rule 66
	'True'         reduce using rule 66
	'['            reduce using rule 66
	'[]'           reduce using rule 66
	']'            reduce using rule 66
	'case'         reduce using rule 66
	'else'         reduce using rule 66
	'gate'         reduce using rule 66
	'if'           reduce using rule 66
	'let'          reduce using rule 66
	'of'           reduce using rule 66
	'then'         reduce using rule 66
	'with'         reduce using rule 66
	'}'            reduce using rule 66
	L_integ        reduce using rule 66
	L_BitVariable  reduce using rule 66
	L_Var          reduce using rule 66
	L_Lambda       reduce using rule 66


State 260

	Term1 -> 'let' '{' '(' Var ',' ListVar ')' '=' Term . '}' 'in' Term    (rule 94)

	'}'            shift, and enter state 263


State 261

	ListInteger -> Integer ',' ListInteger .            (rule 86)

	']'            reduce using rule 86


State 262

	ListBasisState -> BasisState ',' ListBasisState .    (rule 82)

	']'            reduce using rule 82


State 263

	Term1 -> 'let' '{' '(' Var ',' ListVar ')' '=' Term '}' . 'in' Term    (rule 94)

	'in'           shift, and enter state 264


State 264

	Term1 -> 'let' '{' '(' Var ',' ListVar ')' '=' Term '}' 'in' . Term    (rule 94)

	'('            shift, and enter state 65
	'()'           shift, and enter state 66
	'@+'           shift, and enter state 67
	'@+i'          shift, and enter state 68
	'@-'           shift, and enter state 69
	'@-i'          shift, and enter state 70
	'@0'           shift, and enter state 71
	'@1'           shift, and enter state 72
	'False'        shift, and enter state 73
	'True'         shift, and enter state 74
	'['            shift, and enter state 75
	'[]'           shift, and enter state 76
	'case'         shift, and enter state 77
	'gate'         shift, and enter state 78
	'if'           shift, and enter state 79
	'let'          shift, and enter state 80
	'with'         shift, and enter state 81
	L_integ        shift, and enter state 43
	L_BitVariable  shift, and enter state 82
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 83

	Integer        goto state 48
	BitVariable    goto state 49
	Var            goto state 50
	Lambda         goto state 51
	IntegerExpr    goto state 52
	IntegerExpr1   goto state 53
	IntegerExpr2   goto state 54
	BoolValue      goto state 55
	BasisState     goto state 56
	Bit            goto state 57
	Tuple          goto state 58
	Term1          goto state 59
	Term2          goto state 60
	Term3          goto state 61
	Term           goto state 265
	Term4          goto state 63
	List           goto state 64

State 265

	Term1 -> 'let' '{' '(' Var ',' ListVar ')' '=' Term '}' 'in' Term .    (rule 94)

	'('            reduce using rule 94
	'()'           reduce using rule 94
	')'            reduce using rule 94
	','            reduce using rule 94
	'->'           reduce using rule 94
	';'            reduce using rule 94
	'@+'           reduce using rule 94
	'@+i'          reduce using rule 94
	'@-'           reduce using rule 94
	'@-i'          reduce using rule 94
	'@0'           reduce using rule 94
	'@1'           reduce using rule 94
	'False'        reduce using rule 94
	'True'         reduce using rule 94
	'['            reduce using rule 94
	'[]'           reduce using rule 94
	']'            reduce using rule 94
	'case'         reduce using rule 94
	'else'         reduce using rule 94
	'gate'         reduce using rule 94
	'if'           reduce using rule 94
	'let'          reduce using rule 94
	'of'           reduce using rule 94
	'then'         reduce using rule 94
	'with'         reduce using rule 94
	'}'            reduce using rule 94
	L_integ        reduce using rule 94
	L_BitVariable  reduce using rule 94
	L_Var          reduce using rule 94
	L_Lambda       reduce using rule 94


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 137
Number of terminals: 85
Number of non-terminals: 46
Number of states: 266
