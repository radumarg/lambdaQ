-----------------------------------------------------------------------------
Info file generated by Happy Version 1.20.0 from Frontend/LambdaQ/Par.y
-----------------------------------------------------------------------------

state 43 contains 1 reduce/reduce conflicts.

rule 27 is unused

-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_pProgram -> Program                         (0)
	Double -> L_doubl                                  (1)
	Integer -> L_integ                                 (2)
	Var -> L_Var                                       (3)
	Lambda -> L_Lambda                                 (4)
	Program -> ListFunctionDeclaration                 (5)
	Type3 -> 'Bit'                                     (6)
	Type3 -> 'Qbit'                                    (7)
	Type3 -> 'State'                                   (8)
	Type3 -> 'Unitary'                                 (9)
	Type3 -> '()'                                      (10)
	Type3 -> '(' Type ')'                              (11)
	Type2 -> '!' Type3                                 (12)
	Type2 -> Type3 '**' Integer                        (13)
	Type2 -> Type3                                     (14)
	Type1 -> Type2 '+' Type1                           (15)
	Type1 -> Type2 '*' Type1                           (16)
	Type1 -> Type2                                     (17)
	Type -> Type1 '->' Type                            (18)
	Type -> Type1                                      (19)
	Angle -> Double                                    (20)
	BasisState -> '@0'                                 (21)
	BasisState -> '@1'                                 (22)
	BasisState -> '@+'                                 (23)
	BasisState -> '@-'                                 (24)
	BasisState -> '@+i'                                (25)
	BasisState -> '@-i'                                (26)
	Bit -> Integer                                     (27)
	Gate -> 'H'                                        (28)
	Gate -> 'X'                                        (29)
	Gate -> 'Y'                                        (30)
	Gate -> 'Z'                                        (31)
	Gate -> 'ID'                                       (32)
	Gate -> 'ROOT_X' Integer                           (33)
	Gate -> 'ROOT_X_DAG' Integer                       (34)
	Gate -> 'ROOT_Y' Integer                           (35)
	Gate -> 'ROOT_Y_DAG' Integer                       (36)
	Gate -> 'ROOT_Z' Integer                           (37)
	Gate -> 'ROOT_Z_DAG' Integer                       (38)
	Gate -> 'S'                                        (39)
	Gate -> 'S_DAG'                                    (40)
	Gate -> 'T'                                        (41)
	Gate -> 'T_DAG'                                    (42)
	Gate -> 'SQRT_X'                                   (43)
	Gate -> 'SQRT_X_DAG'                               (44)
	Gate -> 'SQRT_Y'                                   (45)
	Gate -> 'SQRT_Y_DAG'                               (46)
	Gate -> 'RX' Angle                                 (47)
	Gate -> 'RY' Angle                                 (48)
	Gate -> 'RZ' Angle                                 (49)
	Gate -> 'U1' Angle                                 (50)
	Gate -> 'U2' '(' Angle ',' Angle ')'               (51)
	Gate -> 'U3' '(' Angle ',' Angle ',' Angle ')'     (52)
	Gate -> 'SWAP'                                     (53)
	Gate -> 'SQRT_SWAP'                                (54)
	Gate -> 'SQRT_SWAP_DAG'                            (55)
	Gate -> 'ISWAP'                                    (56)
	Gate -> 'FSWAP'                                    (57)
	Gate -> 'SWAP_THETA' Angle                         (58)
	Gate -> 'ROOT_SWAP' Integer                        (59)
	Gate -> 'ROOT_SWAP_DAG' Integer                    (60)
	ControlBasisState -> '[' BasisState ']'            (61)
	ControlBasisStates -> '[' BasisState ',' ListBasisState ']'   (62)
	ListBasisState -> BasisState                       (63)
	ListBasisState -> BasisState ',' ListBasisState    (64)
	ControlBit -> '[' Integer ']'                      (65)
	ControlBits -> '[' Integer ',' ListInteger ']'     (66)
	ListInteger -> Integer                             (67)
	ListInteger -> Integer ',' ListInteger             (68)
	Tuple -> '(' Term ',' ListTerm ')'                 (69)
	ControlTerm -> '[' Term ']'                        (70)
	ControlTerms -> '[' Term ',' ListTerm ']'          (71)
	ListTerm -> Term                                   (72)
	ListTerm -> Term ',' ListTerm                      (73)
	Term1 -> 'if' Term 'then' Term 'else' Term         (74)
	Term1 -> 'let' '{' LetVariable '=' Term '}' 'in' Term   (75)
	Term1 -> 'let' '{' '(' LetVariable ',' ListLetVariable ')' '=' Term '}' 'in' Term   (76)
	Term1 -> LetVariable '<-' Term ';' Term            (77)
	Term1 -> LetVariable ',' ListLetVariable '<-' Term ';' Term   (78)
	Term1 -> 'case' Term 'of' CaseExpression ListCaseExpression   (79)
	Term1 -> Lambda FunctionType '.' Term              (80)
	Term1 -> Term2 '$' Term1                           (81)
	Term1 -> Term2                                     (82)
	Term2 -> 'with' ControlTerm 'ctrl' ControlBasisState   (83)
	Term2 -> 'with' ControlTerms 'ctrl' ControlBasisStates   (84)
	Term2 -> 'with' ControlTerm 'ctrl' ControlBit      (85)
	Term2 -> 'with' ControlTerms 'ctrl' ControlBits    (86)
	Term2 -> Term2 Term3                               (87)
	Term2 -> Term2 '.' Term3                           (88)
	Term2 -> Term3                                     (89)
	Term3 -> Var                                       (90)
	Term3 -> BasisState                                (91)
	Term3 -> Gate                                      (92)
	Term3 -> Tuple                                     (93)
	Term3 -> '()'                                      (94)
	Term3 -> '(' Term ')'                              (95)
	Term -> Term1                                      (96)
	LetVariable -> Var                                 (97)
	ListLetVariable ->                                 (98)
	ListLetVariable -> LetVariable                     (99)
	ListLetVariable -> LetVariable ',' ListLetVariable   (100)
	CaseExpression -> Term '->' Var                    (101)
	ListCaseExpression -> CaseExpression               (102)
	ListCaseExpression -> CaseExpression ListCaseExpression   (103)
	Arg -> Var                                         (104)
	ListArg ->                                         (105)
	ListArg -> Arg ListArg                             (106)
	FunctionDefinition -> Var ListArg '=' Term         (107)
	FunctionDefinition -> FunctionDefinition ';'       (108)
	FunctionType -> Var '::' Type                      (109)
	FunctionType -> FunctionType ';'                   (110)
	FunctionDeclaration -> FunctionType ';' FunctionDefinition ';'   (111)
	ListFunctionDeclaration ->                         (112)
	ListFunctionDeclaration -> FunctionDeclaration ListFunctionDeclaration   (113)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	'!'            { PT _ (TS _ 1) }
	'$'            { PT _ (TS _ 2) }
	'('            { PT _ (TS _ 3) }
	'()'           { PT _ (TS _ 4) }
	')'            { PT _ (TS _ 5) }
	'*'            { PT _ (TS _ 6) }
	'**'           { PT _ (TS _ 7) }
	'+'            { PT _ (TS _ 8) }
	','            { PT _ (TS _ 9) }
	'->'           { PT _ (TS _ 10) }
	'.'            { PT _ (TS _ 11) }
	'::'           { PT _ (TS _ 12) }
	';'            { PT _ (TS _ 13) }
	'<-'           { PT _ (TS _ 14) }
	'='            { PT _ (TS _ 15) }
	'@+'           { PT _ (TS _ 16) }
	'@+i'          { PT _ (TS _ 17) }
	'@-'           { PT _ (TS _ 18) }
	'@-i'          { PT _ (TS _ 19) }
	'@0'           { PT _ (TS _ 20) }
	'@1'           { PT _ (TS _ 21) }
	'Bit'          { PT _ (TS _ 22) }
	'FSWAP'        { PT _ (TS _ 23) }
	'H'            { PT _ (TS _ 24) }
	'ID'           { PT _ (TS _ 25) }
	'ISWAP'        { PT _ (TS _ 26) }
	'Qbit'         { PT _ (TS _ 27) }
	'ROOT_SWAP'    { PT _ (TS _ 28) }
	'ROOT_SWAP_DAG'{ PT _ (TS _ 29) }
	'ROOT_X'       { PT _ (TS _ 30) }
	'ROOT_X_DAG'   { PT _ (TS _ 31) }
	'ROOT_Y'       { PT _ (TS _ 32) }
	'ROOT_Y_DAG'   { PT _ (TS _ 33) }
	'ROOT_Z'       { PT _ (TS _ 34) }
	'ROOT_Z_DAG'   { PT _ (TS _ 35) }
	'RX'           { PT _ (TS _ 36) }
	'RY'           { PT _ (TS _ 37) }
	'RZ'           { PT _ (TS _ 38) }
	'S'            { PT _ (TS _ 39) }
	'SQRT_SWAP'    { PT _ (TS _ 40) }
	'SQRT_SWAP_DAG'{ PT _ (TS _ 41) }
	'SQRT_X'       { PT _ (TS _ 42) }
	'SQRT_X_DAG'   { PT _ (TS _ 43) }
	'SQRT_Y'       { PT _ (TS _ 44) }
	'SQRT_Y_DAG'   { PT _ (TS _ 45) }
	'SWAP'         { PT _ (TS _ 46) }
	'SWAP_THETA'   { PT _ (TS _ 47) }
	'S_DAG'        { PT _ (TS _ 48) }
	'State'        { PT _ (TS _ 49) }
	'T'            { PT _ (TS _ 50) }
	'T_DAG'        { PT _ (TS _ 51) }
	'U1'           { PT _ (TS _ 52) }
	'U2'           { PT _ (TS _ 53) }
	'U3'           { PT _ (TS _ 54) }
	'Unitary'      { PT _ (TS _ 55) }
	'X'            { PT _ (TS _ 56) }
	'Y'            { PT _ (TS _ 57) }
	'Z'            { PT _ (TS _ 58) }
	'['            { PT _ (TS _ 59) }
	']'            { PT _ (TS _ 60) }
	'case'         { PT _ (TS _ 61) }
	'ctrl'         { PT _ (TS _ 62) }
	'else'         { PT _ (TS _ 63) }
	'if'           { PT _ (TS _ 64) }
	'in'           { PT _ (TS _ 65) }
	'let'          { PT _ (TS _ 66) }
	'of'           { PT _ (TS _ 67) }
	'then'         { PT _ (TS _ 68) }
	'with'         { PT _ (TS _ 69) }
	'{'            { PT _ (TS _ 70) }
	'}'            { PT _ (TS _ 71) }
	L_doubl        { PT _ (TD $$) }
	L_integ        { PT _ (TI $$) }
	L_Var          { PT _ (T_Var _) }
	L_Lambda       { PT _ (T_Lambda $$) }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_pProgram rule  0
	Double          rule  1
	Integer         rule  2
	Var             rule  3
	Lambda          rule  4
	Program         rule  5
	Type3           rules 6, 7, 8, 9, 10, 11
	Type2           rules 12, 13, 14
	Type1           rules 15, 16, 17
	Type            rules 18, 19
	Angle           rule  20
	BasisState      rules 21, 22, 23, 24, 25, 26
	Bit             rule  27
	Gate            rules 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60
	ControlBasisState rule  61
	ControlBasisStates rule  62
	ListBasisState  rules 63, 64
	ControlBit      rule  65
	ControlBits     rule  66
	ListInteger     rules 67, 68
	Tuple           rule  69
	ControlTerm     rule  70
	ControlTerms    rule  71
	ListTerm        rules 72, 73
	Term1           rules 74, 75, 76, 77, 78, 79, 80, 81, 82
	Term2           rules 83, 84, 85, 86, 87, 88, 89
	Term3           rules 90, 91, 92, 93, 94, 95
	Term            rule  96
	LetVariable     rule  97
	ListLetVariable rules 98, 99, 100
	CaseExpression  rule  101
	ListCaseExpression rules 102, 103
	Arg             rule  104
	ListArg         rules 105, 106
	FunctionDefinition rules 107, 108
	FunctionType    rules 109, 110
	FunctionDeclaration rule  111
	ListFunctionDeclaration rules 112, 113

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0

	%start_pProgram -> . Program                        (rule 0)

	L_Var          shift, and enter state 8
	%eof           reduce using rule 112

	Var            goto state 3
	Program        goto state 4
	FunctionType   goto state 5
	FunctionDeclarationgoto state 6
	ListFunctionDeclarationgoto state 7

State 1

	Double -> . L_doubl                                 (rule 1)

	L_doubl        shift, and enter state 2


State 2

	Double -> L_doubl .                                 (rule 1)

	'$'            reduce using rule 1
	'('            reduce using rule 1
	'()'           reduce using rule 1
	')'            reduce using rule 1
	','            reduce using rule 1
	'->'           reduce using rule 1
	'.'            reduce using rule 1
	';'            reduce using rule 1
	'@+'           reduce using rule 1
	'@+i'          reduce using rule 1
	'@-'           reduce using rule 1
	'@-i'          reduce using rule 1
	'@0'           reduce using rule 1
	'@1'           reduce using rule 1
	'FSWAP'        reduce using rule 1
	'H'            reduce using rule 1
	'ID'           reduce using rule 1
	'ISWAP'        reduce using rule 1
	'ROOT_SWAP'    reduce using rule 1
	'ROOT_SWAP_DAG'reduce using rule 1
	'ROOT_X'       reduce using rule 1
	'ROOT_X_DAG'   reduce using rule 1
	'ROOT_Y'       reduce using rule 1
	'ROOT_Y_DAG'   reduce using rule 1
	'ROOT_Z'       reduce using rule 1
	'ROOT_Z_DAG'   reduce using rule 1
	'RX'           reduce using rule 1
	'RY'           reduce using rule 1
	'RZ'           reduce using rule 1
	'S'            reduce using rule 1
	'SQRT_SWAP'    reduce using rule 1
	'SQRT_SWAP_DAG'reduce using rule 1
	'SQRT_X'       reduce using rule 1
	'SQRT_X_DAG'   reduce using rule 1
	'SQRT_Y'       reduce using rule 1
	'SQRT_Y_DAG'   reduce using rule 1
	'SWAP'         reduce using rule 1
	'SWAP_THETA'   reduce using rule 1
	'S_DAG'        reduce using rule 1
	'T'            reduce using rule 1
	'T_DAG'        reduce using rule 1
	'U1'           reduce using rule 1
	'U2'           reduce using rule 1
	'U3'           reduce using rule 1
	'X'            reduce using rule 1
	'Y'            reduce using rule 1
	'Z'            reduce using rule 1
	']'            reduce using rule 1
	'else'         reduce using rule 1
	'of'           reduce using rule 1
	'then'         reduce using rule 1
	'}'            reduce using rule 1
	L_Var          reduce using rule 1


State 3

	FunctionType -> Var . '::' Type                     (rule 109)

	'::'           shift, and enter state 11


State 4

	%start_pProgram -> Program .                        (rule 0)

	%eof           accept


State 5

	FunctionType -> FunctionType . ';'                  (rule 110)
	FunctionDeclaration -> FunctionType . ';' FunctionDefinition ';'    (rule 111)

	';'            shift, and enter state 10


State 6

	ListFunctionDeclaration -> FunctionDeclaration . ListFunctionDeclaration    (rule 113)

	L_Var          shift, and enter state 8
	%eof           reduce using rule 112

	Var            goto state 3
	FunctionType   goto state 5
	FunctionDeclarationgoto state 6
	ListFunctionDeclarationgoto state 9

State 7

	Program -> ListFunctionDeclaration .                (rule 5)

	%eof           reduce using rule 5


State 8

	Var -> L_Var .                                      (rule 3)

	'$'            reduce using rule 3
	'('            reduce using rule 3
	'()'           reduce using rule 3
	')'            reduce using rule 3
	','            reduce using rule 3
	'->'           reduce using rule 3
	'.'            reduce using rule 3
	'::'           reduce using rule 3
	';'            reduce using rule 3
	'<-'           reduce using rule 3
	'='            reduce using rule 3
	'@+'           reduce using rule 3
	'@+i'          reduce using rule 3
	'@-'           reduce using rule 3
	'@-i'          reduce using rule 3
	'@0'           reduce using rule 3
	'@1'           reduce using rule 3
	'FSWAP'        reduce using rule 3
	'H'            reduce using rule 3
	'ID'           reduce using rule 3
	'ISWAP'        reduce using rule 3
	'ROOT_SWAP'    reduce using rule 3
	'ROOT_SWAP_DAG'reduce using rule 3
	'ROOT_X'       reduce using rule 3
	'ROOT_X_DAG'   reduce using rule 3
	'ROOT_Y'       reduce using rule 3
	'ROOT_Y_DAG'   reduce using rule 3
	'ROOT_Z'       reduce using rule 3
	'ROOT_Z_DAG'   reduce using rule 3
	'RX'           reduce using rule 3
	'RY'           reduce using rule 3
	'RZ'           reduce using rule 3
	'S'            reduce using rule 3
	'SQRT_SWAP'    reduce using rule 3
	'SQRT_SWAP_DAG'reduce using rule 3
	'SQRT_X'       reduce using rule 3
	'SQRT_X_DAG'   reduce using rule 3
	'SQRT_Y'       reduce using rule 3
	'SQRT_Y_DAG'   reduce using rule 3
	'SWAP'         reduce using rule 3
	'SWAP_THETA'   reduce using rule 3
	'S_DAG'        reduce using rule 3
	'T'            reduce using rule 3
	'T_DAG'        reduce using rule 3
	'U1'           reduce using rule 3
	'U2'           reduce using rule 3
	'U3'           reduce using rule 3
	'X'            reduce using rule 3
	'Y'            reduce using rule 3
	'Z'            reduce using rule 3
	']'            reduce using rule 3
	'case'         reduce using rule 3
	'else'         reduce using rule 3
	'if'           reduce using rule 3
	'let'          reduce using rule 3
	'of'           reduce using rule 3
	'then'         reduce using rule 3
	'with'         reduce using rule 3
	'}'            reduce using rule 3
	L_Var          reduce using rule 3
	L_Lambda       reduce using rule 3


State 9

	ListFunctionDeclaration -> FunctionDeclaration ListFunctionDeclaration .    (rule 113)

	%eof           reduce using rule 113


State 10

	FunctionType -> FunctionType ';' .                  (rule 110)
	FunctionDeclaration -> FunctionType ';' . FunctionDefinition ';'    (rule 111)

	';'            reduce using rule 110
	L_Var          shift, and enter state 8

	Var            goto state 23
	FunctionDefinitiongoto state 24

State 11

	FunctionType -> Var '::' . Type                     (rule 109)

	'!'            shift, and enter state 16
	'('            shift, and enter state 17
	'()'           shift, and enter state 18
	'Bit'          shift, and enter state 19
	'Qbit'         shift, and enter state 20
	'State'        shift, and enter state 21
	'Unitary'      shift, and enter state 22

	Type3          goto state 12
	Type2          goto state 13
	Type1          goto state 14
	Type           goto state 15

State 12

	Type2 -> Type3 . '**' Integer                       (rule 13)
	Type2 -> Type3 .                                    (rule 14)

	')'            reduce using rule 14
	'*'            reduce using rule 14
	'**'           shift, and enter state 34
	'+'            reduce using rule 14
	'->'           reduce using rule 14
	'.'            reduce using rule 14
	';'            reduce using rule 14


State 13

	Type1 -> Type2 . '+' Type1                          (rule 15)
	Type1 -> Type2 . '*' Type1                          (rule 16)
	Type1 -> Type2 .                                    (rule 17)

	')'            reduce using rule 17
	'*'            shift, and enter state 32
	'+'            shift, and enter state 33
	'->'           reduce using rule 17
	'.'            reduce using rule 17
	';'            reduce using rule 17


State 14

	Type -> Type1 . '->' Type                           (rule 18)
	Type -> Type1 .                                     (rule 19)

	')'            reduce using rule 19
	'->'           shift, and enter state 31
	'.'            reduce using rule 19
	';'            reduce using rule 19


State 15

	FunctionType -> Var '::' Type .                     (rule 109)

	'.'            reduce using rule 109
	';'            reduce using rule 109


State 16

	Type2 -> '!' . Type3                                (rule 12)

	'('            shift, and enter state 17
	'()'           shift, and enter state 18
	'Bit'          shift, and enter state 19
	'Qbit'         shift, and enter state 20
	'State'        shift, and enter state 21
	'Unitary'      shift, and enter state 22

	Type3          goto state 30

State 17

	Type3 -> '(' . Type ')'                             (rule 11)

	'!'            shift, and enter state 16
	'('            shift, and enter state 17
	'()'           shift, and enter state 18
	'Bit'          shift, and enter state 19
	'Qbit'         shift, and enter state 20
	'State'        shift, and enter state 21
	'Unitary'      shift, and enter state 22

	Type3          goto state 12
	Type2          goto state 13
	Type1          goto state 14
	Type           goto state 29

State 18

	Type3 -> '()' .                                     (rule 10)

	')'            reduce using rule 10
	'*'            reduce using rule 10
	'**'           reduce using rule 10
	'+'            reduce using rule 10
	'->'           reduce using rule 10
	'.'            reduce using rule 10
	';'            reduce using rule 10


State 19

	Type3 -> 'Bit' .                                    (rule 6)

	')'            reduce using rule 6
	'*'            reduce using rule 6
	'**'           reduce using rule 6
	'+'            reduce using rule 6
	'->'           reduce using rule 6
	'.'            reduce using rule 6
	';'            reduce using rule 6


State 20

	Type3 -> 'Qbit' .                                   (rule 7)

	')'            reduce using rule 7
	'*'            reduce using rule 7
	'**'           reduce using rule 7
	'+'            reduce using rule 7
	'->'           reduce using rule 7
	'.'            reduce using rule 7
	';'            reduce using rule 7


State 21

	Type3 -> 'State' .                                  (rule 8)

	')'            reduce using rule 8
	'*'            reduce using rule 8
	'**'           reduce using rule 8
	'+'            reduce using rule 8
	'->'           reduce using rule 8
	'.'            reduce using rule 8
	';'            reduce using rule 8


State 22

	Type3 -> 'Unitary' .                                (rule 9)

	')'            reduce using rule 9
	'*'            reduce using rule 9
	'**'           reduce using rule 9
	'+'            reduce using rule 9
	'->'           reduce using rule 9
	'.'            reduce using rule 9
	';'            reduce using rule 9


State 23

	FunctionDefinition -> Var . ListArg '=' Term        (rule 107)

	'='            reduce using rule 105
	L_Var          shift, and enter state 8

	Var            goto state 26
	Arg            goto state 27
	ListArg        goto state 28

State 24

	FunctionDefinition -> FunctionDefinition . ';'      (rule 108)
	FunctionDeclaration -> FunctionType ';' FunctionDefinition . ';'    (rule 111)

	';'            shift, and enter state 25


State 25

	FunctionDefinition -> FunctionDefinition ';' .      (rule 108)
	FunctionDeclaration -> FunctionType ';' FunctionDefinition ';' .    (rule 111)

	';'            reduce using rule 108
	L_Var          reduce using rule 111
	%eof           reduce using rule 111


State 26

	Arg -> Var .                                        (rule 104)

	'='            reduce using rule 104
	L_Var          reduce using rule 104


State 27

	ListArg -> Arg . ListArg                            (rule 106)

	'='            reduce using rule 105
	L_Var          shift, and enter state 8

	Var            goto state 26
	Arg            goto state 27
	ListArg        goto state 42

State 28

	FunctionDefinition -> Var ListArg . '=' Term        (rule 107)

	'='            shift, and enter state 41


State 29

	Type3 -> '(' Type . ')'                             (rule 11)

	')'            shift, and enter state 40


State 30

	Type2 -> '!' Type3 .                                (rule 12)

	')'            reduce using rule 12
	'*'            reduce using rule 12
	'+'            reduce using rule 12
	'->'           reduce using rule 12
	'.'            reduce using rule 12
	';'            reduce using rule 12


State 31

	Type -> Type1 '->' . Type                           (rule 18)

	'!'            shift, and enter state 16
	'('            shift, and enter state 17
	'()'           shift, and enter state 18
	'Bit'          shift, and enter state 19
	'Qbit'         shift, and enter state 20
	'State'        shift, and enter state 21
	'Unitary'      shift, and enter state 22

	Type3          goto state 12
	Type2          goto state 13
	Type1          goto state 14
	Type           goto state 39

State 32

	Type1 -> Type2 '*' . Type1                          (rule 16)

	'!'            shift, and enter state 16
	'('            shift, and enter state 17
	'()'           shift, and enter state 18
	'Bit'          shift, and enter state 19
	'Qbit'         shift, and enter state 20
	'State'        shift, and enter state 21
	'Unitary'      shift, and enter state 22

	Type3          goto state 12
	Type2          goto state 13
	Type1          goto state 38

State 33

	Type1 -> Type2 '+' . Type1                          (rule 15)

	'!'            shift, and enter state 16
	'('            shift, and enter state 17
	'()'           shift, and enter state 18
	'Bit'          shift, and enter state 19
	'Qbit'         shift, and enter state 20
	'State'        shift, and enter state 21
	'Unitary'      shift, and enter state 22

	Type3          goto state 12
	Type2          goto state 13
	Type1          goto state 37

State 34

	Type2 -> Type3 '**' . Integer                       (rule 13)

	L_integ        shift, and enter state 36

	Integer        goto state 35

State 35

	Type2 -> Type3 '**' Integer .                       (rule 13)

	')'            reduce using rule 13
	'*'            reduce using rule 13
	'+'            reduce using rule 13
	'->'           reduce using rule 13
	'.'            reduce using rule 13
	';'            reduce using rule 13


State 36

	Integer -> L_integ .                                (rule 2)

	'$'            reduce using rule 2
	'('            reduce using rule 2
	'()'           reduce using rule 2
	')'            reduce using rule 2
	'*'            reduce using rule 2
	'+'            reduce using rule 2
	','            reduce using rule 2
	'->'           reduce using rule 2
	'.'            reduce using rule 2
	';'            reduce using rule 2
	'@+'           reduce using rule 2
	'@+i'          reduce using rule 2
	'@-'           reduce using rule 2
	'@-i'          reduce using rule 2
	'@0'           reduce using rule 2
	'@1'           reduce using rule 2
	'FSWAP'        reduce using rule 2
	'H'            reduce using rule 2
	'ID'           reduce using rule 2
	'ISWAP'        reduce using rule 2
	'ROOT_SWAP'    reduce using rule 2
	'ROOT_SWAP_DAG'reduce using rule 2
	'ROOT_X'       reduce using rule 2
	'ROOT_X_DAG'   reduce using rule 2
	'ROOT_Y'       reduce using rule 2
	'ROOT_Y_DAG'   reduce using rule 2
	'ROOT_Z'       reduce using rule 2
	'ROOT_Z_DAG'   reduce using rule 2
	'RX'           reduce using rule 2
	'RY'           reduce using rule 2
	'RZ'           reduce using rule 2
	'S'            reduce using rule 2
	'SQRT_SWAP'    reduce using rule 2
	'SQRT_SWAP_DAG'reduce using rule 2
	'SQRT_X'       reduce using rule 2
	'SQRT_X_DAG'   reduce using rule 2
	'SQRT_Y'       reduce using rule 2
	'SQRT_Y_DAG'   reduce using rule 2
	'SWAP'         reduce using rule 2
	'SWAP_THETA'   reduce using rule 2
	'S_DAG'        reduce using rule 2
	'T'            reduce using rule 2
	'T_DAG'        reduce using rule 2
	'U1'           reduce using rule 2
	'U2'           reduce using rule 2
	'U3'           reduce using rule 2
	'X'            reduce using rule 2
	'Y'            reduce using rule 2
	'Z'            reduce using rule 2
	']'            reduce using rule 2
	'else'         reduce using rule 2
	'of'           reduce using rule 2
	'then'         reduce using rule 2
	'}'            reduce using rule 2
	L_Var          reduce using rule 2


State 37

	Type1 -> Type2 '+' Type1 .                          (rule 15)

	')'            reduce using rule 15
	'->'           reduce using rule 15
	'.'            reduce using rule 15
	';'            reduce using rule 15


State 38

	Type1 -> Type2 '*' Type1 .                          (rule 16)

	')'            reduce using rule 16
	'->'           reduce using rule 16
	'.'            reduce using rule 16
	';'            reduce using rule 16


State 39

	Type -> Type1 '->' Type .                           (rule 18)

	')'            reduce using rule 18
	'.'            reduce using rule 18
	';'            reduce using rule 18


State 40

	Type3 -> '(' Type ')' .                             (rule 11)

	')'            reduce using rule 11
	'*'            reduce using rule 11
	'**'           reduce using rule 11
	'+'            reduce using rule 11
	'->'           reduce using rule 11
	'.'            reduce using rule 11
	';'            reduce using rule 11


State 41

	FunctionDefinition -> Var ListArg '=' . Term        (rule 107)

	'('            shift, and enter state 53
	'()'           shift, and enter state 54
	'@+'           shift, and enter state 55
	'@+i'          shift, and enter state 56
	'@-'           shift, and enter state 57
	'@-i'          shift, and enter state 58
	'@0'           shift, and enter state 59
	'@1'           shift, and enter state 60
	'FSWAP'        shift, and enter state 61
	'H'            shift, and enter state 62
	'ID'           shift, and enter state 63
	'ISWAP'        shift, and enter state 64
	'ROOT_SWAP'    shift, and enter state 65
	'ROOT_SWAP_DAG'shift, and enter state 66
	'ROOT_X'       shift, and enter state 67
	'ROOT_X_DAG'   shift, and enter state 68
	'ROOT_Y'       shift, and enter state 69
	'ROOT_Y_DAG'   shift, and enter state 70
	'ROOT_Z'       shift, and enter state 71
	'ROOT_Z_DAG'   shift, and enter state 72
	'RX'           shift, and enter state 73
	'RY'           shift, and enter state 74
	'RZ'           shift, and enter state 75
	'S'            shift, and enter state 76
	'SQRT_SWAP'    shift, and enter state 77
	'SQRT_SWAP_DAG'shift, and enter state 78
	'SQRT_X'       shift, and enter state 79
	'SQRT_X_DAG'   shift, and enter state 80
	'SQRT_Y'       shift, and enter state 81
	'SQRT_Y_DAG'   shift, and enter state 82
	'SWAP'         shift, and enter state 83
	'SWAP_THETA'   shift, and enter state 84
	'S_DAG'        shift, and enter state 85
	'T'            shift, and enter state 86
	'T_DAG'        shift, and enter state 87
	'U1'           shift, and enter state 88
	'U2'           shift, and enter state 89
	'U3'           shift, and enter state 90
	'X'            shift, and enter state 91
	'Y'            shift, and enter state 92
	'Z'            shift, and enter state 93
	'case'         shift, and enter state 94
	'if'           shift, and enter state 95
	'let'          shift, and enter state 96
	'with'         shift, and enter state 97
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 98

	Var            goto state 43
	Lambda         goto state 44
	BasisState     goto state 45
	Gate           goto state 46
	Tuple          goto state 47
	Term1          goto state 48
	Term2          goto state 49
	Term3          goto state 50
	Term           goto state 51
	LetVariable    goto state 52

State 42

	ListArg -> Arg ListArg .                            (rule 106)

	'='            reduce using rule 106


State 43

	Term3 -> Var .                                      (rule 90)
	LetVariable -> Var .                                (rule 97)

	'$'            reduce using rule 90
	'('            reduce using rule 90
	'()'           reduce using rule 90
	')'            reduce using rule 90
	','            reduce using rule 97
			(reduce using rule 90)

	'->'           reduce using rule 90
	'.'            reduce using rule 90
	';'            reduce using rule 90
	'<-'           reduce using rule 97
	'@+'           reduce using rule 90
	'@+i'          reduce using rule 90
	'@-'           reduce using rule 90
	'@-i'          reduce using rule 90
	'@0'           reduce using rule 90
	'@1'           reduce using rule 90
	'FSWAP'        reduce using rule 90
	'H'            reduce using rule 90
	'ID'           reduce using rule 90
	'ISWAP'        reduce using rule 90
	'ROOT_SWAP'    reduce using rule 90
	'ROOT_SWAP_DAG'reduce using rule 90
	'ROOT_X'       reduce using rule 90
	'ROOT_X_DAG'   reduce using rule 90
	'ROOT_Y'       reduce using rule 90
	'ROOT_Y_DAG'   reduce using rule 90
	'ROOT_Z'       reduce using rule 90
	'ROOT_Z_DAG'   reduce using rule 90
	'RX'           reduce using rule 90
	'RY'           reduce using rule 90
	'RZ'           reduce using rule 90
	'S'            reduce using rule 90
	'SQRT_SWAP'    reduce using rule 90
	'SQRT_SWAP_DAG'reduce using rule 90
	'SQRT_X'       reduce using rule 90
	'SQRT_X_DAG'   reduce using rule 90
	'SQRT_Y'       reduce using rule 90
	'SQRT_Y_DAG'   reduce using rule 90
	'SWAP'         reduce using rule 90
	'SWAP_THETA'   reduce using rule 90
	'S_DAG'        reduce using rule 90
	'T'            reduce using rule 90
	'T_DAG'        reduce using rule 90
	'U1'           reduce using rule 90
	'U2'           reduce using rule 90
	'U3'           reduce using rule 90
	'X'            reduce using rule 90
	'Y'            reduce using rule 90
	'Z'            reduce using rule 90
	']'            reduce using rule 90
	'else'         reduce using rule 90
	'of'           reduce using rule 90
	'then'         reduce using rule 90
	'}'            reduce using rule 90
	L_Var          reduce using rule 90


State 44

	Term1 -> Lambda . FunctionType '.' Term             (rule 80)

	L_Var          shift, and enter state 8

	Var            goto state 3
	FunctionType   goto state 128

State 45

	Term3 -> BasisState .                               (rule 91)

	'$'            reduce using rule 91
	'('            reduce using rule 91
	'()'           reduce using rule 91
	')'            reduce using rule 91
	','            reduce using rule 91
	'->'           reduce using rule 91
	'.'            reduce using rule 91
	';'            reduce using rule 91
	'@+'           reduce using rule 91
	'@+i'          reduce using rule 91
	'@-'           reduce using rule 91
	'@-i'          reduce using rule 91
	'@0'           reduce using rule 91
	'@1'           reduce using rule 91
	'FSWAP'        reduce using rule 91
	'H'            reduce using rule 91
	'ID'           reduce using rule 91
	'ISWAP'        reduce using rule 91
	'ROOT_SWAP'    reduce using rule 91
	'ROOT_SWAP_DAG'reduce using rule 91
	'ROOT_X'       reduce using rule 91
	'ROOT_X_DAG'   reduce using rule 91
	'ROOT_Y'       reduce using rule 91
	'ROOT_Y_DAG'   reduce using rule 91
	'ROOT_Z'       reduce using rule 91
	'ROOT_Z_DAG'   reduce using rule 91
	'RX'           reduce using rule 91
	'RY'           reduce using rule 91
	'RZ'           reduce using rule 91
	'S'            reduce using rule 91
	'SQRT_SWAP'    reduce using rule 91
	'SQRT_SWAP_DAG'reduce using rule 91
	'SQRT_X'       reduce using rule 91
	'SQRT_X_DAG'   reduce using rule 91
	'SQRT_Y'       reduce using rule 91
	'SQRT_Y_DAG'   reduce using rule 91
	'SWAP'         reduce using rule 91
	'SWAP_THETA'   reduce using rule 91
	'S_DAG'        reduce using rule 91
	'T'            reduce using rule 91
	'T_DAG'        reduce using rule 91
	'U1'           reduce using rule 91
	'U2'           reduce using rule 91
	'U3'           reduce using rule 91
	'X'            reduce using rule 91
	'Y'            reduce using rule 91
	'Z'            reduce using rule 91
	']'            reduce using rule 91
	'else'         reduce using rule 91
	'of'           reduce using rule 91
	'then'         reduce using rule 91
	'}'            reduce using rule 91
	L_Var          reduce using rule 91


State 46

	Term3 -> Gate .                                     (rule 92)

	'$'            reduce using rule 92
	'('            reduce using rule 92
	'()'           reduce using rule 92
	')'            reduce using rule 92
	','            reduce using rule 92
	'->'           reduce using rule 92
	'.'            reduce using rule 92
	';'            reduce using rule 92
	'@+'           reduce using rule 92
	'@+i'          reduce using rule 92
	'@-'           reduce using rule 92
	'@-i'          reduce using rule 92
	'@0'           reduce using rule 92
	'@1'           reduce using rule 92
	'FSWAP'        reduce using rule 92
	'H'            reduce using rule 92
	'ID'           reduce using rule 92
	'ISWAP'        reduce using rule 92
	'ROOT_SWAP'    reduce using rule 92
	'ROOT_SWAP_DAG'reduce using rule 92
	'ROOT_X'       reduce using rule 92
	'ROOT_X_DAG'   reduce using rule 92
	'ROOT_Y'       reduce using rule 92
	'ROOT_Y_DAG'   reduce using rule 92
	'ROOT_Z'       reduce using rule 92
	'ROOT_Z_DAG'   reduce using rule 92
	'RX'           reduce using rule 92
	'RY'           reduce using rule 92
	'RZ'           reduce using rule 92
	'S'            reduce using rule 92
	'SQRT_SWAP'    reduce using rule 92
	'SQRT_SWAP_DAG'reduce using rule 92
	'SQRT_X'       reduce using rule 92
	'SQRT_X_DAG'   reduce using rule 92
	'SQRT_Y'       reduce using rule 92
	'SQRT_Y_DAG'   reduce using rule 92
	'SWAP'         reduce using rule 92
	'SWAP_THETA'   reduce using rule 92
	'S_DAG'        reduce using rule 92
	'T'            reduce using rule 92
	'T_DAG'        reduce using rule 92
	'U1'           reduce using rule 92
	'U2'           reduce using rule 92
	'U3'           reduce using rule 92
	'X'            reduce using rule 92
	'Y'            reduce using rule 92
	'Z'            reduce using rule 92
	']'            reduce using rule 92
	'else'         reduce using rule 92
	'of'           reduce using rule 92
	'then'         reduce using rule 92
	'}'            reduce using rule 92
	L_Var          reduce using rule 92


State 47

	Term3 -> Tuple .                                    (rule 93)

	'$'            reduce using rule 93
	'('            reduce using rule 93
	'()'           reduce using rule 93
	')'            reduce using rule 93
	','            reduce using rule 93
	'->'           reduce using rule 93
	'.'            reduce using rule 93
	';'            reduce using rule 93
	'@+'           reduce using rule 93
	'@+i'          reduce using rule 93
	'@-'           reduce using rule 93
	'@-i'          reduce using rule 93
	'@0'           reduce using rule 93
	'@1'           reduce using rule 93
	'FSWAP'        reduce using rule 93
	'H'            reduce using rule 93
	'ID'           reduce using rule 93
	'ISWAP'        reduce using rule 93
	'ROOT_SWAP'    reduce using rule 93
	'ROOT_SWAP_DAG'reduce using rule 93
	'ROOT_X'       reduce using rule 93
	'ROOT_X_DAG'   reduce using rule 93
	'ROOT_Y'       reduce using rule 93
	'ROOT_Y_DAG'   reduce using rule 93
	'ROOT_Z'       reduce using rule 93
	'ROOT_Z_DAG'   reduce using rule 93
	'RX'           reduce using rule 93
	'RY'           reduce using rule 93
	'RZ'           reduce using rule 93
	'S'            reduce using rule 93
	'SQRT_SWAP'    reduce using rule 93
	'SQRT_SWAP_DAG'reduce using rule 93
	'SQRT_X'       reduce using rule 93
	'SQRT_X_DAG'   reduce using rule 93
	'SQRT_Y'       reduce using rule 93
	'SQRT_Y_DAG'   reduce using rule 93
	'SWAP'         reduce using rule 93
	'SWAP_THETA'   reduce using rule 93
	'S_DAG'        reduce using rule 93
	'T'            reduce using rule 93
	'T_DAG'        reduce using rule 93
	'U1'           reduce using rule 93
	'U2'           reduce using rule 93
	'U3'           reduce using rule 93
	'X'            reduce using rule 93
	'Y'            reduce using rule 93
	'Z'            reduce using rule 93
	']'            reduce using rule 93
	'else'         reduce using rule 93
	'of'           reduce using rule 93
	'then'         reduce using rule 93
	'}'            reduce using rule 93
	L_Var          reduce using rule 93


State 48

	Term -> Term1 .                                     (rule 96)

	')'            reduce using rule 96
	','            reduce using rule 96
	'->'           reduce using rule 96
	';'            reduce using rule 96
	']'            reduce using rule 96
	'else'         reduce using rule 96
	'of'           reduce using rule 96
	'then'         reduce using rule 96
	'}'            reduce using rule 96


State 49

	Term1 -> Term2 . '$' Term1                          (rule 81)
	Term1 -> Term2 .                                    (rule 82)
	Term2 -> Term2 . Term3                              (rule 87)
	Term2 -> Term2 . '.' Term3                          (rule 88)

	'$'            shift, and enter state 126
	'('            shift, and enter state 53
	'()'           shift, and enter state 54
	')'            reduce using rule 82
	','            reduce using rule 82
	'->'           reduce using rule 82
	'.'            shift, and enter state 127
	';'            reduce using rule 82
	'@+'           shift, and enter state 55
	'@+i'          shift, and enter state 56
	'@-'           shift, and enter state 57
	'@-i'          shift, and enter state 58
	'@0'           shift, and enter state 59
	'@1'           shift, and enter state 60
	'FSWAP'        shift, and enter state 61
	'H'            shift, and enter state 62
	'ID'           shift, and enter state 63
	'ISWAP'        shift, and enter state 64
	'ROOT_SWAP'    shift, and enter state 65
	'ROOT_SWAP_DAG'shift, and enter state 66
	'ROOT_X'       shift, and enter state 67
	'ROOT_X_DAG'   shift, and enter state 68
	'ROOT_Y'       shift, and enter state 69
	'ROOT_Y_DAG'   shift, and enter state 70
	'ROOT_Z'       shift, and enter state 71
	'ROOT_Z_DAG'   shift, and enter state 72
	'RX'           shift, and enter state 73
	'RY'           shift, and enter state 74
	'RZ'           shift, and enter state 75
	'S'            shift, and enter state 76
	'SQRT_SWAP'    shift, and enter state 77
	'SQRT_SWAP_DAG'shift, and enter state 78
	'SQRT_X'       shift, and enter state 79
	'SQRT_X_DAG'   shift, and enter state 80
	'SQRT_Y'       shift, and enter state 81
	'SQRT_Y_DAG'   shift, and enter state 82
	'SWAP'         shift, and enter state 83
	'SWAP_THETA'   shift, and enter state 84
	'S_DAG'        shift, and enter state 85
	'T'            shift, and enter state 86
	'T_DAG'        shift, and enter state 87
	'U1'           shift, and enter state 88
	'U2'           shift, and enter state 89
	'U3'           shift, and enter state 90
	'X'            shift, and enter state 91
	'Y'            shift, and enter state 92
	'Z'            shift, and enter state 93
	']'            reduce using rule 82
	'else'         reduce using rule 82
	'of'           reduce using rule 82
	'then'         reduce using rule 82
	'}'            reduce using rule 82
	L_Var          shift, and enter state 8

	Var            goto state 124
	BasisState     goto state 45
	Gate           goto state 46
	Tuple          goto state 47
	Term3          goto state 125

State 50

	Term2 -> Term3 .                                    (rule 89)

	'$'            reduce using rule 89
	'('            reduce using rule 89
	'()'           reduce using rule 89
	')'            reduce using rule 89
	','            reduce using rule 89
	'->'           reduce using rule 89
	'.'            reduce using rule 89
	';'            reduce using rule 89
	'@+'           reduce using rule 89
	'@+i'          reduce using rule 89
	'@-'           reduce using rule 89
	'@-i'          reduce using rule 89
	'@0'           reduce using rule 89
	'@1'           reduce using rule 89
	'FSWAP'        reduce using rule 89
	'H'            reduce using rule 89
	'ID'           reduce using rule 89
	'ISWAP'        reduce using rule 89
	'ROOT_SWAP'    reduce using rule 89
	'ROOT_SWAP_DAG'reduce using rule 89
	'ROOT_X'       reduce using rule 89
	'ROOT_X_DAG'   reduce using rule 89
	'ROOT_Y'       reduce using rule 89
	'ROOT_Y_DAG'   reduce using rule 89
	'ROOT_Z'       reduce using rule 89
	'ROOT_Z_DAG'   reduce using rule 89
	'RX'           reduce using rule 89
	'RY'           reduce using rule 89
	'RZ'           reduce using rule 89
	'S'            reduce using rule 89
	'SQRT_SWAP'    reduce using rule 89
	'SQRT_SWAP_DAG'reduce using rule 89
	'SQRT_X'       reduce using rule 89
	'SQRT_X_DAG'   reduce using rule 89
	'SQRT_Y'       reduce using rule 89
	'SQRT_Y_DAG'   reduce using rule 89
	'SWAP'         reduce using rule 89
	'SWAP_THETA'   reduce using rule 89
	'S_DAG'        reduce using rule 89
	'T'            reduce using rule 89
	'T_DAG'        reduce using rule 89
	'U1'           reduce using rule 89
	'U2'           reduce using rule 89
	'U3'           reduce using rule 89
	'X'            reduce using rule 89
	'Y'            reduce using rule 89
	'Z'            reduce using rule 89
	']'            reduce using rule 89
	'else'         reduce using rule 89
	'of'           reduce using rule 89
	'then'         reduce using rule 89
	'}'            reduce using rule 89
	L_Var          reduce using rule 89


State 51

	FunctionDefinition -> Var ListArg '=' Term .        (rule 107)

	';'            reduce using rule 107


State 52

	Term1 -> LetVariable . '<-' Term ';' Term           (rule 77)
	Term1 -> LetVariable . ',' ListLetVariable '<-' Term ';' Term    (rule 78)

	','            shift, and enter state 122
	'<-'           shift, and enter state 123


State 53

	Tuple -> '(' . Term ',' ListTerm ')'                (rule 69)
	Term3 -> '(' . Term ')'                             (rule 95)

	'('            shift, and enter state 53
	'()'           shift, and enter state 54
	'@+'           shift, and enter state 55
	'@+i'          shift, and enter state 56
	'@-'           shift, and enter state 57
	'@-i'          shift, and enter state 58
	'@0'           shift, and enter state 59
	'@1'           shift, and enter state 60
	'FSWAP'        shift, and enter state 61
	'H'            shift, and enter state 62
	'ID'           shift, and enter state 63
	'ISWAP'        shift, and enter state 64
	'ROOT_SWAP'    shift, and enter state 65
	'ROOT_SWAP_DAG'shift, and enter state 66
	'ROOT_X'       shift, and enter state 67
	'ROOT_X_DAG'   shift, and enter state 68
	'ROOT_Y'       shift, and enter state 69
	'ROOT_Y_DAG'   shift, and enter state 70
	'ROOT_Z'       shift, and enter state 71
	'ROOT_Z_DAG'   shift, and enter state 72
	'RX'           shift, and enter state 73
	'RY'           shift, and enter state 74
	'RZ'           shift, and enter state 75
	'S'            shift, and enter state 76
	'SQRT_SWAP'    shift, and enter state 77
	'SQRT_SWAP_DAG'shift, and enter state 78
	'SQRT_X'       shift, and enter state 79
	'SQRT_X_DAG'   shift, and enter state 80
	'SQRT_Y'       shift, and enter state 81
	'SQRT_Y_DAG'   shift, and enter state 82
	'SWAP'         shift, and enter state 83
	'SWAP_THETA'   shift, and enter state 84
	'S_DAG'        shift, and enter state 85
	'T'            shift, and enter state 86
	'T_DAG'        shift, and enter state 87
	'U1'           shift, and enter state 88
	'U2'           shift, and enter state 89
	'U3'           shift, and enter state 90
	'X'            shift, and enter state 91
	'Y'            shift, and enter state 92
	'Z'            shift, and enter state 93
	'case'         shift, and enter state 94
	'if'           shift, and enter state 95
	'let'          shift, and enter state 96
	'with'         shift, and enter state 97
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 98

	Var            goto state 43
	Lambda         goto state 44
	BasisState     goto state 45
	Gate           goto state 46
	Tuple          goto state 47
	Term1          goto state 48
	Term2          goto state 49
	Term3          goto state 50
	Term           goto state 121
	LetVariable    goto state 52

State 54

	Term3 -> '()' .                                     (rule 94)

	'$'            reduce using rule 94
	'('            reduce using rule 94
	'()'           reduce using rule 94
	')'            reduce using rule 94
	','            reduce using rule 94
	'->'           reduce using rule 94
	'.'            reduce using rule 94
	';'            reduce using rule 94
	'@+'           reduce using rule 94
	'@+i'          reduce using rule 94
	'@-'           reduce using rule 94
	'@-i'          reduce using rule 94
	'@0'           reduce using rule 94
	'@1'           reduce using rule 94
	'FSWAP'        reduce using rule 94
	'H'            reduce using rule 94
	'ID'           reduce using rule 94
	'ISWAP'        reduce using rule 94
	'ROOT_SWAP'    reduce using rule 94
	'ROOT_SWAP_DAG'reduce using rule 94
	'ROOT_X'       reduce using rule 94
	'ROOT_X_DAG'   reduce using rule 94
	'ROOT_Y'       reduce using rule 94
	'ROOT_Y_DAG'   reduce using rule 94
	'ROOT_Z'       reduce using rule 94
	'ROOT_Z_DAG'   reduce using rule 94
	'RX'           reduce using rule 94
	'RY'           reduce using rule 94
	'RZ'           reduce using rule 94
	'S'            reduce using rule 94
	'SQRT_SWAP'    reduce using rule 94
	'SQRT_SWAP_DAG'reduce using rule 94
	'SQRT_X'       reduce using rule 94
	'SQRT_X_DAG'   reduce using rule 94
	'SQRT_Y'       reduce using rule 94
	'SQRT_Y_DAG'   reduce using rule 94
	'SWAP'         reduce using rule 94
	'SWAP_THETA'   reduce using rule 94
	'S_DAG'        reduce using rule 94
	'T'            reduce using rule 94
	'T_DAG'        reduce using rule 94
	'U1'           reduce using rule 94
	'U2'           reduce using rule 94
	'U3'           reduce using rule 94
	'X'            reduce using rule 94
	'Y'            reduce using rule 94
	'Z'            reduce using rule 94
	']'            reduce using rule 94
	'else'         reduce using rule 94
	'of'           reduce using rule 94
	'then'         reduce using rule 94
	'}'            reduce using rule 94
	L_Var          reduce using rule 94


State 55

	BasisState -> '@+' .                                (rule 23)

	'$'            reduce using rule 23
	'('            reduce using rule 23
	'()'           reduce using rule 23
	')'            reduce using rule 23
	','            reduce using rule 23
	'->'           reduce using rule 23
	'.'            reduce using rule 23
	';'            reduce using rule 23
	'@+'           reduce using rule 23
	'@+i'          reduce using rule 23
	'@-'           reduce using rule 23
	'@-i'          reduce using rule 23
	'@0'           reduce using rule 23
	'@1'           reduce using rule 23
	'FSWAP'        reduce using rule 23
	'H'            reduce using rule 23
	'ID'           reduce using rule 23
	'ISWAP'        reduce using rule 23
	'ROOT_SWAP'    reduce using rule 23
	'ROOT_SWAP_DAG'reduce using rule 23
	'ROOT_X'       reduce using rule 23
	'ROOT_X_DAG'   reduce using rule 23
	'ROOT_Y'       reduce using rule 23
	'ROOT_Y_DAG'   reduce using rule 23
	'ROOT_Z'       reduce using rule 23
	'ROOT_Z_DAG'   reduce using rule 23
	'RX'           reduce using rule 23
	'RY'           reduce using rule 23
	'RZ'           reduce using rule 23
	'S'            reduce using rule 23
	'SQRT_SWAP'    reduce using rule 23
	'SQRT_SWAP_DAG'reduce using rule 23
	'SQRT_X'       reduce using rule 23
	'SQRT_X_DAG'   reduce using rule 23
	'SQRT_Y'       reduce using rule 23
	'SQRT_Y_DAG'   reduce using rule 23
	'SWAP'         reduce using rule 23
	'SWAP_THETA'   reduce using rule 23
	'S_DAG'        reduce using rule 23
	'T'            reduce using rule 23
	'T_DAG'        reduce using rule 23
	'U1'           reduce using rule 23
	'U2'           reduce using rule 23
	'U3'           reduce using rule 23
	'X'            reduce using rule 23
	'Y'            reduce using rule 23
	'Z'            reduce using rule 23
	']'            reduce using rule 23
	'else'         reduce using rule 23
	'of'           reduce using rule 23
	'then'         reduce using rule 23
	'}'            reduce using rule 23
	L_Var          reduce using rule 23


State 56

	BasisState -> '@+i' .                               (rule 25)

	'$'            reduce using rule 25
	'('            reduce using rule 25
	'()'           reduce using rule 25
	')'            reduce using rule 25
	','            reduce using rule 25
	'->'           reduce using rule 25
	'.'            reduce using rule 25
	';'            reduce using rule 25
	'@+'           reduce using rule 25
	'@+i'          reduce using rule 25
	'@-'           reduce using rule 25
	'@-i'          reduce using rule 25
	'@0'           reduce using rule 25
	'@1'           reduce using rule 25
	'FSWAP'        reduce using rule 25
	'H'            reduce using rule 25
	'ID'           reduce using rule 25
	'ISWAP'        reduce using rule 25
	'ROOT_SWAP'    reduce using rule 25
	'ROOT_SWAP_DAG'reduce using rule 25
	'ROOT_X'       reduce using rule 25
	'ROOT_X_DAG'   reduce using rule 25
	'ROOT_Y'       reduce using rule 25
	'ROOT_Y_DAG'   reduce using rule 25
	'ROOT_Z'       reduce using rule 25
	'ROOT_Z_DAG'   reduce using rule 25
	'RX'           reduce using rule 25
	'RY'           reduce using rule 25
	'RZ'           reduce using rule 25
	'S'            reduce using rule 25
	'SQRT_SWAP'    reduce using rule 25
	'SQRT_SWAP_DAG'reduce using rule 25
	'SQRT_X'       reduce using rule 25
	'SQRT_X_DAG'   reduce using rule 25
	'SQRT_Y'       reduce using rule 25
	'SQRT_Y_DAG'   reduce using rule 25
	'SWAP'         reduce using rule 25
	'SWAP_THETA'   reduce using rule 25
	'S_DAG'        reduce using rule 25
	'T'            reduce using rule 25
	'T_DAG'        reduce using rule 25
	'U1'           reduce using rule 25
	'U2'           reduce using rule 25
	'U3'           reduce using rule 25
	'X'            reduce using rule 25
	'Y'            reduce using rule 25
	'Z'            reduce using rule 25
	']'            reduce using rule 25
	'else'         reduce using rule 25
	'of'           reduce using rule 25
	'then'         reduce using rule 25
	'}'            reduce using rule 25
	L_Var          reduce using rule 25


State 57

	BasisState -> '@-' .                                (rule 24)

	'$'            reduce using rule 24
	'('            reduce using rule 24
	'()'           reduce using rule 24
	')'            reduce using rule 24
	','            reduce using rule 24
	'->'           reduce using rule 24
	'.'            reduce using rule 24
	';'            reduce using rule 24
	'@+'           reduce using rule 24
	'@+i'          reduce using rule 24
	'@-'           reduce using rule 24
	'@-i'          reduce using rule 24
	'@0'           reduce using rule 24
	'@1'           reduce using rule 24
	'FSWAP'        reduce using rule 24
	'H'            reduce using rule 24
	'ID'           reduce using rule 24
	'ISWAP'        reduce using rule 24
	'ROOT_SWAP'    reduce using rule 24
	'ROOT_SWAP_DAG'reduce using rule 24
	'ROOT_X'       reduce using rule 24
	'ROOT_X_DAG'   reduce using rule 24
	'ROOT_Y'       reduce using rule 24
	'ROOT_Y_DAG'   reduce using rule 24
	'ROOT_Z'       reduce using rule 24
	'ROOT_Z_DAG'   reduce using rule 24
	'RX'           reduce using rule 24
	'RY'           reduce using rule 24
	'RZ'           reduce using rule 24
	'S'            reduce using rule 24
	'SQRT_SWAP'    reduce using rule 24
	'SQRT_SWAP_DAG'reduce using rule 24
	'SQRT_X'       reduce using rule 24
	'SQRT_X_DAG'   reduce using rule 24
	'SQRT_Y'       reduce using rule 24
	'SQRT_Y_DAG'   reduce using rule 24
	'SWAP'         reduce using rule 24
	'SWAP_THETA'   reduce using rule 24
	'S_DAG'        reduce using rule 24
	'T'            reduce using rule 24
	'T_DAG'        reduce using rule 24
	'U1'           reduce using rule 24
	'U2'           reduce using rule 24
	'U3'           reduce using rule 24
	'X'            reduce using rule 24
	'Y'            reduce using rule 24
	'Z'            reduce using rule 24
	']'            reduce using rule 24
	'else'         reduce using rule 24
	'of'           reduce using rule 24
	'then'         reduce using rule 24
	'}'            reduce using rule 24
	L_Var          reduce using rule 24


State 58

	BasisState -> '@-i' .                               (rule 26)

	'$'            reduce using rule 26
	'('            reduce using rule 26
	'()'           reduce using rule 26
	')'            reduce using rule 26
	','            reduce using rule 26
	'->'           reduce using rule 26
	'.'            reduce using rule 26
	';'            reduce using rule 26
	'@+'           reduce using rule 26
	'@+i'          reduce using rule 26
	'@-'           reduce using rule 26
	'@-i'          reduce using rule 26
	'@0'           reduce using rule 26
	'@1'           reduce using rule 26
	'FSWAP'        reduce using rule 26
	'H'            reduce using rule 26
	'ID'           reduce using rule 26
	'ISWAP'        reduce using rule 26
	'ROOT_SWAP'    reduce using rule 26
	'ROOT_SWAP_DAG'reduce using rule 26
	'ROOT_X'       reduce using rule 26
	'ROOT_X_DAG'   reduce using rule 26
	'ROOT_Y'       reduce using rule 26
	'ROOT_Y_DAG'   reduce using rule 26
	'ROOT_Z'       reduce using rule 26
	'ROOT_Z_DAG'   reduce using rule 26
	'RX'           reduce using rule 26
	'RY'           reduce using rule 26
	'RZ'           reduce using rule 26
	'S'            reduce using rule 26
	'SQRT_SWAP'    reduce using rule 26
	'SQRT_SWAP_DAG'reduce using rule 26
	'SQRT_X'       reduce using rule 26
	'SQRT_X_DAG'   reduce using rule 26
	'SQRT_Y'       reduce using rule 26
	'SQRT_Y_DAG'   reduce using rule 26
	'SWAP'         reduce using rule 26
	'SWAP_THETA'   reduce using rule 26
	'S_DAG'        reduce using rule 26
	'T'            reduce using rule 26
	'T_DAG'        reduce using rule 26
	'U1'           reduce using rule 26
	'U2'           reduce using rule 26
	'U3'           reduce using rule 26
	'X'            reduce using rule 26
	'Y'            reduce using rule 26
	'Z'            reduce using rule 26
	']'            reduce using rule 26
	'else'         reduce using rule 26
	'of'           reduce using rule 26
	'then'         reduce using rule 26
	'}'            reduce using rule 26
	L_Var          reduce using rule 26


State 59

	BasisState -> '@0' .                                (rule 21)

	'$'            reduce using rule 21
	'('            reduce using rule 21
	'()'           reduce using rule 21
	')'            reduce using rule 21
	','            reduce using rule 21
	'->'           reduce using rule 21
	'.'            reduce using rule 21
	';'            reduce using rule 21
	'@+'           reduce using rule 21
	'@+i'          reduce using rule 21
	'@-'           reduce using rule 21
	'@-i'          reduce using rule 21
	'@0'           reduce using rule 21
	'@1'           reduce using rule 21
	'FSWAP'        reduce using rule 21
	'H'            reduce using rule 21
	'ID'           reduce using rule 21
	'ISWAP'        reduce using rule 21
	'ROOT_SWAP'    reduce using rule 21
	'ROOT_SWAP_DAG'reduce using rule 21
	'ROOT_X'       reduce using rule 21
	'ROOT_X_DAG'   reduce using rule 21
	'ROOT_Y'       reduce using rule 21
	'ROOT_Y_DAG'   reduce using rule 21
	'ROOT_Z'       reduce using rule 21
	'ROOT_Z_DAG'   reduce using rule 21
	'RX'           reduce using rule 21
	'RY'           reduce using rule 21
	'RZ'           reduce using rule 21
	'S'            reduce using rule 21
	'SQRT_SWAP'    reduce using rule 21
	'SQRT_SWAP_DAG'reduce using rule 21
	'SQRT_X'       reduce using rule 21
	'SQRT_X_DAG'   reduce using rule 21
	'SQRT_Y'       reduce using rule 21
	'SQRT_Y_DAG'   reduce using rule 21
	'SWAP'         reduce using rule 21
	'SWAP_THETA'   reduce using rule 21
	'S_DAG'        reduce using rule 21
	'T'            reduce using rule 21
	'T_DAG'        reduce using rule 21
	'U1'           reduce using rule 21
	'U2'           reduce using rule 21
	'U3'           reduce using rule 21
	'X'            reduce using rule 21
	'Y'            reduce using rule 21
	'Z'            reduce using rule 21
	']'            reduce using rule 21
	'else'         reduce using rule 21
	'of'           reduce using rule 21
	'then'         reduce using rule 21
	'}'            reduce using rule 21
	L_Var          reduce using rule 21


State 60

	BasisState -> '@1' .                                (rule 22)

	'$'            reduce using rule 22
	'('            reduce using rule 22
	'()'           reduce using rule 22
	')'            reduce using rule 22
	','            reduce using rule 22
	'->'           reduce using rule 22
	'.'            reduce using rule 22
	';'            reduce using rule 22
	'@+'           reduce using rule 22
	'@+i'          reduce using rule 22
	'@-'           reduce using rule 22
	'@-i'          reduce using rule 22
	'@0'           reduce using rule 22
	'@1'           reduce using rule 22
	'FSWAP'        reduce using rule 22
	'H'            reduce using rule 22
	'ID'           reduce using rule 22
	'ISWAP'        reduce using rule 22
	'ROOT_SWAP'    reduce using rule 22
	'ROOT_SWAP_DAG'reduce using rule 22
	'ROOT_X'       reduce using rule 22
	'ROOT_X_DAG'   reduce using rule 22
	'ROOT_Y'       reduce using rule 22
	'ROOT_Y_DAG'   reduce using rule 22
	'ROOT_Z'       reduce using rule 22
	'ROOT_Z_DAG'   reduce using rule 22
	'RX'           reduce using rule 22
	'RY'           reduce using rule 22
	'RZ'           reduce using rule 22
	'S'            reduce using rule 22
	'SQRT_SWAP'    reduce using rule 22
	'SQRT_SWAP_DAG'reduce using rule 22
	'SQRT_X'       reduce using rule 22
	'SQRT_X_DAG'   reduce using rule 22
	'SQRT_Y'       reduce using rule 22
	'SQRT_Y_DAG'   reduce using rule 22
	'SWAP'         reduce using rule 22
	'SWAP_THETA'   reduce using rule 22
	'S_DAG'        reduce using rule 22
	'T'            reduce using rule 22
	'T_DAG'        reduce using rule 22
	'U1'           reduce using rule 22
	'U2'           reduce using rule 22
	'U3'           reduce using rule 22
	'X'            reduce using rule 22
	'Y'            reduce using rule 22
	'Z'            reduce using rule 22
	']'            reduce using rule 22
	'else'         reduce using rule 22
	'of'           reduce using rule 22
	'then'         reduce using rule 22
	'}'            reduce using rule 22
	L_Var          reduce using rule 22


State 61

	Gate -> 'FSWAP' .                                   (rule 57)

	'$'            reduce using rule 57
	'('            reduce using rule 57
	'()'           reduce using rule 57
	')'            reduce using rule 57
	','            reduce using rule 57
	'->'           reduce using rule 57
	'.'            reduce using rule 57
	';'            reduce using rule 57
	'@+'           reduce using rule 57
	'@+i'          reduce using rule 57
	'@-'           reduce using rule 57
	'@-i'          reduce using rule 57
	'@0'           reduce using rule 57
	'@1'           reduce using rule 57
	'FSWAP'        reduce using rule 57
	'H'            reduce using rule 57
	'ID'           reduce using rule 57
	'ISWAP'        reduce using rule 57
	'ROOT_SWAP'    reduce using rule 57
	'ROOT_SWAP_DAG'reduce using rule 57
	'ROOT_X'       reduce using rule 57
	'ROOT_X_DAG'   reduce using rule 57
	'ROOT_Y'       reduce using rule 57
	'ROOT_Y_DAG'   reduce using rule 57
	'ROOT_Z'       reduce using rule 57
	'ROOT_Z_DAG'   reduce using rule 57
	'RX'           reduce using rule 57
	'RY'           reduce using rule 57
	'RZ'           reduce using rule 57
	'S'            reduce using rule 57
	'SQRT_SWAP'    reduce using rule 57
	'SQRT_SWAP_DAG'reduce using rule 57
	'SQRT_X'       reduce using rule 57
	'SQRT_X_DAG'   reduce using rule 57
	'SQRT_Y'       reduce using rule 57
	'SQRT_Y_DAG'   reduce using rule 57
	'SWAP'         reduce using rule 57
	'SWAP_THETA'   reduce using rule 57
	'S_DAG'        reduce using rule 57
	'T'            reduce using rule 57
	'T_DAG'        reduce using rule 57
	'U1'           reduce using rule 57
	'U2'           reduce using rule 57
	'U3'           reduce using rule 57
	'X'            reduce using rule 57
	'Y'            reduce using rule 57
	'Z'            reduce using rule 57
	']'            reduce using rule 57
	'else'         reduce using rule 57
	'of'           reduce using rule 57
	'then'         reduce using rule 57
	'}'            reduce using rule 57
	L_Var          reduce using rule 57


State 62

	Gate -> 'H' .                                       (rule 28)

	'$'            reduce using rule 28
	'('            reduce using rule 28
	'()'           reduce using rule 28
	')'            reduce using rule 28
	','            reduce using rule 28
	'->'           reduce using rule 28
	'.'            reduce using rule 28
	';'            reduce using rule 28
	'@+'           reduce using rule 28
	'@+i'          reduce using rule 28
	'@-'           reduce using rule 28
	'@-i'          reduce using rule 28
	'@0'           reduce using rule 28
	'@1'           reduce using rule 28
	'FSWAP'        reduce using rule 28
	'H'            reduce using rule 28
	'ID'           reduce using rule 28
	'ISWAP'        reduce using rule 28
	'ROOT_SWAP'    reduce using rule 28
	'ROOT_SWAP_DAG'reduce using rule 28
	'ROOT_X'       reduce using rule 28
	'ROOT_X_DAG'   reduce using rule 28
	'ROOT_Y'       reduce using rule 28
	'ROOT_Y_DAG'   reduce using rule 28
	'ROOT_Z'       reduce using rule 28
	'ROOT_Z_DAG'   reduce using rule 28
	'RX'           reduce using rule 28
	'RY'           reduce using rule 28
	'RZ'           reduce using rule 28
	'S'            reduce using rule 28
	'SQRT_SWAP'    reduce using rule 28
	'SQRT_SWAP_DAG'reduce using rule 28
	'SQRT_X'       reduce using rule 28
	'SQRT_X_DAG'   reduce using rule 28
	'SQRT_Y'       reduce using rule 28
	'SQRT_Y_DAG'   reduce using rule 28
	'SWAP'         reduce using rule 28
	'SWAP_THETA'   reduce using rule 28
	'S_DAG'        reduce using rule 28
	'T'            reduce using rule 28
	'T_DAG'        reduce using rule 28
	'U1'           reduce using rule 28
	'U2'           reduce using rule 28
	'U3'           reduce using rule 28
	'X'            reduce using rule 28
	'Y'            reduce using rule 28
	'Z'            reduce using rule 28
	']'            reduce using rule 28
	'else'         reduce using rule 28
	'of'           reduce using rule 28
	'then'         reduce using rule 28
	'}'            reduce using rule 28
	L_Var          reduce using rule 28


State 63

	Gate -> 'ID' .                                      (rule 32)

	'$'            reduce using rule 32
	'('            reduce using rule 32
	'()'           reduce using rule 32
	')'            reduce using rule 32
	','            reduce using rule 32
	'->'           reduce using rule 32
	'.'            reduce using rule 32
	';'            reduce using rule 32
	'@+'           reduce using rule 32
	'@+i'          reduce using rule 32
	'@-'           reduce using rule 32
	'@-i'          reduce using rule 32
	'@0'           reduce using rule 32
	'@1'           reduce using rule 32
	'FSWAP'        reduce using rule 32
	'H'            reduce using rule 32
	'ID'           reduce using rule 32
	'ISWAP'        reduce using rule 32
	'ROOT_SWAP'    reduce using rule 32
	'ROOT_SWAP_DAG'reduce using rule 32
	'ROOT_X'       reduce using rule 32
	'ROOT_X_DAG'   reduce using rule 32
	'ROOT_Y'       reduce using rule 32
	'ROOT_Y_DAG'   reduce using rule 32
	'ROOT_Z'       reduce using rule 32
	'ROOT_Z_DAG'   reduce using rule 32
	'RX'           reduce using rule 32
	'RY'           reduce using rule 32
	'RZ'           reduce using rule 32
	'S'            reduce using rule 32
	'SQRT_SWAP'    reduce using rule 32
	'SQRT_SWAP_DAG'reduce using rule 32
	'SQRT_X'       reduce using rule 32
	'SQRT_X_DAG'   reduce using rule 32
	'SQRT_Y'       reduce using rule 32
	'SQRT_Y_DAG'   reduce using rule 32
	'SWAP'         reduce using rule 32
	'SWAP_THETA'   reduce using rule 32
	'S_DAG'        reduce using rule 32
	'T'            reduce using rule 32
	'T_DAG'        reduce using rule 32
	'U1'           reduce using rule 32
	'U2'           reduce using rule 32
	'U3'           reduce using rule 32
	'X'            reduce using rule 32
	'Y'            reduce using rule 32
	'Z'            reduce using rule 32
	']'            reduce using rule 32
	'else'         reduce using rule 32
	'of'           reduce using rule 32
	'then'         reduce using rule 32
	'}'            reduce using rule 32
	L_Var          reduce using rule 32


State 64

	Gate -> 'ISWAP' .                                   (rule 56)

	'$'            reduce using rule 56
	'('            reduce using rule 56
	'()'           reduce using rule 56
	')'            reduce using rule 56
	','            reduce using rule 56
	'->'           reduce using rule 56
	'.'            reduce using rule 56
	';'            reduce using rule 56
	'@+'           reduce using rule 56
	'@+i'          reduce using rule 56
	'@-'           reduce using rule 56
	'@-i'          reduce using rule 56
	'@0'           reduce using rule 56
	'@1'           reduce using rule 56
	'FSWAP'        reduce using rule 56
	'H'            reduce using rule 56
	'ID'           reduce using rule 56
	'ISWAP'        reduce using rule 56
	'ROOT_SWAP'    reduce using rule 56
	'ROOT_SWAP_DAG'reduce using rule 56
	'ROOT_X'       reduce using rule 56
	'ROOT_X_DAG'   reduce using rule 56
	'ROOT_Y'       reduce using rule 56
	'ROOT_Y_DAG'   reduce using rule 56
	'ROOT_Z'       reduce using rule 56
	'ROOT_Z_DAG'   reduce using rule 56
	'RX'           reduce using rule 56
	'RY'           reduce using rule 56
	'RZ'           reduce using rule 56
	'S'            reduce using rule 56
	'SQRT_SWAP'    reduce using rule 56
	'SQRT_SWAP_DAG'reduce using rule 56
	'SQRT_X'       reduce using rule 56
	'SQRT_X_DAG'   reduce using rule 56
	'SQRT_Y'       reduce using rule 56
	'SQRT_Y_DAG'   reduce using rule 56
	'SWAP'         reduce using rule 56
	'SWAP_THETA'   reduce using rule 56
	'S_DAG'        reduce using rule 56
	'T'            reduce using rule 56
	'T_DAG'        reduce using rule 56
	'U1'           reduce using rule 56
	'U2'           reduce using rule 56
	'U3'           reduce using rule 56
	'X'            reduce using rule 56
	'Y'            reduce using rule 56
	'Z'            reduce using rule 56
	']'            reduce using rule 56
	'else'         reduce using rule 56
	'of'           reduce using rule 56
	'then'         reduce using rule 56
	'}'            reduce using rule 56
	L_Var          reduce using rule 56


State 65

	Gate -> 'ROOT_SWAP' . Integer                       (rule 59)

	L_integ        shift, and enter state 36

	Integer        goto state 120

State 66

	Gate -> 'ROOT_SWAP_DAG' . Integer                   (rule 60)

	L_integ        shift, and enter state 36

	Integer        goto state 119

State 67

	Gate -> 'ROOT_X' . Integer                          (rule 33)

	L_integ        shift, and enter state 36

	Integer        goto state 118

State 68

	Gate -> 'ROOT_X_DAG' . Integer                      (rule 34)

	L_integ        shift, and enter state 36

	Integer        goto state 117

State 69

	Gate -> 'ROOT_Y' . Integer                          (rule 35)

	L_integ        shift, and enter state 36

	Integer        goto state 116

State 70

	Gate -> 'ROOT_Y_DAG' . Integer                      (rule 36)

	L_integ        shift, and enter state 36

	Integer        goto state 115

State 71

	Gate -> 'ROOT_Z' . Integer                          (rule 37)

	L_integ        shift, and enter state 36

	Integer        goto state 114

State 72

	Gate -> 'ROOT_Z_DAG' . Integer                      (rule 38)

	L_integ        shift, and enter state 36

	Integer        goto state 113

State 73

	Gate -> 'RX' . Angle                                (rule 47)

	L_doubl        shift, and enter state 2

	Double         goto state 107
	Angle          goto state 112

State 74

	Gate -> 'RY' . Angle                                (rule 48)

	L_doubl        shift, and enter state 2

	Double         goto state 107
	Angle          goto state 111

State 75

	Gate -> 'RZ' . Angle                                (rule 49)

	L_doubl        shift, and enter state 2

	Double         goto state 107
	Angle          goto state 110

State 76

	Gate -> 'S' .                                       (rule 39)

	'$'            reduce using rule 39
	'('            reduce using rule 39
	'()'           reduce using rule 39
	')'            reduce using rule 39
	','            reduce using rule 39
	'->'           reduce using rule 39
	'.'            reduce using rule 39
	';'            reduce using rule 39
	'@+'           reduce using rule 39
	'@+i'          reduce using rule 39
	'@-'           reduce using rule 39
	'@-i'          reduce using rule 39
	'@0'           reduce using rule 39
	'@1'           reduce using rule 39
	'FSWAP'        reduce using rule 39
	'H'            reduce using rule 39
	'ID'           reduce using rule 39
	'ISWAP'        reduce using rule 39
	'ROOT_SWAP'    reduce using rule 39
	'ROOT_SWAP_DAG'reduce using rule 39
	'ROOT_X'       reduce using rule 39
	'ROOT_X_DAG'   reduce using rule 39
	'ROOT_Y'       reduce using rule 39
	'ROOT_Y_DAG'   reduce using rule 39
	'ROOT_Z'       reduce using rule 39
	'ROOT_Z_DAG'   reduce using rule 39
	'RX'           reduce using rule 39
	'RY'           reduce using rule 39
	'RZ'           reduce using rule 39
	'S'            reduce using rule 39
	'SQRT_SWAP'    reduce using rule 39
	'SQRT_SWAP_DAG'reduce using rule 39
	'SQRT_X'       reduce using rule 39
	'SQRT_X_DAG'   reduce using rule 39
	'SQRT_Y'       reduce using rule 39
	'SQRT_Y_DAG'   reduce using rule 39
	'SWAP'         reduce using rule 39
	'SWAP_THETA'   reduce using rule 39
	'S_DAG'        reduce using rule 39
	'T'            reduce using rule 39
	'T_DAG'        reduce using rule 39
	'U1'           reduce using rule 39
	'U2'           reduce using rule 39
	'U3'           reduce using rule 39
	'X'            reduce using rule 39
	'Y'            reduce using rule 39
	'Z'            reduce using rule 39
	']'            reduce using rule 39
	'else'         reduce using rule 39
	'of'           reduce using rule 39
	'then'         reduce using rule 39
	'}'            reduce using rule 39
	L_Var          reduce using rule 39


State 77

	Gate -> 'SQRT_SWAP' .                               (rule 54)

	'$'            reduce using rule 54
	'('            reduce using rule 54
	'()'           reduce using rule 54
	')'            reduce using rule 54
	','            reduce using rule 54
	'->'           reduce using rule 54
	'.'            reduce using rule 54
	';'            reduce using rule 54
	'@+'           reduce using rule 54
	'@+i'          reduce using rule 54
	'@-'           reduce using rule 54
	'@-i'          reduce using rule 54
	'@0'           reduce using rule 54
	'@1'           reduce using rule 54
	'FSWAP'        reduce using rule 54
	'H'            reduce using rule 54
	'ID'           reduce using rule 54
	'ISWAP'        reduce using rule 54
	'ROOT_SWAP'    reduce using rule 54
	'ROOT_SWAP_DAG'reduce using rule 54
	'ROOT_X'       reduce using rule 54
	'ROOT_X_DAG'   reduce using rule 54
	'ROOT_Y'       reduce using rule 54
	'ROOT_Y_DAG'   reduce using rule 54
	'ROOT_Z'       reduce using rule 54
	'ROOT_Z_DAG'   reduce using rule 54
	'RX'           reduce using rule 54
	'RY'           reduce using rule 54
	'RZ'           reduce using rule 54
	'S'            reduce using rule 54
	'SQRT_SWAP'    reduce using rule 54
	'SQRT_SWAP_DAG'reduce using rule 54
	'SQRT_X'       reduce using rule 54
	'SQRT_X_DAG'   reduce using rule 54
	'SQRT_Y'       reduce using rule 54
	'SQRT_Y_DAG'   reduce using rule 54
	'SWAP'         reduce using rule 54
	'SWAP_THETA'   reduce using rule 54
	'S_DAG'        reduce using rule 54
	'T'            reduce using rule 54
	'T_DAG'        reduce using rule 54
	'U1'           reduce using rule 54
	'U2'           reduce using rule 54
	'U3'           reduce using rule 54
	'X'            reduce using rule 54
	'Y'            reduce using rule 54
	'Z'            reduce using rule 54
	']'            reduce using rule 54
	'else'         reduce using rule 54
	'of'           reduce using rule 54
	'then'         reduce using rule 54
	'}'            reduce using rule 54
	L_Var          reduce using rule 54


State 78

	Gate -> 'SQRT_SWAP_DAG' .                           (rule 55)

	'$'            reduce using rule 55
	'('            reduce using rule 55
	'()'           reduce using rule 55
	')'            reduce using rule 55
	','            reduce using rule 55
	'->'           reduce using rule 55
	'.'            reduce using rule 55
	';'            reduce using rule 55
	'@+'           reduce using rule 55
	'@+i'          reduce using rule 55
	'@-'           reduce using rule 55
	'@-i'          reduce using rule 55
	'@0'           reduce using rule 55
	'@1'           reduce using rule 55
	'FSWAP'        reduce using rule 55
	'H'            reduce using rule 55
	'ID'           reduce using rule 55
	'ISWAP'        reduce using rule 55
	'ROOT_SWAP'    reduce using rule 55
	'ROOT_SWAP_DAG'reduce using rule 55
	'ROOT_X'       reduce using rule 55
	'ROOT_X_DAG'   reduce using rule 55
	'ROOT_Y'       reduce using rule 55
	'ROOT_Y_DAG'   reduce using rule 55
	'ROOT_Z'       reduce using rule 55
	'ROOT_Z_DAG'   reduce using rule 55
	'RX'           reduce using rule 55
	'RY'           reduce using rule 55
	'RZ'           reduce using rule 55
	'S'            reduce using rule 55
	'SQRT_SWAP'    reduce using rule 55
	'SQRT_SWAP_DAG'reduce using rule 55
	'SQRT_X'       reduce using rule 55
	'SQRT_X_DAG'   reduce using rule 55
	'SQRT_Y'       reduce using rule 55
	'SQRT_Y_DAG'   reduce using rule 55
	'SWAP'         reduce using rule 55
	'SWAP_THETA'   reduce using rule 55
	'S_DAG'        reduce using rule 55
	'T'            reduce using rule 55
	'T_DAG'        reduce using rule 55
	'U1'           reduce using rule 55
	'U2'           reduce using rule 55
	'U3'           reduce using rule 55
	'X'            reduce using rule 55
	'Y'            reduce using rule 55
	'Z'            reduce using rule 55
	']'            reduce using rule 55
	'else'         reduce using rule 55
	'of'           reduce using rule 55
	'then'         reduce using rule 55
	'}'            reduce using rule 55
	L_Var          reduce using rule 55


State 79

	Gate -> 'SQRT_X' .                                  (rule 43)

	'$'            reduce using rule 43
	'('            reduce using rule 43
	'()'           reduce using rule 43
	')'            reduce using rule 43
	','            reduce using rule 43
	'->'           reduce using rule 43
	'.'            reduce using rule 43
	';'            reduce using rule 43
	'@+'           reduce using rule 43
	'@+i'          reduce using rule 43
	'@-'           reduce using rule 43
	'@-i'          reduce using rule 43
	'@0'           reduce using rule 43
	'@1'           reduce using rule 43
	'FSWAP'        reduce using rule 43
	'H'            reduce using rule 43
	'ID'           reduce using rule 43
	'ISWAP'        reduce using rule 43
	'ROOT_SWAP'    reduce using rule 43
	'ROOT_SWAP_DAG'reduce using rule 43
	'ROOT_X'       reduce using rule 43
	'ROOT_X_DAG'   reduce using rule 43
	'ROOT_Y'       reduce using rule 43
	'ROOT_Y_DAG'   reduce using rule 43
	'ROOT_Z'       reduce using rule 43
	'ROOT_Z_DAG'   reduce using rule 43
	'RX'           reduce using rule 43
	'RY'           reduce using rule 43
	'RZ'           reduce using rule 43
	'S'            reduce using rule 43
	'SQRT_SWAP'    reduce using rule 43
	'SQRT_SWAP_DAG'reduce using rule 43
	'SQRT_X'       reduce using rule 43
	'SQRT_X_DAG'   reduce using rule 43
	'SQRT_Y'       reduce using rule 43
	'SQRT_Y_DAG'   reduce using rule 43
	'SWAP'         reduce using rule 43
	'SWAP_THETA'   reduce using rule 43
	'S_DAG'        reduce using rule 43
	'T'            reduce using rule 43
	'T_DAG'        reduce using rule 43
	'U1'           reduce using rule 43
	'U2'           reduce using rule 43
	'U3'           reduce using rule 43
	'X'            reduce using rule 43
	'Y'            reduce using rule 43
	'Z'            reduce using rule 43
	']'            reduce using rule 43
	'else'         reduce using rule 43
	'of'           reduce using rule 43
	'then'         reduce using rule 43
	'}'            reduce using rule 43
	L_Var          reduce using rule 43


State 80

	Gate -> 'SQRT_X_DAG' .                              (rule 44)

	'$'            reduce using rule 44
	'('            reduce using rule 44
	'()'           reduce using rule 44
	')'            reduce using rule 44
	','            reduce using rule 44
	'->'           reduce using rule 44
	'.'            reduce using rule 44
	';'            reduce using rule 44
	'@+'           reduce using rule 44
	'@+i'          reduce using rule 44
	'@-'           reduce using rule 44
	'@-i'          reduce using rule 44
	'@0'           reduce using rule 44
	'@1'           reduce using rule 44
	'FSWAP'        reduce using rule 44
	'H'            reduce using rule 44
	'ID'           reduce using rule 44
	'ISWAP'        reduce using rule 44
	'ROOT_SWAP'    reduce using rule 44
	'ROOT_SWAP_DAG'reduce using rule 44
	'ROOT_X'       reduce using rule 44
	'ROOT_X_DAG'   reduce using rule 44
	'ROOT_Y'       reduce using rule 44
	'ROOT_Y_DAG'   reduce using rule 44
	'ROOT_Z'       reduce using rule 44
	'ROOT_Z_DAG'   reduce using rule 44
	'RX'           reduce using rule 44
	'RY'           reduce using rule 44
	'RZ'           reduce using rule 44
	'S'            reduce using rule 44
	'SQRT_SWAP'    reduce using rule 44
	'SQRT_SWAP_DAG'reduce using rule 44
	'SQRT_X'       reduce using rule 44
	'SQRT_X_DAG'   reduce using rule 44
	'SQRT_Y'       reduce using rule 44
	'SQRT_Y_DAG'   reduce using rule 44
	'SWAP'         reduce using rule 44
	'SWAP_THETA'   reduce using rule 44
	'S_DAG'        reduce using rule 44
	'T'            reduce using rule 44
	'T_DAG'        reduce using rule 44
	'U1'           reduce using rule 44
	'U2'           reduce using rule 44
	'U3'           reduce using rule 44
	'X'            reduce using rule 44
	'Y'            reduce using rule 44
	'Z'            reduce using rule 44
	']'            reduce using rule 44
	'else'         reduce using rule 44
	'of'           reduce using rule 44
	'then'         reduce using rule 44
	'}'            reduce using rule 44
	L_Var          reduce using rule 44


State 81

	Gate -> 'SQRT_Y' .                                  (rule 45)

	'$'            reduce using rule 45
	'('            reduce using rule 45
	'()'           reduce using rule 45
	')'            reduce using rule 45
	','            reduce using rule 45
	'->'           reduce using rule 45
	'.'            reduce using rule 45
	';'            reduce using rule 45
	'@+'           reduce using rule 45
	'@+i'          reduce using rule 45
	'@-'           reduce using rule 45
	'@-i'          reduce using rule 45
	'@0'           reduce using rule 45
	'@1'           reduce using rule 45
	'FSWAP'        reduce using rule 45
	'H'            reduce using rule 45
	'ID'           reduce using rule 45
	'ISWAP'        reduce using rule 45
	'ROOT_SWAP'    reduce using rule 45
	'ROOT_SWAP_DAG'reduce using rule 45
	'ROOT_X'       reduce using rule 45
	'ROOT_X_DAG'   reduce using rule 45
	'ROOT_Y'       reduce using rule 45
	'ROOT_Y_DAG'   reduce using rule 45
	'ROOT_Z'       reduce using rule 45
	'ROOT_Z_DAG'   reduce using rule 45
	'RX'           reduce using rule 45
	'RY'           reduce using rule 45
	'RZ'           reduce using rule 45
	'S'            reduce using rule 45
	'SQRT_SWAP'    reduce using rule 45
	'SQRT_SWAP_DAG'reduce using rule 45
	'SQRT_X'       reduce using rule 45
	'SQRT_X_DAG'   reduce using rule 45
	'SQRT_Y'       reduce using rule 45
	'SQRT_Y_DAG'   reduce using rule 45
	'SWAP'         reduce using rule 45
	'SWAP_THETA'   reduce using rule 45
	'S_DAG'        reduce using rule 45
	'T'            reduce using rule 45
	'T_DAG'        reduce using rule 45
	'U1'           reduce using rule 45
	'U2'           reduce using rule 45
	'U3'           reduce using rule 45
	'X'            reduce using rule 45
	'Y'            reduce using rule 45
	'Z'            reduce using rule 45
	']'            reduce using rule 45
	'else'         reduce using rule 45
	'of'           reduce using rule 45
	'then'         reduce using rule 45
	'}'            reduce using rule 45
	L_Var          reduce using rule 45


State 82

	Gate -> 'SQRT_Y_DAG' .                              (rule 46)

	'$'            reduce using rule 46
	'('            reduce using rule 46
	'()'           reduce using rule 46
	')'            reduce using rule 46
	','            reduce using rule 46
	'->'           reduce using rule 46
	'.'            reduce using rule 46
	';'            reduce using rule 46
	'@+'           reduce using rule 46
	'@+i'          reduce using rule 46
	'@-'           reduce using rule 46
	'@-i'          reduce using rule 46
	'@0'           reduce using rule 46
	'@1'           reduce using rule 46
	'FSWAP'        reduce using rule 46
	'H'            reduce using rule 46
	'ID'           reduce using rule 46
	'ISWAP'        reduce using rule 46
	'ROOT_SWAP'    reduce using rule 46
	'ROOT_SWAP_DAG'reduce using rule 46
	'ROOT_X'       reduce using rule 46
	'ROOT_X_DAG'   reduce using rule 46
	'ROOT_Y'       reduce using rule 46
	'ROOT_Y_DAG'   reduce using rule 46
	'ROOT_Z'       reduce using rule 46
	'ROOT_Z_DAG'   reduce using rule 46
	'RX'           reduce using rule 46
	'RY'           reduce using rule 46
	'RZ'           reduce using rule 46
	'S'            reduce using rule 46
	'SQRT_SWAP'    reduce using rule 46
	'SQRT_SWAP_DAG'reduce using rule 46
	'SQRT_X'       reduce using rule 46
	'SQRT_X_DAG'   reduce using rule 46
	'SQRT_Y'       reduce using rule 46
	'SQRT_Y_DAG'   reduce using rule 46
	'SWAP'         reduce using rule 46
	'SWAP_THETA'   reduce using rule 46
	'S_DAG'        reduce using rule 46
	'T'            reduce using rule 46
	'T_DAG'        reduce using rule 46
	'U1'           reduce using rule 46
	'U2'           reduce using rule 46
	'U3'           reduce using rule 46
	'X'            reduce using rule 46
	'Y'            reduce using rule 46
	'Z'            reduce using rule 46
	']'            reduce using rule 46
	'else'         reduce using rule 46
	'of'           reduce using rule 46
	'then'         reduce using rule 46
	'}'            reduce using rule 46
	L_Var          reduce using rule 46


State 83

	Gate -> 'SWAP' .                                    (rule 53)

	'$'            reduce using rule 53
	'('            reduce using rule 53
	'()'           reduce using rule 53
	')'            reduce using rule 53
	','            reduce using rule 53
	'->'           reduce using rule 53
	'.'            reduce using rule 53
	';'            reduce using rule 53
	'@+'           reduce using rule 53
	'@+i'          reduce using rule 53
	'@-'           reduce using rule 53
	'@-i'          reduce using rule 53
	'@0'           reduce using rule 53
	'@1'           reduce using rule 53
	'FSWAP'        reduce using rule 53
	'H'            reduce using rule 53
	'ID'           reduce using rule 53
	'ISWAP'        reduce using rule 53
	'ROOT_SWAP'    reduce using rule 53
	'ROOT_SWAP_DAG'reduce using rule 53
	'ROOT_X'       reduce using rule 53
	'ROOT_X_DAG'   reduce using rule 53
	'ROOT_Y'       reduce using rule 53
	'ROOT_Y_DAG'   reduce using rule 53
	'ROOT_Z'       reduce using rule 53
	'ROOT_Z_DAG'   reduce using rule 53
	'RX'           reduce using rule 53
	'RY'           reduce using rule 53
	'RZ'           reduce using rule 53
	'S'            reduce using rule 53
	'SQRT_SWAP'    reduce using rule 53
	'SQRT_SWAP_DAG'reduce using rule 53
	'SQRT_X'       reduce using rule 53
	'SQRT_X_DAG'   reduce using rule 53
	'SQRT_Y'       reduce using rule 53
	'SQRT_Y_DAG'   reduce using rule 53
	'SWAP'         reduce using rule 53
	'SWAP_THETA'   reduce using rule 53
	'S_DAG'        reduce using rule 53
	'T'            reduce using rule 53
	'T_DAG'        reduce using rule 53
	'U1'           reduce using rule 53
	'U2'           reduce using rule 53
	'U3'           reduce using rule 53
	'X'            reduce using rule 53
	'Y'            reduce using rule 53
	'Z'            reduce using rule 53
	']'            reduce using rule 53
	'else'         reduce using rule 53
	'of'           reduce using rule 53
	'then'         reduce using rule 53
	'}'            reduce using rule 53
	L_Var          reduce using rule 53


State 84

	Gate -> 'SWAP_THETA' . Angle                        (rule 58)

	L_doubl        shift, and enter state 2

	Double         goto state 107
	Angle          goto state 109

State 85

	Gate -> 'S_DAG' .                                   (rule 40)

	'$'            reduce using rule 40
	'('            reduce using rule 40
	'()'           reduce using rule 40
	')'            reduce using rule 40
	','            reduce using rule 40
	'->'           reduce using rule 40
	'.'            reduce using rule 40
	';'            reduce using rule 40
	'@+'           reduce using rule 40
	'@+i'          reduce using rule 40
	'@-'           reduce using rule 40
	'@-i'          reduce using rule 40
	'@0'           reduce using rule 40
	'@1'           reduce using rule 40
	'FSWAP'        reduce using rule 40
	'H'            reduce using rule 40
	'ID'           reduce using rule 40
	'ISWAP'        reduce using rule 40
	'ROOT_SWAP'    reduce using rule 40
	'ROOT_SWAP_DAG'reduce using rule 40
	'ROOT_X'       reduce using rule 40
	'ROOT_X_DAG'   reduce using rule 40
	'ROOT_Y'       reduce using rule 40
	'ROOT_Y_DAG'   reduce using rule 40
	'ROOT_Z'       reduce using rule 40
	'ROOT_Z_DAG'   reduce using rule 40
	'RX'           reduce using rule 40
	'RY'           reduce using rule 40
	'RZ'           reduce using rule 40
	'S'            reduce using rule 40
	'SQRT_SWAP'    reduce using rule 40
	'SQRT_SWAP_DAG'reduce using rule 40
	'SQRT_X'       reduce using rule 40
	'SQRT_X_DAG'   reduce using rule 40
	'SQRT_Y'       reduce using rule 40
	'SQRT_Y_DAG'   reduce using rule 40
	'SWAP'         reduce using rule 40
	'SWAP_THETA'   reduce using rule 40
	'S_DAG'        reduce using rule 40
	'T'            reduce using rule 40
	'T_DAG'        reduce using rule 40
	'U1'           reduce using rule 40
	'U2'           reduce using rule 40
	'U3'           reduce using rule 40
	'X'            reduce using rule 40
	'Y'            reduce using rule 40
	'Z'            reduce using rule 40
	']'            reduce using rule 40
	'else'         reduce using rule 40
	'of'           reduce using rule 40
	'then'         reduce using rule 40
	'}'            reduce using rule 40
	L_Var          reduce using rule 40


State 86

	Gate -> 'T' .                                       (rule 41)

	'$'            reduce using rule 41
	'('            reduce using rule 41
	'()'           reduce using rule 41
	')'            reduce using rule 41
	','            reduce using rule 41
	'->'           reduce using rule 41
	'.'            reduce using rule 41
	';'            reduce using rule 41
	'@+'           reduce using rule 41
	'@+i'          reduce using rule 41
	'@-'           reduce using rule 41
	'@-i'          reduce using rule 41
	'@0'           reduce using rule 41
	'@1'           reduce using rule 41
	'FSWAP'        reduce using rule 41
	'H'            reduce using rule 41
	'ID'           reduce using rule 41
	'ISWAP'        reduce using rule 41
	'ROOT_SWAP'    reduce using rule 41
	'ROOT_SWAP_DAG'reduce using rule 41
	'ROOT_X'       reduce using rule 41
	'ROOT_X_DAG'   reduce using rule 41
	'ROOT_Y'       reduce using rule 41
	'ROOT_Y_DAG'   reduce using rule 41
	'ROOT_Z'       reduce using rule 41
	'ROOT_Z_DAG'   reduce using rule 41
	'RX'           reduce using rule 41
	'RY'           reduce using rule 41
	'RZ'           reduce using rule 41
	'S'            reduce using rule 41
	'SQRT_SWAP'    reduce using rule 41
	'SQRT_SWAP_DAG'reduce using rule 41
	'SQRT_X'       reduce using rule 41
	'SQRT_X_DAG'   reduce using rule 41
	'SQRT_Y'       reduce using rule 41
	'SQRT_Y_DAG'   reduce using rule 41
	'SWAP'         reduce using rule 41
	'SWAP_THETA'   reduce using rule 41
	'S_DAG'        reduce using rule 41
	'T'            reduce using rule 41
	'T_DAG'        reduce using rule 41
	'U1'           reduce using rule 41
	'U2'           reduce using rule 41
	'U3'           reduce using rule 41
	'X'            reduce using rule 41
	'Y'            reduce using rule 41
	'Z'            reduce using rule 41
	']'            reduce using rule 41
	'else'         reduce using rule 41
	'of'           reduce using rule 41
	'then'         reduce using rule 41
	'}'            reduce using rule 41
	L_Var          reduce using rule 41


State 87

	Gate -> 'T_DAG' .                                   (rule 42)

	'$'            reduce using rule 42
	'('            reduce using rule 42
	'()'           reduce using rule 42
	')'            reduce using rule 42
	','            reduce using rule 42
	'->'           reduce using rule 42
	'.'            reduce using rule 42
	';'            reduce using rule 42
	'@+'           reduce using rule 42
	'@+i'          reduce using rule 42
	'@-'           reduce using rule 42
	'@-i'          reduce using rule 42
	'@0'           reduce using rule 42
	'@1'           reduce using rule 42
	'FSWAP'        reduce using rule 42
	'H'            reduce using rule 42
	'ID'           reduce using rule 42
	'ISWAP'        reduce using rule 42
	'ROOT_SWAP'    reduce using rule 42
	'ROOT_SWAP_DAG'reduce using rule 42
	'ROOT_X'       reduce using rule 42
	'ROOT_X_DAG'   reduce using rule 42
	'ROOT_Y'       reduce using rule 42
	'ROOT_Y_DAG'   reduce using rule 42
	'ROOT_Z'       reduce using rule 42
	'ROOT_Z_DAG'   reduce using rule 42
	'RX'           reduce using rule 42
	'RY'           reduce using rule 42
	'RZ'           reduce using rule 42
	'S'            reduce using rule 42
	'SQRT_SWAP'    reduce using rule 42
	'SQRT_SWAP_DAG'reduce using rule 42
	'SQRT_X'       reduce using rule 42
	'SQRT_X_DAG'   reduce using rule 42
	'SQRT_Y'       reduce using rule 42
	'SQRT_Y_DAG'   reduce using rule 42
	'SWAP'         reduce using rule 42
	'SWAP_THETA'   reduce using rule 42
	'S_DAG'        reduce using rule 42
	'T'            reduce using rule 42
	'T_DAG'        reduce using rule 42
	'U1'           reduce using rule 42
	'U2'           reduce using rule 42
	'U3'           reduce using rule 42
	'X'            reduce using rule 42
	'Y'            reduce using rule 42
	'Z'            reduce using rule 42
	']'            reduce using rule 42
	'else'         reduce using rule 42
	'of'           reduce using rule 42
	'then'         reduce using rule 42
	'}'            reduce using rule 42
	L_Var          reduce using rule 42


State 88

	Gate -> 'U1' . Angle                                (rule 50)

	L_doubl        shift, and enter state 2

	Double         goto state 107
	Angle          goto state 108

State 89

	Gate -> 'U2' . '(' Angle ',' Angle ')'              (rule 51)

	'('            shift, and enter state 106


State 90

	Gate -> 'U3' . '(' Angle ',' Angle ',' Angle ')'    (rule 52)

	'('            shift, and enter state 105


State 91

	Gate -> 'X' .                                       (rule 29)

	'$'            reduce using rule 29
	'('            reduce using rule 29
	'()'           reduce using rule 29
	')'            reduce using rule 29
	','            reduce using rule 29
	'->'           reduce using rule 29
	'.'            reduce using rule 29
	';'            reduce using rule 29
	'@+'           reduce using rule 29
	'@+i'          reduce using rule 29
	'@-'           reduce using rule 29
	'@-i'          reduce using rule 29
	'@0'           reduce using rule 29
	'@1'           reduce using rule 29
	'FSWAP'        reduce using rule 29
	'H'            reduce using rule 29
	'ID'           reduce using rule 29
	'ISWAP'        reduce using rule 29
	'ROOT_SWAP'    reduce using rule 29
	'ROOT_SWAP_DAG'reduce using rule 29
	'ROOT_X'       reduce using rule 29
	'ROOT_X_DAG'   reduce using rule 29
	'ROOT_Y'       reduce using rule 29
	'ROOT_Y_DAG'   reduce using rule 29
	'ROOT_Z'       reduce using rule 29
	'ROOT_Z_DAG'   reduce using rule 29
	'RX'           reduce using rule 29
	'RY'           reduce using rule 29
	'RZ'           reduce using rule 29
	'S'            reduce using rule 29
	'SQRT_SWAP'    reduce using rule 29
	'SQRT_SWAP_DAG'reduce using rule 29
	'SQRT_X'       reduce using rule 29
	'SQRT_X_DAG'   reduce using rule 29
	'SQRT_Y'       reduce using rule 29
	'SQRT_Y_DAG'   reduce using rule 29
	'SWAP'         reduce using rule 29
	'SWAP_THETA'   reduce using rule 29
	'S_DAG'        reduce using rule 29
	'T'            reduce using rule 29
	'T_DAG'        reduce using rule 29
	'U1'           reduce using rule 29
	'U2'           reduce using rule 29
	'U3'           reduce using rule 29
	'X'            reduce using rule 29
	'Y'            reduce using rule 29
	'Z'            reduce using rule 29
	']'            reduce using rule 29
	'else'         reduce using rule 29
	'of'           reduce using rule 29
	'then'         reduce using rule 29
	'}'            reduce using rule 29
	L_Var          reduce using rule 29


State 92

	Gate -> 'Y' .                                       (rule 30)

	'$'            reduce using rule 30
	'('            reduce using rule 30
	'()'           reduce using rule 30
	')'            reduce using rule 30
	','            reduce using rule 30
	'->'           reduce using rule 30
	'.'            reduce using rule 30
	';'            reduce using rule 30
	'@+'           reduce using rule 30
	'@+i'          reduce using rule 30
	'@-'           reduce using rule 30
	'@-i'          reduce using rule 30
	'@0'           reduce using rule 30
	'@1'           reduce using rule 30
	'FSWAP'        reduce using rule 30
	'H'            reduce using rule 30
	'ID'           reduce using rule 30
	'ISWAP'        reduce using rule 30
	'ROOT_SWAP'    reduce using rule 30
	'ROOT_SWAP_DAG'reduce using rule 30
	'ROOT_X'       reduce using rule 30
	'ROOT_X_DAG'   reduce using rule 30
	'ROOT_Y'       reduce using rule 30
	'ROOT_Y_DAG'   reduce using rule 30
	'ROOT_Z'       reduce using rule 30
	'ROOT_Z_DAG'   reduce using rule 30
	'RX'           reduce using rule 30
	'RY'           reduce using rule 30
	'RZ'           reduce using rule 30
	'S'            reduce using rule 30
	'SQRT_SWAP'    reduce using rule 30
	'SQRT_SWAP_DAG'reduce using rule 30
	'SQRT_X'       reduce using rule 30
	'SQRT_X_DAG'   reduce using rule 30
	'SQRT_Y'       reduce using rule 30
	'SQRT_Y_DAG'   reduce using rule 30
	'SWAP'         reduce using rule 30
	'SWAP_THETA'   reduce using rule 30
	'S_DAG'        reduce using rule 30
	'T'            reduce using rule 30
	'T_DAG'        reduce using rule 30
	'U1'           reduce using rule 30
	'U2'           reduce using rule 30
	'U3'           reduce using rule 30
	'X'            reduce using rule 30
	'Y'            reduce using rule 30
	'Z'            reduce using rule 30
	']'            reduce using rule 30
	'else'         reduce using rule 30
	'of'           reduce using rule 30
	'then'         reduce using rule 30
	'}'            reduce using rule 30
	L_Var          reduce using rule 30


State 93

	Gate -> 'Z' .                                       (rule 31)

	'$'            reduce using rule 31
	'('            reduce using rule 31
	'()'           reduce using rule 31
	')'            reduce using rule 31
	','            reduce using rule 31
	'->'           reduce using rule 31
	'.'            reduce using rule 31
	';'            reduce using rule 31
	'@+'           reduce using rule 31
	'@+i'          reduce using rule 31
	'@-'           reduce using rule 31
	'@-i'          reduce using rule 31
	'@0'           reduce using rule 31
	'@1'           reduce using rule 31
	'FSWAP'        reduce using rule 31
	'H'            reduce using rule 31
	'ID'           reduce using rule 31
	'ISWAP'        reduce using rule 31
	'ROOT_SWAP'    reduce using rule 31
	'ROOT_SWAP_DAG'reduce using rule 31
	'ROOT_X'       reduce using rule 31
	'ROOT_X_DAG'   reduce using rule 31
	'ROOT_Y'       reduce using rule 31
	'ROOT_Y_DAG'   reduce using rule 31
	'ROOT_Z'       reduce using rule 31
	'ROOT_Z_DAG'   reduce using rule 31
	'RX'           reduce using rule 31
	'RY'           reduce using rule 31
	'RZ'           reduce using rule 31
	'S'            reduce using rule 31
	'SQRT_SWAP'    reduce using rule 31
	'SQRT_SWAP_DAG'reduce using rule 31
	'SQRT_X'       reduce using rule 31
	'SQRT_X_DAG'   reduce using rule 31
	'SQRT_Y'       reduce using rule 31
	'SQRT_Y_DAG'   reduce using rule 31
	'SWAP'         reduce using rule 31
	'SWAP_THETA'   reduce using rule 31
	'S_DAG'        reduce using rule 31
	'T'            reduce using rule 31
	'T_DAG'        reduce using rule 31
	'U1'           reduce using rule 31
	'U2'           reduce using rule 31
	'U3'           reduce using rule 31
	'X'            reduce using rule 31
	'Y'            reduce using rule 31
	'Z'            reduce using rule 31
	']'            reduce using rule 31
	'else'         reduce using rule 31
	'of'           reduce using rule 31
	'then'         reduce using rule 31
	'}'            reduce using rule 31
	L_Var          reduce using rule 31


State 94

	Term1 -> 'case' . Term 'of' CaseExpression ListCaseExpression    (rule 79)

	'('            shift, and enter state 53
	'()'           shift, and enter state 54
	'@+'           shift, and enter state 55
	'@+i'          shift, and enter state 56
	'@-'           shift, and enter state 57
	'@-i'          shift, and enter state 58
	'@0'           shift, and enter state 59
	'@1'           shift, and enter state 60
	'FSWAP'        shift, and enter state 61
	'H'            shift, and enter state 62
	'ID'           shift, and enter state 63
	'ISWAP'        shift, and enter state 64
	'ROOT_SWAP'    shift, and enter state 65
	'ROOT_SWAP_DAG'shift, and enter state 66
	'ROOT_X'       shift, and enter state 67
	'ROOT_X_DAG'   shift, and enter state 68
	'ROOT_Y'       shift, and enter state 69
	'ROOT_Y_DAG'   shift, and enter state 70
	'ROOT_Z'       shift, and enter state 71
	'ROOT_Z_DAG'   shift, and enter state 72
	'RX'           shift, and enter state 73
	'RY'           shift, and enter state 74
	'RZ'           shift, and enter state 75
	'S'            shift, and enter state 76
	'SQRT_SWAP'    shift, and enter state 77
	'SQRT_SWAP_DAG'shift, and enter state 78
	'SQRT_X'       shift, and enter state 79
	'SQRT_X_DAG'   shift, and enter state 80
	'SQRT_Y'       shift, and enter state 81
	'SQRT_Y_DAG'   shift, and enter state 82
	'SWAP'         shift, and enter state 83
	'SWAP_THETA'   shift, and enter state 84
	'S_DAG'        shift, and enter state 85
	'T'            shift, and enter state 86
	'T_DAG'        shift, and enter state 87
	'U1'           shift, and enter state 88
	'U2'           shift, and enter state 89
	'U3'           shift, and enter state 90
	'X'            shift, and enter state 91
	'Y'            shift, and enter state 92
	'Z'            shift, and enter state 93
	'case'         shift, and enter state 94
	'if'           shift, and enter state 95
	'let'          shift, and enter state 96
	'with'         shift, and enter state 97
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 98

	Var            goto state 43
	Lambda         goto state 44
	BasisState     goto state 45
	Gate           goto state 46
	Tuple          goto state 47
	Term1          goto state 48
	Term2          goto state 49
	Term3          goto state 50
	Term           goto state 104
	LetVariable    goto state 52

State 95

	Term1 -> 'if' . Term 'then' Term 'else' Term        (rule 74)

	'('            shift, and enter state 53
	'()'           shift, and enter state 54
	'@+'           shift, and enter state 55
	'@+i'          shift, and enter state 56
	'@-'           shift, and enter state 57
	'@-i'          shift, and enter state 58
	'@0'           shift, and enter state 59
	'@1'           shift, and enter state 60
	'FSWAP'        shift, and enter state 61
	'H'            shift, and enter state 62
	'ID'           shift, and enter state 63
	'ISWAP'        shift, and enter state 64
	'ROOT_SWAP'    shift, and enter state 65
	'ROOT_SWAP_DAG'shift, and enter state 66
	'ROOT_X'       shift, and enter state 67
	'ROOT_X_DAG'   shift, and enter state 68
	'ROOT_Y'       shift, and enter state 69
	'ROOT_Y_DAG'   shift, and enter state 70
	'ROOT_Z'       shift, and enter state 71
	'ROOT_Z_DAG'   shift, and enter state 72
	'RX'           shift, and enter state 73
	'RY'           shift, and enter state 74
	'RZ'           shift, and enter state 75
	'S'            shift, and enter state 76
	'SQRT_SWAP'    shift, and enter state 77
	'SQRT_SWAP_DAG'shift, and enter state 78
	'SQRT_X'       shift, and enter state 79
	'SQRT_X_DAG'   shift, and enter state 80
	'SQRT_Y'       shift, and enter state 81
	'SQRT_Y_DAG'   shift, and enter state 82
	'SWAP'         shift, and enter state 83
	'SWAP_THETA'   shift, and enter state 84
	'S_DAG'        shift, and enter state 85
	'T'            shift, and enter state 86
	'T_DAG'        shift, and enter state 87
	'U1'           shift, and enter state 88
	'U2'           shift, and enter state 89
	'U3'           shift, and enter state 90
	'X'            shift, and enter state 91
	'Y'            shift, and enter state 92
	'Z'            shift, and enter state 93
	'case'         shift, and enter state 94
	'if'           shift, and enter state 95
	'let'          shift, and enter state 96
	'with'         shift, and enter state 97
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 98

	Var            goto state 43
	Lambda         goto state 44
	BasisState     goto state 45
	Gate           goto state 46
	Tuple          goto state 47
	Term1          goto state 48
	Term2          goto state 49
	Term3          goto state 50
	Term           goto state 103
	LetVariable    goto state 52

State 96

	Term1 -> 'let' . '{' LetVariable '=' Term '}' 'in' Term    (rule 75)
	Term1 -> 'let' . '{' '(' LetVariable ',' ListLetVariable ')' '=' Term '}' 'in' Term    (rule 76)

	'{'            shift, and enter state 102


State 97

	Term2 -> 'with' . ControlTerm 'ctrl' ControlBasisState    (rule 83)
	Term2 -> 'with' . ControlTerms 'ctrl' ControlBasisStates    (rule 84)
	Term2 -> 'with' . ControlTerm 'ctrl' ControlBit     (rule 85)
	Term2 -> 'with' . ControlTerms 'ctrl' ControlBits    (rule 86)

	'['            shift, and enter state 101

	ControlTerm    goto state 99
	ControlTerms   goto state 100

State 98

	Lambda -> L_Lambda .                                (rule 4)

	L_Var          reduce using rule 4


State 99

	Term2 -> 'with' ControlTerm . 'ctrl' ControlBasisState    (rule 83)
	Term2 -> 'with' ControlTerm . 'ctrl' ControlBit     (rule 85)

	'ctrl'         shift, and enter state 147


State 100

	Term2 -> 'with' ControlTerms . 'ctrl' ControlBasisStates    (rule 84)
	Term2 -> 'with' ControlTerms . 'ctrl' ControlBits    (rule 86)

	'ctrl'         shift, and enter state 146


State 101

	ControlTerm -> '[' . Term ']'                       (rule 70)
	ControlTerms -> '[' . Term ',' ListTerm ']'         (rule 71)

	'('            shift, and enter state 53
	'()'           shift, and enter state 54
	'@+'           shift, and enter state 55
	'@+i'          shift, and enter state 56
	'@-'           shift, and enter state 57
	'@-i'          shift, and enter state 58
	'@0'           shift, and enter state 59
	'@1'           shift, and enter state 60
	'FSWAP'        shift, and enter state 61
	'H'            shift, and enter state 62
	'ID'           shift, and enter state 63
	'ISWAP'        shift, and enter state 64
	'ROOT_SWAP'    shift, and enter state 65
	'ROOT_SWAP_DAG'shift, and enter state 66
	'ROOT_X'       shift, and enter state 67
	'ROOT_X_DAG'   shift, and enter state 68
	'ROOT_Y'       shift, and enter state 69
	'ROOT_Y_DAG'   shift, and enter state 70
	'ROOT_Z'       shift, and enter state 71
	'ROOT_Z_DAG'   shift, and enter state 72
	'RX'           shift, and enter state 73
	'RY'           shift, and enter state 74
	'RZ'           shift, and enter state 75
	'S'            shift, and enter state 76
	'SQRT_SWAP'    shift, and enter state 77
	'SQRT_SWAP_DAG'shift, and enter state 78
	'SQRT_X'       shift, and enter state 79
	'SQRT_X_DAG'   shift, and enter state 80
	'SQRT_Y'       shift, and enter state 81
	'SQRT_Y_DAG'   shift, and enter state 82
	'SWAP'         shift, and enter state 83
	'SWAP_THETA'   shift, and enter state 84
	'S_DAG'        shift, and enter state 85
	'T'            shift, and enter state 86
	'T_DAG'        shift, and enter state 87
	'U1'           shift, and enter state 88
	'U2'           shift, and enter state 89
	'U3'           shift, and enter state 90
	'X'            shift, and enter state 91
	'Y'            shift, and enter state 92
	'Z'            shift, and enter state 93
	'case'         shift, and enter state 94
	'if'           shift, and enter state 95
	'let'          shift, and enter state 96
	'with'         shift, and enter state 97
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 98

	Var            goto state 43
	Lambda         goto state 44
	BasisState     goto state 45
	Gate           goto state 46
	Tuple          goto state 47
	Term1          goto state 48
	Term2          goto state 49
	Term3          goto state 50
	Term           goto state 145
	LetVariable    goto state 52

State 102

	Term1 -> 'let' '{' . LetVariable '=' Term '}' 'in' Term    (rule 75)
	Term1 -> 'let' '{' . '(' LetVariable ',' ListLetVariable ')' '=' Term '}' 'in' Term    (rule 76)

	'('            shift, and enter state 144
	L_Var          shift, and enter state 8

	Var            goto state 134
	LetVariable    goto state 143

State 103

	Term1 -> 'if' Term . 'then' Term 'else' Term        (rule 74)

	'then'         shift, and enter state 142


State 104

	Term1 -> 'case' Term . 'of' CaseExpression ListCaseExpression    (rule 79)

	'of'           shift, and enter state 141


State 105

	Gate -> 'U3' '(' . Angle ',' Angle ',' Angle ')'    (rule 52)

	L_doubl        shift, and enter state 2

	Double         goto state 107
	Angle          goto state 140

State 106

	Gate -> 'U2' '(' . Angle ',' Angle ')'              (rule 51)

	L_doubl        shift, and enter state 2

	Double         goto state 107
	Angle          goto state 139

State 107

	Angle -> Double .                                   (rule 20)

	'$'            reduce using rule 20
	'('            reduce using rule 20
	'()'           reduce using rule 20
	')'            reduce using rule 20
	','            reduce using rule 20
	'->'           reduce using rule 20
	'.'            reduce using rule 20
	';'            reduce using rule 20
	'@+'           reduce using rule 20
	'@+i'          reduce using rule 20
	'@-'           reduce using rule 20
	'@-i'          reduce using rule 20
	'@0'           reduce using rule 20
	'@1'           reduce using rule 20
	'FSWAP'        reduce using rule 20
	'H'            reduce using rule 20
	'ID'           reduce using rule 20
	'ISWAP'        reduce using rule 20
	'ROOT_SWAP'    reduce using rule 20
	'ROOT_SWAP_DAG'reduce using rule 20
	'ROOT_X'       reduce using rule 20
	'ROOT_X_DAG'   reduce using rule 20
	'ROOT_Y'       reduce using rule 20
	'ROOT_Y_DAG'   reduce using rule 20
	'ROOT_Z'       reduce using rule 20
	'ROOT_Z_DAG'   reduce using rule 20
	'RX'           reduce using rule 20
	'RY'           reduce using rule 20
	'RZ'           reduce using rule 20
	'S'            reduce using rule 20
	'SQRT_SWAP'    reduce using rule 20
	'SQRT_SWAP_DAG'reduce using rule 20
	'SQRT_X'       reduce using rule 20
	'SQRT_X_DAG'   reduce using rule 20
	'SQRT_Y'       reduce using rule 20
	'SQRT_Y_DAG'   reduce using rule 20
	'SWAP'         reduce using rule 20
	'SWAP_THETA'   reduce using rule 20
	'S_DAG'        reduce using rule 20
	'T'            reduce using rule 20
	'T_DAG'        reduce using rule 20
	'U1'           reduce using rule 20
	'U2'           reduce using rule 20
	'U3'           reduce using rule 20
	'X'            reduce using rule 20
	'Y'            reduce using rule 20
	'Z'            reduce using rule 20
	']'            reduce using rule 20
	'else'         reduce using rule 20
	'of'           reduce using rule 20
	'then'         reduce using rule 20
	'}'            reduce using rule 20
	L_Var          reduce using rule 20


State 108

	Gate -> 'U1' Angle .                                (rule 50)

	'$'            reduce using rule 50
	'('            reduce using rule 50
	'()'           reduce using rule 50
	')'            reduce using rule 50
	','            reduce using rule 50
	'->'           reduce using rule 50
	'.'            reduce using rule 50
	';'            reduce using rule 50
	'@+'           reduce using rule 50
	'@+i'          reduce using rule 50
	'@-'           reduce using rule 50
	'@-i'          reduce using rule 50
	'@0'           reduce using rule 50
	'@1'           reduce using rule 50
	'FSWAP'        reduce using rule 50
	'H'            reduce using rule 50
	'ID'           reduce using rule 50
	'ISWAP'        reduce using rule 50
	'ROOT_SWAP'    reduce using rule 50
	'ROOT_SWAP_DAG'reduce using rule 50
	'ROOT_X'       reduce using rule 50
	'ROOT_X_DAG'   reduce using rule 50
	'ROOT_Y'       reduce using rule 50
	'ROOT_Y_DAG'   reduce using rule 50
	'ROOT_Z'       reduce using rule 50
	'ROOT_Z_DAG'   reduce using rule 50
	'RX'           reduce using rule 50
	'RY'           reduce using rule 50
	'RZ'           reduce using rule 50
	'S'            reduce using rule 50
	'SQRT_SWAP'    reduce using rule 50
	'SQRT_SWAP_DAG'reduce using rule 50
	'SQRT_X'       reduce using rule 50
	'SQRT_X_DAG'   reduce using rule 50
	'SQRT_Y'       reduce using rule 50
	'SQRT_Y_DAG'   reduce using rule 50
	'SWAP'         reduce using rule 50
	'SWAP_THETA'   reduce using rule 50
	'S_DAG'        reduce using rule 50
	'T'            reduce using rule 50
	'T_DAG'        reduce using rule 50
	'U1'           reduce using rule 50
	'U2'           reduce using rule 50
	'U3'           reduce using rule 50
	'X'            reduce using rule 50
	'Y'            reduce using rule 50
	'Z'            reduce using rule 50
	']'            reduce using rule 50
	'else'         reduce using rule 50
	'of'           reduce using rule 50
	'then'         reduce using rule 50
	'}'            reduce using rule 50
	L_Var          reduce using rule 50


State 109

	Gate -> 'SWAP_THETA' Angle .                        (rule 58)

	'$'            reduce using rule 58
	'('            reduce using rule 58
	'()'           reduce using rule 58
	')'            reduce using rule 58
	','            reduce using rule 58
	'->'           reduce using rule 58
	'.'            reduce using rule 58
	';'            reduce using rule 58
	'@+'           reduce using rule 58
	'@+i'          reduce using rule 58
	'@-'           reduce using rule 58
	'@-i'          reduce using rule 58
	'@0'           reduce using rule 58
	'@1'           reduce using rule 58
	'FSWAP'        reduce using rule 58
	'H'            reduce using rule 58
	'ID'           reduce using rule 58
	'ISWAP'        reduce using rule 58
	'ROOT_SWAP'    reduce using rule 58
	'ROOT_SWAP_DAG'reduce using rule 58
	'ROOT_X'       reduce using rule 58
	'ROOT_X_DAG'   reduce using rule 58
	'ROOT_Y'       reduce using rule 58
	'ROOT_Y_DAG'   reduce using rule 58
	'ROOT_Z'       reduce using rule 58
	'ROOT_Z_DAG'   reduce using rule 58
	'RX'           reduce using rule 58
	'RY'           reduce using rule 58
	'RZ'           reduce using rule 58
	'S'            reduce using rule 58
	'SQRT_SWAP'    reduce using rule 58
	'SQRT_SWAP_DAG'reduce using rule 58
	'SQRT_X'       reduce using rule 58
	'SQRT_X_DAG'   reduce using rule 58
	'SQRT_Y'       reduce using rule 58
	'SQRT_Y_DAG'   reduce using rule 58
	'SWAP'         reduce using rule 58
	'SWAP_THETA'   reduce using rule 58
	'S_DAG'        reduce using rule 58
	'T'            reduce using rule 58
	'T_DAG'        reduce using rule 58
	'U1'           reduce using rule 58
	'U2'           reduce using rule 58
	'U3'           reduce using rule 58
	'X'            reduce using rule 58
	'Y'            reduce using rule 58
	'Z'            reduce using rule 58
	']'            reduce using rule 58
	'else'         reduce using rule 58
	'of'           reduce using rule 58
	'then'         reduce using rule 58
	'}'            reduce using rule 58
	L_Var          reduce using rule 58


State 110

	Gate -> 'RZ' Angle .                                (rule 49)

	'$'            reduce using rule 49
	'('            reduce using rule 49
	'()'           reduce using rule 49
	')'            reduce using rule 49
	','            reduce using rule 49
	'->'           reduce using rule 49
	'.'            reduce using rule 49
	';'            reduce using rule 49
	'@+'           reduce using rule 49
	'@+i'          reduce using rule 49
	'@-'           reduce using rule 49
	'@-i'          reduce using rule 49
	'@0'           reduce using rule 49
	'@1'           reduce using rule 49
	'FSWAP'        reduce using rule 49
	'H'            reduce using rule 49
	'ID'           reduce using rule 49
	'ISWAP'        reduce using rule 49
	'ROOT_SWAP'    reduce using rule 49
	'ROOT_SWAP_DAG'reduce using rule 49
	'ROOT_X'       reduce using rule 49
	'ROOT_X_DAG'   reduce using rule 49
	'ROOT_Y'       reduce using rule 49
	'ROOT_Y_DAG'   reduce using rule 49
	'ROOT_Z'       reduce using rule 49
	'ROOT_Z_DAG'   reduce using rule 49
	'RX'           reduce using rule 49
	'RY'           reduce using rule 49
	'RZ'           reduce using rule 49
	'S'            reduce using rule 49
	'SQRT_SWAP'    reduce using rule 49
	'SQRT_SWAP_DAG'reduce using rule 49
	'SQRT_X'       reduce using rule 49
	'SQRT_X_DAG'   reduce using rule 49
	'SQRT_Y'       reduce using rule 49
	'SQRT_Y_DAG'   reduce using rule 49
	'SWAP'         reduce using rule 49
	'SWAP_THETA'   reduce using rule 49
	'S_DAG'        reduce using rule 49
	'T'            reduce using rule 49
	'T_DAG'        reduce using rule 49
	'U1'           reduce using rule 49
	'U2'           reduce using rule 49
	'U3'           reduce using rule 49
	'X'            reduce using rule 49
	'Y'            reduce using rule 49
	'Z'            reduce using rule 49
	']'            reduce using rule 49
	'else'         reduce using rule 49
	'of'           reduce using rule 49
	'then'         reduce using rule 49
	'}'            reduce using rule 49
	L_Var          reduce using rule 49


State 111

	Gate -> 'RY' Angle .                                (rule 48)

	'$'            reduce using rule 48
	'('            reduce using rule 48
	'()'           reduce using rule 48
	')'            reduce using rule 48
	','            reduce using rule 48
	'->'           reduce using rule 48
	'.'            reduce using rule 48
	';'            reduce using rule 48
	'@+'           reduce using rule 48
	'@+i'          reduce using rule 48
	'@-'           reduce using rule 48
	'@-i'          reduce using rule 48
	'@0'           reduce using rule 48
	'@1'           reduce using rule 48
	'FSWAP'        reduce using rule 48
	'H'            reduce using rule 48
	'ID'           reduce using rule 48
	'ISWAP'        reduce using rule 48
	'ROOT_SWAP'    reduce using rule 48
	'ROOT_SWAP_DAG'reduce using rule 48
	'ROOT_X'       reduce using rule 48
	'ROOT_X_DAG'   reduce using rule 48
	'ROOT_Y'       reduce using rule 48
	'ROOT_Y_DAG'   reduce using rule 48
	'ROOT_Z'       reduce using rule 48
	'ROOT_Z_DAG'   reduce using rule 48
	'RX'           reduce using rule 48
	'RY'           reduce using rule 48
	'RZ'           reduce using rule 48
	'S'            reduce using rule 48
	'SQRT_SWAP'    reduce using rule 48
	'SQRT_SWAP_DAG'reduce using rule 48
	'SQRT_X'       reduce using rule 48
	'SQRT_X_DAG'   reduce using rule 48
	'SQRT_Y'       reduce using rule 48
	'SQRT_Y_DAG'   reduce using rule 48
	'SWAP'         reduce using rule 48
	'SWAP_THETA'   reduce using rule 48
	'S_DAG'        reduce using rule 48
	'T'            reduce using rule 48
	'T_DAG'        reduce using rule 48
	'U1'           reduce using rule 48
	'U2'           reduce using rule 48
	'U3'           reduce using rule 48
	'X'            reduce using rule 48
	'Y'            reduce using rule 48
	'Z'            reduce using rule 48
	']'            reduce using rule 48
	'else'         reduce using rule 48
	'of'           reduce using rule 48
	'then'         reduce using rule 48
	'}'            reduce using rule 48
	L_Var          reduce using rule 48


State 112

	Gate -> 'RX' Angle .                                (rule 47)

	'$'            reduce using rule 47
	'('            reduce using rule 47
	'()'           reduce using rule 47
	')'            reduce using rule 47
	','            reduce using rule 47
	'->'           reduce using rule 47
	'.'            reduce using rule 47
	';'            reduce using rule 47
	'@+'           reduce using rule 47
	'@+i'          reduce using rule 47
	'@-'           reduce using rule 47
	'@-i'          reduce using rule 47
	'@0'           reduce using rule 47
	'@1'           reduce using rule 47
	'FSWAP'        reduce using rule 47
	'H'            reduce using rule 47
	'ID'           reduce using rule 47
	'ISWAP'        reduce using rule 47
	'ROOT_SWAP'    reduce using rule 47
	'ROOT_SWAP_DAG'reduce using rule 47
	'ROOT_X'       reduce using rule 47
	'ROOT_X_DAG'   reduce using rule 47
	'ROOT_Y'       reduce using rule 47
	'ROOT_Y_DAG'   reduce using rule 47
	'ROOT_Z'       reduce using rule 47
	'ROOT_Z_DAG'   reduce using rule 47
	'RX'           reduce using rule 47
	'RY'           reduce using rule 47
	'RZ'           reduce using rule 47
	'S'            reduce using rule 47
	'SQRT_SWAP'    reduce using rule 47
	'SQRT_SWAP_DAG'reduce using rule 47
	'SQRT_X'       reduce using rule 47
	'SQRT_X_DAG'   reduce using rule 47
	'SQRT_Y'       reduce using rule 47
	'SQRT_Y_DAG'   reduce using rule 47
	'SWAP'         reduce using rule 47
	'SWAP_THETA'   reduce using rule 47
	'S_DAG'        reduce using rule 47
	'T'            reduce using rule 47
	'T_DAG'        reduce using rule 47
	'U1'           reduce using rule 47
	'U2'           reduce using rule 47
	'U3'           reduce using rule 47
	'X'            reduce using rule 47
	'Y'            reduce using rule 47
	'Z'            reduce using rule 47
	']'            reduce using rule 47
	'else'         reduce using rule 47
	'of'           reduce using rule 47
	'then'         reduce using rule 47
	'}'            reduce using rule 47
	L_Var          reduce using rule 47


State 113

	Gate -> 'ROOT_Z_DAG' Integer .                      (rule 38)

	'$'            reduce using rule 38
	'('            reduce using rule 38
	'()'           reduce using rule 38
	')'            reduce using rule 38
	','            reduce using rule 38
	'->'           reduce using rule 38
	'.'            reduce using rule 38
	';'            reduce using rule 38
	'@+'           reduce using rule 38
	'@+i'          reduce using rule 38
	'@-'           reduce using rule 38
	'@-i'          reduce using rule 38
	'@0'           reduce using rule 38
	'@1'           reduce using rule 38
	'FSWAP'        reduce using rule 38
	'H'            reduce using rule 38
	'ID'           reduce using rule 38
	'ISWAP'        reduce using rule 38
	'ROOT_SWAP'    reduce using rule 38
	'ROOT_SWAP_DAG'reduce using rule 38
	'ROOT_X'       reduce using rule 38
	'ROOT_X_DAG'   reduce using rule 38
	'ROOT_Y'       reduce using rule 38
	'ROOT_Y_DAG'   reduce using rule 38
	'ROOT_Z'       reduce using rule 38
	'ROOT_Z_DAG'   reduce using rule 38
	'RX'           reduce using rule 38
	'RY'           reduce using rule 38
	'RZ'           reduce using rule 38
	'S'            reduce using rule 38
	'SQRT_SWAP'    reduce using rule 38
	'SQRT_SWAP_DAG'reduce using rule 38
	'SQRT_X'       reduce using rule 38
	'SQRT_X_DAG'   reduce using rule 38
	'SQRT_Y'       reduce using rule 38
	'SQRT_Y_DAG'   reduce using rule 38
	'SWAP'         reduce using rule 38
	'SWAP_THETA'   reduce using rule 38
	'S_DAG'        reduce using rule 38
	'T'            reduce using rule 38
	'T_DAG'        reduce using rule 38
	'U1'           reduce using rule 38
	'U2'           reduce using rule 38
	'U3'           reduce using rule 38
	'X'            reduce using rule 38
	'Y'            reduce using rule 38
	'Z'            reduce using rule 38
	']'            reduce using rule 38
	'else'         reduce using rule 38
	'of'           reduce using rule 38
	'then'         reduce using rule 38
	'}'            reduce using rule 38
	L_Var          reduce using rule 38


State 114

	Gate -> 'ROOT_Z' Integer .                          (rule 37)

	'$'            reduce using rule 37
	'('            reduce using rule 37
	'()'           reduce using rule 37
	')'            reduce using rule 37
	','            reduce using rule 37
	'->'           reduce using rule 37
	'.'            reduce using rule 37
	';'            reduce using rule 37
	'@+'           reduce using rule 37
	'@+i'          reduce using rule 37
	'@-'           reduce using rule 37
	'@-i'          reduce using rule 37
	'@0'           reduce using rule 37
	'@1'           reduce using rule 37
	'FSWAP'        reduce using rule 37
	'H'            reduce using rule 37
	'ID'           reduce using rule 37
	'ISWAP'        reduce using rule 37
	'ROOT_SWAP'    reduce using rule 37
	'ROOT_SWAP_DAG'reduce using rule 37
	'ROOT_X'       reduce using rule 37
	'ROOT_X_DAG'   reduce using rule 37
	'ROOT_Y'       reduce using rule 37
	'ROOT_Y_DAG'   reduce using rule 37
	'ROOT_Z'       reduce using rule 37
	'ROOT_Z_DAG'   reduce using rule 37
	'RX'           reduce using rule 37
	'RY'           reduce using rule 37
	'RZ'           reduce using rule 37
	'S'            reduce using rule 37
	'SQRT_SWAP'    reduce using rule 37
	'SQRT_SWAP_DAG'reduce using rule 37
	'SQRT_X'       reduce using rule 37
	'SQRT_X_DAG'   reduce using rule 37
	'SQRT_Y'       reduce using rule 37
	'SQRT_Y_DAG'   reduce using rule 37
	'SWAP'         reduce using rule 37
	'SWAP_THETA'   reduce using rule 37
	'S_DAG'        reduce using rule 37
	'T'            reduce using rule 37
	'T_DAG'        reduce using rule 37
	'U1'           reduce using rule 37
	'U2'           reduce using rule 37
	'U3'           reduce using rule 37
	'X'            reduce using rule 37
	'Y'            reduce using rule 37
	'Z'            reduce using rule 37
	']'            reduce using rule 37
	'else'         reduce using rule 37
	'of'           reduce using rule 37
	'then'         reduce using rule 37
	'}'            reduce using rule 37
	L_Var          reduce using rule 37


State 115

	Gate -> 'ROOT_Y_DAG' Integer .                      (rule 36)

	'$'            reduce using rule 36
	'('            reduce using rule 36
	'()'           reduce using rule 36
	')'            reduce using rule 36
	','            reduce using rule 36
	'->'           reduce using rule 36
	'.'            reduce using rule 36
	';'            reduce using rule 36
	'@+'           reduce using rule 36
	'@+i'          reduce using rule 36
	'@-'           reduce using rule 36
	'@-i'          reduce using rule 36
	'@0'           reduce using rule 36
	'@1'           reduce using rule 36
	'FSWAP'        reduce using rule 36
	'H'            reduce using rule 36
	'ID'           reduce using rule 36
	'ISWAP'        reduce using rule 36
	'ROOT_SWAP'    reduce using rule 36
	'ROOT_SWAP_DAG'reduce using rule 36
	'ROOT_X'       reduce using rule 36
	'ROOT_X_DAG'   reduce using rule 36
	'ROOT_Y'       reduce using rule 36
	'ROOT_Y_DAG'   reduce using rule 36
	'ROOT_Z'       reduce using rule 36
	'ROOT_Z_DAG'   reduce using rule 36
	'RX'           reduce using rule 36
	'RY'           reduce using rule 36
	'RZ'           reduce using rule 36
	'S'            reduce using rule 36
	'SQRT_SWAP'    reduce using rule 36
	'SQRT_SWAP_DAG'reduce using rule 36
	'SQRT_X'       reduce using rule 36
	'SQRT_X_DAG'   reduce using rule 36
	'SQRT_Y'       reduce using rule 36
	'SQRT_Y_DAG'   reduce using rule 36
	'SWAP'         reduce using rule 36
	'SWAP_THETA'   reduce using rule 36
	'S_DAG'        reduce using rule 36
	'T'            reduce using rule 36
	'T_DAG'        reduce using rule 36
	'U1'           reduce using rule 36
	'U2'           reduce using rule 36
	'U3'           reduce using rule 36
	'X'            reduce using rule 36
	'Y'            reduce using rule 36
	'Z'            reduce using rule 36
	']'            reduce using rule 36
	'else'         reduce using rule 36
	'of'           reduce using rule 36
	'then'         reduce using rule 36
	'}'            reduce using rule 36
	L_Var          reduce using rule 36


State 116

	Gate -> 'ROOT_Y' Integer .                          (rule 35)

	'$'            reduce using rule 35
	'('            reduce using rule 35
	'()'           reduce using rule 35
	')'            reduce using rule 35
	','            reduce using rule 35
	'->'           reduce using rule 35
	'.'            reduce using rule 35
	';'            reduce using rule 35
	'@+'           reduce using rule 35
	'@+i'          reduce using rule 35
	'@-'           reduce using rule 35
	'@-i'          reduce using rule 35
	'@0'           reduce using rule 35
	'@1'           reduce using rule 35
	'FSWAP'        reduce using rule 35
	'H'            reduce using rule 35
	'ID'           reduce using rule 35
	'ISWAP'        reduce using rule 35
	'ROOT_SWAP'    reduce using rule 35
	'ROOT_SWAP_DAG'reduce using rule 35
	'ROOT_X'       reduce using rule 35
	'ROOT_X_DAG'   reduce using rule 35
	'ROOT_Y'       reduce using rule 35
	'ROOT_Y_DAG'   reduce using rule 35
	'ROOT_Z'       reduce using rule 35
	'ROOT_Z_DAG'   reduce using rule 35
	'RX'           reduce using rule 35
	'RY'           reduce using rule 35
	'RZ'           reduce using rule 35
	'S'            reduce using rule 35
	'SQRT_SWAP'    reduce using rule 35
	'SQRT_SWAP_DAG'reduce using rule 35
	'SQRT_X'       reduce using rule 35
	'SQRT_X_DAG'   reduce using rule 35
	'SQRT_Y'       reduce using rule 35
	'SQRT_Y_DAG'   reduce using rule 35
	'SWAP'         reduce using rule 35
	'SWAP_THETA'   reduce using rule 35
	'S_DAG'        reduce using rule 35
	'T'            reduce using rule 35
	'T_DAG'        reduce using rule 35
	'U1'           reduce using rule 35
	'U2'           reduce using rule 35
	'U3'           reduce using rule 35
	'X'            reduce using rule 35
	'Y'            reduce using rule 35
	'Z'            reduce using rule 35
	']'            reduce using rule 35
	'else'         reduce using rule 35
	'of'           reduce using rule 35
	'then'         reduce using rule 35
	'}'            reduce using rule 35
	L_Var          reduce using rule 35


State 117

	Gate -> 'ROOT_X_DAG' Integer .                      (rule 34)

	'$'            reduce using rule 34
	'('            reduce using rule 34
	'()'           reduce using rule 34
	')'            reduce using rule 34
	','            reduce using rule 34
	'->'           reduce using rule 34
	'.'            reduce using rule 34
	';'            reduce using rule 34
	'@+'           reduce using rule 34
	'@+i'          reduce using rule 34
	'@-'           reduce using rule 34
	'@-i'          reduce using rule 34
	'@0'           reduce using rule 34
	'@1'           reduce using rule 34
	'FSWAP'        reduce using rule 34
	'H'            reduce using rule 34
	'ID'           reduce using rule 34
	'ISWAP'        reduce using rule 34
	'ROOT_SWAP'    reduce using rule 34
	'ROOT_SWAP_DAG'reduce using rule 34
	'ROOT_X'       reduce using rule 34
	'ROOT_X_DAG'   reduce using rule 34
	'ROOT_Y'       reduce using rule 34
	'ROOT_Y_DAG'   reduce using rule 34
	'ROOT_Z'       reduce using rule 34
	'ROOT_Z_DAG'   reduce using rule 34
	'RX'           reduce using rule 34
	'RY'           reduce using rule 34
	'RZ'           reduce using rule 34
	'S'            reduce using rule 34
	'SQRT_SWAP'    reduce using rule 34
	'SQRT_SWAP_DAG'reduce using rule 34
	'SQRT_X'       reduce using rule 34
	'SQRT_X_DAG'   reduce using rule 34
	'SQRT_Y'       reduce using rule 34
	'SQRT_Y_DAG'   reduce using rule 34
	'SWAP'         reduce using rule 34
	'SWAP_THETA'   reduce using rule 34
	'S_DAG'        reduce using rule 34
	'T'            reduce using rule 34
	'T_DAG'        reduce using rule 34
	'U1'           reduce using rule 34
	'U2'           reduce using rule 34
	'U3'           reduce using rule 34
	'X'            reduce using rule 34
	'Y'            reduce using rule 34
	'Z'            reduce using rule 34
	']'            reduce using rule 34
	'else'         reduce using rule 34
	'of'           reduce using rule 34
	'then'         reduce using rule 34
	'}'            reduce using rule 34
	L_Var          reduce using rule 34


State 118

	Gate -> 'ROOT_X' Integer .                          (rule 33)

	'$'            reduce using rule 33
	'('            reduce using rule 33
	'()'           reduce using rule 33
	')'            reduce using rule 33
	','            reduce using rule 33
	'->'           reduce using rule 33
	'.'            reduce using rule 33
	';'            reduce using rule 33
	'@+'           reduce using rule 33
	'@+i'          reduce using rule 33
	'@-'           reduce using rule 33
	'@-i'          reduce using rule 33
	'@0'           reduce using rule 33
	'@1'           reduce using rule 33
	'FSWAP'        reduce using rule 33
	'H'            reduce using rule 33
	'ID'           reduce using rule 33
	'ISWAP'        reduce using rule 33
	'ROOT_SWAP'    reduce using rule 33
	'ROOT_SWAP_DAG'reduce using rule 33
	'ROOT_X'       reduce using rule 33
	'ROOT_X_DAG'   reduce using rule 33
	'ROOT_Y'       reduce using rule 33
	'ROOT_Y_DAG'   reduce using rule 33
	'ROOT_Z'       reduce using rule 33
	'ROOT_Z_DAG'   reduce using rule 33
	'RX'           reduce using rule 33
	'RY'           reduce using rule 33
	'RZ'           reduce using rule 33
	'S'            reduce using rule 33
	'SQRT_SWAP'    reduce using rule 33
	'SQRT_SWAP_DAG'reduce using rule 33
	'SQRT_X'       reduce using rule 33
	'SQRT_X_DAG'   reduce using rule 33
	'SQRT_Y'       reduce using rule 33
	'SQRT_Y_DAG'   reduce using rule 33
	'SWAP'         reduce using rule 33
	'SWAP_THETA'   reduce using rule 33
	'S_DAG'        reduce using rule 33
	'T'            reduce using rule 33
	'T_DAG'        reduce using rule 33
	'U1'           reduce using rule 33
	'U2'           reduce using rule 33
	'U3'           reduce using rule 33
	'X'            reduce using rule 33
	'Y'            reduce using rule 33
	'Z'            reduce using rule 33
	']'            reduce using rule 33
	'else'         reduce using rule 33
	'of'           reduce using rule 33
	'then'         reduce using rule 33
	'}'            reduce using rule 33
	L_Var          reduce using rule 33


State 119

	Gate -> 'ROOT_SWAP_DAG' Integer .                   (rule 60)

	'$'            reduce using rule 60
	'('            reduce using rule 60
	'()'           reduce using rule 60
	')'            reduce using rule 60
	','            reduce using rule 60
	'->'           reduce using rule 60
	'.'            reduce using rule 60
	';'            reduce using rule 60
	'@+'           reduce using rule 60
	'@+i'          reduce using rule 60
	'@-'           reduce using rule 60
	'@-i'          reduce using rule 60
	'@0'           reduce using rule 60
	'@1'           reduce using rule 60
	'FSWAP'        reduce using rule 60
	'H'            reduce using rule 60
	'ID'           reduce using rule 60
	'ISWAP'        reduce using rule 60
	'ROOT_SWAP'    reduce using rule 60
	'ROOT_SWAP_DAG'reduce using rule 60
	'ROOT_X'       reduce using rule 60
	'ROOT_X_DAG'   reduce using rule 60
	'ROOT_Y'       reduce using rule 60
	'ROOT_Y_DAG'   reduce using rule 60
	'ROOT_Z'       reduce using rule 60
	'ROOT_Z_DAG'   reduce using rule 60
	'RX'           reduce using rule 60
	'RY'           reduce using rule 60
	'RZ'           reduce using rule 60
	'S'            reduce using rule 60
	'SQRT_SWAP'    reduce using rule 60
	'SQRT_SWAP_DAG'reduce using rule 60
	'SQRT_X'       reduce using rule 60
	'SQRT_X_DAG'   reduce using rule 60
	'SQRT_Y'       reduce using rule 60
	'SQRT_Y_DAG'   reduce using rule 60
	'SWAP'         reduce using rule 60
	'SWAP_THETA'   reduce using rule 60
	'S_DAG'        reduce using rule 60
	'T'            reduce using rule 60
	'T_DAG'        reduce using rule 60
	'U1'           reduce using rule 60
	'U2'           reduce using rule 60
	'U3'           reduce using rule 60
	'X'            reduce using rule 60
	'Y'            reduce using rule 60
	'Z'            reduce using rule 60
	']'            reduce using rule 60
	'else'         reduce using rule 60
	'of'           reduce using rule 60
	'then'         reduce using rule 60
	'}'            reduce using rule 60
	L_Var          reduce using rule 60


State 120

	Gate -> 'ROOT_SWAP' Integer .                       (rule 59)

	'$'            reduce using rule 59
	'('            reduce using rule 59
	'()'           reduce using rule 59
	')'            reduce using rule 59
	','            reduce using rule 59
	'->'           reduce using rule 59
	'.'            reduce using rule 59
	';'            reduce using rule 59
	'@+'           reduce using rule 59
	'@+i'          reduce using rule 59
	'@-'           reduce using rule 59
	'@-i'          reduce using rule 59
	'@0'           reduce using rule 59
	'@1'           reduce using rule 59
	'FSWAP'        reduce using rule 59
	'H'            reduce using rule 59
	'ID'           reduce using rule 59
	'ISWAP'        reduce using rule 59
	'ROOT_SWAP'    reduce using rule 59
	'ROOT_SWAP_DAG'reduce using rule 59
	'ROOT_X'       reduce using rule 59
	'ROOT_X_DAG'   reduce using rule 59
	'ROOT_Y'       reduce using rule 59
	'ROOT_Y_DAG'   reduce using rule 59
	'ROOT_Z'       reduce using rule 59
	'ROOT_Z_DAG'   reduce using rule 59
	'RX'           reduce using rule 59
	'RY'           reduce using rule 59
	'RZ'           reduce using rule 59
	'S'            reduce using rule 59
	'SQRT_SWAP'    reduce using rule 59
	'SQRT_SWAP_DAG'reduce using rule 59
	'SQRT_X'       reduce using rule 59
	'SQRT_X_DAG'   reduce using rule 59
	'SQRT_Y'       reduce using rule 59
	'SQRT_Y_DAG'   reduce using rule 59
	'SWAP'         reduce using rule 59
	'SWAP_THETA'   reduce using rule 59
	'S_DAG'        reduce using rule 59
	'T'            reduce using rule 59
	'T_DAG'        reduce using rule 59
	'U1'           reduce using rule 59
	'U2'           reduce using rule 59
	'U3'           reduce using rule 59
	'X'            reduce using rule 59
	'Y'            reduce using rule 59
	'Z'            reduce using rule 59
	']'            reduce using rule 59
	'else'         reduce using rule 59
	'of'           reduce using rule 59
	'then'         reduce using rule 59
	'}'            reduce using rule 59
	L_Var          reduce using rule 59


State 121

	Tuple -> '(' Term . ',' ListTerm ')'                (rule 69)
	Term3 -> '(' Term . ')'                             (rule 95)

	')'            shift, and enter state 137
	','            shift, and enter state 138


State 122

	Term1 -> LetVariable ',' . ListLetVariable '<-' Term ';' Term    (rule 78)

	'<-'           reduce using rule 98
	L_Var          shift, and enter state 8

	Var            goto state 134
	LetVariable    goto state 135
	ListLetVariablegoto state 136

State 123

	Term1 -> LetVariable '<-' . Term ';' Term           (rule 77)

	'('            shift, and enter state 53
	'()'           shift, and enter state 54
	'@+'           shift, and enter state 55
	'@+i'          shift, and enter state 56
	'@-'           shift, and enter state 57
	'@-i'          shift, and enter state 58
	'@0'           shift, and enter state 59
	'@1'           shift, and enter state 60
	'FSWAP'        shift, and enter state 61
	'H'            shift, and enter state 62
	'ID'           shift, and enter state 63
	'ISWAP'        shift, and enter state 64
	'ROOT_SWAP'    shift, and enter state 65
	'ROOT_SWAP_DAG'shift, and enter state 66
	'ROOT_X'       shift, and enter state 67
	'ROOT_X_DAG'   shift, and enter state 68
	'ROOT_Y'       shift, and enter state 69
	'ROOT_Y_DAG'   shift, and enter state 70
	'ROOT_Z'       shift, and enter state 71
	'ROOT_Z_DAG'   shift, and enter state 72
	'RX'           shift, and enter state 73
	'RY'           shift, and enter state 74
	'RZ'           shift, and enter state 75
	'S'            shift, and enter state 76
	'SQRT_SWAP'    shift, and enter state 77
	'SQRT_SWAP_DAG'shift, and enter state 78
	'SQRT_X'       shift, and enter state 79
	'SQRT_X_DAG'   shift, and enter state 80
	'SQRT_Y'       shift, and enter state 81
	'SQRT_Y_DAG'   shift, and enter state 82
	'SWAP'         shift, and enter state 83
	'SWAP_THETA'   shift, and enter state 84
	'S_DAG'        shift, and enter state 85
	'T'            shift, and enter state 86
	'T_DAG'        shift, and enter state 87
	'U1'           shift, and enter state 88
	'U2'           shift, and enter state 89
	'U3'           shift, and enter state 90
	'X'            shift, and enter state 91
	'Y'            shift, and enter state 92
	'Z'            shift, and enter state 93
	'case'         shift, and enter state 94
	'if'           shift, and enter state 95
	'let'          shift, and enter state 96
	'with'         shift, and enter state 97
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 98

	Var            goto state 43
	Lambda         goto state 44
	BasisState     goto state 45
	Gate           goto state 46
	Tuple          goto state 47
	Term1          goto state 48
	Term2          goto state 49
	Term3          goto state 50
	Term           goto state 133
	LetVariable    goto state 52

State 124

	Term3 -> Var .                                      (rule 90)

	'$'            reduce using rule 90
	'('            reduce using rule 90
	'()'           reduce using rule 90
	')'            reduce using rule 90
	','            reduce using rule 90
	'->'           reduce using rule 90
	'.'            reduce using rule 90
	';'            reduce using rule 90
	'@+'           reduce using rule 90
	'@+i'          reduce using rule 90
	'@-'           reduce using rule 90
	'@-i'          reduce using rule 90
	'@0'           reduce using rule 90
	'@1'           reduce using rule 90
	'FSWAP'        reduce using rule 90
	'H'            reduce using rule 90
	'ID'           reduce using rule 90
	'ISWAP'        reduce using rule 90
	'ROOT_SWAP'    reduce using rule 90
	'ROOT_SWAP_DAG'reduce using rule 90
	'ROOT_X'       reduce using rule 90
	'ROOT_X_DAG'   reduce using rule 90
	'ROOT_Y'       reduce using rule 90
	'ROOT_Y_DAG'   reduce using rule 90
	'ROOT_Z'       reduce using rule 90
	'ROOT_Z_DAG'   reduce using rule 90
	'RX'           reduce using rule 90
	'RY'           reduce using rule 90
	'RZ'           reduce using rule 90
	'S'            reduce using rule 90
	'SQRT_SWAP'    reduce using rule 90
	'SQRT_SWAP_DAG'reduce using rule 90
	'SQRT_X'       reduce using rule 90
	'SQRT_X_DAG'   reduce using rule 90
	'SQRT_Y'       reduce using rule 90
	'SQRT_Y_DAG'   reduce using rule 90
	'SWAP'         reduce using rule 90
	'SWAP_THETA'   reduce using rule 90
	'S_DAG'        reduce using rule 90
	'T'            reduce using rule 90
	'T_DAG'        reduce using rule 90
	'U1'           reduce using rule 90
	'U2'           reduce using rule 90
	'U3'           reduce using rule 90
	'X'            reduce using rule 90
	'Y'            reduce using rule 90
	'Z'            reduce using rule 90
	']'            reduce using rule 90
	'else'         reduce using rule 90
	'of'           reduce using rule 90
	'then'         reduce using rule 90
	'}'            reduce using rule 90
	L_Var          reduce using rule 90


State 125

	Term2 -> Term2 Term3 .                              (rule 87)

	'$'            reduce using rule 87
	'('            reduce using rule 87
	'()'           reduce using rule 87
	')'            reduce using rule 87
	','            reduce using rule 87
	'->'           reduce using rule 87
	'.'            reduce using rule 87
	';'            reduce using rule 87
	'@+'           reduce using rule 87
	'@+i'          reduce using rule 87
	'@-'           reduce using rule 87
	'@-i'          reduce using rule 87
	'@0'           reduce using rule 87
	'@1'           reduce using rule 87
	'FSWAP'        reduce using rule 87
	'H'            reduce using rule 87
	'ID'           reduce using rule 87
	'ISWAP'        reduce using rule 87
	'ROOT_SWAP'    reduce using rule 87
	'ROOT_SWAP_DAG'reduce using rule 87
	'ROOT_X'       reduce using rule 87
	'ROOT_X_DAG'   reduce using rule 87
	'ROOT_Y'       reduce using rule 87
	'ROOT_Y_DAG'   reduce using rule 87
	'ROOT_Z'       reduce using rule 87
	'ROOT_Z_DAG'   reduce using rule 87
	'RX'           reduce using rule 87
	'RY'           reduce using rule 87
	'RZ'           reduce using rule 87
	'S'            reduce using rule 87
	'SQRT_SWAP'    reduce using rule 87
	'SQRT_SWAP_DAG'reduce using rule 87
	'SQRT_X'       reduce using rule 87
	'SQRT_X_DAG'   reduce using rule 87
	'SQRT_Y'       reduce using rule 87
	'SQRT_Y_DAG'   reduce using rule 87
	'SWAP'         reduce using rule 87
	'SWAP_THETA'   reduce using rule 87
	'S_DAG'        reduce using rule 87
	'T'            reduce using rule 87
	'T_DAG'        reduce using rule 87
	'U1'           reduce using rule 87
	'U2'           reduce using rule 87
	'U3'           reduce using rule 87
	'X'            reduce using rule 87
	'Y'            reduce using rule 87
	'Z'            reduce using rule 87
	']'            reduce using rule 87
	'else'         reduce using rule 87
	'of'           reduce using rule 87
	'then'         reduce using rule 87
	'}'            reduce using rule 87
	L_Var          reduce using rule 87


State 126

	Term1 -> Term2 '$' . Term1                          (rule 81)

	'('            shift, and enter state 53
	'()'           shift, and enter state 54
	'@+'           shift, and enter state 55
	'@+i'          shift, and enter state 56
	'@-'           shift, and enter state 57
	'@-i'          shift, and enter state 58
	'@0'           shift, and enter state 59
	'@1'           shift, and enter state 60
	'FSWAP'        shift, and enter state 61
	'H'            shift, and enter state 62
	'ID'           shift, and enter state 63
	'ISWAP'        shift, and enter state 64
	'ROOT_SWAP'    shift, and enter state 65
	'ROOT_SWAP_DAG'shift, and enter state 66
	'ROOT_X'       shift, and enter state 67
	'ROOT_X_DAG'   shift, and enter state 68
	'ROOT_Y'       shift, and enter state 69
	'ROOT_Y_DAG'   shift, and enter state 70
	'ROOT_Z'       shift, and enter state 71
	'ROOT_Z_DAG'   shift, and enter state 72
	'RX'           shift, and enter state 73
	'RY'           shift, and enter state 74
	'RZ'           shift, and enter state 75
	'S'            shift, and enter state 76
	'SQRT_SWAP'    shift, and enter state 77
	'SQRT_SWAP_DAG'shift, and enter state 78
	'SQRT_X'       shift, and enter state 79
	'SQRT_X_DAG'   shift, and enter state 80
	'SQRT_Y'       shift, and enter state 81
	'SQRT_Y_DAG'   shift, and enter state 82
	'SWAP'         shift, and enter state 83
	'SWAP_THETA'   shift, and enter state 84
	'S_DAG'        shift, and enter state 85
	'T'            shift, and enter state 86
	'T_DAG'        shift, and enter state 87
	'U1'           shift, and enter state 88
	'U2'           shift, and enter state 89
	'U3'           shift, and enter state 90
	'X'            shift, and enter state 91
	'Y'            shift, and enter state 92
	'Z'            shift, and enter state 93
	'case'         shift, and enter state 94
	'if'           shift, and enter state 95
	'let'          shift, and enter state 96
	'with'         shift, and enter state 97
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 98

	Var            goto state 43
	Lambda         goto state 44
	BasisState     goto state 45
	Gate           goto state 46
	Tuple          goto state 47
	Term1          goto state 132
	Term2          goto state 49
	Term3          goto state 50
	LetVariable    goto state 52

State 127

	Term2 -> Term2 '.' . Term3                          (rule 88)

	'('            shift, and enter state 53
	'()'           shift, and enter state 54
	'@+'           shift, and enter state 55
	'@+i'          shift, and enter state 56
	'@-'           shift, and enter state 57
	'@-i'          shift, and enter state 58
	'@0'           shift, and enter state 59
	'@1'           shift, and enter state 60
	'FSWAP'        shift, and enter state 61
	'H'            shift, and enter state 62
	'ID'           shift, and enter state 63
	'ISWAP'        shift, and enter state 64
	'ROOT_SWAP'    shift, and enter state 65
	'ROOT_SWAP_DAG'shift, and enter state 66
	'ROOT_X'       shift, and enter state 67
	'ROOT_X_DAG'   shift, and enter state 68
	'ROOT_Y'       shift, and enter state 69
	'ROOT_Y_DAG'   shift, and enter state 70
	'ROOT_Z'       shift, and enter state 71
	'ROOT_Z_DAG'   shift, and enter state 72
	'RX'           shift, and enter state 73
	'RY'           shift, and enter state 74
	'RZ'           shift, and enter state 75
	'S'            shift, and enter state 76
	'SQRT_SWAP'    shift, and enter state 77
	'SQRT_SWAP_DAG'shift, and enter state 78
	'SQRT_X'       shift, and enter state 79
	'SQRT_X_DAG'   shift, and enter state 80
	'SQRT_Y'       shift, and enter state 81
	'SQRT_Y_DAG'   shift, and enter state 82
	'SWAP'         shift, and enter state 83
	'SWAP_THETA'   shift, and enter state 84
	'S_DAG'        shift, and enter state 85
	'T'            shift, and enter state 86
	'T_DAG'        shift, and enter state 87
	'U1'           shift, and enter state 88
	'U2'           shift, and enter state 89
	'U3'           shift, and enter state 90
	'X'            shift, and enter state 91
	'Y'            shift, and enter state 92
	'Z'            shift, and enter state 93
	L_Var          shift, and enter state 8

	Var            goto state 124
	BasisState     goto state 45
	Gate           goto state 46
	Tuple          goto state 47
	Term3          goto state 131

State 128

	Term1 -> Lambda FunctionType . '.' Term             (rule 80)
	FunctionType -> FunctionType . ';'                  (rule 110)

	'.'            shift, and enter state 129
	';'            shift, and enter state 130


State 129

	Term1 -> Lambda FunctionType '.' . Term             (rule 80)

	'('            shift, and enter state 53
	'()'           shift, and enter state 54
	'@+'           shift, and enter state 55
	'@+i'          shift, and enter state 56
	'@-'           shift, and enter state 57
	'@-i'          shift, and enter state 58
	'@0'           shift, and enter state 59
	'@1'           shift, and enter state 60
	'FSWAP'        shift, and enter state 61
	'H'            shift, and enter state 62
	'ID'           shift, and enter state 63
	'ISWAP'        shift, and enter state 64
	'ROOT_SWAP'    shift, and enter state 65
	'ROOT_SWAP_DAG'shift, and enter state 66
	'ROOT_X'       shift, and enter state 67
	'ROOT_X_DAG'   shift, and enter state 68
	'ROOT_Y'       shift, and enter state 69
	'ROOT_Y_DAG'   shift, and enter state 70
	'ROOT_Z'       shift, and enter state 71
	'ROOT_Z_DAG'   shift, and enter state 72
	'RX'           shift, and enter state 73
	'RY'           shift, and enter state 74
	'RZ'           shift, and enter state 75
	'S'            shift, and enter state 76
	'SQRT_SWAP'    shift, and enter state 77
	'SQRT_SWAP_DAG'shift, and enter state 78
	'SQRT_X'       shift, and enter state 79
	'SQRT_X_DAG'   shift, and enter state 80
	'SQRT_Y'       shift, and enter state 81
	'SQRT_Y_DAG'   shift, and enter state 82
	'SWAP'         shift, and enter state 83
	'SWAP_THETA'   shift, and enter state 84
	'S_DAG'        shift, and enter state 85
	'T'            shift, and enter state 86
	'T_DAG'        shift, and enter state 87
	'U1'           shift, and enter state 88
	'U2'           shift, and enter state 89
	'U3'           shift, and enter state 90
	'X'            shift, and enter state 91
	'Y'            shift, and enter state 92
	'Z'            shift, and enter state 93
	'case'         shift, and enter state 94
	'if'           shift, and enter state 95
	'let'          shift, and enter state 96
	'with'         shift, and enter state 97
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 98

	Var            goto state 43
	Lambda         goto state 44
	BasisState     goto state 45
	Gate           goto state 46
	Tuple          goto state 47
	Term1          goto state 48
	Term2          goto state 49
	Term3          goto state 50
	Term           goto state 168
	LetVariable    goto state 52

State 130

	FunctionType -> FunctionType ';' .                  (rule 110)

	'.'            reduce using rule 110
	';'            reduce using rule 110


State 131

	Term2 -> Term2 '.' Term3 .                          (rule 88)

	'$'            reduce using rule 88
	'('            reduce using rule 88
	'()'           reduce using rule 88
	')'            reduce using rule 88
	','            reduce using rule 88
	'->'           reduce using rule 88
	'.'            reduce using rule 88
	';'            reduce using rule 88
	'@+'           reduce using rule 88
	'@+i'          reduce using rule 88
	'@-'           reduce using rule 88
	'@-i'          reduce using rule 88
	'@0'           reduce using rule 88
	'@1'           reduce using rule 88
	'FSWAP'        reduce using rule 88
	'H'            reduce using rule 88
	'ID'           reduce using rule 88
	'ISWAP'        reduce using rule 88
	'ROOT_SWAP'    reduce using rule 88
	'ROOT_SWAP_DAG'reduce using rule 88
	'ROOT_X'       reduce using rule 88
	'ROOT_X_DAG'   reduce using rule 88
	'ROOT_Y'       reduce using rule 88
	'ROOT_Y_DAG'   reduce using rule 88
	'ROOT_Z'       reduce using rule 88
	'ROOT_Z_DAG'   reduce using rule 88
	'RX'           reduce using rule 88
	'RY'           reduce using rule 88
	'RZ'           reduce using rule 88
	'S'            reduce using rule 88
	'SQRT_SWAP'    reduce using rule 88
	'SQRT_SWAP_DAG'reduce using rule 88
	'SQRT_X'       reduce using rule 88
	'SQRT_X_DAG'   reduce using rule 88
	'SQRT_Y'       reduce using rule 88
	'SQRT_Y_DAG'   reduce using rule 88
	'SWAP'         reduce using rule 88
	'SWAP_THETA'   reduce using rule 88
	'S_DAG'        reduce using rule 88
	'T'            reduce using rule 88
	'T_DAG'        reduce using rule 88
	'U1'           reduce using rule 88
	'U2'           reduce using rule 88
	'U3'           reduce using rule 88
	'X'            reduce using rule 88
	'Y'            reduce using rule 88
	'Z'            reduce using rule 88
	']'            reduce using rule 88
	'else'         reduce using rule 88
	'of'           reduce using rule 88
	'then'         reduce using rule 88
	'}'            reduce using rule 88
	L_Var          reduce using rule 88


State 132

	Term1 -> Term2 '$' Term1 .                          (rule 81)

	')'            reduce using rule 81
	','            reduce using rule 81
	'->'           reduce using rule 81
	';'            reduce using rule 81
	']'            reduce using rule 81
	'else'         reduce using rule 81
	'of'           reduce using rule 81
	'then'         reduce using rule 81
	'}'            reduce using rule 81


State 133

	Term1 -> LetVariable '<-' Term . ';' Term           (rule 77)

	';'            shift, and enter state 167


State 134

	LetVariable -> Var .                                (rule 97)

	')'            reduce using rule 97
	','            reduce using rule 97
	'<-'           reduce using rule 97
	'='            reduce using rule 97


State 135

	ListLetVariable -> LetVariable .                    (rule 99)
	ListLetVariable -> LetVariable . ',' ListLetVariable    (rule 100)

	')'            reduce using rule 99
	','            shift, and enter state 166
	'<-'           reduce using rule 99


State 136

	Term1 -> LetVariable ',' ListLetVariable . '<-' Term ';' Term    (rule 78)

	'<-'           shift, and enter state 165


State 137

	Term3 -> '(' Term ')' .                             (rule 95)

	'$'            reduce using rule 95
	'('            reduce using rule 95
	'()'           reduce using rule 95
	')'            reduce using rule 95
	','            reduce using rule 95
	'->'           reduce using rule 95
	'.'            reduce using rule 95
	';'            reduce using rule 95
	'@+'           reduce using rule 95
	'@+i'          reduce using rule 95
	'@-'           reduce using rule 95
	'@-i'          reduce using rule 95
	'@0'           reduce using rule 95
	'@1'           reduce using rule 95
	'FSWAP'        reduce using rule 95
	'H'            reduce using rule 95
	'ID'           reduce using rule 95
	'ISWAP'        reduce using rule 95
	'ROOT_SWAP'    reduce using rule 95
	'ROOT_SWAP_DAG'reduce using rule 95
	'ROOT_X'       reduce using rule 95
	'ROOT_X_DAG'   reduce using rule 95
	'ROOT_Y'       reduce using rule 95
	'ROOT_Y_DAG'   reduce using rule 95
	'ROOT_Z'       reduce using rule 95
	'ROOT_Z_DAG'   reduce using rule 95
	'RX'           reduce using rule 95
	'RY'           reduce using rule 95
	'RZ'           reduce using rule 95
	'S'            reduce using rule 95
	'SQRT_SWAP'    reduce using rule 95
	'SQRT_SWAP_DAG'reduce using rule 95
	'SQRT_X'       reduce using rule 95
	'SQRT_X_DAG'   reduce using rule 95
	'SQRT_Y'       reduce using rule 95
	'SQRT_Y_DAG'   reduce using rule 95
	'SWAP'         reduce using rule 95
	'SWAP_THETA'   reduce using rule 95
	'S_DAG'        reduce using rule 95
	'T'            reduce using rule 95
	'T_DAG'        reduce using rule 95
	'U1'           reduce using rule 95
	'U2'           reduce using rule 95
	'U3'           reduce using rule 95
	'X'            reduce using rule 95
	'Y'            reduce using rule 95
	'Z'            reduce using rule 95
	']'            reduce using rule 95
	'else'         reduce using rule 95
	'of'           reduce using rule 95
	'then'         reduce using rule 95
	'}'            reduce using rule 95
	L_Var          reduce using rule 95


State 138

	Tuple -> '(' Term ',' . ListTerm ')'                (rule 69)

	'('            shift, and enter state 53
	'()'           shift, and enter state 54
	'@+'           shift, and enter state 55
	'@+i'          shift, and enter state 56
	'@-'           shift, and enter state 57
	'@-i'          shift, and enter state 58
	'@0'           shift, and enter state 59
	'@1'           shift, and enter state 60
	'FSWAP'        shift, and enter state 61
	'H'            shift, and enter state 62
	'ID'           shift, and enter state 63
	'ISWAP'        shift, and enter state 64
	'ROOT_SWAP'    shift, and enter state 65
	'ROOT_SWAP_DAG'shift, and enter state 66
	'ROOT_X'       shift, and enter state 67
	'ROOT_X_DAG'   shift, and enter state 68
	'ROOT_Y'       shift, and enter state 69
	'ROOT_Y_DAG'   shift, and enter state 70
	'ROOT_Z'       shift, and enter state 71
	'ROOT_Z_DAG'   shift, and enter state 72
	'RX'           shift, and enter state 73
	'RY'           shift, and enter state 74
	'RZ'           shift, and enter state 75
	'S'            shift, and enter state 76
	'SQRT_SWAP'    shift, and enter state 77
	'SQRT_SWAP_DAG'shift, and enter state 78
	'SQRT_X'       shift, and enter state 79
	'SQRT_X_DAG'   shift, and enter state 80
	'SQRT_Y'       shift, and enter state 81
	'SQRT_Y_DAG'   shift, and enter state 82
	'SWAP'         shift, and enter state 83
	'SWAP_THETA'   shift, and enter state 84
	'S_DAG'        shift, and enter state 85
	'T'            shift, and enter state 86
	'T_DAG'        shift, and enter state 87
	'U1'           shift, and enter state 88
	'U2'           shift, and enter state 89
	'U3'           shift, and enter state 90
	'X'            shift, and enter state 91
	'Y'            shift, and enter state 92
	'Z'            shift, and enter state 93
	'case'         shift, and enter state 94
	'if'           shift, and enter state 95
	'let'          shift, and enter state 96
	'with'         shift, and enter state 97
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 98

	Var            goto state 43
	Lambda         goto state 44
	BasisState     goto state 45
	Gate           goto state 46
	Tuple          goto state 47
	ListTerm       goto state 163
	Term1          goto state 48
	Term2          goto state 49
	Term3          goto state 50
	Term           goto state 164
	LetVariable    goto state 52

State 139

	Gate -> 'U2' '(' Angle . ',' Angle ')'              (rule 51)

	','            shift, and enter state 162


State 140

	Gate -> 'U3' '(' Angle . ',' Angle ',' Angle ')'    (rule 52)

	','            shift, and enter state 161


State 141

	Term1 -> 'case' Term 'of' . CaseExpression ListCaseExpression    (rule 79)

	'('            shift, and enter state 53
	'()'           shift, and enter state 54
	'@+'           shift, and enter state 55
	'@+i'          shift, and enter state 56
	'@-'           shift, and enter state 57
	'@-i'          shift, and enter state 58
	'@0'           shift, and enter state 59
	'@1'           shift, and enter state 60
	'FSWAP'        shift, and enter state 61
	'H'            shift, and enter state 62
	'ID'           shift, and enter state 63
	'ISWAP'        shift, and enter state 64
	'ROOT_SWAP'    shift, and enter state 65
	'ROOT_SWAP_DAG'shift, and enter state 66
	'ROOT_X'       shift, and enter state 67
	'ROOT_X_DAG'   shift, and enter state 68
	'ROOT_Y'       shift, and enter state 69
	'ROOT_Y_DAG'   shift, and enter state 70
	'ROOT_Z'       shift, and enter state 71
	'ROOT_Z_DAG'   shift, and enter state 72
	'RX'           shift, and enter state 73
	'RY'           shift, and enter state 74
	'RZ'           shift, and enter state 75
	'S'            shift, and enter state 76
	'SQRT_SWAP'    shift, and enter state 77
	'SQRT_SWAP_DAG'shift, and enter state 78
	'SQRT_X'       shift, and enter state 79
	'SQRT_X_DAG'   shift, and enter state 80
	'SQRT_Y'       shift, and enter state 81
	'SQRT_Y_DAG'   shift, and enter state 82
	'SWAP'         shift, and enter state 83
	'SWAP_THETA'   shift, and enter state 84
	'S_DAG'        shift, and enter state 85
	'T'            shift, and enter state 86
	'T_DAG'        shift, and enter state 87
	'U1'           shift, and enter state 88
	'U2'           shift, and enter state 89
	'U3'           shift, and enter state 90
	'X'            shift, and enter state 91
	'Y'            shift, and enter state 92
	'Z'            shift, and enter state 93
	'case'         shift, and enter state 94
	'if'           shift, and enter state 95
	'let'          shift, and enter state 96
	'with'         shift, and enter state 97
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 98

	Var            goto state 43
	Lambda         goto state 44
	BasisState     goto state 45
	Gate           goto state 46
	Tuple          goto state 47
	Term1          goto state 48
	Term2          goto state 49
	Term3          goto state 50
	Term           goto state 159
	LetVariable    goto state 52
	CaseExpression goto state 160

State 142

	Term1 -> 'if' Term 'then' . Term 'else' Term        (rule 74)

	'('            shift, and enter state 53
	'()'           shift, and enter state 54
	'@+'           shift, and enter state 55
	'@+i'          shift, and enter state 56
	'@-'           shift, and enter state 57
	'@-i'          shift, and enter state 58
	'@0'           shift, and enter state 59
	'@1'           shift, and enter state 60
	'FSWAP'        shift, and enter state 61
	'H'            shift, and enter state 62
	'ID'           shift, and enter state 63
	'ISWAP'        shift, and enter state 64
	'ROOT_SWAP'    shift, and enter state 65
	'ROOT_SWAP_DAG'shift, and enter state 66
	'ROOT_X'       shift, and enter state 67
	'ROOT_X_DAG'   shift, and enter state 68
	'ROOT_Y'       shift, and enter state 69
	'ROOT_Y_DAG'   shift, and enter state 70
	'ROOT_Z'       shift, and enter state 71
	'ROOT_Z_DAG'   shift, and enter state 72
	'RX'           shift, and enter state 73
	'RY'           shift, and enter state 74
	'RZ'           shift, and enter state 75
	'S'            shift, and enter state 76
	'SQRT_SWAP'    shift, and enter state 77
	'SQRT_SWAP_DAG'shift, and enter state 78
	'SQRT_X'       shift, and enter state 79
	'SQRT_X_DAG'   shift, and enter state 80
	'SQRT_Y'       shift, and enter state 81
	'SQRT_Y_DAG'   shift, and enter state 82
	'SWAP'         shift, and enter state 83
	'SWAP_THETA'   shift, and enter state 84
	'S_DAG'        shift, and enter state 85
	'T'            shift, and enter state 86
	'T_DAG'        shift, and enter state 87
	'U1'           shift, and enter state 88
	'U2'           shift, and enter state 89
	'U3'           shift, and enter state 90
	'X'            shift, and enter state 91
	'Y'            shift, and enter state 92
	'Z'            shift, and enter state 93
	'case'         shift, and enter state 94
	'if'           shift, and enter state 95
	'let'          shift, and enter state 96
	'with'         shift, and enter state 97
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 98

	Var            goto state 43
	Lambda         goto state 44
	BasisState     goto state 45
	Gate           goto state 46
	Tuple          goto state 47
	Term1          goto state 48
	Term2          goto state 49
	Term3          goto state 50
	Term           goto state 158
	LetVariable    goto state 52

State 143

	Term1 -> 'let' '{' LetVariable . '=' Term '}' 'in' Term    (rule 75)

	'='            shift, and enter state 157


State 144

	Term1 -> 'let' '{' '(' . LetVariable ',' ListLetVariable ')' '=' Term '}' 'in' Term    (rule 76)

	L_Var          shift, and enter state 8

	Var            goto state 134
	LetVariable    goto state 156

State 145

	ControlTerm -> '[' Term . ']'                       (rule 70)
	ControlTerms -> '[' Term . ',' ListTerm ']'         (rule 71)

	','            shift, and enter state 154
	']'            shift, and enter state 155


State 146

	Term2 -> 'with' ControlTerms 'ctrl' . ControlBasisStates    (rule 84)
	Term2 -> 'with' ControlTerms 'ctrl' . ControlBits    (rule 86)

	'['            shift, and enter state 153

	ControlBasisStatesgoto state 151
	ControlBits    goto state 152

State 147

	Term2 -> 'with' ControlTerm 'ctrl' . ControlBasisState    (rule 83)
	Term2 -> 'with' ControlTerm 'ctrl' . ControlBit     (rule 85)

	'['            shift, and enter state 150

	ControlBasisStategoto state 148
	ControlBit     goto state 149

State 148

	Term2 -> 'with' ControlTerm 'ctrl' ControlBasisState .    (rule 83)

	'$'            reduce using rule 83
	'('            reduce using rule 83
	'()'           reduce using rule 83
	')'            reduce using rule 83
	','            reduce using rule 83
	'->'           reduce using rule 83
	'.'            reduce using rule 83
	';'            reduce using rule 83
	'@+'           reduce using rule 83
	'@+i'          reduce using rule 83
	'@-'           reduce using rule 83
	'@-i'          reduce using rule 83
	'@0'           reduce using rule 83
	'@1'           reduce using rule 83
	'FSWAP'        reduce using rule 83
	'H'            reduce using rule 83
	'ID'           reduce using rule 83
	'ISWAP'        reduce using rule 83
	'ROOT_SWAP'    reduce using rule 83
	'ROOT_SWAP_DAG'reduce using rule 83
	'ROOT_X'       reduce using rule 83
	'ROOT_X_DAG'   reduce using rule 83
	'ROOT_Y'       reduce using rule 83
	'ROOT_Y_DAG'   reduce using rule 83
	'ROOT_Z'       reduce using rule 83
	'ROOT_Z_DAG'   reduce using rule 83
	'RX'           reduce using rule 83
	'RY'           reduce using rule 83
	'RZ'           reduce using rule 83
	'S'            reduce using rule 83
	'SQRT_SWAP'    reduce using rule 83
	'SQRT_SWAP_DAG'reduce using rule 83
	'SQRT_X'       reduce using rule 83
	'SQRT_X_DAG'   reduce using rule 83
	'SQRT_Y'       reduce using rule 83
	'SQRT_Y_DAG'   reduce using rule 83
	'SWAP'         reduce using rule 83
	'SWAP_THETA'   reduce using rule 83
	'S_DAG'        reduce using rule 83
	'T'            reduce using rule 83
	'T_DAG'        reduce using rule 83
	'U1'           reduce using rule 83
	'U2'           reduce using rule 83
	'U3'           reduce using rule 83
	'X'            reduce using rule 83
	'Y'            reduce using rule 83
	'Z'            reduce using rule 83
	']'            reduce using rule 83
	'else'         reduce using rule 83
	'of'           reduce using rule 83
	'then'         reduce using rule 83
	'}'            reduce using rule 83
	L_Var          reduce using rule 83


State 149

	Term2 -> 'with' ControlTerm 'ctrl' ControlBit .     (rule 85)

	'$'            reduce using rule 85
	'('            reduce using rule 85
	'()'           reduce using rule 85
	')'            reduce using rule 85
	','            reduce using rule 85
	'->'           reduce using rule 85
	'.'            reduce using rule 85
	';'            reduce using rule 85
	'@+'           reduce using rule 85
	'@+i'          reduce using rule 85
	'@-'           reduce using rule 85
	'@-i'          reduce using rule 85
	'@0'           reduce using rule 85
	'@1'           reduce using rule 85
	'FSWAP'        reduce using rule 85
	'H'            reduce using rule 85
	'ID'           reduce using rule 85
	'ISWAP'        reduce using rule 85
	'ROOT_SWAP'    reduce using rule 85
	'ROOT_SWAP_DAG'reduce using rule 85
	'ROOT_X'       reduce using rule 85
	'ROOT_X_DAG'   reduce using rule 85
	'ROOT_Y'       reduce using rule 85
	'ROOT_Y_DAG'   reduce using rule 85
	'ROOT_Z'       reduce using rule 85
	'ROOT_Z_DAG'   reduce using rule 85
	'RX'           reduce using rule 85
	'RY'           reduce using rule 85
	'RZ'           reduce using rule 85
	'S'            reduce using rule 85
	'SQRT_SWAP'    reduce using rule 85
	'SQRT_SWAP_DAG'reduce using rule 85
	'SQRT_X'       reduce using rule 85
	'SQRT_X_DAG'   reduce using rule 85
	'SQRT_Y'       reduce using rule 85
	'SQRT_Y_DAG'   reduce using rule 85
	'SWAP'         reduce using rule 85
	'SWAP_THETA'   reduce using rule 85
	'S_DAG'        reduce using rule 85
	'T'            reduce using rule 85
	'T_DAG'        reduce using rule 85
	'U1'           reduce using rule 85
	'U2'           reduce using rule 85
	'U3'           reduce using rule 85
	'X'            reduce using rule 85
	'Y'            reduce using rule 85
	'Z'            reduce using rule 85
	']'            reduce using rule 85
	'else'         reduce using rule 85
	'of'           reduce using rule 85
	'then'         reduce using rule 85
	'}'            reduce using rule 85
	L_Var          reduce using rule 85


State 150

	ControlBasisState -> '[' . BasisState ']'           (rule 61)
	ControlBit -> '[' . Integer ']'                     (rule 65)

	'@+'           shift, and enter state 55
	'@+i'          shift, and enter state 56
	'@-'           shift, and enter state 57
	'@-i'          shift, and enter state 58
	'@0'           shift, and enter state 59
	'@1'           shift, and enter state 60
	L_integ        shift, and enter state 36

	Integer        goto state 185
	BasisState     goto state 186

State 151

	Term2 -> 'with' ControlTerms 'ctrl' ControlBasisStates .    (rule 84)

	'$'            reduce using rule 84
	'('            reduce using rule 84
	'()'           reduce using rule 84
	')'            reduce using rule 84
	','            reduce using rule 84
	'->'           reduce using rule 84
	'.'            reduce using rule 84
	';'            reduce using rule 84
	'@+'           reduce using rule 84
	'@+i'          reduce using rule 84
	'@-'           reduce using rule 84
	'@-i'          reduce using rule 84
	'@0'           reduce using rule 84
	'@1'           reduce using rule 84
	'FSWAP'        reduce using rule 84
	'H'            reduce using rule 84
	'ID'           reduce using rule 84
	'ISWAP'        reduce using rule 84
	'ROOT_SWAP'    reduce using rule 84
	'ROOT_SWAP_DAG'reduce using rule 84
	'ROOT_X'       reduce using rule 84
	'ROOT_X_DAG'   reduce using rule 84
	'ROOT_Y'       reduce using rule 84
	'ROOT_Y_DAG'   reduce using rule 84
	'ROOT_Z'       reduce using rule 84
	'ROOT_Z_DAG'   reduce using rule 84
	'RX'           reduce using rule 84
	'RY'           reduce using rule 84
	'RZ'           reduce using rule 84
	'S'            reduce using rule 84
	'SQRT_SWAP'    reduce using rule 84
	'SQRT_SWAP_DAG'reduce using rule 84
	'SQRT_X'       reduce using rule 84
	'SQRT_X_DAG'   reduce using rule 84
	'SQRT_Y'       reduce using rule 84
	'SQRT_Y_DAG'   reduce using rule 84
	'SWAP'         reduce using rule 84
	'SWAP_THETA'   reduce using rule 84
	'S_DAG'        reduce using rule 84
	'T'            reduce using rule 84
	'T_DAG'        reduce using rule 84
	'U1'           reduce using rule 84
	'U2'           reduce using rule 84
	'U3'           reduce using rule 84
	'X'            reduce using rule 84
	'Y'            reduce using rule 84
	'Z'            reduce using rule 84
	']'            reduce using rule 84
	'else'         reduce using rule 84
	'of'           reduce using rule 84
	'then'         reduce using rule 84
	'}'            reduce using rule 84
	L_Var          reduce using rule 84


State 152

	Term2 -> 'with' ControlTerms 'ctrl' ControlBits .    (rule 86)

	'$'            reduce using rule 86
	'('            reduce using rule 86
	'()'           reduce using rule 86
	')'            reduce using rule 86
	','            reduce using rule 86
	'->'           reduce using rule 86
	'.'            reduce using rule 86
	';'            reduce using rule 86
	'@+'           reduce using rule 86
	'@+i'          reduce using rule 86
	'@-'           reduce using rule 86
	'@-i'          reduce using rule 86
	'@0'           reduce using rule 86
	'@1'           reduce using rule 86
	'FSWAP'        reduce using rule 86
	'H'            reduce using rule 86
	'ID'           reduce using rule 86
	'ISWAP'        reduce using rule 86
	'ROOT_SWAP'    reduce using rule 86
	'ROOT_SWAP_DAG'reduce using rule 86
	'ROOT_X'       reduce using rule 86
	'ROOT_X_DAG'   reduce using rule 86
	'ROOT_Y'       reduce using rule 86
	'ROOT_Y_DAG'   reduce using rule 86
	'ROOT_Z'       reduce using rule 86
	'ROOT_Z_DAG'   reduce using rule 86
	'RX'           reduce using rule 86
	'RY'           reduce using rule 86
	'RZ'           reduce using rule 86
	'S'            reduce using rule 86
	'SQRT_SWAP'    reduce using rule 86
	'SQRT_SWAP_DAG'reduce using rule 86
	'SQRT_X'       reduce using rule 86
	'SQRT_X_DAG'   reduce using rule 86
	'SQRT_Y'       reduce using rule 86
	'SQRT_Y_DAG'   reduce using rule 86
	'SWAP'         reduce using rule 86
	'SWAP_THETA'   reduce using rule 86
	'S_DAG'        reduce using rule 86
	'T'            reduce using rule 86
	'T_DAG'        reduce using rule 86
	'U1'           reduce using rule 86
	'U2'           reduce using rule 86
	'U3'           reduce using rule 86
	'X'            reduce using rule 86
	'Y'            reduce using rule 86
	'Z'            reduce using rule 86
	']'            reduce using rule 86
	'else'         reduce using rule 86
	'of'           reduce using rule 86
	'then'         reduce using rule 86
	'}'            reduce using rule 86
	L_Var          reduce using rule 86


State 153

	ControlBasisStates -> '[' . BasisState ',' ListBasisState ']'    (rule 62)
	ControlBits -> '[' . Integer ',' ListInteger ']'    (rule 66)

	'@+'           shift, and enter state 55
	'@+i'          shift, and enter state 56
	'@-'           shift, and enter state 57
	'@-i'          shift, and enter state 58
	'@0'           shift, and enter state 59
	'@1'           shift, and enter state 60
	L_integ        shift, and enter state 36

	Integer        goto state 183
	BasisState     goto state 184

State 154

	ControlTerms -> '[' Term ',' . ListTerm ']'         (rule 71)

	'('            shift, and enter state 53
	'()'           shift, and enter state 54
	'@+'           shift, and enter state 55
	'@+i'          shift, and enter state 56
	'@-'           shift, and enter state 57
	'@-i'          shift, and enter state 58
	'@0'           shift, and enter state 59
	'@1'           shift, and enter state 60
	'FSWAP'        shift, and enter state 61
	'H'            shift, and enter state 62
	'ID'           shift, and enter state 63
	'ISWAP'        shift, and enter state 64
	'ROOT_SWAP'    shift, and enter state 65
	'ROOT_SWAP_DAG'shift, and enter state 66
	'ROOT_X'       shift, and enter state 67
	'ROOT_X_DAG'   shift, and enter state 68
	'ROOT_Y'       shift, and enter state 69
	'ROOT_Y_DAG'   shift, and enter state 70
	'ROOT_Z'       shift, and enter state 71
	'ROOT_Z_DAG'   shift, and enter state 72
	'RX'           shift, and enter state 73
	'RY'           shift, and enter state 74
	'RZ'           shift, and enter state 75
	'S'            shift, and enter state 76
	'SQRT_SWAP'    shift, and enter state 77
	'SQRT_SWAP_DAG'shift, and enter state 78
	'SQRT_X'       shift, and enter state 79
	'SQRT_X_DAG'   shift, and enter state 80
	'SQRT_Y'       shift, and enter state 81
	'SQRT_Y_DAG'   shift, and enter state 82
	'SWAP'         shift, and enter state 83
	'SWAP_THETA'   shift, and enter state 84
	'S_DAG'        shift, and enter state 85
	'T'            shift, and enter state 86
	'T_DAG'        shift, and enter state 87
	'U1'           shift, and enter state 88
	'U2'           shift, and enter state 89
	'U3'           shift, and enter state 90
	'X'            shift, and enter state 91
	'Y'            shift, and enter state 92
	'Z'            shift, and enter state 93
	'case'         shift, and enter state 94
	'if'           shift, and enter state 95
	'let'          shift, and enter state 96
	'with'         shift, and enter state 97
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 98

	Var            goto state 43
	Lambda         goto state 44
	BasisState     goto state 45
	Gate           goto state 46
	Tuple          goto state 47
	ListTerm       goto state 182
	Term1          goto state 48
	Term2          goto state 49
	Term3          goto state 50
	Term           goto state 164
	LetVariable    goto state 52

State 155

	ControlTerm -> '[' Term ']' .                       (rule 70)

	'ctrl'         reduce using rule 70


State 156

	Term1 -> 'let' '{' '(' LetVariable . ',' ListLetVariable ')' '=' Term '}' 'in' Term    (rule 76)

	','            shift, and enter state 181


State 157

	Term1 -> 'let' '{' LetVariable '=' . Term '}' 'in' Term    (rule 75)

	'('            shift, and enter state 53
	'()'           shift, and enter state 54
	'@+'           shift, and enter state 55
	'@+i'          shift, and enter state 56
	'@-'           shift, and enter state 57
	'@-i'          shift, and enter state 58
	'@0'           shift, and enter state 59
	'@1'           shift, and enter state 60
	'FSWAP'        shift, and enter state 61
	'H'            shift, and enter state 62
	'ID'           shift, and enter state 63
	'ISWAP'        shift, and enter state 64
	'ROOT_SWAP'    shift, and enter state 65
	'ROOT_SWAP_DAG'shift, and enter state 66
	'ROOT_X'       shift, and enter state 67
	'ROOT_X_DAG'   shift, and enter state 68
	'ROOT_Y'       shift, and enter state 69
	'ROOT_Y_DAG'   shift, and enter state 70
	'ROOT_Z'       shift, and enter state 71
	'ROOT_Z_DAG'   shift, and enter state 72
	'RX'           shift, and enter state 73
	'RY'           shift, and enter state 74
	'RZ'           shift, and enter state 75
	'S'            shift, and enter state 76
	'SQRT_SWAP'    shift, and enter state 77
	'SQRT_SWAP_DAG'shift, and enter state 78
	'SQRT_X'       shift, and enter state 79
	'SQRT_X_DAG'   shift, and enter state 80
	'SQRT_Y'       shift, and enter state 81
	'SQRT_Y_DAG'   shift, and enter state 82
	'SWAP'         shift, and enter state 83
	'SWAP_THETA'   shift, and enter state 84
	'S_DAG'        shift, and enter state 85
	'T'            shift, and enter state 86
	'T_DAG'        shift, and enter state 87
	'U1'           shift, and enter state 88
	'U2'           shift, and enter state 89
	'U3'           shift, and enter state 90
	'X'            shift, and enter state 91
	'Y'            shift, and enter state 92
	'Z'            shift, and enter state 93
	'case'         shift, and enter state 94
	'if'           shift, and enter state 95
	'let'          shift, and enter state 96
	'with'         shift, and enter state 97
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 98

	Var            goto state 43
	Lambda         goto state 44
	BasisState     goto state 45
	Gate           goto state 46
	Tuple          goto state 47
	Term1          goto state 48
	Term2          goto state 49
	Term3          goto state 50
	Term           goto state 180
	LetVariable    goto state 52

State 158

	Term1 -> 'if' Term 'then' Term . 'else' Term        (rule 74)

	'else'         shift, and enter state 179


State 159

	CaseExpression -> Term . '->' Var                   (rule 101)

	'->'           shift, and enter state 178


State 160

	Term1 -> 'case' Term 'of' CaseExpression . ListCaseExpression    (rule 79)

	'('            shift, and enter state 53
	'()'           shift, and enter state 54
	'@+'           shift, and enter state 55
	'@+i'          shift, and enter state 56
	'@-'           shift, and enter state 57
	'@-i'          shift, and enter state 58
	'@0'           shift, and enter state 59
	'@1'           shift, and enter state 60
	'FSWAP'        shift, and enter state 61
	'H'            shift, and enter state 62
	'ID'           shift, and enter state 63
	'ISWAP'        shift, and enter state 64
	'ROOT_SWAP'    shift, and enter state 65
	'ROOT_SWAP_DAG'shift, and enter state 66
	'ROOT_X'       shift, and enter state 67
	'ROOT_X_DAG'   shift, and enter state 68
	'ROOT_Y'       shift, and enter state 69
	'ROOT_Y_DAG'   shift, and enter state 70
	'ROOT_Z'       shift, and enter state 71
	'ROOT_Z_DAG'   shift, and enter state 72
	'RX'           shift, and enter state 73
	'RY'           shift, and enter state 74
	'RZ'           shift, and enter state 75
	'S'            shift, and enter state 76
	'SQRT_SWAP'    shift, and enter state 77
	'SQRT_SWAP_DAG'shift, and enter state 78
	'SQRT_X'       shift, and enter state 79
	'SQRT_X_DAG'   shift, and enter state 80
	'SQRT_Y'       shift, and enter state 81
	'SQRT_Y_DAG'   shift, and enter state 82
	'SWAP'         shift, and enter state 83
	'SWAP_THETA'   shift, and enter state 84
	'S_DAG'        shift, and enter state 85
	'T'            shift, and enter state 86
	'T_DAG'        shift, and enter state 87
	'U1'           shift, and enter state 88
	'U2'           shift, and enter state 89
	'U3'           shift, and enter state 90
	'X'            shift, and enter state 91
	'Y'            shift, and enter state 92
	'Z'            shift, and enter state 93
	'case'         shift, and enter state 94
	'if'           shift, and enter state 95
	'let'          shift, and enter state 96
	'with'         shift, and enter state 97
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 98

	Var            goto state 43
	Lambda         goto state 44
	BasisState     goto state 45
	Gate           goto state 46
	Tuple          goto state 47
	Term1          goto state 48
	Term2          goto state 49
	Term3          goto state 50
	Term           goto state 159
	LetVariable    goto state 52
	CaseExpression goto state 176
	ListCaseExpressiongoto state 177

State 161

	Gate -> 'U3' '(' Angle ',' . Angle ',' Angle ')'    (rule 52)

	L_doubl        shift, and enter state 2

	Double         goto state 107
	Angle          goto state 175

State 162

	Gate -> 'U2' '(' Angle ',' . Angle ')'              (rule 51)

	L_doubl        shift, and enter state 2

	Double         goto state 107
	Angle          goto state 174

State 163

	Tuple -> '(' Term ',' ListTerm . ')'                (rule 69)

	')'            shift, and enter state 173


State 164

	ListTerm -> Term .                                  (rule 72)
	ListTerm -> Term . ',' ListTerm                     (rule 73)

	')'            reduce using rule 72
	','            shift, and enter state 172
	']'            reduce using rule 72


State 165

	Term1 -> LetVariable ',' ListLetVariable '<-' . Term ';' Term    (rule 78)

	'('            shift, and enter state 53
	'()'           shift, and enter state 54
	'@+'           shift, and enter state 55
	'@+i'          shift, and enter state 56
	'@-'           shift, and enter state 57
	'@-i'          shift, and enter state 58
	'@0'           shift, and enter state 59
	'@1'           shift, and enter state 60
	'FSWAP'        shift, and enter state 61
	'H'            shift, and enter state 62
	'ID'           shift, and enter state 63
	'ISWAP'        shift, and enter state 64
	'ROOT_SWAP'    shift, and enter state 65
	'ROOT_SWAP_DAG'shift, and enter state 66
	'ROOT_X'       shift, and enter state 67
	'ROOT_X_DAG'   shift, and enter state 68
	'ROOT_Y'       shift, and enter state 69
	'ROOT_Y_DAG'   shift, and enter state 70
	'ROOT_Z'       shift, and enter state 71
	'ROOT_Z_DAG'   shift, and enter state 72
	'RX'           shift, and enter state 73
	'RY'           shift, and enter state 74
	'RZ'           shift, and enter state 75
	'S'            shift, and enter state 76
	'SQRT_SWAP'    shift, and enter state 77
	'SQRT_SWAP_DAG'shift, and enter state 78
	'SQRT_X'       shift, and enter state 79
	'SQRT_X_DAG'   shift, and enter state 80
	'SQRT_Y'       shift, and enter state 81
	'SQRT_Y_DAG'   shift, and enter state 82
	'SWAP'         shift, and enter state 83
	'SWAP_THETA'   shift, and enter state 84
	'S_DAG'        shift, and enter state 85
	'T'            shift, and enter state 86
	'T_DAG'        shift, and enter state 87
	'U1'           shift, and enter state 88
	'U2'           shift, and enter state 89
	'U3'           shift, and enter state 90
	'X'            shift, and enter state 91
	'Y'            shift, and enter state 92
	'Z'            shift, and enter state 93
	'case'         shift, and enter state 94
	'if'           shift, and enter state 95
	'let'          shift, and enter state 96
	'with'         shift, and enter state 97
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 98

	Var            goto state 43
	Lambda         goto state 44
	BasisState     goto state 45
	Gate           goto state 46
	Tuple          goto state 47
	Term1          goto state 48
	Term2          goto state 49
	Term3          goto state 50
	Term           goto state 171
	LetVariable    goto state 52

State 166

	ListLetVariable -> LetVariable ',' . ListLetVariable    (rule 100)

	')'            reduce using rule 98
	'<-'           reduce using rule 98
	L_Var          shift, and enter state 8

	Var            goto state 134
	LetVariable    goto state 135
	ListLetVariablegoto state 170

State 167

	Term1 -> LetVariable '<-' Term ';' . Term           (rule 77)

	'('            shift, and enter state 53
	'()'           shift, and enter state 54
	'@+'           shift, and enter state 55
	'@+i'          shift, and enter state 56
	'@-'           shift, and enter state 57
	'@-i'          shift, and enter state 58
	'@0'           shift, and enter state 59
	'@1'           shift, and enter state 60
	'FSWAP'        shift, and enter state 61
	'H'            shift, and enter state 62
	'ID'           shift, and enter state 63
	'ISWAP'        shift, and enter state 64
	'ROOT_SWAP'    shift, and enter state 65
	'ROOT_SWAP_DAG'shift, and enter state 66
	'ROOT_X'       shift, and enter state 67
	'ROOT_X_DAG'   shift, and enter state 68
	'ROOT_Y'       shift, and enter state 69
	'ROOT_Y_DAG'   shift, and enter state 70
	'ROOT_Z'       shift, and enter state 71
	'ROOT_Z_DAG'   shift, and enter state 72
	'RX'           shift, and enter state 73
	'RY'           shift, and enter state 74
	'RZ'           shift, and enter state 75
	'S'            shift, and enter state 76
	'SQRT_SWAP'    shift, and enter state 77
	'SQRT_SWAP_DAG'shift, and enter state 78
	'SQRT_X'       shift, and enter state 79
	'SQRT_X_DAG'   shift, and enter state 80
	'SQRT_Y'       shift, and enter state 81
	'SQRT_Y_DAG'   shift, and enter state 82
	'SWAP'         shift, and enter state 83
	'SWAP_THETA'   shift, and enter state 84
	'S_DAG'        shift, and enter state 85
	'T'            shift, and enter state 86
	'T_DAG'        shift, and enter state 87
	'U1'           shift, and enter state 88
	'U2'           shift, and enter state 89
	'U3'           shift, and enter state 90
	'X'            shift, and enter state 91
	'Y'            shift, and enter state 92
	'Z'            shift, and enter state 93
	'case'         shift, and enter state 94
	'if'           shift, and enter state 95
	'let'          shift, and enter state 96
	'with'         shift, and enter state 97
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 98

	Var            goto state 43
	Lambda         goto state 44
	BasisState     goto state 45
	Gate           goto state 46
	Tuple          goto state 47
	Term1          goto state 48
	Term2          goto state 49
	Term3          goto state 50
	Term           goto state 169
	LetVariable    goto state 52

State 168

	Term1 -> Lambda FunctionType '.' Term .             (rule 80)

	')'            reduce using rule 80
	','            reduce using rule 80
	'->'           reduce using rule 80
	';'            reduce using rule 80
	']'            reduce using rule 80
	'else'         reduce using rule 80
	'of'           reduce using rule 80
	'then'         reduce using rule 80
	'}'            reduce using rule 80


State 169

	Term1 -> LetVariable '<-' Term ';' Term .           (rule 77)

	')'            reduce using rule 77
	','            reduce using rule 77
	'->'           reduce using rule 77
	';'            reduce using rule 77
	']'            reduce using rule 77
	'else'         reduce using rule 77
	'of'           reduce using rule 77
	'then'         reduce using rule 77
	'}'            reduce using rule 77


State 170

	ListLetVariable -> LetVariable ',' ListLetVariable .    (rule 100)

	')'            reduce using rule 100
	'<-'           reduce using rule 100


State 171

	Term1 -> LetVariable ',' ListLetVariable '<-' Term . ';' Term    (rule 78)

	';'            shift, and enter state 200


State 172

	ListTerm -> Term ',' . ListTerm                     (rule 73)

	'('            shift, and enter state 53
	'()'           shift, and enter state 54
	'@+'           shift, and enter state 55
	'@+i'          shift, and enter state 56
	'@-'           shift, and enter state 57
	'@-i'          shift, and enter state 58
	'@0'           shift, and enter state 59
	'@1'           shift, and enter state 60
	'FSWAP'        shift, and enter state 61
	'H'            shift, and enter state 62
	'ID'           shift, and enter state 63
	'ISWAP'        shift, and enter state 64
	'ROOT_SWAP'    shift, and enter state 65
	'ROOT_SWAP_DAG'shift, and enter state 66
	'ROOT_X'       shift, and enter state 67
	'ROOT_X_DAG'   shift, and enter state 68
	'ROOT_Y'       shift, and enter state 69
	'ROOT_Y_DAG'   shift, and enter state 70
	'ROOT_Z'       shift, and enter state 71
	'ROOT_Z_DAG'   shift, and enter state 72
	'RX'           shift, and enter state 73
	'RY'           shift, and enter state 74
	'RZ'           shift, and enter state 75
	'S'            shift, and enter state 76
	'SQRT_SWAP'    shift, and enter state 77
	'SQRT_SWAP_DAG'shift, and enter state 78
	'SQRT_X'       shift, and enter state 79
	'SQRT_X_DAG'   shift, and enter state 80
	'SQRT_Y'       shift, and enter state 81
	'SQRT_Y_DAG'   shift, and enter state 82
	'SWAP'         shift, and enter state 83
	'SWAP_THETA'   shift, and enter state 84
	'S_DAG'        shift, and enter state 85
	'T'            shift, and enter state 86
	'T_DAG'        shift, and enter state 87
	'U1'           shift, and enter state 88
	'U2'           shift, and enter state 89
	'U3'           shift, and enter state 90
	'X'            shift, and enter state 91
	'Y'            shift, and enter state 92
	'Z'            shift, and enter state 93
	'case'         shift, and enter state 94
	'if'           shift, and enter state 95
	'let'          shift, and enter state 96
	'with'         shift, and enter state 97
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 98

	Var            goto state 43
	Lambda         goto state 44
	BasisState     goto state 45
	Gate           goto state 46
	Tuple          goto state 47
	ListTerm       goto state 199
	Term1          goto state 48
	Term2          goto state 49
	Term3          goto state 50
	Term           goto state 164
	LetVariable    goto state 52

State 173

	Tuple -> '(' Term ',' ListTerm ')' .                (rule 69)

	'$'            reduce using rule 69
	'('            reduce using rule 69
	'()'           reduce using rule 69
	')'            reduce using rule 69
	','            reduce using rule 69
	'->'           reduce using rule 69
	'.'            reduce using rule 69
	';'            reduce using rule 69
	'@+'           reduce using rule 69
	'@+i'          reduce using rule 69
	'@-'           reduce using rule 69
	'@-i'          reduce using rule 69
	'@0'           reduce using rule 69
	'@1'           reduce using rule 69
	'FSWAP'        reduce using rule 69
	'H'            reduce using rule 69
	'ID'           reduce using rule 69
	'ISWAP'        reduce using rule 69
	'ROOT_SWAP'    reduce using rule 69
	'ROOT_SWAP_DAG'reduce using rule 69
	'ROOT_X'       reduce using rule 69
	'ROOT_X_DAG'   reduce using rule 69
	'ROOT_Y'       reduce using rule 69
	'ROOT_Y_DAG'   reduce using rule 69
	'ROOT_Z'       reduce using rule 69
	'ROOT_Z_DAG'   reduce using rule 69
	'RX'           reduce using rule 69
	'RY'           reduce using rule 69
	'RZ'           reduce using rule 69
	'S'            reduce using rule 69
	'SQRT_SWAP'    reduce using rule 69
	'SQRT_SWAP_DAG'reduce using rule 69
	'SQRT_X'       reduce using rule 69
	'SQRT_X_DAG'   reduce using rule 69
	'SQRT_Y'       reduce using rule 69
	'SQRT_Y_DAG'   reduce using rule 69
	'SWAP'         reduce using rule 69
	'SWAP_THETA'   reduce using rule 69
	'S_DAG'        reduce using rule 69
	'T'            reduce using rule 69
	'T_DAG'        reduce using rule 69
	'U1'           reduce using rule 69
	'U2'           reduce using rule 69
	'U3'           reduce using rule 69
	'X'            reduce using rule 69
	'Y'            reduce using rule 69
	'Z'            reduce using rule 69
	']'            reduce using rule 69
	'else'         reduce using rule 69
	'of'           reduce using rule 69
	'then'         reduce using rule 69
	'}'            reduce using rule 69
	L_Var          reduce using rule 69


State 174

	Gate -> 'U2' '(' Angle ',' Angle . ')'              (rule 51)

	')'            shift, and enter state 198


State 175

	Gate -> 'U3' '(' Angle ',' Angle . ',' Angle ')'    (rule 52)

	','            shift, and enter state 197


State 176

	ListCaseExpression -> CaseExpression .              (rule 102)
	ListCaseExpression -> CaseExpression . ListCaseExpression    (rule 103)

	'('            shift, and enter state 53
	'()'           shift, and enter state 54
	')'            reduce using rule 102
	','            reduce using rule 102
	'->'           reduce using rule 102
	';'            reduce using rule 102
	'@+'           shift, and enter state 55
	'@+i'          shift, and enter state 56
	'@-'           shift, and enter state 57
	'@-i'          shift, and enter state 58
	'@0'           shift, and enter state 59
	'@1'           shift, and enter state 60
	'FSWAP'        shift, and enter state 61
	'H'            shift, and enter state 62
	'ID'           shift, and enter state 63
	'ISWAP'        shift, and enter state 64
	'ROOT_SWAP'    shift, and enter state 65
	'ROOT_SWAP_DAG'shift, and enter state 66
	'ROOT_X'       shift, and enter state 67
	'ROOT_X_DAG'   shift, and enter state 68
	'ROOT_Y'       shift, and enter state 69
	'ROOT_Y_DAG'   shift, and enter state 70
	'ROOT_Z'       shift, and enter state 71
	'ROOT_Z_DAG'   shift, and enter state 72
	'RX'           shift, and enter state 73
	'RY'           shift, and enter state 74
	'RZ'           shift, and enter state 75
	'S'            shift, and enter state 76
	'SQRT_SWAP'    shift, and enter state 77
	'SQRT_SWAP_DAG'shift, and enter state 78
	'SQRT_X'       shift, and enter state 79
	'SQRT_X_DAG'   shift, and enter state 80
	'SQRT_Y'       shift, and enter state 81
	'SQRT_Y_DAG'   shift, and enter state 82
	'SWAP'         shift, and enter state 83
	'SWAP_THETA'   shift, and enter state 84
	'S_DAG'        shift, and enter state 85
	'T'            shift, and enter state 86
	'T_DAG'        shift, and enter state 87
	'U1'           shift, and enter state 88
	'U2'           shift, and enter state 89
	'U3'           shift, and enter state 90
	'X'            shift, and enter state 91
	'Y'            shift, and enter state 92
	'Z'            shift, and enter state 93
	']'            reduce using rule 102
	'case'         shift, and enter state 94
	'else'         reduce using rule 102
	'if'           shift, and enter state 95
	'let'          shift, and enter state 96
	'of'           reduce using rule 102
	'then'         reduce using rule 102
	'with'         shift, and enter state 97
	'}'            reduce using rule 102
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 98

	Var            goto state 43
	Lambda         goto state 44
	BasisState     goto state 45
	Gate           goto state 46
	Tuple          goto state 47
	Term1          goto state 48
	Term2          goto state 49
	Term3          goto state 50
	Term           goto state 159
	LetVariable    goto state 52
	CaseExpression goto state 176
	ListCaseExpressiongoto state 196

State 177

	Term1 -> 'case' Term 'of' CaseExpression ListCaseExpression .    (rule 79)

	')'            reduce using rule 79
	','            reduce using rule 79
	'->'           reduce using rule 79
	';'            reduce using rule 79
	']'            reduce using rule 79
	'else'         reduce using rule 79
	'of'           reduce using rule 79
	'then'         reduce using rule 79
	'}'            reduce using rule 79


State 178

	CaseExpression -> Term '->' . Var                   (rule 101)

	L_Var          shift, and enter state 8

	Var            goto state 195

State 179

	Term1 -> 'if' Term 'then' Term 'else' . Term        (rule 74)

	'('            shift, and enter state 53
	'()'           shift, and enter state 54
	'@+'           shift, and enter state 55
	'@+i'          shift, and enter state 56
	'@-'           shift, and enter state 57
	'@-i'          shift, and enter state 58
	'@0'           shift, and enter state 59
	'@1'           shift, and enter state 60
	'FSWAP'        shift, and enter state 61
	'H'            shift, and enter state 62
	'ID'           shift, and enter state 63
	'ISWAP'        shift, and enter state 64
	'ROOT_SWAP'    shift, and enter state 65
	'ROOT_SWAP_DAG'shift, and enter state 66
	'ROOT_X'       shift, and enter state 67
	'ROOT_X_DAG'   shift, and enter state 68
	'ROOT_Y'       shift, and enter state 69
	'ROOT_Y_DAG'   shift, and enter state 70
	'ROOT_Z'       shift, and enter state 71
	'ROOT_Z_DAG'   shift, and enter state 72
	'RX'           shift, and enter state 73
	'RY'           shift, and enter state 74
	'RZ'           shift, and enter state 75
	'S'            shift, and enter state 76
	'SQRT_SWAP'    shift, and enter state 77
	'SQRT_SWAP_DAG'shift, and enter state 78
	'SQRT_X'       shift, and enter state 79
	'SQRT_X_DAG'   shift, and enter state 80
	'SQRT_Y'       shift, and enter state 81
	'SQRT_Y_DAG'   shift, and enter state 82
	'SWAP'         shift, and enter state 83
	'SWAP_THETA'   shift, and enter state 84
	'S_DAG'        shift, and enter state 85
	'T'            shift, and enter state 86
	'T_DAG'        shift, and enter state 87
	'U1'           shift, and enter state 88
	'U2'           shift, and enter state 89
	'U3'           shift, and enter state 90
	'X'            shift, and enter state 91
	'Y'            shift, and enter state 92
	'Z'            shift, and enter state 93
	'case'         shift, and enter state 94
	'if'           shift, and enter state 95
	'let'          shift, and enter state 96
	'with'         shift, and enter state 97
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 98

	Var            goto state 43
	Lambda         goto state 44
	BasisState     goto state 45
	Gate           goto state 46
	Tuple          goto state 47
	Term1          goto state 48
	Term2          goto state 49
	Term3          goto state 50
	Term           goto state 194
	LetVariable    goto state 52

State 180

	Term1 -> 'let' '{' LetVariable '=' Term . '}' 'in' Term    (rule 75)

	'}'            shift, and enter state 193


State 181

	Term1 -> 'let' '{' '(' LetVariable ',' . ListLetVariable ')' '=' Term '}' 'in' Term    (rule 76)

	')'            reduce using rule 98
	L_Var          shift, and enter state 8

	Var            goto state 134
	LetVariable    goto state 135
	ListLetVariablegoto state 192

State 182

	ControlTerms -> '[' Term ',' ListTerm . ']'         (rule 71)

	']'            shift, and enter state 191


State 183

	ControlBits -> '[' Integer . ',' ListInteger ']'    (rule 66)

	','            shift, and enter state 190


State 184

	ControlBasisStates -> '[' BasisState . ',' ListBasisState ']'    (rule 62)

	','            shift, and enter state 189


State 185

	ControlBit -> '[' Integer . ']'                     (rule 65)

	']'            shift, and enter state 188


State 186

	ControlBasisState -> '[' BasisState . ']'           (rule 61)

	']'            shift, and enter state 187


State 187

	ControlBasisState -> '[' BasisState ']' .           (rule 61)

	'$'            reduce using rule 61
	'('            reduce using rule 61
	'()'           reduce using rule 61
	')'            reduce using rule 61
	','            reduce using rule 61
	'->'           reduce using rule 61
	'.'            reduce using rule 61
	';'            reduce using rule 61
	'@+'           reduce using rule 61
	'@+i'          reduce using rule 61
	'@-'           reduce using rule 61
	'@-i'          reduce using rule 61
	'@0'           reduce using rule 61
	'@1'           reduce using rule 61
	'FSWAP'        reduce using rule 61
	'H'            reduce using rule 61
	'ID'           reduce using rule 61
	'ISWAP'        reduce using rule 61
	'ROOT_SWAP'    reduce using rule 61
	'ROOT_SWAP_DAG'reduce using rule 61
	'ROOT_X'       reduce using rule 61
	'ROOT_X_DAG'   reduce using rule 61
	'ROOT_Y'       reduce using rule 61
	'ROOT_Y_DAG'   reduce using rule 61
	'ROOT_Z'       reduce using rule 61
	'ROOT_Z_DAG'   reduce using rule 61
	'RX'           reduce using rule 61
	'RY'           reduce using rule 61
	'RZ'           reduce using rule 61
	'S'            reduce using rule 61
	'SQRT_SWAP'    reduce using rule 61
	'SQRT_SWAP_DAG'reduce using rule 61
	'SQRT_X'       reduce using rule 61
	'SQRT_X_DAG'   reduce using rule 61
	'SQRT_Y'       reduce using rule 61
	'SQRT_Y_DAG'   reduce using rule 61
	'SWAP'         reduce using rule 61
	'SWAP_THETA'   reduce using rule 61
	'S_DAG'        reduce using rule 61
	'T'            reduce using rule 61
	'T_DAG'        reduce using rule 61
	'U1'           reduce using rule 61
	'U2'           reduce using rule 61
	'U3'           reduce using rule 61
	'X'            reduce using rule 61
	'Y'            reduce using rule 61
	'Z'            reduce using rule 61
	']'            reduce using rule 61
	'else'         reduce using rule 61
	'of'           reduce using rule 61
	'then'         reduce using rule 61
	'}'            reduce using rule 61
	L_Var          reduce using rule 61


State 188

	ControlBit -> '[' Integer ']' .                     (rule 65)

	'$'            reduce using rule 65
	'('            reduce using rule 65
	'()'           reduce using rule 65
	')'            reduce using rule 65
	','            reduce using rule 65
	'->'           reduce using rule 65
	'.'            reduce using rule 65
	';'            reduce using rule 65
	'@+'           reduce using rule 65
	'@+i'          reduce using rule 65
	'@-'           reduce using rule 65
	'@-i'          reduce using rule 65
	'@0'           reduce using rule 65
	'@1'           reduce using rule 65
	'FSWAP'        reduce using rule 65
	'H'            reduce using rule 65
	'ID'           reduce using rule 65
	'ISWAP'        reduce using rule 65
	'ROOT_SWAP'    reduce using rule 65
	'ROOT_SWAP_DAG'reduce using rule 65
	'ROOT_X'       reduce using rule 65
	'ROOT_X_DAG'   reduce using rule 65
	'ROOT_Y'       reduce using rule 65
	'ROOT_Y_DAG'   reduce using rule 65
	'ROOT_Z'       reduce using rule 65
	'ROOT_Z_DAG'   reduce using rule 65
	'RX'           reduce using rule 65
	'RY'           reduce using rule 65
	'RZ'           reduce using rule 65
	'S'            reduce using rule 65
	'SQRT_SWAP'    reduce using rule 65
	'SQRT_SWAP_DAG'reduce using rule 65
	'SQRT_X'       reduce using rule 65
	'SQRT_X_DAG'   reduce using rule 65
	'SQRT_Y'       reduce using rule 65
	'SQRT_Y_DAG'   reduce using rule 65
	'SWAP'         reduce using rule 65
	'SWAP_THETA'   reduce using rule 65
	'S_DAG'        reduce using rule 65
	'T'            reduce using rule 65
	'T_DAG'        reduce using rule 65
	'U1'           reduce using rule 65
	'U2'           reduce using rule 65
	'U3'           reduce using rule 65
	'X'            reduce using rule 65
	'Y'            reduce using rule 65
	'Z'            reduce using rule 65
	']'            reduce using rule 65
	'else'         reduce using rule 65
	'of'           reduce using rule 65
	'then'         reduce using rule 65
	'}'            reduce using rule 65
	L_Var          reduce using rule 65


State 189

	ControlBasisStates -> '[' BasisState ',' . ListBasisState ']'    (rule 62)

	'@+'           shift, and enter state 55
	'@+i'          shift, and enter state 56
	'@-'           shift, and enter state 57
	'@-i'          shift, and enter state 58
	'@0'           shift, and enter state 59
	'@1'           shift, and enter state 60

	BasisState     goto state 207
	ListBasisState goto state 208

State 190

	ControlBits -> '[' Integer ',' . ListInteger ']'    (rule 66)

	L_integ        shift, and enter state 36

	Integer        goto state 205
	ListInteger    goto state 206

State 191

	ControlTerms -> '[' Term ',' ListTerm ']' .         (rule 71)

	'ctrl'         reduce using rule 71


State 192

	Term1 -> 'let' '{' '(' LetVariable ',' ListLetVariable . ')' '=' Term '}' 'in' Term    (rule 76)

	')'            shift, and enter state 204


State 193

	Term1 -> 'let' '{' LetVariable '=' Term '}' . 'in' Term    (rule 75)

	'in'           shift, and enter state 203


State 194

	Term1 -> 'if' Term 'then' Term 'else' Term .        (rule 74)

	')'            reduce using rule 74
	','            reduce using rule 74
	'->'           reduce using rule 74
	';'            reduce using rule 74
	']'            reduce using rule 74
	'else'         reduce using rule 74
	'of'           reduce using rule 74
	'then'         reduce using rule 74
	'}'            reduce using rule 74


State 195

	CaseExpression -> Term '->' Var .                   (rule 101)

	'('            reduce using rule 101
	'()'           reduce using rule 101
	')'            reduce using rule 101
	','            reduce using rule 101
	'->'           reduce using rule 101
	';'            reduce using rule 101
	'@+'           reduce using rule 101
	'@+i'          reduce using rule 101
	'@-'           reduce using rule 101
	'@-i'          reduce using rule 101
	'@0'           reduce using rule 101
	'@1'           reduce using rule 101
	'FSWAP'        reduce using rule 101
	'H'            reduce using rule 101
	'ID'           reduce using rule 101
	'ISWAP'        reduce using rule 101
	'ROOT_SWAP'    reduce using rule 101
	'ROOT_SWAP_DAG'reduce using rule 101
	'ROOT_X'       reduce using rule 101
	'ROOT_X_DAG'   reduce using rule 101
	'ROOT_Y'       reduce using rule 101
	'ROOT_Y_DAG'   reduce using rule 101
	'ROOT_Z'       reduce using rule 101
	'ROOT_Z_DAG'   reduce using rule 101
	'RX'           reduce using rule 101
	'RY'           reduce using rule 101
	'RZ'           reduce using rule 101
	'S'            reduce using rule 101
	'SQRT_SWAP'    reduce using rule 101
	'SQRT_SWAP_DAG'reduce using rule 101
	'SQRT_X'       reduce using rule 101
	'SQRT_X_DAG'   reduce using rule 101
	'SQRT_Y'       reduce using rule 101
	'SQRT_Y_DAG'   reduce using rule 101
	'SWAP'         reduce using rule 101
	'SWAP_THETA'   reduce using rule 101
	'S_DAG'        reduce using rule 101
	'T'            reduce using rule 101
	'T_DAG'        reduce using rule 101
	'U1'           reduce using rule 101
	'U2'           reduce using rule 101
	'U3'           reduce using rule 101
	'X'            reduce using rule 101
	'Y'            reduce using rule 101
	'Z'            reduce using rule 101
	']'            reduce using rule 101
	'case'         reduce using rule 101
	'else'         reduce using rule 101
	'if'           reduce using rule 101
	'let'          reduce using rule 101
	'of'           reduce using rule 101
	'then'         reduce using rule 101
	'with'         reduce using rule 101
	'}'            reduce using rule 101
	L_Var          reduce using rule 101
	L_Lambda       reduce using rule 101


State 196

	ListCaseExpression -> CaseExpression ListCaseExpression .    (rule 103)

	')'            reduce using rule 103
	','            reduce using rule 103
	'->'           reduce using rule 103
	';'            reduce using rule 103
	']'            reduce using rule 103
	'else'         reduce using rule 103
	'of'           reduce using rule 103
	'then'         reduce using rule 103
	'}'            reduce using rule 103


State 197

	Gate -> 'U3' '(' Angle ',' Angle ',' . Angle ')'    (rule 52)

	L_doubl        shift, and enter state 2

	Double         goto state 107
	Angle          goto state 202

State 198

	Gate -> 'U2' '(' Angle ',' Angle ')' .              (rule 51)

	'$'            reduce using rule 51
	'('            reduce using rule 51
	'()'           reduce using rule 51
	')'            reduce using rule 51
	','            reduce using rule 51
	'->'           reduce using rule 51
	'.'            reduce using rule 51
	';'            reduce using rule 51
	'@+'           reduce using rule 51
	'@+i'          reduce using rule 51
	'@-'           reduce using rule 51
	'@-i'          reduce using rule 51
	'@0'           reduce using rule 51
	'@1'           reduce using rule 51
	'FSWAP'        reduce using rule 51
	'H'            reduce using rule 51
	'ID'           reduce using rule 51
	'ISWAP'        reduce using rule 51
	'ROOT_SWAP'    reduce using rule 51
	'ROOT_SWAP_DAG'reduce using rule 51
	'ROOT_X'       reduce using rule 51
	'ROOT_X_DAG'   reduce using rule 51
	'ROOT_Y'       reduce using rule 51
	'ROOT_Y_DAG'   reduce using rule 51
	'ROOT_Z'       reduce using rule 51
	'ROOT_Z_DAG'   reduce using rule 51
	'RX'           reduce using rule 51
	'RY'           reduce using rule 51
	'RZ'           reduce using rule 51
	'S'            reduce using rule 51
	'SQRT_SWAP'    reduce using rule 51
	'SQRT_SWAP_DAG'reduce using rule 51
	'SQRT_X'       reduce using rule 51
	'SQRT_X_DAG'   reduce using rule 51
	'SQRT_Y'       reduce using rule 51
	'SQRT_Y_DAG'   reduce using rule 51
	'SWAP'         reduce using rule 51
	'SWAP_THETA'   reduce using rule 51
	'S_DAG'        reduce using rule 51
	'T'            reduce using rule 51
	'T_DAG'        reduce using rule 51
	'U1'           reduce using rule 51
	'U2'           reduce using rule 51
	'U3'           reduce using rule 51
	'X'            reduce using rule 51
	'Y'            reduce using rule 51
	'Z'            reduce using rule 51
	']'            reduce using rule 51
	'else'         reduce using rule 51
	'of'           reduce using rule 51
	'then'         reduce using rule 51
	'}'            reduce using rule 51
	L_Var          reduce using rule 51


State 199

	ListTerm -> Term ',' ListTerm .                     (rule 73)

	')'            reduce using rule 73
	']'            reduce using rule 73


State 200

	Term1 -> LetVariable ',' ListLetVariable '<-' Term ';' . Term    (rule 78)

	'('            shift, and enter state 53
	'()'           shift, and enter state 54
	'@+'           shift, and enter state 55
	'@+i'          shift, and enter state 56
	'@-'           shift, and enter state 57
	'@-i'          shift, and enter state 58
	'@0'           shift, and enter state 59
	'@1'           shift, and enter state 60
	'FSWAP'        shift, and enter state 61
	'H'            shift, and enter state 62
	'ID'           shift, and enter state 63
	'ISWAP'        shift, and enter state 64
	'ROOT_SWAP'    shift, and enter state 65
	'ROOT_SWAP_DAG'shift, and enter state 66
	'ROOT_X'       shift, and enter state 67
	'ROOT_X_DAG'   shift, and enter state 68
	'ROOT_Y'       shift, and enter state 69
	'ROOT_Y_DAG'   shift, and enter state 70
	'ROOT_Z'       shift, and enter state 71
	'ROOT_Z_DAG'   shift, and enter state 72
	'RX'           shift, and enter state 73
	'RY'           shift, and enter state 74
	'RZ'           shift, and enter state 75
	'S'            shift, and enter state 76
	'SQRT_SWAP'    shift, and enter state 77
	'SQRT_SWAP_DAG'shift, and enter state 78
	'SQRT_X'       shift, and enter state 79
	'SQRT_X_DAG'   shift, and enter state 80
	'SQRT_Y'       shift, and enter state 81
	'SQRT_Y_DAG'   shift, and enter state 82
	'SWAP'         shift, and enter state 83
	'SWAP_THETA'   shift, and enter state 84
	'S_DAG'        shift, and enter state 85
	'T'            shift, and enter state 86
	'T_DAG'        shift, and enter state 87
	'U1'           shift, and enter state 88
	'U2'           shift, and enter state 89
	'U3'           shift, and enter state 90
	'X'            shift, and enter state 91
	'Y'            shift, and enter state 92
	'Z'            shift, and enter state 93
	'case'         shift, and enter state 94
	'if'           shift, and enter state 95
	'let'          shift, and enter state 96
	'with'         shift, and enter state 97
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 98

	Var            goto state 43
	Lambda         goto state 44
	BasisState     goto state 45
	Gate           goto state 46
	Tuple          goto state 47
	Term1          goto state 48
	Term2          goto state 49
	Term3          goto state 50
	Term           goto state 201
	LetVariable    goto state 52

State 201

	Term1 -> LetVariable ',' ListLetVariable '<-' Term ';' Term .    (rule 78)

	')'            reduce using rule 78
	','            reduce using rule 78
	'->'           reduce using rule 78
	';'            reduce using rule 78
	']'            reduce using rule 78
	'else'         reduce using rule 78
	'of'           reduce using rule 78
	'then'         reduce using rule 78
	'}'            reduce using rule 78


State 202

	Gate -> 'U3' '(' Angle ',' Angle ',' Angle . ')'    (rule 52)

	')'            shift, and enter state 215


State 203

	Term1 -> 'let' '{' LetVariable '=' Term '}' 'in' . Term    (rule 75)

	'('            shift, and enter state 53
	'()'           shift, and enter state 54
	'@+'           shift, and enter state 55
	'@+i'          shift, and enter state 56
	'@-'           shift, and enter state 57
	'@-i'          shift, and enter state 58
	'@0'           shift, and enter state 59
	'@1'           shift, and enter state 60
	'FSWAP'        shift, and enter state 61
	'H'            shift, and enter state 62
	'ID'           shift, and enter state 63
	'ISWAP'        shift, and enter state 64
	'ROOT_SWAP'    shift, and enter state 65
	'ROOT_SWAP_DAG'shift, and enter state 66
	'ROOT_X'       shift, and enter state 67
	'ROOT_X_DAG'   shift, and enter state 68
	'ROOT_Y'       shift, and enter state 69
	'ROOT_Y_DAG'   shift, and enter state 70
	'ROOT_Z'       shift, and enter state 71
	'ROOT_Z_DAG'   shift, and enter state 72
	'RX'           shift, and enter state 73
	'RY'           shift, and enter state 74
	'RZ'           shift, and enter state 75
	'S'            shift, and enter state 76
	'SQRT_SWAP'    shift, and enter state 77
	'SQRT_SWAP_DAG'shift, and enter state 78
	'SQRT_X'       shift, and enter state 79
	'SQRT_X_DAG'   shift, and enter state 80
	'SQRT_Y'       shift, and enter state 81
	'SQRT_Y_DAG'   shift, and enter state 82
	'SWAP'         shift, and enter state 83
	'SWAP_THETA'   shift, and enter state 84
	'S_DAG'        shift, and enter state 85
	'T'            shift, and enter state 86
	'T_DAG'        shift, and enter state 87
	'U1'           shift, and enter state 88
	'U2'           shift, and enter state 89
	'U3'           shift, and enter state 90
	'X'            shift, and enter state 91
	'Y'            shift, and enter state 92
	'Z'            shift, and enter state 93
	'case'         shift, and enter state 94
	'if'           shift, and enter state 95
	'let'          shift, and enter state 96
	'with'         shift, and enter state 97
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 98

	Var            goto state 43
	Lambda         goto state 44
	BasisState     goto state 45
	Gate           goto state 46
	Tuple          goto state 47
	Term1          goto state 48
	Term2          goto state 49
	Term3          goto state 50
	Term           goto state 214
	LetVariable    goto state 52

State 204

	Term1 -> 'let' '{' '(' LetVariable ',' ListLetVariable ')' . '=' Term '}' 'in' Term    (rule 76)

	'='            shift, and enter state 213


State 205

	ListInteger -> Integer .                            (rule 67)
	ListInteger -> Integer . ',' ListInteger            (rule 68)

	','            shift, and enter state 212
	']'            reduce using rule 67


State 206

	ControlBits -> '[' Integer ',' ListInteger . ']'    (rule 66)

	']'            shift, and enter state 211


State 207

	ListBasisState -> BasisState .                      (rule 63)
	ListBasisState -> BasisState . ',' ListBasisState    (rule 64)

	','            shift, and enter state 210
	']'            reduce using rule 63


State 208

	ControlBasisStates -> '[' BasisState ',' ListBasisState . ']'    (rule 62)

	']'            shift, and enter state 209


State 209

	ControlBasisStates -> '[' BasisState ',' ListBasisState ']' .    (rule 62)

	'$'            reduce using rule 62
	'('            reduce using rule 62
	'()'           reduce using rule 62
	')'            reduce using rule 62
	','            reduce using rule 62
	'->'           reduce using rule 62
	'.'            reduce using rule 62
	';'            reduce using rule 62
	'@+'           reduce using rule 62
	'@+i'          reduce using rule 62
	'@-'           reduce using rule 62
	'@-i'          reduce using rule 62
	'@0'           reduce using rule 62
	'@1'           reduce using rule 62
	'FSWAP'        reduce using rule 62
	'H'            reduce using rule 62
	'ID'           reduce using rule 62
	'ISWAP'        reduce using rule 62
	'ROOT_SWAP'    reduce using rule 62
	'ROOT_SWAP_DAG'reduce using rule 62
	'ROOT_X'       reduce using rule 62
	'ROOT_X_DAG'   reduce using rule 62
	'ROOT_Y'       reduce using rule 62
	'ROOT_Y_DAG'   reduce using rule 62
	'ROOT_Z'       reduce using rule 62
	'ROOT_Z_DAG'   reduce using rule 62
	'RX'           reduce using rule 62
	'RY'           reduce using rule 62
	'RZ'           reduce using rule 62
	'S'            reduce using rule 62
	'SQRT_SWAP'    reduce using rule 62
	'SQRT_SWAP_DAG'reduce using rule 62
	'SQRT_X'       reduce using rule 62
	'SQRT_X_DAG'   reduce using rule 62
	'SQRT_Y'       reduce using rule 62
	'SQRT_Y_DAG'   reduce using rule 62
	'SWAP'         reduce using rule 62
	'SWAP_THETA'   reduce using rule 62
	'S_DAG'        reduce using rule 62
	'T'            reduce using rule 62
	'T_DAG'        reduce using rule 62
	'U1'           reduce using rule 62
	'U2'           reduce using rule 62
	'U3'           reduce using rule 62
	'X'            reduce using rule 62
	'Y'            reduce using rule 62
	'Z'            reduce using rule 62
	']'            reduce using rule 62
	'else'         reduce using rule 62
	'of'           reduce using rule 62
	'then'         reduce using rule 62
	'}'            reduce using rule 62
	L_Var          reduce using rule 62


State 210

	ListBasisState -> BasisState ',' . ListBasisState    (rule 64)

	'@+'           shift, and enter state 55
	'@+i'          shift, and enter state 56
	'@-'           shift, and enter state 57
	'@-i'          shift, and enter state 58
	'@0'           shift, and enter state 59
	'@1'           shift, and enter state 60

	BasisState     goto state 207
	ListBasisState goto state 218

State 211

	ControlBits -> '[' Integer ',' ListInteger ']' .    (rule 66)

	'$'            reduce using rule 66
	'('            reduce using rule 66
	'()'           reduce using rule 66
	')'            reduce using rule 66
	','            reduce using rule 66
	'->'           reduce using rule 66
	'.'            reduce using rule 66
	';'            reduce using rule 66
	'@+'           reduce using rule 66
	'@+i'          reduce using rule 66
	'@-'           reduce using rule 66
	'@-i'          reduce using rule 66
	'@0'           reduce using rule 66
	'@1'           reduce using rule 66
	'FSWAP'        reduce using rule 66
	'H'            reduce using rule 66
	'ID'           reduce using rule 66
	'ISWAP'        reduce using rule 66
	'ROOT_SWAP'    reduce using rule 66
	'ROOT_SWAP_DAG'reduce using rule 66
	'ROOT_X'       reduce using rule 66
	'ROOT_X_DAG'   reduce using rule 66
	'ROOT_Y'       reduce using rule 66
	'ROOT_Y_DAG'   reduce using rule 66
	'ROOT_Z'       reduce using rule 66
	'ROOT_Z_DAG'   reduce using rule 66
	'RX'           reduce using rule 66
	'RY'           reduce using rule 66
	'RZ'           reduce using rule 66
	'S'            reduce using rule 66
	'SQRT_SWAP'    reduce using rule 66
	'SQRT_SWAP_DAG'reduce using rule 66
	'SQRT_X'       reduce using rule 66
	'SQRT_X_DAG'   reduce using rule 66
	'SQRT_Y'       reduce using rule 66
	'SQRT_Y_DAG'   reduce using rule 66
	'SWAP'         reduce using rule 66
	'SWAP_THETA'   reduce using rule 66
	'S_DAG'        reduce using rule 66
	'T'            reduce using rule 66
	'T_DAG'        reduce using rule 66
	'U1'           reduce using rule 66
	'U2'           reduce using rule 66
	'U3'           reduce using rule 66
	'X'            reduce using rule 66
	'Y'            reduce using rule 66
	'Z'            reduce using rule 66
	']'            reduce using rule 66
	'else'         reduce using rule 66
	'of'           reduce using rule 66
	'then'         reduce using rule 66
	'}'            reduce using rule 66
	L_Var          reduce using rule 66


State 212

	ListInteger -> Integer ',' . ListInteger            (rule 68)

	L_integ        shift, and enter state 36

	Integer        goto state 205
	ListInteger    goto state 217

State 213

	Term1 -> 'let' '{' '(' LetVariable ',' ListLetVariable ')' '=' . Term '}' 'in' Term    (rule 76)

	'('            shift, and enter state 53
	'()'           shift, and enter state 54
	'@+'           shift, and enter state 55
	'@+i'          shift, and enter state 56
	'@-'           shift, and enter state 57
	'@-i'          shift, and enter state 58
	'@0'           shift, and enter state 59
	'@1'           shift, and enter state 60
	'FSWAP'        shift, and enter state 61
	'H'            shift, and enter state 62
	'ID'           shift, and enter state 63
	'ISWAP'        shift, and enter state 64
	'ROOT_SWAP'    shift, and enter state 65
	'ROOT_SWAP_DAG'shift, and enter state 66
	'ROOT_X'       shift, and enter state 67
	'ROOT_X_DAG'   shift, and enter state 68
	'ROOT_Y'       shift, and enter state 69
	'ROOT_Y_DAG'   shift, and enter state 70
	'ROOT_Z'       shift, and enter state 71
	'ROOT_Z_DAG'   shift, and enter state 72
	'RX'           shift, and enter state 73
	'RY'           shift, and enter state 74
	'RZ'           shift, and enter state 75
	'S'            shift, and enter state 76
	'SQRT_SWAP'    shift, and enter state 77
	'SQRT_SWAP_DAG'shift, and enter state 78
	'SQRT_X'       shift, and enter state 79
	'SQRT_X_DAG'   shift, and enter state 80
	'SQRT_Y'       shift, and enter state 81
	'SQRT_Y_DAG'   shift, and enter state 82
	'SWAP'         shift, and enter state 83
	'SWAP_THETA'   shift, and enter state 84
	'S_DAG'        shift, and enter state 85
	'T'            shift, and enter state 86
	'T_DAG'        shift, and enter state 87
	'U1'           shift, and enter state 88
	'U2'           shift, and enter state 89
	'U3'           shift, and enter state 90
	'X'            shift, and enter state 91
	'Y'            shift, and enter state 92
	'Z'            shift, and enter state 93
	'case'         shift, and enter state 94
	'if'           shift, and enter state 95
	'let'          shift, and enter state 96
	'with'         shift, and enter state 97
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 98

	Var            goto state 43
	Lambda         goto state 44
	BasisState     goto state 45
	Gate           goto state 46
	Tuple          goto state 47
	Term1          goto state 48
	Term2          goto state 49
	Term3          goto state 50
	Term           goto state 216
	LetVariable    goto state 52

State 214

	Term1 -> 'let' '{' LetVariable '=' Term '}' 'in' Term .    (rule 75)

	')'            reduce using rule 75
	','            reduce using rule 75
	'->'           reduce using rule 75
	';'            reduce using rule 75
	']'            reduce using rule 75
	'else'         reduce using rule 75
	'of'           reduce using rule 75
	'then'         reduce using rule 75
	'}'            reduce using rule 75


State 215

	Gate -> 'U3' '(' Angle ',' Angle ',' Angle ')' .    (rule 52)

	'$'            reduce using rule 52
	'('            reduce using rule 52
	'()'           reduce using rule 52
	')'            reduce using rule 52
	','            reduce using rule 52
	'->'           reduce using rule 52
	'.'            reduce using rule 52
	';'            reduce using rule 52
	'@+'           reduce using rule 52
	'@+i'          reduce using rule 52
	'@-'           reduce using rule 52
	'@-i'          reduce using rule 52
	'@0'           reduce using rule 52
	'@1'           reduce using rule 52
	'FSWAP'        reduce using rule 52
	'H'            reduce using rule 52
	'ID'           reduce using rule 52
	'ISWAP'        reduce using rule 52
	'ROOT_SWAP'    reduce using rule 52
	'ROOT_SWAP_DAG'reduce using rule 52
	'ROOT_X'       reduce using rule 52
	'ROOT_X_DAG'   reduce using rule 52
	'ROOT_Y'       reduce using rule 52
	'ROOT_Y_DAG'   reduce using rule 52
	'ROOT_Z'       reduce using rule 52
	'ROOT_Z_DAG'   reduce using rule 52
	'RX'           reduce using rule 52
	'RY'           reduce using rule 52
	'RZ'           reduce using rule 52
	'S'            reduce using rule 52
	'SQRT_SWAP'    reduce using rule 52
	'SQRT_SWAP_DAG'reduce using rule 52
	'SQRT_X'       reduce using rule 52
	'SQRT_X_DAG'   reduce using rule 52
	'SQRT_Y'       reduce using rule 52
	'SQRT_Y_DAG'   reduce using rule 52
	'SWAP'         reduce using rule 52
	'SWAP_THETA'   reduce using rule 52
	'S_DAG'        reduce using rule 52
	'T'            reduce using rule 52
	'T_DAG'        reduce using rule 52
	'U1'           reduce using rule 52
	'U2'           reduce using rule 52
	'U3'           reduce using rule 52
	'X'            reduce using rule 52
	'Y'            reduce using rule 52
	'Z'            reduce using rule 52
	']'            reduce using rule 52
	'else'         reduce using rule 52
	'of'           reduce using rule 52
	'then'         reduce using rule 52
	'}'            reduce using rule 52
	L_Var          reduce using rule 52


State 216

	Term1 -> 'let' '{' '(' LetVariable ',' ListLetVariable ')' '=' Term . '}' 'in' Term    (rule 76)

	'}'            shift, and enter state 219


State 217

	ListInteger -> Integer ',' ListInteger .            (rule 68)

	']'            reduce using rule 68


State 218

	ListBasisState -> BasisState ',' ListBasisState .    (rule 64)

	']'            reduce using rule 64


State 219

	Term1 -> 'let' '{' '(' LetVariable ',' ListLetVariable ')' '=' Term '}' . 'in' Term    (rule 76)

	'in'           shift, and enter state 220


State 220

	Term1 -> 'let' '{' '(' LetVariable ',' ListLetVariable ')' '=' Term '}' 'in' . Term    (rule 76)

	'('            shift, and enter state 53
	'()'           shift, and enter state 54
	'@+'           shift, and enter state 55
	'@+i'          shift, and enter state 56
	'@-'           shift, and enter state 57
	'@-i'          shift, and enter state 58
	'@0'           shift, and enter state 59
	'@1'           shift, and enter state 60
	'FSWAP'        shift, and enter state 61
	'H'            shift, and enter state 62
	'ID'           shift, and enter state 63
	'ISWAP'        shift, and enter state 64
	'ROOT_SWAP'    shift, and enter state 65
	'ROOT_SWAP_DAG'shift, and enter state 66
	'ROOT_X'       shift, and enter state 67
	'ROOT_X_DAG'   shift, and enter state 68
	'ROOT_Y'       shift, and enter state 69
	'ROOT_Y_DAG'   shift, and enter state 70
	'ROOT_Z'       shift, and enter state 71
	'ROOT_Z_DAG'   shift, and enter state 72
	'RX'           shift, and enter state 73
	'RY'           shift, and enter state 74
	'RZ'           shift, and enter state 75
	'S'            shift, and enter state 76
	'SQRT_SWAP'    shift, and enter state 77
	'SQRT_SWAP_DAG'shift, and enter state 78
	'SQRT_X'       shift, and enter state 79
	'SQRT_X_DAG'   shift, and enter state 80
	'SQRT_Y'       shift, and enter state 81
	'SQRT_Y_DAG'   shift, and enter state 82
	'SWAP'         shift, and enter state 83
	'SWAP_THETA'   shift, and enter state 84
	'S_DAG'        shift, and enter state 85
	'T'            shift, and enter state 86
	'T_DAG'        shift, and enter state 87
	'U1'           shift, and enter state 88
	'U2'           shift, and enter state 89
	'U3'           shift, and enter state 90
	'X'            shift, and enter state 91
	'Y'            shift, and enter state 92
	'Z'            shift, and enter state 93
	'case'         shift, and enter state 94
	'if'           shift, and enter state 95
	'let'          shift, and enter state 96
	'with'         shift, and enter state 97
	L_Var          shift, and enter state 8
	L_Lambda       shift, and enter state 98

	Var            goto state 43
	Lambda         goto state 44
	BasisState     goto state 45
	Gate           goto state 46
	Tuple          goto state 47
	Term1          goto state 48
	Term2          goto state 49
	Term3          goto state 50
	Term           goto state 221
	LetVariable    goto state 52

State 221

	Term1 -> 'let' '{' '(' LetVariable ',' ListLetVariable ')' '=' Term '}' 'in' Term .    (rule 76)

	')'            reduce using rule 76
	','            reduce using rule 76
	'->'           reduce using rule 76
	';'            reduce using rule 76
	']'            reduce using rule 76
	'else'         reduce using rule 76
	'of'           reduce using rule 76
	'then'         reduce using rule 76
	'}'            reduce using rule 76


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 114
Number of terminals: 75
Number of non-terminals: 38
Number of states: 222
