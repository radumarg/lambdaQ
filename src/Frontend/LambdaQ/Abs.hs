-- File generated by the BNF Converter (bnfc 2.9.4.1).

{-# LANGUAGE GeneralizedNewtypeDeriving #-}
{-# LANGUAGE PatternSynonyms #-}

-- | The abstract syntax of language LambdaQ.

module Frontend.LambdaQ.Abs where

import Prelude (Double, Integer, String)
import qualified Prelude as C
  ( Eq, Ord, Show, Read
  , Int, Maybe(..)
  )
import qualified Data.String

data Program = ProgDef [FunctionDeclaration]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Type
    = TypeBit
    | TypeQbit
    | TypeUnit
    | TypeNonLin Type
    | TypeExp Type Integer
    | TypeTensr Type Type
    | TypeFunc Type Type
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Angle = AAngl Double
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data ControlState
    = CStateZero
    | CStateOne
    | CStatePlus
    | CStateMinus
    | CStatePlusI
    | CStateMinusI
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Control = CCtrl ControlState Term
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Gate
    = GateH
    | GateHC [Control]
    | GateX
    | GateXC [Control]
    | GateY
    | GateYC [Control]
    | GateZ
    | GateZC [Control]
    | GateI
    | GateXRt Integer
    | GateXRtC Integer [Control]
    | GateXRtDag Integer
    | GateXRtDagC Integer [Control]
    | GateYRt Integer
    | GateYRtC Integer [Control]
    | GateYRtDag Integer
    | GateYRtDagC Integer [Control]
    | GateZRt Integer
    | GateZRtC Integer [Control]
    | GateZRtDag Integer
    | GateZRtDagC Integer [Control]
    | GateS
    | GateSC [Control]
    | GateSDag
    | GateSDagC [Control]
    | GateT
    | GateTC [Control]
    | GateTDag
    | GateTDagC [Control]
    | GateSqrtX
    | GateSqrtXC [Control]
    | GateSqrtXDag
    | GateSqrtXDagC [Control]
    | GateSqrtY
    | GateSqrtYC [Control]
    | GateSqrtYDag
    | GateSqrtYDagC [Control]
    | GateRxTheta Angle
    | GateRxThetaC Angle [Control]
    | GateRyTheta Angle
    | GateRyThetaC Angle [Control]
    | GateRzTheta Angle
    | GateRzThetaC Angle [Control]
    | GateU1 Angle
    | GateU1C Angle [Control]
    | GateU2 Angle Angle
    | GateU2C Angle Angle [Control]
    | GateU3 Angle Angle Angle
    | GateU3C Angle Angle Angle [Control]
    | GateSwp
    | GateSwpC [Control]
    | GateSqrtSwp
    | GateSqrtSwpC [Control]
    | GateSqrtSwpDag
    | GateSqrtSwpDagC [Control]
    | GateISwp
    | GateISwpC [Control]
    | GateFSwp
    | GateFSwpC [Control]
    | GateSwpTheta Angle
    | GateSwpRt Integer
    | GateSwpRtC Integer [Control]
    | GateSwpRtDag Integer
    | GateSwpRtDagC Integer [Control]
    | GateGeneric GateIdent
    | GateGenericC GateIdent [Control]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data LetVariable = LetVar Var
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data LambdaVariable = LambdaVar Var
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Tuple = Tup Term [Term]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Term
    = TVar Var
    | TBit Bit
    | TGate Gate
    | TTup Tuple
    | TUnit
    | TIfEl Term Term Term
    | TLet1 LetVariable Term Term
    | TLet2 LetVariable [LetVariable] Term Term
    | TCase Term CaseExpression [CaseExpression]
    | TLmbd Lambda LambdaVariable [LambdaVariable] Term
    | TApp Term Term
    | TDollr Term Term
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data CaseExpression = CaseExp Term Var
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Arg = FunArg Var
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data FunctionDefinition = FunDef Var [Arg] Term
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data FunctionType = FunType Var Type
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data FunctionDeclaration = FunDecl FunctionType FunctionDefinition
  deriving (C.Eq, C.Ord, C.Show, C.Read)

newtype GateIdent = GateIdent ((C.Int, C.Int), String)
  deriving (C.Eq, C.Ord, C.Show, C.Read)

newtype Var = Var ((C.Int, C.Int), String)
  deriving (C.Eq, C.Ord, C.Show, C.Read)

newtype Lambda = Lambda String
  deriving (C.Eq, C.Ord, C.Show, C.Read, Data.String.IsString)

newtype Bit = Bit ((C.Int, C.Int), String)
  deriving (C.Eq, C.Ord, C.Show, C.Read)

-- | Start position (line, column) of something.

type BNFC'Position = C.Maybe (C.Int, C.Int)

pattern BNFC'NoPosition :: BNFC'Position
pattern BNFC'NoPosition = C.Nothing

pattern BNFC'Position :: C.Int -> C.Int -> BNFC'Position
pattern BNFC'Position line col = C.Just (line, col)

-- | Get the start position of something.

class HasPosition a where
  hasPosition :: a -> BNFC'Position

instance HasPosition GateIdent where
  hasPosition (GateIdent (p, _)) = C.Just p

instance HasPosition Var where
  hasPosition (Var (p, _)) = C.Just p

instance HasPosition Bit where
  hasPosition (Bit (p, _)) = C.Just p

