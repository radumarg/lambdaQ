-- File generated by the BNF Converter (bnfc 2.9.4.1).

{-# LANGUAGE PatternSynonyms #-}

-- | The abstract syntax of language LambdaQ.

module Frontend.LambdaQ.Abs where

import Prelude (Double, Integer, String)
import qualified Prelude as C
  ( Eq, Ord, Show, Read
  , Int, Maybe(..)
  )

data Program = ProgDef [FunDec]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Type
    = TypeBit
    | TypeQbit
    | TypeUnit
    | TypeExp Type
    | TypeTensrs Type Integer
    | TypeTensr Type Type
    | TypeFunc Type Type
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Angle = AAngl Double
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data ControlState
    = CStateZero
    | CStateOne
    | CStatePlus
    | CStateMinus
    | CStatePlusI
    | CStateMinusI
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Control = CCtrl ControlState Term
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Gate
    = GH
    | GHC [Control]
    | GX
    | GXC [Control]
    | GY
    | GYC [Control]
    | GZ
    | GZC [Control]
    | GI
    | GXRt Integer
    | GXRtC Integer [Control]
    | GXRtDag Integer
    | GXRtDagC Integer [Control]
    | GYRt Integer
    | GYRtC Integer [Control]
    | GYRtDag Integer
    | GYRtDagC Integer [Control]
    | GZRt Integer
    | GZRtC Integer [Control]
    | GZRtDag Integer
    | GZRtDagC Integer [Control]
    | GS
    | GSC [Control]
    | GSDag
    | GSDagC [Control]
    | GT
    | GTC [Control]
    | GTDag
    | GTDagC [Control]
    | GSqrtX
    | GSqrtXC [Control]
    | GSqrtXDag
    | GSqrtXDagC [Control]
    | GSqrtY
    | GSqrtYC [Control]
    | GSqrtYDag
    | GSqrtYDagC [Control]
    | GRxTheta Angle
    | GRxThetaC Angle [Control]
    | GRyTheta Angle
    | GRyThetaC Angle [Control]
    | GRzTheta Angle
    | GRzThetaC Angle [Control]
    | GU1 Angle
    | GU1C Angle [Control]
    | GU2 Angle Angle
    | GU2C Angle Angle [Control]
    | GU3 Angle Angle Angle
    | GU3C Angle Angle Angle [Control]
    | GSwp
    | GSwpC [Control]
    | GSqrtSwp
    | GSqrtSwpC [Control]
    | GSqrtSwpDag
    | GSqrtSwpDagC [Control]
    | GISwp
    | GISwpC [Control]
    | GFSwp
    | GFSwpC [Control]
    | GSwpRt Integer
    | GSwpRtC Integer [Control]
    | GSwpRtDag Integer
    | GSwpRtDagC Integer [Control]
    | GGate GateIdent
    | GGateC GateIdent [Control]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data LetVariable = LetVar Var
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data LambdaVariable = LambdaVar Var
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Tuple = Tup Term [Term]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Term
    = TVar Var
    | TBit Bit
    | TGate Gate
    | TTup Tuple
    | TUnit
    | TIfEl Term Term Term
    | TLet1 LetVariable Term Term
    | TLet2 LetVariable [LetVariable] Term Term
    | TCase Term CaseExpression [CaseExpression]
    | TLmbd Lambda LambdaVariable [LambdaVariable] Term
    | TApp Term Term
    | TDollr Term Term
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data CaseExpression = CaseExp Term Var
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Arg = FunArg Var
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Function = FunDef Var [Arg] Term
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data FunctionType = TypeDef Var Type
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data FunDec = FunDecl FunctionType Function
  deriving (C.Eq, C.Ord, C.Show, C.Read)

newtype GateIdent = GateIdent ((C.Int, C.Int), String)
  deriving (C.Eq, C.Ord, C.Show, C.Read)

newtype Var = Var ((C.Int, C.Int), String)
  deriving (C.Eq, C.Ord, C.Show, C.Read)

newtype Lambda = Lambda ((C.Int, C.Int), String)
  deriving (C.Eq, C.Ord, C.Show, C.Read)

newtype Bit = Bit ((C.Int, C.Int), String)
  deriving (C.Eq, C.Ord, C.Show, C.Read)

-- | Start position (line, column) of something.

type BNFC'Position = C.Maybe (C.Int, C.Int)

pattern BNFC'NoPosition :: BNFC'Position
pattern BNFC'NoPosition = C.Nothing

pattern BNFC'Position :: C.Int -> C.Int -> BNFC'Position
pattern BNFC'Position line col = C.Just (line, col)

-- | Get the start position of something.

class HasPosition a where
  hasPosition :: a -> BNFC'Position

instance HasPosition GateIdent where
  hasPosition (GateIdent (p, _)) = C.Just p

instance HasPosition Var where
  hasPosition (Var (p, _)) = C.Just p

instance HasPosition Lambda where
  hasPosition (Lambda (p, _)) = C.Just p

instance HasPosition Bit where
  hasPosition (Bit (p, _)) = C.Just p

