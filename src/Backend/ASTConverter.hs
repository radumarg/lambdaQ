-- A representation of a lambdaQ program in the shape of an abstract syntax tree
-- will be generated here. Subsequently the abstract syntax tree is converted
-- to an intermediate abstract syntax tree (IAST) with a simpler syntax to make it
-- easier to process by the type checker and the code generator.

module Backend.ASTConverter where

import Backend.IAST (Program, mapFunction, reverseMapFunction )
import Frontend.LambdaQ.Par ( myLexer, pProgram )
import Frontend.LambdaQ.Print ( printTree )
import qualified Frontend.LambdaQ.Abs as GeneratedAbstractSyntax
import GHC.Err ( errorWithoutStackTrace )

parse :: String -> Program
parse str = case pProgram (myLexer str) of
   Left str -> errorWithoutStackTrace str
   Right p -> mapProgram p

-- an AST program is just a list of functions
mapProgram :: GeneratedAbstractSyntax.Program -> Program
mapProgram (GeneratedAbstractSyntax.ProgDef functions) = map mapFunction functions

-- an IAST program is also just a list of functions
reverseMapProgram :: Program -> GeneratedAbstractSyntax.Program
reverseMapProgram = GeneratedAbstractSyntax.ProgDef . map reverseMapFunction

-- the prinTree function is generated by the BNF converter
parseAndPrintTreeFromString :: String -> String
parseAndPrintTreeFromString str = case pProgram (myLexer str) of
    Left str -> errorWithoutStackTrace str
    Right program -> printTree program

parseAndPrintTreeFromFile :: FilePath -> IO String
parseAndPrintTreeFromFile path = parseAndPrintTreeFromString <$> readFile path
